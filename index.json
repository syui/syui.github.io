
[{"categories":null,"contents":"まず、スカークの性能から、引くべきか、凸は目指すべきかを考えます。\n私は以前、完凸を目指すと言っているので完凸しますが、正直いうとあまりおすすめではありません。\n私が引くべきと考えるキャラ、凸を目指すべきと考えるキャラは主に以下の2点が重要になります。そして、これは特に無課金でプレイしている人にとっては重要な要素です。\n他元素PTを前提とするか 裏からダメージを出せるか これは、私がマーヴィカやフリーナ、ナヒーダを評価している理由であり、ヌヴィレットや綾華をあまり評価していない理由でもあります。\n例えば、私の手持ちキャラだとヌヴィレットはフリーナと組まないと結構厳しい。この場合、ヌヴィレット、フリーナ、万葉、鍾離のようなPTになります。\nですが、これが案外、使えない場面が多いのです。\n私は基本的に螺旋でも幻想でも、その他の事柄でも、PTを変えません。そして、説明も読みません。敵もどんな敵が出てくるのかをあらかじめ確認しません。適当にPTを組んで、それで完了です。何も考えずノータイムでPTを組んで、ガチャガチャやって、あー楽しかった、で終わりです。これが私の原神です。\nそんなとき、ヌヴィレットのPTだと使えない場面が結構多い。具体的には、氷、水無効の敵に弱いし、雷も結構厳しい場合があります。\nなぜなら、ヌヴィレットは、同元素PTを前提とし、そして、裏からダメージが出せないからです。他のメンバーはヌヴィレットを強化するためだけに存在します。この場合、ヌヴィレットが苦手な敵だと、どうしようもありません。\nですから、私は基本的に、他元素PTを好みます。これがナヒーダを評価していた最大の理由です。ナヒーダはめちゃくちゃ強くて、入れてると大抵どうにかなります。草の元素反応がそもそも強いのです。\nそしてもう一つ圧倒的に強いキャラがいます。マーヴィカです。\nマーヴィカは1,2の条件を満たします。しかも、高速移動ができ、瞬間火力、継続火力もすごい。今のところ個人的に引いておきたいキャラは1位がマーヴィカ、2位がナヒーダになります。\nでは、スカークはどうでしょう。\n予想ではヌヴィレットの上か下くらいに位置すると思われます。\nなぜならその理由は、\n同元素PTを前提とする 裏からダメージを出せない(可能性が高い) この2点が懸念点としてあげられます。\nですから、マーヴィカのほうが優先、そして、スカークは凸を目指すべきではない。というのが現在の結論です。\nスカークは水と氷でPTを組みます。この場合、スカーク主体となるので、スカークが苦手な敵はPT全体に影響すると思います。氷、そして、炎も少し苦手かも。でも水がいるからマシかな。この場合、氷に強い炎を入れたほうがいいでしょう。\n私はどうするのか 完凸を目指そうと決めていたので、完凸を目指そうと思います。\nただ、性能面を見る限り、私のプレイする方向性とは違うようです。\nあまり強く使うことはできないでしょう。エスコなんとかというキャラは今後も引きませんし。\n完凸を目指す場合、キャラの見た目とかも考慮するので、そういうのも大きいかもしれないな。\n性能よりも使ってて楽しいか。今後完凸を目指すキャラは、そっちの方向にシフトしていくべきかもしれません。\n変わりゆく方向性としては、\n各属性キャラを集めるから、ずっと使うキャラを凸する、へのシフト。 サポートキャラを凸するから、好きなキャラを凸する、へシフト。 武器は「厄水の災い」を持っていて、それを使っていきたい。\n武器は結局配布とかで頑張るほうが満足で、納得できるし、他のプレイヤーとの違いも出るので面白いと思っています。\n","description":"","formated_time":"2025-06-11","href":"https://syui.github.io/blog/post/2025/06/11/genshin/","tags":["genshin"],"title":"スカークとマーヴィカ","utc_time":"2025-06-11T00:00:00Z"},{"categories":null,"contents":"稀にubuntu serverを使うことがあります。sshが遅いことがあります。ipv6を使用している場合などが影響しているのかもしれません。\n$ ssh -4 user@server ~/.ssh/config\nHost ubuntu HostName 192.168.1.2 User syui Port 22 IdentityFile ~/.ssh/ubuntu AddressFamily inet /etc/ssh/sshd_config\nUseDNS no GSSAPIAuthentication no GSSAPICleanupCredentials no ","description":"","formated_time":"2025-06-10","href":"https://syui.github.io/m/post/ubuntu/","tags":["ubuntu","m"],"title":"ubuntu","utc_time":"2025-06-10T00:00:00Z"},{"categories":null,"contents":"claude4が出たので使ってみました。\nmcpはanthropicが出していて、そのanthropicが出しているのがclaudeです。\n$ pip show mcp Home-page: https://modelcontextprotocol.io Author: Anthropic, PBC. コードを書くAIは色々ありますが、私はclaudeを使っていこうかなと考えています。\n$ npm install -g @anthropic-ai/claude-code $ claude # https://github.com/anthropics/claude-code-action /install-github-app https://docs.anthropic.com/ja/docs/claude-code/tutorials\n","description":"","formated_time":"2025-05-23","href":"https://syui.github.io/blog/post/2025/05/23/llm/","tags":["openai","llm","mcp","chatgpt","claude"],"title":"mcpとclaude","utc_time":"2025-05-23T00:00:00Z"},{"categories":null,"contents":"引き続きmcpを使ってみたいと思います。まだまだmcpをどのように使っていけばいいのかわかりませんが、今のところ考えている使い方を紹介します。\nAIとの会話を記録し、それをAIが使用するというものです。人にとって同じことを各AIに伝えるのは大変なことです。しかし、各AIがその記録を参照できるなら楽ですよね。\nそのために使えるのがfastapi, fastapi_mcpです。\nmcpでAIが自発的にtoolを使える環境を用意します。\n例えば、openaiにはtools ,tool_choiceがありますので、それを使ってみます。\n# このコマンドを実行 git clone https://github.com/microsoft/MCP.git cd MCP python3 -m venv .venv source .venv/bin/activate echo \u0026#34; # setup.py from setuptools import setup setup( name=\u0026#39;simple-example\u0026#39;, py_modules=[\u0026#39;cli\u0026#39;], entry_points={ \u0026#39;console_scripts\u0026#39;: [ \u0026#39;mcp = cli:main\u0026#39;, ], }, )\u0026#34; \u0026gt; setup.py pip install -e . pip install openai fastapi fastapi_mcp requests # server.py from fastapi import FastAPI from fastapi_mcp import FastApiMCP app = FastAPI() mcp = FastApiMCP(app, name=\u0026#34;simple-example\u0026#34;, description=\u0026#34;最小限のMCPサーバー例\u0026#34;) @app.get(\u0026#34;/hello\u0026#34;, operation_id=\u0026#34;greet\u0026#34;) async def hello(name: str = \u0026#34;World\u0026#34;): return {\u0026#34;message\u0026#34;: f\u0026#34;Hello, {name}!\u0026#34;} mcp.mount() if __name__ == \u0026#34;__main__\u0026#34;: import uvicorn uvicorn.run(app, host=\u0026#34;0.0.0.0\u0026#34;, port=8000) $ curl \u0026#34;http://localhost:8000/hello?name=Alice\u0026#34; # 出力: {\u0026#34;message\u0026#34;:\u0026#34;Hello, Alice!\u0026#34;} # ask.py import os import openai import requests import json cfg = { \u0026#34;model\u0026#34;: \u0026#34;gpt-4o-mini\u0026#34;, \u0026#34;api_key\u0026#34;: os.environ[\u0026#34;OPENAI_API_KEY\u0026#34;] } user_message = \u0026#34;田中さんに挨拶して\u0026#34; tools = [ { \u0026#34;type\u0026#34;: \u0026#34;function\u0026#34;, \u0026#34;function\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;greet\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;名前を指定して挨拶します\u0026#34;, \u0026#34;parameters\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;object\u0026#34;, \u0026#34;properties\u0026#34;: { \u0026#34;name\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;挨拶する相手の名前\u0026#34; } }, \u0026#34;required\u0026#34;: [\u0026#34;name\u0026#34;] } } } ] client = openai.OpenAI(api_key=cfg[\u0026#34;api_key\u0026#34;]) payload = { \u0026#34;model\u0026#34;: cfg[\u0026#34;model\u0026#34;], \u0026#34;messages\u0026#34;: [ {\u0026#34;role\u0026#34;: \u0026#34;system\u0026#34;, \u0026#34;content\u0026#34;: \u0026#34;必要に応じてgreetツールを使って挨拶してください。\u0026#34;}, {\u0026#34;role\u0026#34;: \u0026#34;user\u0026#34;, \u0026#34;content\u0026#34;: user_message} ], \u0026#34;tools\u0026#34;: tools, \u0026#34;tool_choice\u0026#34;: \u0026#34;auto\u0026#34; } # 1. OpenAI APIにリクエスト response = client.chat.completions.create(**payload) message = response.choices[0].message # 2. ツール呼び出しがあればMCPサーバーへリクエスト if message.tool_calls: for tool_call in message.tool_calls: if tool_call.function.name == \u0026#34;greet\u0026#34;: args = json.loads(tool_call.function.arguments) # MCPサーバーにGETリクエスト mcp_response = requests.get( \u0026#34;http://localhost:8000/hello\u0026#34;, params=args ) tool_output = mcp_response.json()[\u0026#34;message\u0026#34;] # 3. OpenAI APIにtool_outputsとして返す followup = client.chat.completions.create( model=cfg[\u0026#34;model\u0026#34;], messages=[ {\u0026#34;role\u0026#34;: \u0026#34;system\u0026#34;, \u0026#34;content\u0026#34;: \u0026#34;必要に応じてgreetツールを使って挨拶してください。\u0026#34;}, {\u0026#34;role\u0026#34;: \u0026#34;user\u0026#34;, \u0026#34;content\u0026#34;: user_message}, { \u0026#34;role\u0026#34;: \u0026#34;assistant\u0026#34;, \u0026#34;content\u0026#34;: None, \u0026#34;tool_calls\u0026#34;: [tool_call.model_dump()], }, { \u0026#34;role\u0026#34;: \u0026#34;tool\u0026#34;, \u0026#34;tool_call_id\u0026#34;: tool_call.id, \u0026#34;name\u0026#34;: \u0026#34;greet\u0026#34;, \u0026#34;content\u0026#34;: tool_output, } ] ) print(followup.choices[0].message.content) print(\u0026#34;ツールが使われました。内容:\u0026#34;, message.tool_calls) for tool_call in message.tool_calls: print(f\u0026#34;tool name: {tool_call.function.name}, arguments: {tool_call.function.arguments}\u0026#34;) else: # 通常のAI応答 print(message.content) $ python server.py --- $ export OPENAI_API_KEY=sk-xxx $ source .venv/bin/activate $ python ask.py 田中さん、こんにちは！ ツールが使われました。 これは何をやっているのかというと、「mcp serverを立てて、AIがそれを使用して返事をした」というものです。\nfastmcpとfastapi_mcpの違い $ pip show mcp Home-page: https://modelcontextprotocol.io Author: Anthropic, PBC. $ pip show fastmcp Home-page: https://gofastmcp.com Author: Jeremiah Lowin $ pip show fastapi_mcp Home-page: https://github.com/tadata-org/fastapi_mcp Author: fastmpc: mcpサーバーを最小構成で高速に構築するためのパッケージ\nfastapi_mcp: apiをmcpに対応しAIにも使えるようにするパッケージ\n例えば、キャラクターデータをapiで公開し、それを表示するwebを作成する場合などは、fastapi_mcpを使用するのがいいですね。\n","description":"","formated_time":"2025-05-22","href":"https://syui.github.io/blog/post/2025/05/22/llm/","tags":["openai","llm","mcp","chatgpt"],"title":"mcpとfastapi","utc_time":"2025-05-22T00:00:00Z"},{"categories":null,"contents":"mcp(model context protocol)が最近話題になっています。今回はこのmcpについての解説になります。\nmcpは多くの人にとって学ぶ必要がない技術です。例えば、プログラマだったり、アプリ開発、フロントエンド、デザインをしているとかだと、mcpは必要ありません。mcpを学ぶ必要があるのは主にバックエンドの人です。\nということで、mcpについて解説していきます。\nmcpは、今後バックエンドの主流になると思います。ようはサーバーを扱ったり、環境を構築したりといった分野。\nそれ以外は、主にclient、ollamaだったり、lmstudioだったりのほうが便利だと思います。\nmcpはAI環境の構築を目指す技術で、それぞれのmodelは今まで独自の仕様で動かしていました。これだとAIで何をするにも面倒です。したがって、AI(model)のinput/outputの形式を統一しようというのがmcpです。mcpに対応しているmodelを使用します。protocolなので、普通の人は学ぶ必要がありません。通常の開発でも意識するような領域ではないですね。\nそのうち、便利なツールがでてくると思うので、それを使うのが一番かなと思います。k8sやdockerのようなものが出てくるのではないでしょうか。まあ、ollamaやlmstudioがそれらに相当するかもしれません。\nmcpの使い方 mcpでどうやって環境を構築するのか、具体的な手順を見ていきたいと思います。\n簡単な方法 $ pip install fastmcp uvicorn from fastmcp import FastMCP mcp = FastMCP( name=\u0026#34;aigpt-agent\u0026#34;, host=\u0026#34;127.0.0.1\u0026#34;, port=5000, timeout=30 ) if __name__ == \u0026#34;__main__\u0026#34;: print(\u0026#34;Starting MCP server...\u0026#34;) mcp.run() python server.py fastmcp run server.py:mcp # server.py from fastmcp import FastMCP import uvicorn mcp = FastMCP(\u0026#34;aigpt-agent\u0026#34;) @mcp.tool() def ping() -\u0026gt; dict: return {\u0026#34;message\u0026#34;: \u0026#34;pong\u0026#34;} if __name__ == \u0026#34;__main__\u0026#34;: uvicorn.run(mcp, host=\u0026#34;127.0.0.1\u0026#34;, port=5000) ","description":"","formated_time":"2025-05-21","href":"https://syui.github.io/blog/post/2025/05/21/llm/","tags":["openai","llm","mcp","chatgpt"],"title":"mcpとchatgpt","utc_time":"2025-05-21T00:00:00Z"},{"categories":null,"contents":"DeepHermes 3 Previewが意外と良かったので紹介。\nhttps://huggingface.co/NousResearch/DeepHermes-3-Mistral-24B-Preview-GGUF\n$ ollama run hf.co/NousResearch/DeepHermes-3-Mistral-24B-Preview-GGUF:DeepHermes-3-Mistral-24B-Preview-q6.gguf ","description":"","formated_time":"2025-05-14","href":"https://syui.github.io/blog/post/2025/05/14/llm/","tags":["lmstudio","ollama","deephermes"],"title":"deephermes3","utc_time":"2025-05-14T00:00:00Z"},{"categories":null,"contents":"アリババが出しているqwen3がopenaiの4oと同じくらい使えるので、chatgptに課金している人は、local llmでqwen3に移行してみてもいいかもしれません。\nhttps://huggingface.co/Qwen/Qwen3-30B-A3B-Base\n今回は、local llmに移行する方法をいくつか紹介します。local llmとは、簡単に言うと自分のpcやserverでAI modelを動かすことです。\nlmstudioとollama local llmを使うには、lmstudioやollamaがおすすめです。\nおそらく、ollamaのほうがserveを起動しやすいのでおすすめです。localhost:11434\n$ ollama serve もちろん、lmstudioもserver機能はあります。\nhttps://lmstudio.ai/docs/app/api\neditorやios client連携もここにアクセスして使います。\nアドレスバーからmodelを選択します。少し分かりづらいかもしれません。\ncustom model 日本語の小説やロールプレイに特化したqwen3のcustom modelが公開されています。\nNSFW(Not Safe For Work)は職場での閲覧に適さないコンテンツを意味します。ERP(Erotic Role Play)は主にロールプレイを意味します。\nhttps://huggingface.co/Aratako/Qwen3-30B-A3B-NSFW-JP https://huggingface.co/Aratako/Qwen3-30B-A3B-ERP-v0.1 # https://huggingface.co/Aratako/Qwen3-30B-A3B-ERP-v0.1 $ ollama run hf.co/Aratako/Qwen3-30B-A3B-ERP-v0.1-GGUF /set system ${string} \u0026lt;設定が可能です\u0026gt; /save ${session} \u0026lt;コマンドで現在のチャット履歴を名前付きファイルに保存できます\u0026gt; /load ${session} \u0026lt;以前保存した会話履歴を復元し、継続した対話が可能です\u0026gt; modelの選定→データセット準備→finetuning(ms-swiftやTransformersなど)→modelの変換や公開という流れで構築できます。\nベースモデルの選定 Qwen3の公式リリースモデルをHugging FaceやGitHubからダウンロードします。\nデータセットの準備 目的に応じた日本語や特定ジャンルのテキストデータを収集します。\n質問応答、会話、ロールプレイ、専門知識など用途に合わせてデータを整形します。\nファインチューニングの実施 フレームワーク選択: Megatron-LMベースの「ms-swift」や、Hugging Face Transformersなどが利用可能です。 学習用データセットを用意し、コマンドラインで学習ジョブを実行。 大規模GPU(例: H200x8台など)を使うことで効率的に学習が進みます。 学習後はモデルをmcore形式からHF(Hugging Face)形式に変換し、配布やローカル利用が可能です。 # 学習コマンド例（ms-swift/Megatron-LM） # https://github.com/modelscope/ms-swift #!/bin/bash swift train \\ --model Qwen3-30B-A3B \\ --data /path/to/your/dataset \\ --output /path/to/output/dir \\ --epochs 3 \\ --batch-size 64 \\ --lr 1e-5 HPC-AIという謎のクラウドGPUサービスを使用しました。なんとH200x8が$16.72/hourという異常な安さで利用できます。\nhttps://zenn.dev/aratako_lm/articles/90c81270ef64bf\nsafetensors -\u0026gt; gguf ollamaなどで使うには.ggufに変換しなければなりません。\n$ git clone https://github.com/ggerganov/llama.cpp $ cd llama.cpp $ pip install -r requirements.txt $ vim convert_hf_to_gguf_update.py models = [{\u0026#34;name\u0026#34;: \u0026#34;qwen3\u0026#34;, \u0026#34;tokt\u0026#34;: TOKENIZER_TYPE.SPM, \u0026#34;repo\u0026#34;: \u0026#34;https://huggingface.co/Qwen/Qwen3-30B-A3B-Base\u0026#34;}] $ python convert_hf_to_gguf_update.py \u0026lt;huggingface_token\u0026gt; # model download: /path/to/model_dir $ python convert-hf-to-gguf.py /path/to/model_dir --outtype q8_0 --outfile /path/to/output/model.gguf $ vim Modelfile FROM ./model.gguf $ ollama create qwen3-custom -f ./Modelfile $ ollama run qwen3-custom client [\u0026ldquo;ios\u0026rdquo;, \u0026ldquo;mac\u0026rdquo; ] ollama用のclientです。他のapiにも対応しているのかはわかりません。\nhttps://github.com/gluonfield/enchanted\nまずlocal networkで使用する場合はOLLAMA_ORIGINSだけ設定してください。\nset OLLAMA_ORIGINS=192.168.1.* 次にwanから使用する場合は、tailscale, ngrok, cloudflare tunnelなどを使用します。OLLAMA_HOSTを設定します。\n$ set OLLAMA_HOST=0.0.0.0 そして、ollamaを起動します。\n$ ollama serve ios appの設定には192.168.1.x:11434を入れます。アドレスバーからmodelを選択します。\n","description":"","formated_time":"2025-05-13","href":"https://syui.github.io/blog/post/2025/05/13/llm/","tags":["lmstudio","ollama","openai","qwen"],"title":"qwen3が4oと同じくらい使える","utc_time":"2025-05-13T00:00:00Z"},{"categories":null,"contents":"今回は、ゲーム制作の各システムのナンバリングを付けました。その話をしていこうと思います。\nゲームはいくつかのシステムで分割されています。world system(planet), ai system(ability), yui system(unique), at system(account)です。\nゲームの方向性は「現実の反映」にあります。world systemは「平面ではなく立体(惑星)」にするためのものです。例えば、「地球から抜け月に行ける」ようなものを想定してください。ゲームエンジンは平面を前提として作られていますから上を目指して飛び続けても地平線が広がっているだけで月にたどり着くことはありません。これを変更してワールドを現実に合わせることが目標です。\nこれが今回、いい感じにできてきたので、そろそろナンバリングをつけようと思い、付けてみました。\n以前のplanet systemと比べると、見栄えはあまり良くありませんが、いくつかの問題が解消されています。以前はatmosphereとudsだけで頑張っており、大気圏で地球のアクターを切り替え表示していました。しかし、今回はそのままの実物が表示されています。また、横から惑星に入ってもちゃんと地表に降りれるようになっています。また、月面もちゃんとしたものを作り、月面着陸できるようになりました。前は球体のままで凸凹、クレーターはありませんでした。手動で作るのも困難なので放置していたところ、worldscapeを使い解決しています。\njson { \u0026#34;version\u0026#34;: 1, \u0026#34;name\u0026#34;: \u0026#34;ai.verse\u0026#34;, \u0026#34;ai\u0026#34;: { \u0026#34;verse\u0026#34;: { \u0026#34;ue\u0026#34;: { \u0026#34;system\u0026#34;: [ { \u0026#34;world\u0026#34;: \u0026#34;planet\u0026#34; }, { \u0026#34;at\u0026#34;: \u0026#34;account\u0026#34; }, { \u0026#34;yui\u0026#34;: \u0026#34;unique\u0026#34; }, { \u0026#34;ai\u0026#34;: \u0026#34;ability\u0026#34; } ] } } } } - ai.verse - ai.ue - ai.system ai.verse.ue.system.world ","description":"","formated_time":"2025-05-10","href":"https://syui.github.io/blog/post/2025/05/10/planet/","tags":["ue"],"title":"world system v1","utc_time":"2025-05-10T00:00:00Z"},{"categories":null,"contents":"AIエージェントのmanusが有名ですが、openmanusというものを試してみました。\nhttps://manus.im https://github.com/mannaandpoem/OpenManus/tree/main これは、llmが複数で協調してタスクを行うように調整されたAIエージェントぽいです。manusを使わず、そのやり方を真似ている感じかと思います。\n# https://github.com/mannaandpoem/openmanus $ conda create -n open_manus python=3.12 $ conda activate open_manus $ git clone https://github.com/mannaandpoem/OpenManus.git $ cd OpenManus $ pip install -r requirements.txt $ cp config/config.example.toml config/config.toml $ vim config/config.toml [llm] model = \u0026#34;gpt-4o\u0026#34; base_url = \u0026#34;https://api.openai.com/v1\u0026#34; api_key = \u0026#34;sk-...\u0026#34; # Replace with your actual API key max_tokens = 4096 temperature = 0.0 # Optional configuration for specific LLM models [llm.vision] model = \u0026#34;gpt-4o\u0026#34; base_url = \u0026#34;https://api.openai.com/v1\u0026#34; api_key = \u0026#34;sk-...\u0026#34; # Replace with your actual API key $ python main.py ","description":"","formated_time":"2025-03-26","href":"https://syui.github.io/blog/post/2025/03/26/manus/","tags":["openai"],"title":"manusと同じようなことを実行する","utc_time":"2025-03-26T00:00:00Z"},{"categories":null,"contents":"今回は、comfyui + wan2.1で動画生成してみます。cosmosよりもwan2.1のほうがいいです。\nまた、comfyuiのことが色々わかってきました。\nhttps://blog.comfy.org/p/wan21-video-model-native-support\n{ \u0026#34;models\u0026#34;: { \u0026#34;diffusion_models\u0026#34;: { \u0026#34;url\u0026#34;: \u0026#34;https://huggingface.co/Comfy-Org/Wan_2.1_ComfyUI_repackaged/blob/main/split_files/diffusion_models/wan2.1_i2v_720p_14B_fp8_scaled.safetensors\u0026#34; }, \u0026#34;text_encoders\u0026#34;: { \u0026#34;url\u0026#34;: \u0026#34;https://huggingface.co/Comfy-Org/Wan_2.1_ComfyUI_repackaged/resolve/main/split_files/text_encoders/umt5_xxl_fp8_e4m3fn_scaled.safetensors\u0026#34; }, \u0026#34;clip_vision\u0026#34;: { \u0026#34;url\u0026#34;: \u0026#34;https://huggingface.co/Comfy-Org/Wan_2.1_ComfyUI_repackaged/resolve/main/split_files/clip_vision/clip_vision_h.safetensors\u0026#34; }, \u0026#34;vae\u0026#34;: { \u0026#34;url\u0026#34;: \u0026#34;https://huggingface.co/Comfy-Org/Wan_2.1_ComfyUI_repackaged/resolve/main/split_files/vae/wan_2.1_vae.safetensors\u0026#34; } } } $ curl -sLO \u0026#34;https://huggingface.co/Comfy-Org/Wan_2.1_ComfyUI_repackaged/resolve/main/example%20workflows_Wan2.1/image_to_video_wan_720p_example.json\u0026#34; 生成された動画はこちら。時間は30分ほどかかりました。\nわかってきたこと docsはこちらが非常にわかりやすいです。\nhttps://docs.comfy.org/\n開発者が交流しているmatrixがあります。\nhttps://app.element.io/#/room/#comfyui_space:matrix.org\nworkflowのjsonはopenart.aiから持ってこれます。\nhttps://openart.ai/\n","description":"","formated_time":"2025-03-24","href":"https://syui.github.io/blog/post/2025/03/24/comfyui/","tags":["comfyui"],"title":"comfyui + wan2.1で動画生成","utc_time":"2025-03-24T00:00:00Z"},{"categories":null,"contents":"今回は、comfyui + cosmosで動画生成してみます。\n生成する動画は、ollamaでpromptを書き、ue5で作ったゲームプレイ動画を参照してみても面白いかもしれないと思いました。\ncomfyuiのinstall installはgit cloneから構築したほうがいいです。windowsで構築します。\nhttps://github.com/comfyanonymous/comfyui\n$ winget install nvidia.cuda $ winget install python.python.3.12 $ git clone https://github.com/comfyanonymous/comfyui $ cd comfyui $ python -m venv venv $ Set-ExecutionPolicy RemoteSigned -Scope Process $ venv\\Scripts\\activate $ pip install --pre torch torchvision torchaudio --index-url https://download.pytorch.org/whl/nightly/cu128 $ python -m pip install --upgrade pip $ pip install -r requirements.txt $ python main.py http://localhost:8188 comfyuiはnodeで書きますがworkflowと呼ぶようです。jsonで保存されます。簡単にimportできます。\nhttps://comfyanonymous.github.io/ComfyUI_examples/\n基本構造としては、以下のとおりです。\n./comfyui ├── main.py ├── custom_nodes # ここにpluginを入れる │ └── comfyui-manager └── models └── checkpoints # ここにmodelを入れる └── model.safetensors https://github.com/ltdrdata/comfyui-manager https://github.com/ltdrdata/comfyui-impact-pack cosmosで動画生成 https://comfyanonymous.github.io/ComfyUI_examples/cosmos/\nこちらを見て必要なものを必要な箇所に置きます。\n[comfyui/models/text_encoders/] oldt5_xxl_fp8_e4m3fn_scaled.safetensors [comfyui/models/vae/] cosmos_cv8x8x8_1.0.safetensors [comfyui/models/diffusion_models/] Cosmos-1_0-Diffusion-7B-Text2World.safetensors Cosmos-1_0-Diffusion-7B-Video2World.safetensors jsonをworkflowにimportします。\n$ winget install curl.curl $ curl -sLO https://comfyanonymous.github.io/ComfyUI_examples/cosmos/image_to_video_cosmos_7B.json ollamaでpromptを書く https://github.com/stavsap/comfyui-ollama https://github.com/pythongosssss/ComfyUI-Custom-Scripts show textのcustom nodeを使用するにはComfyUI-Custom-Scriptsが必要です。\n","description":"","formated_time":"2025-03-23","href":"https://syui.github.io/blog/post/2025/03/23/comfyui/","tags":["comfyui"],"title":"comfyui + cosmosで動画生成","utc_time":"2025-03-23T00:00:00Z"},{"categories":null,"contents":"openaiのchatgptでも一応課金は発生しますので、自分だけのAIを作ろうということで今回はやっていきます。\nまずはlocalで実行することから、最後にLoRAなどfinetuningするところまで。\nmodelはgemma3がおすすめです。\nmodel gemma3:1b deepseek-r1:12b $ brew install ollama $ brew services restart ollama $ ollama pull gemma3:1b $ ollama run gemma3:1b \u0026#34;hello\u0026#34; n8n n8nでAIエージェントを作成できます。\n# https://github.com/n8n-io/n8n/ $ docker volume create n8n_data $ docker run -it --rm --name n8n -p 5678:5678 -v n8n_data:/home/node/.n8n docker.n8n.io/n8nio/n8n webui $ winget install ollama.ollama $ ollama server $ ollama run gemma3:1b $ winget install --id Python.Python.3.11 -e $ python --version $ python -m venv webui $ cd webui $ .\\Scripts\\activate $ pip install open-webui $ open-webui serve http://localhost:8080 LoRA apple siliconでLoRA(finetuning)するにはmlx_lmを使用します。\n$ brew install --cask anaconda $ brew info anaconda $ cd /opt/homebrew/Caskroom/anaconda/* $ ./Anaconda3*.sh google/gemma-3-1b-itを承認しておきます。\nhttps://huggingface.co/google/gemma-3-1b-it $ pip install -U \u0026#34;huggingface_hub[cli]\u0026#34; # https://huggingface.co/settings/tokens # Repositories permissions:Read access to contents of selected repos $ huggingface_hub login $ conda create -n finetuning python=3.11 $ conda activate finetuning $ pip install mlx-lm $ echo \u0026#34;{ \\\u0026#34;model\\\u0026#34;: \\\u0026#34;https://huggingface.co/google/gemma-3-1b-it\\\u0026#34;, \\\u0026#34;data\\\u0026#34;: \\\u0026#34;https://github.com/ml-explore/mlx-examples/tree/main/lora/data\\\u0026#34; }\u0026#34;|jq . $ git clone https://github.com/ml-explore/mlx-examples $ model=google/gemma-3-1b-it $ data=mlx-examples/lora/data $ mlx_lm.lora --train --model $model --data $data --batch-size 3 unsloth windowsでLoRA(finetuning)するにはunslothを使います。\n$ nvidia-smi $ nvcc --version # https://github.com/unslothai/notebooks/blob/main/unsloth_windows.ps1 cuda: 12.4 python: 3.11 $ winget install --scope machine nvidia.cuda --version 12.4.1 $ winget install curl.curl # https://docs.unsloth.ai/get-started/installing-+-updating/windows-installation $ curl -sLO https://raw.githubusercontent.com/unslothai/notebooks/refs/heads/main/unsloth_windows.ps1 $ powershell.exe -ExecutionPolicy Bypass -File .\\unsloth_windows.ps1 $ vim custom.py 上記はpwshでunsolthを使う方法ですが、wslを使ったほうがいいです。\n# https://docs.unsloth.ai/get-started/fine-tuning-guide from unsloth import FastModel import torch fourbit_models = [ # 4bit dynamic quants for superior accuracy and low memory use # https://docs.unsloth.ai/basics/tutorial-how-to-run-and-fine-tune-gemma-3 # https://huggingface.co/unsloth/gemma-3-4b-it \u0026#34;unsloth/gemma-3-1b-it-unsloth-bnb-4bit\u0026#34;, \u0026#34;unsloth/gemma-3-4b-it-unsloth-bnb-4bit\u0026#34;, \u0026#34;unsloth/gemma-3-12b-it-unsloth-bnb-4bit\u0026#34;, \u0026#34;unsloth/gemma-3-27b-it-unsloth-bnb-4bit\u0026#34;, # Other popular models! \u0026#34;unsloth/Llama-3.1-8B\u0026#34;, \u0026#34;unsloth/Llama-3.2-3B\u0026#34;, \u0026#34;unsloth/Llama-3.3-70B\u0026#34;, \u0026#34;unsloth/mistral-7b-instruct-v0.3\u0026#34;, \u0026#34;unsloth/Phi-4\u0026#34;, ] # More models at https://huggingface.co/unsloth model, tokenizer = FastModel.from_pretrained( model_name = \u0026#34;unsloth/gemma-3-4b-it\u0026#34;, max_seq_length = 2048, # Choose any for long context! load_in_4bit = True, # 4 bit quantization to reduce memory load_in_8bit = False, # [NEW!] A bit more accurate, uses 2x memory full_finetuning = False, # [NEW!] We have full finetuning now! # token = \u0026#34;hf_...\u0026#34;, # use one if using gated models ) model = FastModel.get_peft_model( model, finetune_vision_layers = False, # Turn off for just text! finetune_language_layers = True, # Should leave on! finetune_attention_modules = True, # Attention good for GRPO finetune_mlp_modules = True, # SHould leave on always! r = 8, # Larger = higher accuracy, but might overfit lora_alpha = 8, # Recommended alpha == r at least lora_dropout = 0, bias = \u0026#34;none\u0026#34;, random_state = 3407, ) ","description":"","formated_time":"2025-03-22","href":"https://syui.github.io/blog/post/2025/03/22/aimodel/","tags":["openai"],"title":"自分だけのAIを作ろう","utc_time":"2025-03-22T00:00:00Z"},{"categories":null,"contents":"ue5のplugin(server)のpixel streaming2ですが、情報がどこにもないので移行方法を書きます。\nhttps://github.com/EpicGamesExt/PixelStreamingInfrastructure/blob/master/Docs/pixel-streaming-2-migration-guide.md まず、2ではWebRTC, Matchmakerが削除されます。そして、app-package.exeの引数がそのままでは動きません。また、serverのconfig.json, scriptが変更されています。\nprojectのpluginでpixel streamingをdisableにし、pixel streaming2をenableにする。\nこれをpackage buildして、app.exeを作ります。そして、引数は以下のようにしてください。\nなお、sshなどで作業している場合はfirewallの許可が出ませんので、local-desktopで作業してください。または手動でruleを更新してください。\n./$project/Windows/app.exe -PixelStreamingSignallingURL=\u0026#34;ws://127.0.0.1:8888\u0026#34; 次にserverの初期設定です。scriptがだいぶ変更されていますし、引数も変わっています。 # git clone https://github.com/EpicGamesExt/PixelStreamingInfrastructure.git $ git clone --branch UE5.5 https://github.com/EpicGamesExt/PixelStreamingInfrastructure.git $ cd PixelStreamingInfrastructure/SignallingWebServer/platform_scripts/cmd $ ./setup.bat $ ./start.bat config.jsonの書き換えと起動。特に注意すべきはhttp_rootです。Publicからwwwに変更されています。pathにも注意してください。 $ cd PixelStreamingInfrastructure/SignallingWebServer $ vim config.json $ npm start -- --public_ip localhost ","description":"","formated_time":"2025-01-21","href":"https://syui.github.io/blog/post/2025/01/21/pixelstreaming/","tags":["ue5","ue"],"title":"ue5のpixel streaming2に移行する","utc_time":"2025-01-21T00:00:00Z"},{"categories":null,"contents":"ue5でasian(chinese) dragonを動かそうとしてます。\nこれはcontrol rigを使い簡単に実装したものです。control rig sampleにはdragonがあります。CR_Dragonのhead_global_ctrlをABPで動かしています。dynamicをtrueにします。CharacterのGet Actor Up Vectorからcontrol rigに値を入れ操作します。視点(Actor)を適切に動かすと一回転もできます。\nhttps://blueprintue.com/blueprint/o3glwh72/ しかし、色々と問題があります。\n現状、視点を動かさないと自然に動かない。vector-yの値を1秒ごとに上下に動かすなどしたほうがいい human(flying) playerに被せているためcollisionがその範囲にとどまるため尻尾などが床をすり抜ける game animation sample(GAS)との統合はさらに大変 GASではhumanのIK_Rigを無理やり当てはめています。壁などは登れますが、動きが破綻しています。\nこの辺をどのように統合していくか。今のところdragon ik pluginを試してみようと思っています。\nhttps://github.com/codehawk64/DragonIK-UE5MotionMatching-Template https://dragonik.eternalmonke.com ","description":"","formated_time":"2025-01-08","href":"https://syui.github.io/blog/post/2025/01/08/ue5-animal/","tags":["ue5","ue"],"title":"ue5でasian dragonを動かす","utc_time":"2025-01-08T00:00:00Z"},{"categories":null,"contents":"使ってみた感想だと、溶解でダメージを出していくキャラだと思いました。そのまま使ってもナヒーダ、ヌヴィレットのPTよりも安定しませんし、劣ります。\nしかし、溶解を当てると螺旋のタイムを短縮できます。確実に溶解を当てられるかというとそうではありません。マーヴィカを強く使うには最優先でシトラリを確保したほうが良いと思います。また、マーヴィカの会心率は60%が推奨。\n私のケースだと、武器もシトラリも引きませんので、以下のようになりました。\n無工の剣(かっこいいと思っていたが、使い道がなかった) 甘雨(せっかく引いたのに使ってなかった) 甘雨は熟知型にし、チャージは西風を持たせてサポートしています。万葉で氷を拡散させるとよいでしょう。フリーナも検討しましたが、他のキャラと組みたいので。\n全く使っていなかったキャラを使えるし、武器も使えるしで、マーヴィカはかなり楽しいキャラになりました。\n溶解は爆発が60万、単体は15万くらいのダメージがでます。動画最後、うまくいくと81万くらいのダメージが出ています。マーヴィカは2凸ですが、ほかは全部無凸なのですごい。\n","description":"","formated_time":"2025-01-03","href":"https://syui.github.io/blog/post/2025/01/03/genshin/","tags":["genshin"],"title":"原神、マーヴィカの感想","utc_time":"2025-01-03T00:00:00Z"},{"categories":null,"contents":"基本的にはGame Input for Windowsというpluginを使います。\nhttps://dev.epicgames.com/community/learning/tutorials/EpZ4/unreal-engine-game-input-for-windows-experimental-release-notes [/Script/GameInputBase.GameInputDeveloperSettings] +DeviceConfigurations=(DeviceIdentifier=(VendorId=1356,ProductId=3302),Description=\u0026#34;PS5 DualSense controller\u0026#34;,bOverrideHardwareDeviceIdString=True,OverriddenHardwareDeviceId=\u0026#34;DualSense\u0026#34;,bProcessControllerButtons=True,bProcessControllerSwitchState=True,bProcessControllerAxis=True,ControllerButtonMappingData=((1, \u0026#34;Gamepad_FaceButton_Left\u0026#34;),(2, \u0026#34;Gamepad_FaceButton_Bottom\u0026#34;),(4, \u0026#34;Gamepad_FaceButton_Right\u0026#34;),(8, \u0026#34;Gamepad_FaceButton_Top\u0026#34;),(16, \u0026#34;Gamepad_LeftShoulder\u0026#34;),(32, \u0026#34;Gamepad_RightShoulder\u0026#34;),(64, \u0026#34;Gamepad_LeftTrigger\u0026#34;),(128, \u0026#34;Gamepad_RightTrigger\u0026#34;),(256, \u0026#34;Gamepad_Special_Left\u0026#34;),(512, \u0026#34;Gamepad_Special_Right\u0026#34;),(1024, \u0026#34;Gamepad_LeftThumbstick\u0026#34;),(2048, \u0026#34;Gamepad_RightThumbstick\u0026#34;),(8192, \u0026#34;Gamepad_Special_Left\u0026#34;)),ControllerAxisMappingData=((0, (KeyName=\u0026#34;Gamepad_LeftX\u0026#34;,DeadZone=0.239532,bIsPackedPositveAndNegative=True)),(1, (KeyName=\u0026#34;Gamepad_LeftY\u0026#34;,Scalar=-1.000000,bIsPackedPositveAndNegative=True)),(2, (KeyName=\u0026#34;Gamepad_RightX\u0026#34;,bIsPackedPositveAndNegative=True)),(3, (KeyName=\u0026#34;Gamepad_LeftTriggerAxis\u0026#34;)),(4, (KeyName=\u0026#34;Gamepad_RightTriggerAxis\u0026#34;,DeadZone=0.239532)),(5, (KeyName=\u0026#34;Gamepad_RightY\u0026#34;,Scalar=-1.000000,bIsPackedPositveAndNegative=True)))) しかし、問題は動かないことです。\nGAME_INPUT_SUPPORT is false!\nなぜかというと、GDKをインストールしたうえで、Microsoft.GameInputをインストールしなければならず、かつ、GDKはEngineをbuildしないとpathを認識しないからです。この際、念の為にprojectのslnもrebuildしましょう。\nAs of the March 2024 GDK release, the GDK installer no longer installs the GameInput libraries.\nIf you’re targeting PC, add the Microsoft.GameInput NuGet package (NuGet Gallery | Microsoft.GameInput 0.2303.22621.3038) to your solution. Run the NuGet package’s GameInput redistributable MSI to ensure that you have the latest runtime. Although the runtime is included in Windows May 2020 Updates and later, running the MSI will ensure that you have the latest version. Include this redistributable in game installers to ensure that GameInput is available on all supported versions of Windows.\u0026quot;\nhttps://forums.unrealengine.com/t/tutorial-game-input-for-windows-experimental-release-notes/1763696 ue5をsrcからbuildする方法です。\nhttps://dev.epicgames.com/documentation/ja-jp/unreal-engine/building-unreal-engine-from-source $ git clone https://github.com/epicGames/UnrealEngine $ cd UnrealEngine $ ./Setup.bat $ ./GenerateProjectFiles.bat $ open UE5.sln ここでEngine/UE5をbuildします。dlとbuildにはかなり時間がかかります。容量も膨大に必要になるため注意しましょう。\nbuildが終了すると、実行ファイルは/Engine/Binaries/Win64/UnrealEditor.exeにあります。\nGASのprojectで試してみます。logを見てみましょう。\nLogPluginManager: Mounting Engine plugin GameInputWindows LogPluginManager: Mounting Engine plugin GameInput LogConfig: Branch \u0026#39;GameInputWindows\u0026#39; had been unloaded. Reloading on-demand took 0.16ms LogConfig: Branch \u0026#39;GameInput\u0026#39; had been unloaded. Reloading on-demand took 0.15ms LogGameInput: GameInputBase module startup... LogGameInput: [FGameInputBaseModule::StartupModule] Successfully created the IGameInput interface LogGameProjectGeneration: Project GameAnimationSample requires update. Plugin GameInputWindows SupportedTargetPlatforms value in project descriptor (Win64, WinGDK) differs from value in plugin descriptor (Win64) LogGameInput: Registering Device Callback for GameInputKind: \u0026#39;Unknown\u0026#39;. Listening for Device Status: \u0026#39;Connected\u0026#39;. 接続はできているみたいです。これでps5 controllerは動かせるようになりました。しかし、バグがあるみたいでコントロールできません。\n","description":"","formated_time":"2024-12-29","href":"https://syui.github.io/blog/post/2024/12/29/ue-ps5/","tags":["ue"],"title":"ue5.5.1でps5 controllerを使う","utc_time":"2024-12-29T00:00:00Z"},{"categories":null,"contents":"確保キャラのランキングを考えます。少し変わったランキング結果になると思いますが、重視したのは螺旋と幻想をプレイしたときの実感です。\n順位 名前 1 ナヒーダ 2 フリーナ 3 ヌヴィレット 4 雷電 5 万葉 6 シロネン 7 鍾離 私のプレイスタイルは少し変わっていて、出てくる敵を確認しません。原神はあらかじめ戦う敵をすべて確認できるようになっています。ですから、この敵はこれが弱点だからこのキャラを当てようみたいなことができます。しかし、私はめんどくさがりなので、確認せず対策も立てずにさっさと開始しています。\nこのような戦闘スタイルで度々問題となるのがヌヴィレットです。水無効の敵が出てきてどうしようもなくなり、フィールドでも螺旋でも幻想でも敗北してしまったことが何度かありました。(PT:ヌヴィレット、フリーナ、万葉、シロネン)なので、フィールドでは万葉を外してナヒーダを入れています。\nしかし、例えば、ナヒーダや雷電のPTでそういう事はまずなく、どの敵が出てきたとしても、大抵突破できます。\nここで、評価基準としては(1)突破力があること、(2)サポートができることです。この2つが最高水準に達しているキャラクターを評価します。\n逆に言うと、これが一つしかないキャラだと評価は下がります。\n私は螺旋、幻想ともに最高難易度をクリアしてきました。あまりキャラを育てていませんので、幻想は毎回参加要件を満たせず、急遽レベル1から70に上げたばかりのキャラで参加しています。聖遺物も武器もありませんから、何もつけず、あるいは適当なものをつけて、そのまま投入します。天賦は1とか4とかばかりです。\nこのような環境では万葉やシロネン、鍾離がPTにいても突破できないことがよくあります。また、ヌヴィレットは敵の相性によって何もできなくなります。\nその点、ナヒーダ、雷電は突破力があると感じています。例えば、雷電が観音とあたっても大抵の場合突破できています。チャージサポートがかなり強力に機能するのです。幻想ではなかなか爆発がたまらないことはよくありますから。これは主に元素ベース(組み合わせ)でダメージを出すか、一つの元素あるいは攻撃でダメージを出すかの違いによるものと言えるでしょう。組み合わせでもダメージを出せる突破力のあるキャラクターを評価し、これは螺旋や幻想をプレイしたときの実感です。\n私のように無課金でキャラを育成せず少ない手持ちでやりくりしている場合、ナヒーダとフリーナを組み合わせて超開花を狙っていくような戦略が螺旋や幻想の攻略には一番適していると思います。\n仮に最初からプレイする場合、やはりナヒーダ、次にフリーナを優先的に確保すると思います。\n追記 : その後、何度か螺旋をやってみましたが、順位を変えることにしました。雷電ではきつかった。\nマーヴィカの完凸を目指すべきか 内容によりますが、おそらく、完凸は目指さない方針に変更すると思います。\nスカークの完凸を目指そうと思っているので。\nマーヴィカの評価はどうなるか ヌヴィレットより高くなると思います。サポートもできるので、私の基準でいうと。\nフリーナ、ナヒーダを抜くことができるかは、マーヴィカが出せる元素反応ダメージの使用感で決まると思います。\n突破力はありますから、一番使うキャラになるかもしれません。\nスカークはどうか 原神はストーリー上の設定と性能は一致するよう考えられています。ですから、強くなると思います。\nあとは戦闘でのかっこよさがあればいいかなと思っています。\n実はマーヴィカのバイクはあまりかっこいいと感じませんでした。世界観に合ってないと思います。\n最終的に完凸を決めるのはその辺な気がします。\n","description":"","formated_time":"2024-12-22","href":"https://syui.github.io/blog/post/2024/12/22/genshin/","tags":["genshin"],"title":"原神、確保キャラを考える","utc_time":"2024-12-22T00:00:00Z"},{"categories":null,"contents":"年末年始に向けてaccount(アカウント)の整理をしました。\nこの1年で最も使ったのはbluesky, git.syui.aiでした。\n次にgithubです。\nこの3つのaccountのlink(リンク)を貼ることにします。linkは主にicon(アイコン)で表示しているものになります。\n残りは撤去しました。\nbluesky handle reserved 2024/12/12からhandle reservedという機能が追加されていたので、確保用のaccountを削除しました。\nUpdate as of December 12, 2024: For every account, only your most recent .bsky.social username is reserved for you, and this reservation does not expire. すべてのアカウントで、最新の .bsky.social ユーザー名のみが予約され、この予約は期限切れになりません。\n[image or embed]\n\u0026mdash; syui (@syui.ai) 2024年12月21日 14:29 linkを減らす 多すぎるlinkは見ている人に混乱をもたらします。\nこの人は一体何を使っていて、どこに拠点を置いているのかわからないのです。\n例えば、全く使っていないservice(サービス)でmention(メンション)されても、反応できないおそれがあります。\n使わなかったもの この1年はtwitter, matrix, mastodonを使いませんでした。linkは貼っていました。\nそれぞれにprotocol(プロトコル)が違うので、server(サーバー)を立てていましたが、アイコンから外すことにしました。\nどれも思い出深いserviceで、動いた時はとても嬉しかったことを覚えています。\nそれからしばらくは楽しく使っていましたが、今は使わなくなりました。\nなぜかというと、私は1つのsnsでも投稿できなかったり見れなかったりすることがあるのです。ですから、メインで使うもの以外はほとんど手を付けられない。\nいつも知らないこと、わからないことばかりやってるので、時には沼にハマり、そんな時はblueskyすら見れないことがありました。\nblueskyにdm機能が追加されたので、今後はblueskyだけで十分ではないかと思っています。\n使わなくなったものはlinkを外しましたが、あと1年で使う機会がなかったらaccountの削除を考えています。\nとはいえ、「いざというときあったほうがいいかも」という気持ちもあり、どうするかはその時考えたいと思います。\nmailを統合する 使っているmail service(メールサービス)を統合する方向で考えています。\nこれもaccount整理の一環ですが、今までgmail, yahoo, icloudとたくさんのmail serviceを使ってきました。\n去年は複数のgoogle accountを1-accountに統合し、yahooを削除しました。\nしかし、googleはどうしても必要なので、削除できません。gmailでoauthしているserviceもあり、これ以上は難しい。今年はgmailでoauthしているものを他のmailに切り替える整理でもしようかな。\n今持っているaccountは2つで、1-apple(icloud), 1-google(gmail)です。\nicloud+のcustom domain mail(cloudflare)を使っていて、mailはこれがあれば事足りるのです。\n本当はどうしたいのか mail自体をあんまり使いたくない。mailは使っているんだけど、ほとんどaccountや認証系でやむを得ず使っているという感じ。snsアカウントのほうが私個人のアイディンティティに近いため、できればそっちを使いたいと思っています。syui@syui.aiではなく、@syui.aiを使いたいね。\nsmtp://syui@syui.ai at://syui.ai とはいえatのdnsであるplcを指定しないと名前解決できないけど、例えば、こんな感じになってくると普通に使えるようになってくるはず。\n# /etc/resolv.conf nameserver 1.1.1.1 plc 0.0.0.0 ","description":"","formated_time":"2024-12-21","href":"https://syui.github.io/blog/post/2024/12/21/account/","tags":["syui","author"],"title":"accountを整理する","utc_time":"2024-12-21T00:00:00Z"},{"categories":null,"contents":"今年はblueskyのアドベントカレンダーに参加しています。英語/日本語の記事を用意しました。\nBluesco Advent Calendar 2024\nen ja\natmosphereとは まず用語の説明です。atにはいろいろな意味が込められています。@, at://, [at]mosphere, [a]uthenticated [t]ransferなど。例えば、初期の頃はアイコンが@でした。\nhttps://atproto.com/ja/guides/glossary\nword name example at uri at://syui.ai @ user @syui.ai [at]proto repo git@github.com:bluesky-social/atproto [at]mosphere system pds, bsky(appview), ozone, bgs, plc [a]uthenticated [t]ransfer protocol did Atmosphere\n「Atmosphere」は、AT プロトコル のエコシステムを説明するために使用する用語です。\nAT プロトコル\nAT プロトコルは、「Authenticated Transfer Protocol」の略です。この名前は、すべてのユーザー データが作成ユーザーによって署名されているという事実に由来しています。これにより、多くのサービスを通じてデータをブロードキャストし、発信元サーバーと直接通信しなくても、データが本物であることを証明できます。\nこの名前は、atproto がソーシャル システム向けに設計されているため、「@」記号、別名「at」記号をもじったものです。\nそして、各領域に名前がつけられ、システム全体をatmosphere(大気圏)と呼んでいるみたいです。\natmosphereの下にあるそれぞれのservice(サービス)はearth(地球)の大気構造にちなんでbluesky(bsky), ozone(オゾン), bigsky(bgs)などの名前が使われています。\nhttps://github.com/bluesky-social/atproto/tree/main/services/bsky https://github.com/bluesky-social/atproto/tree/main/services/ozone https://github.com/bluesky-social/indigo/tree/main/cmd/bigsky 大気圏にはその他にもmeteor(流星), aurora(オーロラ)などがあるので今後、なにかの名前に使われることがあるかもしれません。\n{ \u0026#34;atmosphere\u0026#34;: { \u0026#34;uri\u0026#34;: \u0026#34;https://atproto.com/ja/guides/glossary\u0026#34;, \u0026#34;ref\u0026#34;: \u0026#34;https://en.wikipedia.org/wiki/atmosphere_of_earth\u0026#34;, \u0026#34;exosphere\u0026#34;: { \u0026#34;km\u0026#34;:[{ \u0026#34;min\u0026#34;: 700, \u0026#34;max\u0026#34;: 10000 }], \u0026#34;tag\u0026#34;: [ \u0026#34;universe\u0026#34; ] }, \u0026#34;thermosphere\u0026#34;: { \u0026#34;km\u0026#34;:[{ \u0026#34;min\u0026#34;: 80, \u0026#34;max\u0026#34;: 700 }], \u0026#34;tag\u0026#34;: [ \u0026#34;aurora\u0026#34; ] }, \u0026#34;mesosphere\u0026#34;: { \u0026#34;km\u0026#34;:[{ \u0026#34;min\u0026#34;: 50, \u0026#34;max\u0026#34;: 80 }], \u0026#34;tag\u0026#34;: [ \u0026#34;meteor\u0026#34;, \u0026#34;bigsky\u0026#34; ] }, \u0026#34;stratosphere\u0026#34;: { \u0026#34;km\u0026#34;:[{ \u0026#34;min\u0026#34;: 12, \u0026#34;max\u0026#34;: 50 }], \u0026#34;tag\u0026#34;: [ \u0026#34;ozone\u0026#34; ] }, \u0026#34;troposphere\u0026#34;: { \u0026#34;km\u0026#34;:[{ \u0026#34;min\u0026#34;: 0, \u0026#34;max\u0026#34;: 12 }], \u0026#34;tag\u0026#34;: [ \u0026#34;bluesky\u0026#34; ] } } } ゲーム開発で考えたこと 現在、atprotoを使ったゲームを開発中です。\nゲーム開発で考えたことをまとめます。\n見えない部分 最初に作り始めたのは見えない部分でした。\nゲームエンジンは通常、平面をベースにします。マップはどこまで行っても地平線が広がっているばかり。上空に飛んでも惑星から抜けることはできないのです。\nゲーム内で行くことができない場所を作る必要がないため、ゲームで月が出ていたとしても、その月は絵を背後で動かしているだけなのです。\nしかし、たとえゲームでは行くことができない場所でもそこにあるべきものがある、というのが私の考えです。ゲーム内で月が昇るなら、その月はちゃんとキャラクターが触れられるものを作りたい。\nunreal engineにはatmosphereという機能があり、工夫することでなんとか形になりました。\nできる限り現実を反映させるという理念のもと、ゲーム開発をやっていきたいと思います。\n人は何を求めているのだろう 人は何を求めているのでしょう。これはゲームを作るうえで考えていかなければならないことです。\n例えば、運営が終了してもデータは残したいですよね。\n人は自分の痕跡を残したいという欲求があり、生命は子孫を残す本能があります。その派生として自分がやってきたことが残されると嬉しい。そのためatprotoでデータを保存する事を考えました。\nユーザーは活動してきたものを全部無駄にしたくないはずで「サービスが終了したらおしまいです」より「サービスが終了しても大丈夫です」を選択したい。今後、何十年も活動していくならなおさらです。\natprotoは未来に耐えられるものを作っています。\n人はどこから情報を得るのだろう 人がどこから情報を得るのかは時代とともに変化します。\n昔は本からでした。それがテレビになり、インターネットになりました。\n昔の人は本から情報を得ていたので、本には価値がありました。出版社や新聞社、書店の価値は高かったと思います。ですが、テレビ、インターネットが普及するとともに出版、新聞、書店の経営は厳しくなっていきます。\n重要なのは「人と情報」。これから先、人はどこから情報を得ていくのかです。今はインターネットからですね。\n次に考えるべきは「どのように」です。インターネットから情報を得ていくにしても、どのように得ていくのでしょう。それを考えます。\nまずは歴史を見てみましょう。インターネットが普及し、最初に起こったのは個々人がホームページを作りだしたことでした。誰でもホームページを作ると情報を発信できたのです。そして、検索エンジンが登場します。\n最初はurlを入力してアクセスしていた人々が検索エンジンからwebサイトにアクセスするようになります。この時代を1としましょう。\n次に登場したのはサービスでした。色々なサービスができて、sns(social network service)が登場します。twitterとかfacebookなどですね。次第に人々はホームページや検索エンジンからではなく、snsから情報を得ていくようになります。この時代を2としましょう。\nではその次はなんなのでしょう。これはまだはっきりとはしません。\nですが、次第に輪郭が見えてきたような気がします。それがactivitypubやatprotoのようなものになると思います。それとAIですね。AIも人から情報を得ていて、人が情報を発信することは必要になります。\n確かに2の時代では人々がサービス上にアカウントを作るようになりました。すべての投稿はそのサービスに帰結します。個人にではありません。もちろん、情報をどこから得ていくのかもサービスの中からです。これが近年のインターネットの形であり、あり方でした。\nですが、1では違いました。検索エンジンは個人サイトにトラフィックが帰結していました。\n私は3ではまた1の方向、つまり、個人の方向に帰結するのではないかと考えているのです。個人から企業へ。企業から個人へ。そこまで単純なものでもないですけど、時代に合ったバランスで個人の方向へ向かうのでしょう。\nこれは1にそのまま戻るというわけではありません。1にはたくさんの問題がありました。その問題のため、2が使われるようになった側面があるのです。例えば、検索エンジンでは求めている情報にたどり着けないことが増えましたよね。そうした問題をバランスよく解決したり回避したりしながら、3への移行になるのだと思います。\nそして、どの時代でも私達が唯一選択できるのは自身のアイディンティティをどこに置くかということです。\natprotoはその点でバランスがいい。\nなぜatprotoなのか activitypubを2017年頃から触っています。mastodonでインスタンスを立てたのがそれくらいでした。当時はjpが立ったか立ってないかくらいの時期だったと記憶しています。\n当時はostatusというprotocol(プロトコル)を使っており、それから程なくしてactivitypubに移行しました。\nmastodonの他にはpleroma, misskey, mitra, gnu-socialなどをherokuで立てたりしていました。\nとても面白い技術で、当時は本当に楽しかった。\nそれから数年が経過し、2023年頃からblueskyを始めました。\nblueskyにはatというprotocolが採用されています。それを見て、これからのインターネットはatになるかもしれないと思いました。\nhttps://syui.ai --\u0026gt; at://syui.ai activitypubとatprotoはシステムが根本的に異なります。その一つが履歴の保存性です。\n例えば、アカウントやサーバーを作成したとして、atprotoではplcからその歴史を確認できます。いつ建てられたのか、どのように名前が変更されたのか、です。\n私は「activitypubを2017年頃から触っている」と言いましたが、当時の記録はブログにしかありません。その後、何度かdbをリセットしているので、mastodon上では最近開通したばかりに見えます。\nactivitypubには中央集権的な機能がなく、それぞれのサーバーがそれぞれに記録を保存します。どこかには痕跡が残されているのかもしれませんが、それがどこかはわからない。\natprotoではこのような問題を解決できるのです。多くの人が使用するようになる技術というのは、あまり技術を全面に出さないような気がします。\n「好きなサーバーを選んでください」とか「この技術は分散しており非中央集権です」とかそういうことではなくて、protocolはユーザーが意識するような領域のものではありませんから、ユーザー側からすると、内部で勝手に分散し、難しいことは裏でやっていてほしいのです。つまり、初めて触れる人にもわかりやすいものでなければいけません。そして、それは結果と直結していなければならないのです。\n結果というのは、「検索すれば結果が返ってくる」みたいなものです。snsでいうなら「サーバーを意識しなくても繋がれる」ということ。\nactivitypubはこれが難しい。技術の根幹に関わるものなので、解決は難しく、そして致命的だと思うのです。\nまた、自分の名前を使うにはサーバーを立てる必要があります。\nprotocol user body activitypub:// @syui@syui.ai サーバーを建てる必要がある at:// @syui.ai サーバーを建てなくても設定できるし短くなる 特にat://の部分が気に入っており、短く簡潔で、なおかつ意味が通る名前です。\nnostrはどうか nostrは私からするとactivitypubよりも有望なprotocolに見えます。\nただ、広まるか広まらないかでいうと、そこまで広まらないと予想します。\nblueskyやatprotoは責任の所在がはっきりしており、誰が運営しているのかもわかりやすい。スパムが排除される環境にあります。逆に言うと、これがはっきりしない環境ではスパムだらけになりやすいと思っています。そういうものはリレーサーバーの管理者が個別に対処しており、サーバーによってはスパムが来ないものもあると思います。しかし、一般人からするとわけがわからない。私も「どこですかそれは」となります。\nこのような性質を無法地帯、無秩序、無責任分散と呼ぶことがあり、普通の人は住みたがらないと思います。\nネットでそういう場所を作るのはそこまで難しいことではありません。しかし、検索エンジンが荒廃していった経緯もあり、それではうまくいかなかった。だからこそどうするか、どうやって秩序を作り、それを維持するのか。人々は長年その事を考え、解決策を模索してきました。\n多くの人はバランスの良い秩序を求めているのだと思います。\n例えば、すべての個人が独立し、自立していて、何でも自分でできるようになった世界。すべての住人が安定した精神を持ち、揉め事やトラブルも起こさず、誰も悪いことをせず、すべてのことを一人でやって生きている、そんな世界では、ルールや法律、管理者や政府がある事自体おかしい。そのようなものは必要ないからです。このような段階において無法地帯は正しい。\nですが今この段階でそういったものが普及するかというと、私は難しいと思っています。\nまた、インターネットを変えていくには、個人と企業の両方を取り込んでいく必要があります。\nもしあなたが企業の責任者だった場合、nostrでやるかblueskyでやるか、どのように検討するでしょう。\n名前の限界 人間はいつの時代も数字ではなく名前を使います。例えば、プログラミング言語も名前を数字に変換するものです。名前のほうが人間にとって読み書きしやすいからです。したがって、名前は重要です。\n今度はこの名前について考えてみることにします。\n今のインターネットはこの名前に限界があると感じています。\n今のインターネットはサービスの中だけで情報のやり取りが完結していて、例えば、twitter, facebook, youtubeの中だけで情報のやり取りが完結していますよね。これらを相互にやり取りできるようにするには、同じprotocolを採用する必要があります。\n未来のインターネットではサービス同士がやり取りできるようになるというのが、私の予測でした。\nそして、ここでは2つの理由からその未来に向かうだろうと考えていて、その一つが名前に限界があるからです。\n各サービスで名前が枯渇していますが、これから生まれてくる人や新しい会社はたくさんあります。今後の情報の潮流になるのは彼らです。そんな彼らが入ってこないと成長は見込めません。\nしかし、新しい人たちは自分が使いたい名前が使えません。なぜならその名前はすでに取られているからです。それなら他のところに行くというのが自然の流れです。\nつまり、この問題は自然と解決される方向に進むだろうと私は考えています。それがdomain形式になると予想します。\n今後、人々が使う名前はdomain形式になり、なぜなら(1)各サービスごとの名前が枯渇しているからという理由と、(2)名前をdomain形式にしないとサービス外とやり取りできないという理由からです。そして、未来のインターネットは一つのアカウントで複数のサービスを使うのが一般的な形に変化していくと予測しています。\n重力と弱い力 アララギ「名前なんてそんなのどうでもいいだろ」\nオシノ「いや、名前は重要だよ。アララギくん」\nこの二人のやり取りはどちらが正しいのでしょう。\n答えは「どちらも正しい」です。\nしかし、あえて言うなら前者は即効性やインパクトを求め、後者は影響力や環境を求めるといったところでしょうか。\nここからは少し自然界の話をします。自然界で最も弱い力がなんなのかご存知ですか。\n答えは重力です。\n意外に思われるかもしれませんが、現在の科学では重力がこの世界で最も弱い力と考えられています。\nしかし、重力というと現在の宇宙環境を構築するほどに強力なもののはずではと思っている人がいるかもしれません。\nそうです。この世界では弱い力ほど大きな影響力を持ち、環境を構築しているものなのです。これが自然の摂理、自然の原理です。\n話を戻して、名前について考えてみましょう。\n名前には瞬時に何かを変える力はありません。即効性やインパクトがあるようなものではない。\nしかし、人間の意識、無意識下に影響を及ぼし、長い時間をかけて環境を形作っていく。重力に似た作用を持つのです。\n例えば、人間社会は人々の意識によって構築されています。\n広めること protocolは、多くの人に広めることが最も重要になります。\nこれはprotocolに限らず、より根幹部分の技術になるほど広めたもの勝ちになります。\n根幹部分というのは、時間に置き換えて考えるとわかりやすい。\n人々が一日のうちに最も多くの時間を使っているもの、答えはコンピュータです。\nしたがって、最も広く使われるosを開発、提供しているところが覇権を握ります。\nこれは時価総額で考えてみてもわかりやすい。microsoft(windows)やapple(mac/ios)です。\n最近はAIが膨大な時間を消費(削減)しているためnvidia(gpu)が巨大な時価総額を持つようになりました。\n人間の歴史を見ると、広めることが最も価値を持つのです。\n例えば、自分たちの物語を広めることを宗教と呼びます。基軸通貨のドルは大きな力を持ちます。言語もそうです。英語の影響力は計り知れない。\n同じようなものが広まることはない 私は原神というゲームをよくプレイしています。\nそこで原神のようなゲームを作ればいいのでしょうか。それではダメだと思うのです。たとえ品質が同じかそれ以上のものを作っても厳しいのではないでしょうか。なぜなら、すでに原神があるからです。\n最近はvtuberにハマって動画を見ていました。しかし、vtuberを今から始めるのは厳しいと思いました。vtuberとして恩恵を受けるのは、そのような概念が存在しなかった当時から取り組んでいた人達であって、今から始める人達ではない、そんな風に感じます。\n今流行っているものをそのまま真似したり、参入しようとしても、ときすでにおそし(時既に遅し)。どうせやるなら違うことをやろう。\n人は何を楽しいと思うのか どんなゲームを作ろうかと考えたとき、その答えは「人を楽しませること」でした。\nですが、私一人が頑張って楽しいゲームを作ろうにも、やっぱり限界があると思うのです。\nそこで考えなければいけないのは既に「人を楽しませている」人達です。\n見ている人を楽しませているvtuberとゲームを繋げれば、ゲームと本人を同時に広めることができるのではないか。\nそして、現在、vtuberをやるにはハードルが高く、やることが多すぎるのです。\n例えば、3dモデルを用意し、twitterアカウントを開設、プレイするゲームを選定して、ライブ環境を整え、youtubeの開設、画面にユーザー名やアカウント、モデルを表示しなければなりません。ボイス環境も必要で、喋りながらゲームを操作し、ライブ画面を操作しなければなりません。\nこれをすべて統合できたらいいなと考えました。\n人々は何を楽しいと思うのか。もう一度根本的な部分から考えてみましょう。\n今までのゲームではプレイヤーがゲームの主人公になりきって物語を追体験していました。私が好きなゲームはそうですね。例えば、原神では蛍と空という主人公がいて、彼らの物語です。\nしかし、本当は自分が主人公の物語をプレイしたいのではないでしょうか。プレイヤーが本当に求めているものは何なのでしょう。\nこの方向で考えられたゲームはすでにあり、例えば、最初にキャラメイク、自分で主人公をカスタマイズしてスタートするゲームがあります。\nしかし、私はそういったゲームをあまりプレイしません。どのようにカスタマイズしていいかわからないし、めんどくさいし、カスタマイズしてもどうもしっくりと来ないのです。ですから「自分で作る」タイプのゲームはあまりやりません。原神のように最初からキャラクターが作り込まれているゲームを好みます。\nやはり、カスタマイズ系は最初で躓いてしまうのです。よくわからないし、面倒なのです。すぐに始められることが何より重要だと思います。\nではこういったケースはどうでしょう。例えば、原神に自分自身がデザインされたキャラがいてそれを操作することができたら。私はきっと喜んでプレイしたでしょう。そのキャラに愛着を持てると思います。原神は声優さんもプレイしており、特に自分の声を使ったキャラを中心に楽しまれている姿が印象的でした。\nつまり、このような体験を多くのプレイヤーができるようになれば、きっとゲームは楽しくなる。\nそのためには何が必要になるでしょう。その一つが唯一性です。\nプレイヤーの唯一性 このゲームでは、各プレイヤーに唯一性をもたせることを目指します。つまり、プレイヤーの唯一性を担保し、デザインするということです。\nこれをどのように実現していくのか。今考えている内容をお伝えします。\nここからはより具体的な方向性を話します。興味がない人は読み飛ばしを推奨します。\nプレイヤーは1キャラクターを割り当てられる 使用できるキャラクターはプレイヤー固有のものとなる。そのプレイヤーしか使えない固有スキルを持つ 1キャラクターにつき1回のピックアップ期間がある。ガチャで引いたキャラは固有スキルを使えない 1キャラクターにつき1が付与され、それが0になると、二度とピックアップされません。\nなぜかというと、私は開発者というものをよく知っています。制限がないと復刻やリメイクを連発してしまうおそれがあります。今は時間がないから復刻やリメイクすればいい、と。\nそうしているうち新しいものを作る力を失っていくのです。ガチャをやりたければ新しいものを作るしかないようルールを決めておきます。\nプレイヤーの唯一性は取り返しがつかない要素の積み重ねです。\n大気圏に行こう ここからはゲームの機能例を紹介します。\nキャラクターについて 1キャラクターには1属性が割り当てられます。割り当てられたキャラクターにはgroup(グループ)があり、season(シーズン)ごとに移行します。属性はグループ毎に異なります。そして、前シーズンに戻ることはありません。\n最初に予定しているのはfantasy(ファンタジー)、次はanimal(アニマル)というグループです。ファンタジーは原子属性のうちの1つを扱えます。アニマルは分子属性のうちの1つです。\n例えば、シーズン1のドラゴンというキャラクターはatomic(核)という属性を持ち、ファンタジーのグループです。ファンタジーは他にフェニックス(陽子)、ペガサス(中性子)など。アニマルはクジラ(水)やライオン(火)がいます。ゲームを開始したシーズンにより最初に割り当てられるキャラクターが決まります。\nseason group type character 1 fantasy 陽子、中性子、核、電子、クォーク ドラゴン、ペガサス、フェニックス\u0026hellip; 2 animal 水、火、岩、風、氷 クジラ、ライオン、ワシ\u0026hellip; 3 \u0026hellip; \u0026hellip; \u0026hellip; { \u0026#34;atom\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;atom\u0026#34;, \u0026#34;group\u0026#34;: [ \u0026#34;fantasy\u0026#34; ], \u0026#34;lang\u0026#34;: { \u0026#34;ja\u0026#34;: \u0026#34;原子\u0026#34; }, \u0026#34;ref\u0026#34;: \u0026#34;https://en.wikipedia.org/wiki/atom\u0026#34;, \u0026#34;body\u0026#34;: { \u0026#34;text\u0026#34;: \u0026#34;the word atom comes from the greek word atmos, which means indivisible. an atom consists of an atomic nucleus, which is made up of protons and neutrons, and electrons distributed around the nucleus\u0026#34;, \u0026#34;lang\u0026#34;: { \u0026#34;ja\u0026#34;: \u0026#34;アトムはギリシャ語のアトモスの「これ以上分割できない」という単語が由来。原子は陽子と中性子からなる原子核と、その周囲に分布する電子から構成される\u0026#34; } }, \u0026#34;enum\u0026#34;: [ \u0026#34;proton(陽子)\u0026#34;, \u0026#34;neutron(中性子)\u0026#34;, \u0026#34;atomic(原子核)\u0026#34;, \u0026#34;electron(電子)\u0026#34;, \u0026#34;quark(クォーク)\u0026#34; ] }, \u0026#34;molecule\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;molecule\u0026#34;, \u0026#34;group\u0026#34;: [ \u0026#34;animal\u0026#34; ], \u0026#34;lang\u0026#34;: { \u0026#34;ja\u0026#34;: \u0026#34;分子\u0026#34; }, \u0026#34;ref\u0026#34;: \u0026#34;https://en.wikipedia.org/wiki/molecule\u0026#34;, \u0026#34;body\u0026#34;: { \u0026#34;text\u0026#34;: \u0026#34;a neutrally charged substance made up of two or more atoms\u0026#34;, \u0026#34;lang\u0026#34;: { \u0026#34;ja\u0026#34;: \u0026#34;2つ以上の原子から構成される電荷的に中性な物質\u0026#34; } }, \u0026#34;enum\u0026#34;: [ \u0026#34;water(水)\u0026#34;, \u0026#34;wind(風)\u0026#34;, \u0026#34;rock(岩)\u0026#34;, \u0026#34;ice(氷)\u0026#34;, \u0026#34;fire(火)\u0026#34; ] } } どんどん進みましょう。次に説明するのはキャラクターの進化についてです。\n人が単細胞生物から進化してきたように、キャラクターも進化するようデザインしました。\n各キャラクターはanimal(動物型) -\u0026gt; human(人型) -\u0026gt; divinity(神性)に進化できます。ゲーム内では各モデルにフォルムチェンジ(切り替え)できるようになります。\nanimal(動物型) -\u0026gt; human(人型) -\u0026gt; divinity(神性) 各領域について 地上、天空、宇宙に分けられます。しかし、自由に飛び回れるようになるかというと、そうではありません。\n開発では便利なのでアイを使用していますが、リリース版では自由に動き回ることはできなくなると思います。\nなぜならバグの頻度が跳ね上がるからです。\nバグを出さないようにするには自由に動き回れる範囲や速度を制限しなければなりません。また、デモで使用しているキャラクターは基本的に使えません。開発用の機能がたくさん付いているからです。\nですが、可能性がないわけではありません。安定して動作するようになれば行けるようになるかもしれない。\n今回こういう部分を紹介したのは、外の世界があることを知ってほしいからです。\n見上げる星空は本物で、実際に行くことができ、世界は広がっているのだと。\n自由であれば面白いのか 一見、プレイ動画を見て面白そうだなと思った人はいるかもしれません。\nしかし、リリースできない理由があります。\nリリースできない理由、それは「面白くない」からです。今の時点でプレイしていても面白くないなと思っていて、どうすれば面白くなるのかを考えています。\nいくつか案はありますが、一つは不自由さを追加することです。\nゲームは制約があり不自由があるからこそ面白い。\n原神やエルデンリングを参考にしながら制約のあるゲームを作っていきたいなと考えています。\n最初に選択があるべき ゲームは3つの要素で構成する方向で考えています。choices(選択要素), diagnosis(診断要素)、fate(運要素)です。\nchoices(選択要素) -\u0026gt; diagnosis(診断要素) -\u0026gt; fate(運要素) 最初にあるべきなのは選択要素だと思います。これを例えばアカウントを作成するケースに当てはめてみると\nキャラクターの性別を選択する キャラクターは診断から決められる ステータスは運命、つまりランダムで割り振られる(9:1) 最初に性別を選択させるというゲームは多く、そこにも重要な意味があると思います。一つはプレイヤーにゲームの選択権があると理解してもらうところに意味があります。\n","description":"","formated_time":"2024-12-21","href":"https://syui.github.io/blog/post/2024/12/21/bluesky-ac-ja/","tags":["bluesky","atproto","lang:ja"],"title":"atmosphere","utc_time":"2024-12-21T00:00:00Z"},{"categories":null,"contents":"This year, I\u0026rsquo;m participating in the Bluesky Advent Calendar. I\u0026rsquo;ve prepared articles in both English and Japanese. Bluesco Advent Calendar 2024 en ja\nWhat is atmosphere? First, let\u0026rsquo;s explain the terminology. at has various meanings embedded in it. For example, @, at://, [at]mosphere, [a]uthenticated [t]ransfer, etc. In the early days, the icon was @.\nword name example at uri at://syui.ai @ user @syui.ai [at]proto repo git@github.com:bluesky-social/atproto [at]mosphere system pds, bsky(appview), ozone, bgs, plc [a]uthenticated [t]ransfer protocol did Atmosphere\n\u0026ldquo;Atmosphere\u0026rdquo; is a term used to describe the ecosystem of the AT protocol. AT Protocol\nAT Protocol stands for \u0026ldquo;Authenticated Transfer Protocol\u0026rdquo;. This name comes from the fact that all user data is signed by the creating user. This allows data to be broadcast through many services and proven authentic without direct communication with the originating server.\nThe name is also a play on the \u0026ldquo;@\u0026rdquo; symbol, aka the \u0026ldquo;at\u0026rdquo; symbol, as atproto is designed for social systems.\nIt seems that each area is named, and the entire system is called atmosphere.\nThe services under atmosphere are named after the Earth\u0026rsquo;s atmospheric structure, such as bluesky(bsky), ozone, bigsky(bgs).\nhttps://github.com/bluesky-social/atproto/tree/main/services/bsky https://github.com/bluesky-social/atproto/tree/main/services/ozone https://github.com/bluesky-social/indigo/tree/main/cmd/bigsky There are other things in the atmosphere like meteor and aurora, so they might be used for naming something in the future.\n{ \u0026#34;atmosphere\u0026#34;: { \u0026#34;uri\u0026#34;: \u0026#34;https://atproto.com/ja/guides/glossary\u0026#34;, \u0026#34;ref\u0026#34;: \u0026#34;https://en.wikipedia.org/wiki/atmosphere_of_earth\u0026#34;, \u0026#34;exosphere\u0026#34;: { \u0026#34;km\u0026#34;:[{ \u0026#34;min\u0026#34;: 700, \u0026#34;max\u0026#34;: 10000 }], \u0026#34;tag\u0026#34;: [ \u0026#34;universe\u0026#34; ] }, \u0026#34;thermosphere\u0026#34;: { \u0026#34;km\u0026#34;:[{ \u0026#34;min\u0026#34;: 80, \u0026#34;max\u0026#34;: 700 }], \u0026#34;tag\u0026#34;: [ \u0026#34;aurora\u0026#34; ] }, \u0026#34;mesosphere\u0026#34;: { \u0026#34;km\u0026#34;:[{ \u0026#34;min\u0026#34;: 50, \u0026#34;max\u0026#34;: 80 }], \u0026#34;tag\u0026#34;: [ \u0026#34;meteor\u0026#34;, \u0026#34;bigsky\u0026#34; ] }, \u0026#34;stratosphere\u0026#34;: { \u0026#34;km\u0026#34;:[{ \u0026#34;min\u0026#34;: 12, \u0026#34;max\u0026#34;: 50 }], \u0026#34;tag\u0026#34;: [ \u0026#34;ozone\u0026#34; ] }, \u0026#34;troposphere\u0026#34;: { \u0026#34;km\u0026#34;:[{ \u0026#34;min\u0026#34;: 0, \u0026#34;max\u0026#34;: 12 }], \u0026#34;tag\u0026#34;: [ \u0026#34;bluesky\u0026#34; ] } } } Thoughts on Game Development I\u0026rsquo;m currently developing a game using atproto.\nHere\u0026rsquo;s a summary of my thoughts on game development.\nThe Invisible Part The first thing I started working on was the invisible part.\nGame engines are usually based on a plane. The map is just an endless horizon no matter how far you go. Even if you fly up into the sky, you can\u0026rsquo;t escape the planet.\nThere\u0026rsquo;s no need to create places in the game that you can\u0026rsquo;t go to, so even if there\u0026rsquo;s a moon in the game, it\u0026rsquo;s just moving a picture in the background.\nHowever, my idea is that even if you can\u0026rsquo;t go to a place in the game, there should be things that should be there. If the moon rises in the game, I want to create something that characters can actually touch.\nUnreal Engine has a feature called atmosphere, and with some ingenuity, I managed to make it work.\nI want to continue game development with the philosophy of reflecting reality as much as possible.\nWhat Do People Want? What do people want? This is something we need to consider when making games.\nFor example, even if the operation ends, you want to keep the data, right?\nPeople have a desire to leave their traces, and living beings have an instinct to leave descendants. As a derivative of this, people are happy when what they\u0026rsquo;ve done is preserved. That\u0026rsquo;s why I thought about saving data with atproto.\nUsers don\u0026rsquo;t want to waste everything they\u0026rsquo;ve done, and they\u0026rsquo;d prefer \u0026ldquo;It\u0026rsquo;s okay even if the service ends\u0026rdquo; over \u0026ldquo;It\u0026rsquo;s over when the service ends\u0026rdquo;. This is especially true if they\u0026rsquo;re going to be active for decades to come.\natproto is creating something that can withstand the future.\nWhere Do People Get Information From? Where people get information from changes with the times.\nIn the past, it was from books. Then it became television, and now it\u0026rsquo;s the internet.\nPeople in the past got information from books, so books had value. I think publishers, newspapers, and bookstores had high value. But as television and the internet became widespread, publishing, newspapers, and bookstores started to struggle.\nWhat\u0026rsquo;s important is \u0026ldquo;people and information\u0026rdquo;. The question is where people will get information from in the future. Currently, it\u0026rsquo;s from the internet.\nThe next thing to consider is \u0026ldquo;how\u0026rdquo;. Even if we get information from the internet, how will we get it? Let\u0026rsquo;s think about that.\nFirst, let\u0026rsquo;s look at history. When the internet became widespread, the first thing that happened was that individuals started creating homepages. Anyone could create a homepage and disseminate information. Then search engines appeared.\nPeople who initially accessed websites by entering URLs started accessing websites from search engines. Let\u0026rsquo;s call this era 1.\nNext came services. Various services were created, and social network services (SNS) appeared. Twitter, Facebook, and so on. Gradually, people started getting information from SNS rather than homepages or search engines. Let\u0026rsquo;s call this era 2.\nSo what\u0026rsquo;s next? This isn\u0026rsquo;t clear yet.\nBut I feel like the outline is starting to become visible. I think it will be something like activitypub or atproto. And AI. AI also gets information from people, and it\u0026rsquo;s necessary for people to disseminate information.\nIndeed, in era 2, people started creating accounts on services. All posts are attributed to that service. Not to individuals. Of course, where people get information from is also within the service. This has been the form and way of the internet in recent years.\nBut it was different in 1. Search engines resulted in traffic to personal sites.\nI think that in 3, we\u0026rsquo;ll head back in the direction of 1, that is, towards individuals. From individuals to corporations. From corporations to individuals. It\u0026rsquo;s not that simple, but I think we\u0026rsquo;ll move towards individuals in a way that\u0026rsquo;s balanced for the times.\nThis doesn\u0026rsquo;t mean we\u0026rsquo;re simply going back to 1. There were many problems with 1. It\u0026rsquo;s because of these problems that 2 came to be used. For example, it became increasingly difficult to find the information you were looking for with search engines, right? I think the transition to 3 will happen while balancing and avoiding such problems.\nAnd in any era, the only thing we can choose is where to place our own identity.\natproto is well-balanced in this respect.\nWhy atproto? I\u0026rsquo;ve been using activitypub since around 2016. I set up a Mastodon instance around that time. I remember it was around the time when the Japanese instance was just being set up or not yet set up\u0026hellip; At that time, it was using a protocol called ostatus, and soon after, it transitioned to activitypub.\nBesides Mastodon, I was setting up pleroma, misskey, mitra, gnu-social, etc. on Heroku.\nIt was a very interesting technology, and I really enjoyed it at that time.\nThen, after several years passed, I started bluesky around 2023.\nBluesky adopts a protocol called at. When I saw that, I thought that the future internet might become at.\nhttps://syui.ai --\u0026gt; at://syui.ai activitypub and atproto have fundamentally different systems. One of these is the preservation of history.\nFor example, if you create an account or server, with atproto, you can check its history from plc. When it was set up, how the name was changed, etc.\nI said \u0026ldquo;I\u0026rsquo;ve been using activitypub since around 2016\u0026rdquo;, but the records from that time only exist on my blog. Since I\u0026rsquo;ve reset the db several times since then, it looks like I just opened it recently on Mastodon.\nactivitypub doesn\u0026rsquo;t have a centralized function, and each server saves records independently. Traces might be left somewhere, but we don\u0026rsquo;t know where.\natproto can solve these kinds of problems. Think back to when search engines became popular, but technologies that gain dominance and are used by many people don\u0026rsquo;t put technology at the forefront.\nIt\u0026rsquo;s not about \u0026ldquo;Choose your favorite server\u0026rdquo; or \u0026ldquo;This technology is decentralized and non-centralized\u0026rdquo;, but rather, the protocol shouldn\u0026rsquo;t be something that users are conscious of. I want it to be distributed internally and do difficult things behind the scenes.\nIn other words, it needs to be understandable even for people who are touching it for the first time. And that must be directly linked to results.\nResults mean things like \u0026ldquo;If you search, you get results\u0026rdquo;. For SNS, it means \u0026ldquo;You can connect without being conscious of the server\u0026rdquo;.\nThis is difficult with activitypub. It\u0026rsquo;s related to the core of the technology, so it\u0026rsquo;s difficult to solve, and I think it\u0026rsquo;s fatal.\nAlso, to use your own name, you need to set up a server.\nprotocol user body activitypub:// @syui@syui.ai Need to set up a server at:// @syui.ai Can be set up without setting up a server and it\u0026rsquo;s shorter I particularly like the at:// part. It\u0026rsquo;s short, concise, and yet a meaningful name.\nWhat about nostr? To me, nostr seems like a more promising protocol than activitypub.\nHowever, if we\u0026rsquo;re talking about whether it will spread or not, I predict that it won\u0026rsquo;t spread that much.\nBluesky and atproto have clear accountability, and it\u0026rsquo;s easy to understand who\u0026rsquo;s operating them. They\u0026rsquo;re in an environment where spam can be eliminated. Conversely, in environments where this isn\u0026rsquo;t clear, it\u0026rsquo;s easy to become full of spam. I think such things are dealt with individually by relay server administrators, and there might be servers where spam doesn\u0026rsquo;t come. But for ordinary people, it\u0026rsquo;s incomprehensible. Even I would say, \u0026ldquo;Where is that?\u0026rdquo;\nThis kind of nature is sometimes called lawlessness, disorder, irresponsible decentralization, and I think ordinary people wouldn\u0026rsquo;t want to live there.\nIt\u0026rsquo;s not that difficult to create such places on the net. However, given the history of search engines becoming desolate, that didn\u0026rsquo;t work well. That\u0026rsquo;s why we need to consider what to do, how to create order, and how to maintain it. People have been thinking about this and seeking solutions for many years.\nI think many people are seeking well-balanced order.\nFor example, a world where all individuals are independent, self-reliant, and can do anything by themselves. A world where all residents have stable minds, don\u0026rsquo;t cause disputes or troubles, no one does bad things, and everyone lives doing everything by themselves. In such a world, it\u0026rsquo;s strange to have rules, laws, administrators, or governments. Because such things are not necessary. At this stage, lawlessness is correct.\nBut whether such things will become widespread at this stage now, I think it\u0026rsquo;s difficult.\nThe Limits of Names Humans use names, not numbers, in any era. For example, programming languages are also things that convert names to numbers. This is because names are easier for humans to read and write. Therefore, names are important.\nNow, let\u0026rsquo;s think about these names.\nI feel that the current internet has limitations with these names.\nThe current internet completes information exchange only within services. For example, information exchange is completed only within Twitter, Facebook, YouTube, right? To make these interact with each other, they need to adopt the same protocol.\nMy prediction was that in the future internet, services would be able to interact with each other.\nAnd here, I think we\u0026rsquo;re heading towards that future for two reasons, one of which is that names have limitations.\nNames are being exhausted in each service, but there are many people who will be born and new companies that will be created. They are the future information trend. Growth can\u0026rsquo;t be expected if they don\u0026rsquo;t come in.\nHowever, new people can\u0026rsquo;t use the names they want to use. Because those names are already taken. Then it\u0026rsquo;s natural to go somewhere else.\nIn other words, I think this problem will naturally move towards resolution. I predict it will become a domain format.\nIn the future, the names people use will become domain format, because (1) names are being exhausted in each service, and (2) you can\u0026rsquo;t interact outside the service unless you make the name a domain format. And I predict that in the future internet, it will become common to use multiple services with one account.\nGravity and Weak Force Araragi: \u0026ldquo;Names don\u0026rsquo;t matter at all.\u0026rdquo;\nOshino: \u0026ldquo;No, names are important, Araragi-kun.\u0026rdquo;\nWhich of these two exchanges is correct?\nThe answer is \u0026ldquo;Both are correct.\u0026rdquo;\nHowever, if I had to say, the former seeks immediacy and impact, while the latter seeks influence and environment.\nFrom here, I\u0026rsquo;ll talk a bit about the natural world. Do you know what the weakest force in the natural world is?\nThe answer is gravity.\nYou might be surprised, but in current science, gravity is considered the weakest force in this world.\nHowever, you might think that gravity should be powerful enough to construct the current universe environment.\nThat\u0026rsquo;s right. In this world, weaker forces have greater influence and construct the environment. This is the law of nature, the principle of nature.\nLet\u0026rsquo;s go back to thinking about names.\nNames don\u0026rsquo;t have the power to change something instantly. They don\u0026rsquo;t have immediacy or impact.\nHowever, they affect human consciousness and subconsciousness, shaping the environment over a long period of time. They have an effect similar to gravity.\nFor example, human society is constructed by people\u0026rsquo;s consciousness.\nSpreading For protocols, spreading to many people becomes the most important thing.\nThis is not limited to protocols, but the more fundamental the technology, the more it becomes a game of who can spread it the most.\nThe fundamental part is easy to understand if you think about it in terms of time.\nWhat people use the most time in a day, the answer is computers.\nTherefore, those who develop and provide the most widely used OS gain dominance.\nThis is easy to understand if you think about market capitalization. Microsoft (Windows) and Apple (Mac/iOS).\nRecently, as AI consumes (reduces) enormous amounts of time, Nvidia (GPU) has gained a huge market capitalization.\nLooking at human history, spreading something has the most value.\nFor example, spreading one\u0026rsquo;s own story is called religion. The dollar as the key currency has great power. Language is the same. The influence of English is immeasurable.\nSimilar Things Don\u0026rsquo;t Spread I often play a game called Genshin Impact.\nShould I make a game like Genshin Impact then? I don\u0026rsquo;t think that\u0026rsquo;s good. Even if you make something of the same or higher quality, I think it would be difficult. Why? Because Genshin Impact already exists.\nRecently, I\u0026rsquo;ve been hooked on watching VTuber videos. However, I thought it would be difficult to start as a VTuber now. I feel that those who benefit as VTubers are those who have been working on it since the time when such a concept didn\u0026rsquo;t exist, not those who are starting now.\nEven if you try to imitate or enter what\u0026rsquo;s popular now, it\u0026rsquo;s already too late. If you\u0026rsquo;re going to do something, do something different.\nWhat do people find fun? When I thought about what kind of game I should make, the answer was \u0026ldquo;to entertain people\u0026rdquo;.\nHowever, I think there is a limit to what I can do by myself to make a fun game.\nSo what I need to think about are the people who are already \u0026ldquo;entertaining people\u0026rdquo;.\nIf I can connect vtubers who entertain the viewers with games, I think I can spread the word about both the game and the person at the same time.\nAnd currently, it is difficult to become a vtuber, and there are too many things to do.\nFor example, you need to prepare a 3D model, open a Twitter account, choose the game you want to play, set up a live environment, open a YouTube channel, and display your username, account, and model on the screen. You also need a voice environment, and you have to operate the game while talking and operate the live screen.\nI thought it would be nice to be able to integrate all of this.\nWhat do people find fun? Let\u0026rsquo;s think about it from the basics again.\nIn previous games, the player became the protagonist of the game and relived the story. That\u0026rsquo;s the case with my favorite games. For example, in Genshin Impact, there are two main characters, Hotaru and Sora, and it is their story.\nBut don\u0026rsquo;t you think you want to play the story of the main character? What is it that players really want?\nThere are already games that are designed in this direction, for example, there are games where you start by creating your own character and customizing the main character.\nBut I don\u0026rsquo;t play those kinds of games very often. I don\u0026rsquo;t know how to customize, it\u0026rsquo;s troublesome, and even if I customize it, it doesn\u0026rsquo;t feel right. That\u0026rsquo;s why I don\u0026rsquo;t play many games of the \u0026ldquo;make it yourself\u0026rdquo; type. I prefer games like Genshin Impact where the characters are well-made from the beginning.\nAfter all, customization games are hard at first. I don\u0026rsquo;t understand it well, and it\u0026rsquo;s troublesome. I think the most important thing is to be able to start right away.\nSo what about cases like this? For example, if Genshin Impact had a character designed by me and I could control it. I would definitely play it with joy. I think I would be able to become attached to that character. Voice actors also play Genshin Impact, and it was impressive to see them enjoying the characters that used their own voices.\nIn other words, if more players can have this experience, the game will surely become more fun.\nWhat is needed to achieve this? One of them is uniqueness.\nUniqueness of the player In this game, we aim to give each player uniqueness. In other words, we design the game to ensure the uniqueness of the player.\nHow do we achieve this? I will tell you what I am thinking now.\nFrom here on, I will talk about more specific directions. If you are not interested, I recommend you skip this.\nPlayers are assigned one character The character that can be used is unique to the player. It has a unique skill that only that player can use There is one pickup period per character. Characters drawn by gacha cannot use unique skills One is given for each character, and when it reaches 0, it will not be picked up again.\nThe reason is that I know developers well. If there are no restrictions, there is a risk of repeated reprints and remakes. Now we don\u0026rsquo;t have time, so we can just reprint and remake.\nAs we do this, we lose the ability to create new things. We have set rules so that if you want to play gacha, you have no choice but to make something new.\nThe uniqueness of the player is an accumulation of irreversible elements.\nLet\u0026rsquo;s go to the atmosphere From here, we will introduce examples of the game\u0026rsquo;s functions.\nAbout characters Each character is assigned one attribute. The assigned character has a group, and it transitions with each season. The attribute is different for each group. And it will not return to the previous season.\nThe first group we plan to have is fantasy, followed by animal. Fantasy can handle one of the atomic attributes. Animal is one of the molecular attributes.\nFor example, the character Dragon from Season 1 has the atomic attribute and is in the fantasy group. Other fantasy characters include the phoenix (proton) and pegasus (neutron). Animals include the whale (water) and lion (fire). The season you start the game in determines the character you are initially assigned to.\nseason group type character 1 fantasy proton, neutron, nucleus, electron, quark dragon, pegasus, phoenix\u0026hellip; 2 animal water, fire, rock, wind, ice whale, lion, eagle\u0026hellip; 3 \u0026hellip; \u0026hellip; \u0026hellip; { \u0026#34;atom\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;atom\u0026#34;, \u0026#34;group\u0026#34;: [ \u0026#34;fantasy\u0026#34; ], \u0026#34;lang\u0026#34;: { \u0026#34;ja\u0026#34;: \u0026#34;原子\u0026#34; }, \u0026#34;ref\u0026#34;: \u0026#34;https://en.wikipedia.org/wiki/atom\u0026#34;, \u0026#34;body\u0026#34;: { \u0026#34;text\u0026#34;: \u0026#34;the word atom comes from the greek word atmos, which means indivisible. an atom consists of an atomic nucleus, which is made up of protons and neutrons, and electrons distributed around the nucleus\u0026#34;, \u0026#34;lang\u0026#34;: { \u0026#34;ja\u0026#34;: \u0026#34;アトムはギリシャ語のアトモスの「これ以上分割できない」という単語が由来。原子は陽子と中性子からなる原子核と、その周囲に分布する電子から構成される\u0026#34; } }, \u0026#34;enum\u0026#34;: [ \u0026#34;proton(陽子)\u0026#34;, \u0026#34;neutron(中性子)\u0026#34;, \u0026#34;atomic(原子核)\u0026#34;, \u0026#34;electron(電子)\u0026#34;, \u0026#34;quark(クォーク)\u0026#34; ] }, \u0026#34;molecule\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;molecule\u0026#34;, \u0026#34;group\u0026#34;: [ \u0026#34;animal\u0026#34; ], \u0026#34;lang\u0026#34;: { \u0026#34;ja\u0026#34;: \u0026#34;分子\u0026#34; }, \u0026#34;ref\u0026#34;: \u0026#34;https://en.wikipedia.org/wiki/molecule\u0026#34;, \u0026#34;body\u0026#34;: { \u0026#34;text\u0026#34;: \u0026#34;a neutrally charged substance made up of two or more atoms\u0026#34;, \u0026#34;lang\u0026#34;: { \u0026#34;ja\u0026#34;: \u0026#34;2つ以上の原子から構成される電荷的に中性な物質\u0026#34; } }, \u0026#34;enum\u0026#34;: [ \u0026#34;water(水)\u0026#34;, \u0026#34;wind(風)\u0026#34;, \u0026#34;rock(岩)\u0026#34;, \u0026#34;ice(氷)\u0026#34;, \u0026#34;fire(火)\u0026#34; ] } } Let\u0026rsquo;s move on. Next, I\u0026rsquo;ll explain about character evolution.\nJust as humans have evolved from single-celled organisms, I designed the characters to evolve as well.\nEach character can evolve to model: animal -\u0026gt; human -\u0026gt; divinity. In the game, you will be able to change forms to each model.\nanimal -\u0026gt; human -\u0026gt; divinity About each area They are divided into ground, sky, and space. However, that doesn\u0026rsquo;t mean you\u0026rsquo;ll be able to fly around freely.\nI use eyes because they are convenient in development, but I don\u0026rsquo;t think you\u0026rsquo;ll be able to move around freely in the release version.\nBecause the frequency of bugs will increase.\nTo prevent bugs, we must limit the range and speed of freedom of movement. Also, the characters used in the demo are basically unusable because they have many development functions.\nHowever, it is possible. If it becomes stable, you may be able to go there.\nI introduced this part this time because I want you to know that there is an outside world.\nThe starry sky you look up at is real, you can actually go there, and the world is expanding.\nChoices should come first I am thinking of making the game into three elements: choices, diagnosis, and fate.\nchoices -\u0026gt; diagnosis -\u0026gt; fate I think the choice element should come first. For example, if we apply this to the case of creating an account,\nSelect the gender of the character\nThe character is decided from the diagnosis\nThe status is assigned randomly, i.e. by fate (9:1)\nThere are many games where you choose your gender at the beginning, and I think this has an important meaning. One reason is that it makes the player understand that they have the right to choose the game.\nblueprint tips To post to atproto in blueprint, do the following. Use Content-Type:x_www_from_urlencoded_url.\nplugin : varset ","description":"","formated_time":"2024-12-21","href":"https://syui.github.io/en/post/2024/12/21/bluesky-ac-en/","tags":["bluesky","atproto","lang:en"],"title":"atmosphere","utc_time":"2024-12-21T00:00:00Z"},{"categories":null,"contents":"公式チャンネルで動画が公開され、最後のシルエットでスカークの姿がありました。\nつまり、5.xで実装される可能性があります。面白くなってきた。\n私は現在、炎神と氷神は完凸予定です。それ以外ではナタでシロネンを引きましたが、凸はしていません。\n今後凸することも考えていたところ、この発表があったので、スカークの完凸を目指す計画になりそうです。\nですが、現在の原石数を考えると、炎神は完凸できるものの、スカークまでカバーするのは無課金勢としては難しいか。\nフォンテーヌではフリーナ(c2), ヌヴィレット(c1)でした。スメールではナヒーダ(c6)です。\nナタでマーヴィカ(c6), シロネン(c0), スカーク(c6)になるのか。普通に考えると無理そう。マーヴィカの凸はいい感じのところで止めておくのがいいかもね。\n","description":"","formated_time":"2024-12-21","href":"https://syui.github.io/blog/post/2024/12/21/genshin/","tags":["genshin"],"title":"原神、スカークはナタで実装","utc_time":"2024-12-21T00:00:00Z"},{"categories":null,"contents":"city sampleにearth system(solar system)を組み込みます。具体的には惑星(planet)の形式でmapを作成し、空から宇宙に出ても問題ないようにすることを目指します。\n海 : ocean waves 空 : ultra dynamic sky city sample 5.5からcrashする回数が大幅に減りました。\n/Map/Small_City_LVLを使います。ground*を探して削除します。これは海面にplane(平面)を設置しています。\n止まっている車をcで運転できるようですが、これはBP_Playerの機能です。使用するには後述するgame animation sampleに統合する必要があるでしょう。\nplayerstart(tag)をいくつか設置し、uiで選択してteleportできるようにします。instance data(config)に名前を保存して呼び出してもいいし、mapから値を取ってきてもいいです。\nhttps://blueprintue.com/blueprint/3h8qi0ep/\nいくつかの建物を追加します。\n/Levels/DefaultLevel /AutomotiveBridgeScene/Bridge_P 街頭はBP_CurvedBrideでLamp_0xを変更します。SMでstreetLampCを選択して位置を調整します。また、すり抜けるのでマトリックスでcollisionを設定してください。よくわからない場合は後述するtwinmotionを参考にしてください。\nAutomatedPerfTesting AutomatedPerfTestingは5.5で追加されたpluginです。\nExperimental release of Automated Perf Testing Plugin v0.1, providing Gauntlet Test Controllers, UAT Test Nodes, and BuildGraph macros for adding common automated performance tests to a project\u0026rsquo;s automated build and test.\nhttps://dev.epicgames.com/documentation/ja-jp/unreal-engine/unreal-engine-5.5-release-notes https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Plugins/AutomatedPerfTesting そのうち解消されると思いますが、現在(2024-11-18)、city sampleはbuildできません。Engine/Plugins/Performance/AutomatedPerfTestingにAutomatedPerfTestConfig.cs, AutomatedPerfTestNode.csが含まれていないため${project}/Build/Script/CitySample.Automation.csprojに記述されているcompileが通らないのです。\n\u0026lt;Project Sdk=\u0026#34;Microsoft.NET.Sdk\u0026#34;\u0026gt; \u0026lt;Import Project=\u0026#34;CitySample.Automation.csproj.props\u0026#34; Condition=\u0026#34;Exists(\u0026#39;CitySample.Automation.csproj.props\u0026#39;)\u0026#34;/\u0026gt; \u0026lt;PropertyGroup\u0026gt; \u0026lt;TargetFramework\u0026gt;net8.0\u0026lt;/TargetFramework\u0026gt; \u0026lt;/PropertyGroup\u0026gt; \u0026lt;ItemGroup\u0026gt; \u0026lt;Compile Include=\u0026#34;$(EngineDir)\\Plugins\\Performance\\AutomatedPerfTesting\\Build\\Scripts\\AutomatedPerfTestConfig.cs\u0026#34; /\u0026gt; \u0026lt;Compile Include=\u0026#34;$(EngineDir)\\Plugins\\Performance\\AutomatedPerfTesting\\Build\\Scripts\\AutomatedPerfTestNode.cs\u0026#34; /\u0026gt; \u0026lt;/ItemGroup\u0026gt; \u0026lt;/Project\u0026gt; これはgithubにあるsrcから持ってくるしかありません。アクセスするにはorgに参加します。\nhttps://github.com/EpicGames/UnrealEngine/tree/release/Engine/Plugins/Performance/AutomatedPerfTesting/Build/Scripts ocean waves 惑星の海を作るにはocean wavesを利用します。必要なものは以下の2つです。\nBP_EarthSizedOcean : 海中 BP_EarthSizedSphericalMesh : 海上 WaterVolume BP_EarthSizedSphericalMeshのtransform-location-z:-636000000にします。次に海上の影問題を修正するためMaterial Overridesの-1から4までのmaterialを変更します。私は/Vefects/Water/VFX/WaterMaterialsを使用しました。\n次にBP_EarthSizedOceanのVolume MaaterialsでWaterVolumeをセットします。Above, Underwaterを/Vefects/Water/VFX/UnderWaterに変更します。heightは0にします。これは海に入って出たときに海中を適用する高さを設定します。\nこれで正常に海を作ることができました。\nultra dynamic sky ultra dynamic skyは空と天候を作ります。\nまずblueprintを開いてHeightFogをvisible:falseにします。これは霧を地平線に表示するものです。\nrain rain, snowなどのweatherではpostprocess volumeを使って画面に水滴を付けるなどの表現を行います。\n[PostProcess Material] /Vefects/Waters/Water/VFX/WaterOnSurfaces/Materials/MI_VFX_WaterOnLens_ClearCenter /Vefects/Waters/Water/VFX/Rain/Materials/MI_VFX_CheapRain twinmotion 建物はtwinmotionから持ってくるとよいでしょう。datasmithでexportしてueでimportします。指示通りにproject rootを指定すると/${name}_Assetsが作成されます。ただ、datasmithの置き場所は変更しても構いません。\nすり抜け問題を解消するにはmeshを全選択して、右クリックでアセットアクション -\u0026gt; プロパティマトリクスで選択内容を... -\u0026gt; collision complexity(use complex collision as simple...)を選択します。\nchair 椅子に座る動作を設定します。大変ですが以下のcomponentを使うと簡単にできます。調整は難しいですね。私の場合はgame animation sampleを使っていますが、最新版では勝手に動きが制御されるためanim montageをそのまま再生できません。したがって、別にabpを作成し、それを呼び出します。\nhttps://www.youtube.com/watch?v=VzyvpFvon0g https://blueprintue.com/blueprint/wg_vyr4o/ browser まず下記のmaterialをBP_browserに追加したwidget componentで呼び出します。collisionでcontrolします。\nhttps://blueprintue.com/blueprint/-49_059w/ https://blueprintue.com/blueprint/uubw_6ay/ earth 基本的にはearth(mesh)をcollision(begin/end)でvisible(表示切替)すると良いと思いますが、安定はしません。また、横から惑星に入るとキャラクターの動作が停止する問題があります。これは平面ベースにmapが作成されているからだと思いますが、回避は難しいでしょう。一応、planetary oceansというassetは売られています。ですが、そこに既存の置物(陸地、建物)を置くのは難しく、置けたとしてもキャラクターの移動に問題が生じるかもしれません。\nhttps://www.fab.com/listings/ea195c94-00af-43fb-bb1d-85a478320a27\nvrm4u vrm-0とvrm-1.0を使ってみましたが、まだvrm-0がオススメです。vrm-1.0は前髪が少し浮かんでしまう問題があります。また、影の問題が出たのでvrm-0で再構築しました。\n構築方法はベースにSSSProfileを使用します。次にunlitで生成したskをもとに/Plugins/VRM4UContent/Util/Actor/PostShadow/BP_PoseCopyToonでcustomを生成します。詳しくは/Plugins/VRM4UContent/ImportDataSet/DS_VRM_Customを見てください。\n/Blueprints/CBP_SandboxCharacterでskにVrmPoseableMeshを追加してcustomで作ったskを当てます。次にBP_VrmOutlineComponentを追加して同じくcustomやunlitなどを当て、設定にてCommon Width:0.05, Use Common Material:trueにします。\n/Plugins/VRM4UContent/Util/Actor/PostShadow/BP_PoseCopyToon VrmPoseableMesh BP_VrmOutlineComponent game animation sample [issue] 1. anim montageなどを呼び出してそのまま再生が難しい 2. CPB_SandboxCharacterで別のABPを読み込んでも制御できない - 浮かんでいるときの手 - BP_Superhero_FlightComponentのSprint Fly Speedを変更できない /Blueprints/RetargetedCharacters/ABP_GenericReatagetで変数のIKRetargeter_MapにてRTG_UEFN_${name}を追加します。CBP_Sandbox_Character_${name}を作ります。開いてsk(Manny)などにあるComponent TagsにRTG_UEFN_${name}を追加します。最後にGameMode : GM_Sandbox \u0026gt; Bone : CBP_SandboxCharacter_${name}を指定して起動すればokです。\n/Blueprints/RetargetedCharacters/ABP_GenericReataget : IKRetargeter_Map /Blueprints/RetargetedCharacters/CBP_Sandbox_Character_${name} -\u0026gt; sk -\u0026gt; Component Tags:RTG_UEFN_${name} ","description":"","formated_time":"2024-11-19","href":"https://syui.github.io/blog/post/2024/11/19/ue55/","tags":["ue"],"title":"ue5.5で作り直す","utc_time":"2024-11-19T00:00:00Z"},{"categories":null,"contents":"いよいよm1の前に使っていたmacbook air(intel)の使い道がなくなっていたので、archをinstallすることにしました。例えば、homebrewはmac-intelのsupportを打ち切っています。packageのinstallはbuildが必要になり、現実的使用が困難です。\n私がapple製品を買うのはハードがいいからです(長持ちです)。ただし、バッテリーは何度か交換しています。\nしかし、近年は少し事情が変わってきました。apple製品を買うならgpuを買ったほうがいいかもしれません。私ならそうします。\ninstall installは簡単で/にpacstrapでarch(linux,base)を入れること。bootを設定することです。grubが簡単なのでgrubを使用します。bootloaderは起動時にlinux.imgを実行したり選択するものです。\n$ fdisk -l /dev/nvme0n1p1 /dev/nvme0n1p2 $ mkfs.vfat /dev/nvme0n1p1 $ mkfs.ext4 /dev/nvme0n1p2 $ mount /dev/nvme0n1p2 /mnt $ mkdir -p /mnt/boot/efi $ mount /dev/nvme0n1p1 /mnt/boot/efi $ pacstrap /mnt base linux grub efibootmgr $ arch-chroot /mnt # grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=arch_grub $ grub-install --force /dev/nvme0n1p1 $ grub-mkconfig -o /boot/grub/grub.cfg $ passwd $ useradd -m -g wheel -s /bin/bash ${username} $ passwd ${username} $ pacman -S base-devel zsh git vim tmux sudo dhcpcd openssh $ systemctl enable dhcpcd $ systemctl enable sshd $ chsh -s /bin/zsh network dhcpcdを使う方法とsystemd-networkdを使う方法があります。基本的にどのlinuxもdhcpcdを入れておりnetworkを設定しています。\nまずkernelで自動設定されるインターフェイス名をeth0などに戻しましょう。\n$ ip route show enp0s12 192.168.1.23 # 伝統的な名前を使う $ mkdir -p /etc/systemd/network/99-default.link.d $ vim /etc/systemd/network/99-default.link.d/traditional-naming.conf [Link] NamePolicy=keep kernel # こちらの方法も使える $ ln -s /dev/null /etc/udev/rules.d/80-net-setup-link.rules dhcpcd /etc/dhcpcd.conf\ninterface eth0 static ip_address=192.168.1.23/24\tstatic routers=192.168.1.1 static domain_name_servers=192.168.1.1 1.1.1.1 systemd-networkd $ systemctl disable dhcpcd $ vim /etc/systemd/network/eth.network [Match] Name=eth0 [Network] Address=192.168.1.23/24 Gateway=192.168.1.1 DNS=192.168.1.1 $ systemctl enable systemd-networkd なお、デバイスによってはこの方法で接続できない場合があります。その場合はdhcpcdが有効です。\nnameserverは/etc/resolv.confを見てください。\nssh 次にsshで接続する方法です。\n# 接続する側 $ ssh-keygen -f ~/.ssh/archlinux $ ssh-copy-id -i ~/.ssh/archlinux.pub ${username}@192.168.1.23 # 接続される側:archlinux $ vim /etc/ssh/sshd_config PasswordAuthentication no $ systemctl restart sshd $ ssh ${username}@192.168.1.23 xorg デスクトップ環境の構築です。\n$ pacman -S tilix xterm zsh git tmux chromium otf-ipaexfont i3 xorg xorg-xinit pcmanfm lightdm lightdm-gtk-greeter # autologin $ groupadd -r autologin $ gpasswd -a $USER autologin $ vim /etc/lightdm/lightdm.conf [Seat:*] pam-service=lightdm pam-autologin-service=lightdm-autologin autologin-user=${USER} autologin-user-timeout=0 session-wrapper=/etc/lightdm/Xsession autologin-session=i3 $ systemctl enable lightdm displayが暗くならないようにする $ vim ~/.xinitrc xset s off -dpms 蓋を閉じてもsleepしないようにする /etc/systemd/logind.conf\nHandleLidSwitch=suspend HandleLidSwitchExternalPower=ignore HandleLidSwitchDocked=ignore ","description":"","formated_time":"2024-10-29","href":"https://syui.github.io/blog/post/2024/10/29/archlinux/","tags":["arch","macbook"],"title":"macbook air(intel)にarchlinuxをinstallした","utc_time":"2024-10-29T00:00:00Z"},{"categories":null,"contents":"前回、live配信にatprotoでoauth loginして掲示板(bbs)に書き込めるサイトを作成し、bbsは簡単にrustで自作したものを使っていました。\nしかし、やはり機能的に不足していたのと、公式のoauth exampleがpythonで書かれていたため、python + rustでやっていました。\nそこにlikeandscribe/frontpageというものを見つけて、これはいいものだと思ったので触っていきます。\n詳しくはこちらを見てください。\nhttps://frontpage.fyi/post/tom.frontpage.team/3l6nbjyjmcg2v これがどういったものかというと、おそらく、bsky.socialとは別サービスですがoauthでlogin(signin)でき、投稿情報は自身のpdsに保存されるのでしょう。また、drainpipeはこう書かれています。\nDrainpipe is a atproto firehose consumer written in rust. It knows how to reliably* take messages from the firehose, filter them, and forward them over HTTPs to a webhook receiver some place else on the internet.\n$ git clone https://github.com/likeandscribe/frontpage $ cd !$:t $ nvm use 20 $ pnpm i $ cat turbo.json $ pnpm exec turbo run --affected type-check turboを見て分かる通り、dbはtursoを使用するようです。また、drainpipeはfly.ioですね。\nTURSO_CONNECTION_URL TURSO_AUTH_TOKEN $ cd packages-rs/drainpipe $ cargo install diesel_cli --no-default-features --features sqlite $ diesel setup $ diesel migration run $ cp .env .env.local FRONTPAGE_CONSUMER_SECRET $ docker compose up なお、ubuntuなどrustcのversionが古い場合はrustupを使ってpathを設定してください。\n$ rustup update # ~/.zshrc export PATH=\u0026#34;$HOME/.cargo/bin:$PATH\u0026#34; . $HOME/.cargo/env $ cd packages/frontpage $ pnpm exec tsx ./scripts/generate-jwk.mts # https://docs.turso.tech/quickstart $ turso db create TURSO_CONNECTION_URL TURSO_AUTH_TOKEN DRAINPIPE_CONSUMER_SECRET $ pnpm run db:generate $ pnpm run db:migrate $ cloudflared tunnel --url http://localhost:3000 $ pnpm run dev 基本的にdrainpipeを裏で動かします。これがpostを取得したり投稿したりします。\n# .env.local - FRONTPAGE_CONSUMER_URL=\u0026#34;http://localhost:3000/api/receive_hook\u0026#34; + FRONTPAGE_CONSUMER_URL=\u0026#34;http://example.com/api/receive_hook\u0026#34; rewrite $ cd packages/frontpage $ PUBLIC_URL=example.com $ grep -R frontpage.fyi .|cut -d : -f 1|sed -i \u0026#34;s/frontpage.fyi/$PUBLIC_URL/g\u0026#34; pnpm run startとpnpm run devではclient_idが異なります。これは/oauth/client-metadata.jsonを見てください。\n# .env.local # packages/frontpage/lib/auth.ts VERCEL_PROJECT_PRODUCTION_URL=example.com VERCEL_BRANCH_URL=example.com local-infra self-hostするのに必要なserver構成だと思います。\nhttps://github.com/likeandscribe/frontpage/tree/main/packages/frontpage/local-infra\n$ cd local-infra $ cat README.md docker-compose up Create a test account with ./scripts/create-account.sh \u0026lt;email\u0026gt; \u0026lt;handle\u0026gt; DRAINPIPE_CONSUMER_SECRET=secret TURSO_CONNECTION_URL=libsql://turso.dev.unravel.fyi PLC_DIRECTORY_URL=https://plc.dev.unravel.fyi これらのnameserverはcaddyを見てください。\nplcはerrorが出るので、以下のようにします。おそらく、postgresのdatabaseが必要なのでしょう。portsは開けなくて大丈夫です。\nplc: image: ghcr.io/bluesky-social/did-method-plc:plc-f2ab7516bac5bc0f3f86842fa94e996bd1b3815b container_name: plc restart: unless-stopped ports: - \u0026#39;4000:8080\u0026#39; depends_on: - plc_db env_file: - ./plc.env plc_db: image: postgres:16-alpine restart: always env_file: - ./postgres.env volumes: - ./configs/postgres/init/:/docker-entrypoint-initdb.d/ - ./data/postgres/:/var/lib/postgresql/data/ healthcheck: test: \u0026#34;pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB\u0026#34; interval: 5s retries: 20 # plc.env DEBUG_MODE=1 LOG_ENABLED=true LOG_LEVEL=debug LOG_DESTINATION=1 PORT=8080 DATABASE_URL=postgres://postgres:postgres@plc_db/plc DB_CREDS_JSON=\u0026#39;{\u0026#34;username\u0026#34;:\u0026#34;postgres\u0026#34;,\u0026#34;password\u0026#34;:\u0026#34;postgres\u0026#34;,\u0026#34;host\u0026#34;:\u0026#34;plc_db\u0026#34;,\u0026#34;port\u0026#34;:\u0026#34;5432\u0026#34;,\u0026#34;database\u0026#34;:\u0026#34;plc\u0026#34;}\u0026#39; ENABLE_MIGRATIONS=true DB_MIGRATE_CREDS_JSON=\u0026#39;{\u0026#34;username\u0026#34;:\u0026#34;postgres\u0026#34;,\u0026#34;password\u0026#34;:\u0026#34;postgres\u0026#34;,\u0026#34;host\u0026#34;:\u0026#34;plc_db\u0026#34;,\u0026#34;port\u0026#34;:\u0026#34;5432\u0026#34;,\u0026#34;database\u0026#34;:\u0026#34;plc\u0026#34;}\u0026#39; pds 大体の原理が理解できてきたので、わかっていることをまとめます。\nまずoauth(session)でpdsUrlをgetする感じなのかなと思います。sessionがあれば投稿などは操作できます。\n$ grep -R pdsUrl . ./lib/data/user.ts: const pdsUrl = await getPdsUrl(session.user.did); あるいはws://pds:3000を使用する可能性も考えられますが、基本はbsky.networkを使うのだと思います。\nRELAY_URL=wss://bsky.network 次にunravel.frontpageについてです。これは主にcollectionに書き込まれているようです。この場合、frontpage.fyiと投稿は共通します。\n$ grep -R unravel.frontpage ./app ./lib ./app/api/receive_hook/route.ts: if (collection === \u0026#34;fyi.unravel.frontpage.vote\u0026#34;) { ./lib/data/atproto/comment.ts:export const CommentCollection = \u0026#34;fyi.unravel.frontpage.comment\u0026#34;; ./lib/data/atproto/vote.ts: collection: \u0026#34;fyi.unravel.frontpage.vote\u0026#34;, ./lib/data/atproto/vote.ts: collection: \u0026#34;fyi.unravel.frontpage.vote\u0026#34;, ./lib/data/atproto/event.ts: z.literal(\u0026#34;fyi.unravel.frontpage.vote\u0026#34;), ./lib/data/atproto/post.ts:export const PostCollection = \u0026#34;fyi.unravel.frontpage.post\u0026#34;; # HOST_REVERT=com.unravel.example # grep -R unravel.frontpage ./app ./lib |cut -d : -f 1|xargs sed -i \u0026#34;s/fyi.unravel.frontpage/${HOST_REVERT}/g\u0026#34; // https://atproto.com/ja/guides/applications // レコードの時間ベースのキーを生成します const rkey = TID.nextStr() // 書き込み await agent.com.atproto.repo.putRecord({ repo: agent.assertDid, // ユーザー collection: \u0026#39;xyz.statusphere.status\u0026#39;, // コレクション rkey, // レコード キー record: { // レコード値 status: \u0026#34;👍\u0026#34;, createdAt: new Date().toISOString() } }) drainpipeはpdsのfyi.unravel.frontpage(collection)を検索してfirehoseのsubscribeReposにcommitするようです。この2つの部分を変更するとfrontpage.fyiと連動しません。\nlet mut ws_request = format!( \u0026#34;{}/xrpc/com.atproto.sync.subscribeRepos{}\u0026#34;, relay_url, query_string ) // https://github.com/likeandscribe/frontpage/blob/e7444ec6c19f0ccef3776f04702c3bb033ed3bfc/packages-rs/drainpipe/src/main.rs#L66-L97 /// Process a message from the firehose. Returns the sequence number of the message or an error. async fn process(message: Vec\u0026lt;u8\u0026gt;, ctx: \u0026amp;mut Context) -\u0026gt; Result\u0026lt;i64, ProcessError\u0026gt; { let (_header, data) = firehose::read(\u0026amp;message).map_err(|e| ProcessError { inner: e.into(), seq: -1, source: message.clone().into(), kind: ProcessErrorKind::DecodeError, })?; let sequence = match data { firehose::SubscribeRepos::Commit(commit) =\u0026gt; { let frontpage_ops = commit .operations .iter() .filter(|op| op.path.starts_with(\u0026#34;com.unravel.example.\u0026#34;)) //.filter(|op| op.path.starts_with(\u0026#34;fyi.unravel.frontpage.\u0026#34;)) .collect::\u0026lt;Vec\u0026lt;_\u0026gt;\u0026gt;(); if !frontpage_ops.is_empty() { process_frontpage_ops(\u0026amp;frontpage_ops, \u0026amp;commit, \u0026amp;ctx) .map_err(|e| ProcessError { seq: commit.sequence, inner: e, source: message.clone().into(), kind: ProcessErrorKind::ProcessError, }) .await?; } commit.sequence } msg =\u0026gt; msg.sequence(), }; Ok(sequence) } ただ、infraのpdsはpds.dev.unravel.fyiとなっていて、中の人の話を聞くとfrontpage.fyiのpdsにpostされるように感じました。\n","description":"","formated_time":"2024-10-26","href":"https://syui.github.io/blog/post/2024/10/26/frontpage/","tags":["cloudflare","bluesky","atproto"],"title":"atprotoのfrontpageを触ってみる","utc_time":"2024-10-26T00:00:00Z"},{"categories":null,"contents":"youtubeのlivestreamはchatのような書き込みができます。それを再現します。\nまずはblueskyのoauthが動作するかの確認です。これはbluesky-social/cookbookを使います。\n# https://github.com/bluesky-social/cookbook/tree/main/python-oauth-web-app $ cd ./repos/cookbook/python-oauth-web-app $ rye sync $ rye run python3 -c \u0026#39;import secrets; print(secrets.token_hex())\u0026#39;|xargs echo FLASK_SECRET_KEY|tr -d \u0026#39; \u0026#39; \u0026gt;\u0026gt; .env $ rye run python3 generate_jwk.py |xargs echo FLASK_CLIENT_SECRET_JWK|tr -d \u0026#39; \u0026#39; \u0026gt;\u0026gt; .env $ cat .env $ rye run flask run oauthはlocalhostでは動作しません。したがって、ngrok, tailscale, cloudflareなどを使用します。個人的にはcloudflareがおすすめです。\n$ cloudflared tunnel --url http://localhost:5000 表示されるurlにアクセスするとoauthでloginすることができました。oauthの情報はserverに保存されており以後は承認なしにlogin可能となります。\nbbsと連携する 今回はloginしている場合にbbsの書き込みシステムを表示します。\n{% block content %} {% if g.user %} \u0026lt;p\u0026gt;@{{ g.user[\u0026#39;handle\u0026#39;] }}\u0026lt;/p\u0026gt; \u0026lt;iframe src=\u0026#34;example.com?handle={{ g.user[\u0026#39;handle\u0026#39;] }}\u0026#34;\u0026gt;\u0026lt;/iframe\u0026gt; {% endif %} bbsを作ります。\n[package] name = \u0026#34;rust-bbs\u0026#34; version = \u0026#34;0.1.0\u0026#34; edition = \u0026#34;2021\u0026#34; [dependencies] actix-web = \u0026#34;4.0\u0026#34; rusqlite = { version = \u0026#34;0.28\u0026#34;, features = [\u0026#34;bundled\u0026#34;] } serde = { version = \u0026#34;1.0\u0026#34;, features = [\u0026#34;derive\u0026#34;] } askama = \u0026#34;0.11\u0026#34; use actix_web::{web, App, HttpServer, HttpResponse, Responder}; use rusqlite::{Connection, Result as SqliteResult}; use serde::{Deserialize, Serialize}; use askama::Template; #[derive(Serialize, Deserialize)] struct Post { id: i32, content: String, } #[derive(Template)] #[template(path = \u0026#34;index.html\u0026#34;)] struct IndexTemplate { posts: Vec\u0026lt;Post\u0026gt;, } #[derive(Template)] #[template(path = \u0026#34;post.html\u0026#34;)] struct PostTemplate {} fn init_db() -\u0026gt; SqliteResult\u0026lt;()\u0026gt; { let conn = Connection::open(\u0026#34;sqlite.db\u0026#34;)?; conn.execute( \u0026#34;CREATE TABLE IF NOT EXISTS posts ( id INTEGER PRIMARY KEY, content TEXT NOT NULL )\u0026#34;, [], )?; Ok(()) } async fn index() -\u0026gt; impl Responder { let conn = Connection::open(\u0026#34;sqlite.db\u0026#34;).unwrap(); let mut stmt = conn.prepare(\u0026#34;SELECT id, content FROM posts ORDER BY id DESC\u0026#34;).unwrap(); let posts = stmt.query_map([], |row| { Ok(Post { id: row.get(0)?, content: row.get(1)?, }) }).unwrap().filter_map(Result::ok).collect::\u0026lt;Vec\u0026lt;Post\u0026gt;\u0026gt;(); let template = IndexTemplate { posts }; HttpResponse::Ok().body(template.render().unwrap()) } async fn post_form() -\u0026gt; impl Responder { let template = PostTemplate {}; HttpResponse::Ok().body(template.render().unwrap()) } #[derive(Deserialize)] struct FormData { content: String, } async fn submit_post(form: web::Form\u0026lt;FormData\u0026gt;) -\u0026gt; impl Responder { let conn = Connection::open(\u0026#34;sqlite.db\u0026#34;).unwrap(); conn.execute( \u0026#34;INSERT INTO posts (content) VALUES (?1)\u0026#34;, [\u0026amp;form.content], ).unwrap(); web::Redirect::to(\u0026#34;/\u0026#34;).see_other() } #[actix_web::main] async fn main() -\u0026gt; std::io::Result\u0026lt;()\u0026gt; { init_db().unwrap(); HttpServer::new(|| { App::new() .route(\u0026#34;/\u0026#34;, web::get().to(index)) .route(\u0026#34;/post\u0026#34;, web::get().to(post_form)) .route(\u0026#34;/submit\u0026#34;, web::post().to(submit_post)) }) .bind(\u0026#34;0.0.0.0:8080\u0026#34;)? .run() .await } \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Simple BBS\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Simple BBS\u0026lt;/h1\u0026gt; \u0026lt;a href=\u0026#34;/post\u0026#34;\u0026gt;New Post\u0026lt;/a\u0026gt; \u0026lt;ul\u0026gt; {% for post in posts %} \u0026lt;li\u0026gt;{{ post.content }}\u0026lt;/li\u0026gt; {% endfor %} \u0026lt;/ul\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;New Post\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;New Post\u0026lt;/h1\u0026gt; \u0026lt;form action=\u0026#34;/submit\u0026#34; method=\u0026#34;post\u0026#34;\u0026gt; \u0026lt;textarea name=\u0026#34;content\u0026#34; required\u0026gt;\u0026lt;/textarea\u0026gt; \u0026lt;br\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Post\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; services: web: build: . ports: - \u0026#34;8080:8080\u0026#34; volumes: - ./sqlite.db:/sqlite.db FROM syui/aios WORKDIR /usr/src/app COPY . . RUN cargo build --release COPY ./templates /templates CMD [\u0026#34;/usr/src/app/target/release/rust-bbs\u0026#34;] $ cargo build $ ./target/debug/rust-bbs $ docker compose up $ curl -sL localhost:8080 あとは、iframeからparamでhandleを取得するので、それを使用するようにしたり、cssで見栄えを整えたら完成です。\n要点だけまとめたので適時修正してください。redirectしたときにurlを変更しないとiframeで呼び出したとき2回目からはhandleが使えません。\nasync fn submit_post( req: HttpRequest, form: web::Form\u0026lt;FormData\u0026gt; ) -\u0026gt; Result\u0026lt;impl Responder, Error\u0026gt; { let query = web::Query::\u0026lt;QueryParams\u0026gt;::from_query(req.query_string()) .unwrap_or_else(|_| web::Query(QueryParams { handle: None })); //let handle = query.handle.clone().filter(|h| !h.is_empty()); //println!(\u0026#34;Debug: Extracted handle: {:?}\u0026#34;, handle); let handle = if !form.handle.is_empty() { form.handle.clone() } else { query.handle.clone().unwrap_or_default() }; println!(\u0026#34;Debug: Using handle: {:?}\u0026#34;, handle); let conn = Connection::open(\u0026#34;sqlite.db\u0026#34;) .map_err(|_| ErrorInternalServerError(\u0026#34;Database connection failed\u0026#34;))?; let result = conn.execute( \u0026#34;INSERT INTO posts (handle, content) VALUES (?1, ?2)\u0026#34;, \u0026amp;[\u0026amp;form.handle, \u0026amp;form.content], ); match result { Ok(_) =\u0026gt; { let redirect_url = if !handle.is_empty() { format!(\u0026#34;/?handle={}\u0026#34;, handle) } else { \u0026#34;/\u0026#34;.to_string() }; Ok(HttpResponse::SeeOther() .append_header((\u0026#34;Location\u0026#34;, redirect_url)) .finish()) }, //Ok(_) =\u0026gt; Ok(web::Redirect::to(\u0026#34;/\u0026#34;).see_other()), Err(_) =\u0026gt; Err(ErrorInternalServerError(\u0026#34;Failed to insert post\u0026#34;)), } } \u0026lt;form action=\u0026#34;/submit\u0026#34; method=\u0026#34;post\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;hidden\u0026#34; name=\u0026#34;handle\u0026#34; id=\u0026#34;handleInput\u0026#34;\u0026gt; \u0026lt;textarea name=\u0026#34;content\u0026#34; required\u0026gt;\u0026lt;/textarea\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Post\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;script\u0026gt; function getHandleFromUrl() { const urlParams = new URLSearchParams(window.location.search); return urlParams.get(\u0026#39;handle\u0026#39;); } window.onload = function() { const handle = getHandleFromUrl(); if (handle) { document.getElementById(\u0026#39;handleInput\u0026#39;).value = handle; } else { document.getElementById(\u0026#39;handleInput\u0026#39;).value = \u0026#34;anonymous\u0026#34;; } }; \u0026lt;/script\u0026gt; {% if g.user %} @{{ g.user[\u0026#39;handle\u0026#39;] }} \u0026lt;iframe id=\u0026#34;livechat\u0026#34; title=\u0026#34;bskychat\u0026#34; width=\u0026#34;100%\u0026#34; height=\u0026#34;500\u0026#34; src=\u0026#34;example.com/?handle={{ session[\u0026#39;user_handle\u0026#39;] }}\u0026#34;\u0026gt;\u0026lt;/iframe\u0026gt; {% endif %} ","description":"","formated_time":"2024-10-21","href":"https://syui.github.io/blog/post/2024/10/21/bbs/","tags":["cloudflare","bluesky"],"title":"blueskyのoauthとbbsをlivestream serviceに実装する","utc_time":"2024-10-21T00:00:00Z"},{"categories":null,"contents":"live配信するには様々な方法があり、色々と検討していますが、やはりobsを使うのが一番いいという結論になりました。今回は配信環境を構築する方法を紹介します。\nhttps://github.com/obsproject/obs-studio\nue5を使うのはリスクが大きく拡張性がない pixel streamingを使った配信を考えました。操作機能を無効にして配信する方法です。\nしかし、これには問題が多かった。\n例えば、すべての機能をueで実装する必要があります。\n一応実装してみましたが大変な上に不便が多かった。例えば、ゲームがクラッシュすると音声などが途切れますよね。\nue5だけで完結することだけが魅力ですが、拡張性がありませんし、リスクが大きいのです。\nrestreamerを使う 次に検討したのはrestreamerを使う方法です。これは配信serverのようなもので、簡易ですがpageもカスタマイズできます。\nhttps://github.com/datarhei/restreamer\nservices: restreamer: image: datarhei/restreamer #image: datarhei/restreamer:cuda-latest ports: - 8080:8080 - 1935:1935 - 6000:6000/udp restart: always volumes: - ./data/config:/core/config - ./data/data:/core/data 8080がweb, 1935がrtmp, 6000がsrtです。rtmpとsrtではsrtのほうが高品質で遅延が少なくなると思います。使わないものはportを閉じてもokです。基本的にはバッティングなどもありますから以下のようにlocahostのportを変えて使うのがいいですね。\nservices: restreamer: ports: - 8980:8080 - 1835:1935 - 6700:6000/udp 使い方は簡単で最初にwebにアクセスしてadminを作ります。設定を行い、domain(ip)を127.0.0.1にします。ここではsrt protocolを使います。obsで配信をカスタムにしてrestreamerで発行されたurlを使用すればokです。\nなお、同じserverでない場合はobsに設定するurlはipv4に変換します。\n- srt://127.0.0.1:6700 + srt://192.168.1.99:6700 systemからexpert modeを選択しましょう。\n現時点で録画機能はありません。つまり、配信終了時にffmpegでconvertしてdocker volumeに保存し、再視聴が可能になる機能があると嬉しいですね。\nhttps://github.com/datarhei/restreamer/issues/692\nmediacmsに保存する https://github.com/mediacms-io/mediacms\nmediacmsを使用することで録画をuploadすることは可能です。obsで配信、録画を行い、終了時にmediacmsにuploadする方法です。\nしかし、別のpageに移動しなければなりませんし、管理システムが異なるので良い方法とは言えません。\n一番いいのはyoutubeを利用することですが、すべて自前で構築する場合はrestreamer + mediacmsが良さそう。\n","description":"","formated_time":"2024-10-20","href":"https://syui.github.io/blog/post/2024/10/20/stream/","tags":["cloudflare"],"title":"restreamerでobsを配信する","utc_time":"2024-10-20T00:00:00Z"},{"categories":null,"contents":"https://docs.wasmer.io/install\n$ wasmer run wasmer/wasmer-sh -- --port 4480 --host 127.0.0.1 $ wasmer login $ wasmer deploy wasmer/wasmer-sh # custom domain https://docs.wasmer.io/edge/configuration/custom-domains https://wterm-syui.wasmer.app/\n# https://wterm-syui.wasmer.app/ $ wasmer run clang/clang example.c -o example.wasm $ ls $ ./example.wasm ","description":"","formated_time":"2024-10-12","href":"https://syui.github.io/blog/post/2024/10/12/wasmer/","tags":["wasm"],"title":"wasmでwasmer-shを動かしてみる","utc_time":"2024-10-12T00:00:00Z"},{"categories":null,"contents":"unreal engine 5.5.0 preview(ue5.5p)がインストールできるようになっています。今回は最新環境のvmc事情を解説します。\nvmcとは webカメラから表情や動きをキャラクターに反映させるためのものです。vmcはprotocolとclientがあります。大抵はprotocolを指します。webカメラからの読み取りをcaptureといいます。つまり、captureとprotocolとclientを組みわせて動作します。ueで使うには更にvmcを受信してキャラクターに反映させるpluginが必要です。わけがわからないと思いますが、そんな感じです。\nhttps://github.com/sh-akira/VirtualMotionCapture https://github.com/ruyo/VRM4U https://github.com/HAL9HARUKU/VMC4UE https://github.com/HAL9HARUKU/ueOSC https://github.com/HAL9HARUKU/VRMMapExporter https://github.com/vrm-c/UniVRM vmc4ueをue5.5でbuildしてみよう この手順は興味がある人以外は読み飛ばすことを推奨します。表情を動かしたい人はこの方法で問題を解決することができません。\nvmc4ueはue5.1までしかbuildされていません。そこでue5.5でbuildして使えるようにしてみます。\nまずc++でprojectを作成し、patchをsrcに当てて$project/Plugins/に入れます。projectをueで開くとbuildされます。正常に終了するとeditorが開きます。\nc++で作成したprojectには$project.slnが作成されますので、それを開いてrebuildしてもいいです。\nなお、patchはbuildが通るよう適当に作ったものです。vmcは動きますが、表情は動きませんでした。\n--- ./VMC4UE/VMC4UE/Source/VMC4UE/Source/VMC4UEBlueprintFunctionLibrary.cpp +++ ./VMC4UEBlueprintFunctionLibrary.cpp @@ -119,27 +119,29 @@ UVMC4UEStreamingSkeletalMeshTransform* UVMC4UEBlueprin { return nullptr; } -\t+ +\tUVMC4UEStreamingSkeletalMeshTransform* StreamingSkeletalMeshTransform = nullptr; + +\t// Try to get existing transform { -\t// Get FRWScopeLock RWScopeLock(OSCManager-\u0026gt;RWLock, FRWScopeLockType::SLT_ReadOnly); -\tauto StreamingSkeletalMeshTransform = OSCManager-\u0026gt;StreamingSkeletalMeshTransformMap.Find(Port); -\tif (StreamingSkeletalMeshTransform != nullptr) +\tauto FoundTransform = OSCManager-\u0026gt;StreamingSkeletalMeshTransformMap.Find(Port); +\tif (FoundTransform != nullptr) { -\treturn *StreamingSkeletalMeshTransform; +\treturn *FoundTransform; } } + +\t// Create new transform if not found { -\t// Create FRWScopeLock RWScopeLock(OSCManager-\u0026gt;RWLock, FRWScopeLockType::SLT_Write); -\tauto StreamingSkeletalMeshTransform = OSCManager-\u0026gt;StreamingSkeletalMeshTransformMap.Find(Port); -\tif (StreamingSkeletalMeshTransform != nullptr) +\tauto FoundTransform = OSCManager-\u0026gt;StreamingSkeletalMeshTransformMap.Find(Port); +\tif (FoundTransform != nullptr) { -\treturn *StreamingSkeletalMeshTransform; +\treturn *FoundTransform; } -\tUVMC4UEStreamingSkeletalMeshTransform* NewStreamingSkeletalMeshTransform = NewObject\u0026lt;UVMC4UEStreamingSkeletalMeshTransform\u0026gt;(); -\t//FRWScopeLock RWScopeLock2(NewStreamingSkeletalMeshTransform-\u0026gt;RWLock, FRWScopeLockType::SLT_Write); +\tUVMC4UEStreamingSkeletalMeshTransform* NewStreamingSkeletalMeshTransform = NewObject\u0026lt;UVMC4UEStreamingSkeletalMeshTransform\u0026gt;(); OSCManager-\u0026gt;StreamingSkeletalMeshTransformMap.Emplace(Port, NewStreamingSkeletalMeshTransform); // Bind Port @@ -149,9 +151,10 @@ UVMC4UEStreamingSkeletalMeshTransform* UVMC4UEBlueprin OSCManager-\u0026gt;OscReceivers.Emplace(OscReceiver); -\treturn NewStreamingSkeletalMeshTransform; +\tStreamingSkeletalMeshTransform = NewStreamingSkeletalMeshTransform; } -\treturn nullptr; + +\treturn StreamingSkeletalMeshTransform; } void UVMC4UEBlueprintFunctionLibrary::RefreshConnection(float Seconds) --- ./VMC4UE/Source/VMC4UEEd/Source/VMC4UEBoneMappingAssetFactory.cpp +++ ./VMC4UEBoneMappingAssetFactory.cpp @@ -5,6 +5,8 @@ #include \u0026#34;../../VMC4UE/Include/VMC4UEStreamingData.h\u0026#34; #include \u0026#34;Dom/JsonObject.h\u0026#34; #include \u0026#34;JsonObjectConverter.h\u0026#34; +#include \u0026#34;UObject/ConstructorHelpers.h\u0026#34; +#include \u0026#34;UObject/UObjectGlobals.h\u0026#34; UVMC4UEBoneMappingAssetFactory::UVMC4UEBoneMappingAssetFactory(const FObjectInitializer \u0026amp;ObjectInitializer) : Super(ObjectInitializer) @@ -26,11 +28,12 @@ return UVMC4UEVRMMapping::StaticClass(); } + UObject *UVMC4UEBoneMappingAssetFactory::FactoryCreateText(UClass *InClass, UObject *InParent, FName InName, EObjectFlags Flags, UObject *Context, const TCHAR *Type, const TCHAR *\u0026amp;Buffer, const TCHAR *BuferEnd, FFeedbackContext *Warn) { FString TextData = FString(Buffer); - UVMC4UEVRMMapping *NewAsset = CastChecked\u0026lt;UVMC4UEVRMMapping\u0026gt;(StaticConstructObject_Internal(InClass, InParent, InName, Flags)); + UVMC4UEVRMMapping* NewAsset = NewObject\u0026lt;UVMC4UEVRMMapping\u0026gt;(InParent, InClass, InName, Flags); if (!IsValid(NewAsset)) { return nullptr; $ git clone https://github.com/HAL9HARUKU/VMC4UE $ patch -u ./VMC4UE/VMC4UE/Source/VMC4UE/Source/VMC4UEBlueprintFunctionLibrary.cpp \u0026lt; VMC4UEBlueprintFunctionLibrary.cpp.patch $ patch -u ./VMC4UE/VMC4UE/Source/VMC4UEEd/Source/VMC4UEBoneMappingAssetFactory.cpp \u0026lt; VMC4UEBoneMappingAssetFactory.cpp.patch vrm4uを5.5向けにbuildしてみる この手順は興味がある人以外は読み飛ばすことを推奨します。表情を動かしたい人はこの方法で問題を解決することができません。\nvrm4uは既に5.5のbuildをreleasesしています。\nただいくつかの処理が5,4,0向けのようです。それを書き直してbuildしてみます。\n$ git clone https://github.com/ruyo/VRM4U $ cd VRM4U $ git reset --hard a261860872936c8654e1705a91cff6f8224dbee5 $ grep -R 5,4,0 ./Source/*|cut -d : -f 1|xargs sed -i \u0026#39;\u0026#39; \u0026#39;s/5,4,0/5,5,0/g\u0026#39; $ grep -R 5,5,0 . これを先程と同じ手順でue5.5で開いてbuildします。\nvrm4u(vmc)はbuild後にも表情を動かせるのだろうか わかりません。私の環境下では動きませんでした。他の人も動かない可能性がありますが、issueを読む限り動くようにも思えます。\nこの問題はvrm4u 20241007で修正されました\nissue : https://git.syui.ai/ai/ue/issues/9\nそれではどうするのか。livelink(face)を使います。ここからは少しめんどくさいことになりますが、かなり多くのアプリが必要です。\n動き : webcam motion capture(vmc送信) + vseeface(vmc受信/送信) + vrm4u(vmc受信) 表情 : iphone + livelink face まず、vrm4uはwebcam motion captureのvmcを直接受信できません。なので、一旦、vseefaceなどのclientで受信する必要があります。それをvrm4uで受信するportに送信します。なお、vmc4ueでは直接受信できて動きます。また、xr-animator, vseeface, vmc(client)も受信できて動いています。不思議な現象です。\nvrm4u(vmc)はbuild後は表情が動かないので、表情はlivelinkを使用します。これはiphoneにlivelink faceというappがあります。ueでいくつかのpluginを有効にします。\nlive link apple arkit apple arkit face support /VRM4U/Util/Actor/latest/BP_LiveLinkFaceをmapにおいて、live link subject -\u0026gt; iphone, target actor sk -\u0026gt; SK_$nameを設定します。\nこれでbuildすると表情を動かすことができます。\ncharacter(player)にlivelinkを当てるには character(player)にlivelinkを当てるにはblueprintを編集する必要があります。characterのdirにでもBP_LiveLinkFaceをcopyしてBP_Player(CBP_Character)に追加します。\nここでBP_LiveLinkFace -\u0026gt; livelink subject -\u0026gt; iphoneをセットしておきます。\n次にBP_LiveLinkFaceを以下のような形でsk_$nameに置き換えます。場所はコメントを参考にしてください。私の場合は見た目をカスタマイズしているので少し複雑です。\nhttps://blueprintue.com/blueprint/pu_xl52s/\nvmcで行くべきか 基本的には依存関係が少なく使うアプリが少ないほうがいいですね。vmcの更新頻度やclient, vrm1のsupport状況を見るとueはlivelink路線のほうがいいかもしれません。\n仮にwebcam motion capture -\u0026gt; vrm4uで表情も体も動かせるならvmcで問題ないですが、表情にlivelinkを使うなら全部統一するのがいいですね。\nmocopiやicloneはlivelinkなのでそちらが使えると思います。\n","description":"","formated_time":"2024-10-02","href":"https://syui.github.io/blog/post/2024/10/02/vrm4u/","tags":["vrm","ue"],"title":"ue5.5と最新のvmc事情","utc_time":"2024-10-02T00:00:00Z"},{"categories":null,"contents":"この前、ホログラムを作ってみようと思い10分くらいで作ってみた。必要なものは透明板だけ。それを斜めに設置してスマホで黒背景の3Dモデルを表示する。\nもともと写真立てが余っててそれに付いてる透明板を使った。\n設置にはスマホの箱が便利だった。どちらかに切り込みを入れればいいと思う。\nここまではっきり映るとは思ってなくて驚いた。余ってるスマホを何に使おうと思ってたので、こういうのを表示させておくといいかも。ただし、表記は反転させないといけないみたい。\nreact + tsx + three-vrm 一応、最小限のコードを載せておきます。反転は対応しています。\n{ \u0026#34;name\u0026#34;: \u0026#34;holoai\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;0.1.0\u0026#34;, \u0026#34;private\u0026#34;: true, \u0026#34;dependencies\u0026#34;: { \u0026#34;@pixiv/three-vrm\u0026#34;: \u0026#34;^3.1.1\u0026#34;, \u0026#34;@pixiv/three-vrm-animation\u0026#34;: \u0026#34;^3.1.1\u0026#34;, \u0026#34;@react-three/drei\u0026#34;: \u0026#34;^9.114.0\u0026#34;, \u0026#34;@react-three/fiber\u0026#34;: \u0026#34;^8.17.9\u0026#34;, \u0026#34;@react-three/postprocessing\u0026#34;: \u0026#34;^2.16.3\u0026#34;, \u0026#34;@testing-library/jest-dom\u0026#34;: \u0026#34;^5.17.0\u0026#34;, \u0026#34;@testing-library/react\u0026#34;: \u0026#34;^13.4.0\u0026#34;, \u0026#34;@testing-library/user-event\u0026#34;: \u0026#34;^13.5.0\u0026#34;, \u0026#34;@types/jest\u0026#34;: \u0026#34;^27.5.2\u0026#34;, \u0026#34;@types/node\u0026#34;: \u0026#34;^16.18.112\u0026#34;, \u0026#34;@types/react\u0026#34;: \u0026#34;^18.3.10\u0026#34;, \u0026#34;@types/react-dom\u0026#34;: \u0026#34;^18.3.0\u0026#34;, \u0026#34;@types/three\u0026#34;: \u0026#34;^0.167.2\u0026#34;, \u0026#34;react\u0026#34;: \u0026#34;^18.3.1\u0026#34;, \u0026#34;react-dom\u0026#34;: \u0026#34;^18.3.1\u0026#34;, \u0026#34;react-scripts\u0026#34;: \u0026#34;5.0.1\u0026#34;, \u0026#34;three\u0026#34;: \u0026#34;^0.167.1\u0026#34;, \u0026#34;three-stdlib\u0026#34;: \u0026#34;^2.30.5\u0026#34;, \u0026#34;typescript\u0026#34;: \u0026#34;^4.9.5\u0026#34;, \u0026#34;web-vitals\u0026#34;: \u0026#34;^2.1.4\u0026#34; }, \u0026#34;scripts\u0026#34;: { \u0026#34;start\u0026#34;: \u0026#34;react-scripts start\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;react-scripts build\u0026#34;, \u0026#34;test\u0026#34;: \u0026#34;react-scripts test\u0026#34;, \u0026#34;eject\u0026#34;: \u0026#34;react-scripts eject\u0026#34; }, \u0026#34;eslintConfig\u0026#34;: { \u0026#34;extends\u0026#34;: [ \u0026#34;react-app\u0026#34;, \u0026#34;react-app/jest\u0026#34; ] }, \u0026#34;browserslist\u0026#34;: { \u0026#34;production\u0026#34;: [ \u0026#34;\u0026gt;0.2%\u0026#34;, \u0026#34;not dead\u0026#34;, \u0026#34;not op_mini all\u0026#34; ], \u0026#34;development\u0026#34;: [ \u0026#34;last 1 chrome version\u0026#34;, \u0026#34;last 1 firefox version\u0026#34;, \u0026#34;last 1 safari version\u0026#34; ] } } .time { transform:scale(-1,1); position: absolute; top: 10px; padding: 10px; z-index: 100; color: #e9ff00; font-size: 30px; text-align: center; } import React, { useState, useEffect } from \u0026#39;react\u0026#39;; //function reverseString(str: string): string { // return str.split(\u0026#39;\u0026#39;).reverse().join(\u0026#39;\u0026#39;); //} const ScreenTimeCanvas: React.FC = () =\u0026gt; { const [currentDateTime, setCurrentDateTime] = useState\u0026lt;string\u0026gt;(\u0026#39;\u0026#39;); //const [reversedDateTime, setReversedDateTime] = useState\u0026lt;string\u0026gt;(\u0026#39;\u0026#39;); useEffect(() =\u0026gt; { const updateDateTime = () =\u0026gt; { const now = new Date(); const formatted = now.toLocaleString(\u0026#34;ja-JP\u0026#34;, { year: \u0026#39;numeric\u0026#39;, month: \u0026#39;2-digit\u0026#39;, day: \u0026#39;2-digit\u0026#39;, hour: \u0026#39;2-digit\u0026#39;, minute: \u0026#39;2-digit\u0026#39;, second: \u0026#39;2-digit\u0026#39; }); setCurrentDateTime(formatted); //setReversedDateTime(reverseString(formatted)); }; updateDateTime(); const timer = setInterval(updateDateTime, 1000); return () =\u0026gt; clearInterval(timer); }, []); return ( \u0026lt;div className=\u0026#34;time\u0026#34;\u0026gt; \u0026lt;p\u0026gt;{currentDateTime}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; ); }; export default ScreenTimeCanvas; import * as THREE from \u0026#39;three\u0026#39; import React, { useState, useEffect, useRef } from \u0026#39;react\u0026#39;; import { OrbitControls } from \u0026#39;@react-three/drei\u0026#39; import { useFrame, Canvas } from \u0026#39;@react-three/fiber\u0026#39;; import { GLTFLoader } from \u0026#39;three/examples/jsm/loaders/GLTFLoader\u0026#39;; import { VRM, VRMUtils, VRMLoaderPlugin } from \u0026#39;@pixiv/three-vrm\u0026#39;; import { VRMAnimationLoaderPlugin, VRMAnimation, createVRMAnimationClip } from \u0026#34;@pixiv/three-vrm-animation\u0026#34;; interface ModelProps { url: string url_anim: string scale: [number, number, number] position: [number, number, number] rotation: [number, number, number] } const VRMModel: React.FC\u0026lt;ModelProps\u0026gt; = ({ url, url_anim, position, rotation, scale }) =\u0026gt; { const [vrm, setVrm] = useState\u0026lt;VRM | null\u0026gt;(null); const mixerRef = useRef\u0026lt;THREE.AnimationMixer | null\u0026gt;(null); useEffect(() =\u0026gt; { const loader = new GLTFLoader(); loader.register((parser) =\u0026gt; new VRMLoaderPlugin(parser)); loader.register((parser) =\u0026gt; new VRMAnimationLoaderPlugin(parser)); loader.load(url, (gltf) =\u0026gt; { const vrmModel = gltf.userData.vrm as VRM; VRMUtils.removeUnnecessaryJoints(vrmModel.scene); setVrm(vrmModel); const mixer = new THREE.AnimationMixer(vrmModel.scene); mixerRef.current = mixer; loader.load(url_anim, (animGltf) =\u0026gt; { const vrmAnimations = animGltf.userData.vrmAnimations as VRMAnimation[]; if (vrmAnimations \u0026amp;\u0026amp; vrmAnimations.length \u0026gt; 0) { const clip = createVRMAnimationClip(vrmAnimations[0], vrmModel); mixer.clipAction(clip).play(); } }); }); }, [url, url_anim]); useFrame((state, delta) =\u0026gt; { if (mixerRef.current) mixerRef.current.update(delta); if (vrm) vrm.update(delta); }); return vrm ? \u0026lt;primitive object={vrm.scene} position={position} rotation={rotation} scale={scale}/\u0026gt; : null; }; export const VRMModelCanvas = () =\u0026gt; { return ( \u0026lt;div style={{ height: \u0026#39;100vh\u0026#39;, width: \u0026#39;100vw\u0026#39; }}\u0026gt; \u0026lt;Canvas shadows gl={{ //toneMapping: THREE.ACESFilmicToneMapping, //toneMapping: THREE.ReinhardToneMapping, toneMapping: THREE.NeutralToneMapping, toneMappingExposure: 1, alpha: true, powerPreference: \u0026#34;high-performance\u0026#34;, antialias: true, //stencil: false, //depth: false }} camera={{ position: [1.2, 0, 0] }}\u0026gt; \u0026lt;color attach=\u0026#34;background\u0026#34; args={[\u0026#34;#000\u0026#34;]} /\u0026gt; {/* Light gray background */} \u0026lt;OrbitControls /\u0026gt; \u0026lt;ambientLight intensity={10} /\u0026gt; \u0026lt;pointLight position={[10, 10, 10]} /\u0026gt; \u0026lt;VRMModel url=\u0026#34;./models/t.vrm\u0026#34; url_anim=\u0026#34;./models/default.vrma\u0026#34; position={[0, -0.6, 0]} rotation={[0, 0, 0]} scale={[1, 1, 1]} /\u0026gt; \u0026lt;/Canvas\u0026gt; \u0026lt;/div\u0026gt; ) } export default VRMModelCanvas; import React from \u0026#39;react\u0026#39; import VRMModelCanvas from \u0026#39;./pages/vrm\u0026#39; import ScreenTimeCanvas from \u0026#39;./pages/time\u0026#39; const App = () =\u0026gt; { return ( \u0026lt;\u0026gt; \u0026lt;VRMModelCanvas/\u0026gt; \u0026lt;ScreenTimeCanvas/\u0026gt; \u0026lt;/\u0026gt; ) } export default App; ","description":"","formated_time":"2024-10-01","href":"https://syui.github.io/blog/post/2024/10/01/holo/","tags":["vrm"],"title":"3Dホログラムを作った","utc_time":"2024-10-01T00:00:00Z"},{"categories":null,"contents":"現時点ではwindows terminalのpreview 1.22で使用できるようになりました。\nhttps://github.com/microsoft/terminal/releases\n最も手っ取り早くlibsixelをbuildする方法はmsys2を使うことです。\n$ scoop install msys2 # ここでmsys2を起動 $ msys2 $ pacman -S git make gcc $ git clone https://github.com/saitoha/libsixel $ cd libsixel $ ./configure $ make $ make install $ ls ./converters/img2sixel.exe $ which img2sixel.exe # 画像を表示 $ img2sixel.exe syui.png $ exit ref : https://devblogs.microsoft.com/commandline/windows-terminal-preview-1-22-release/\n","description":"","formated_time":"2024-09-02","href":"https://syui.github.io/blog/post/2024/09/02/ws-sixel/","tags":["windows"],"title":"windows terminalでsixelを使う","utc_time":"2024-09-02T00:00:00Z"},{"categories":null,"contents":"obsは配信のためのアプリですが、windowsで使えるマイクがないので、iphoneかmacを使って音声変換してdiscordから取ってみた。このやり方がすごく良かった。あと後述するちやは神社が配布しているrvc modelがすごかった。\nhttps://github.com/w-okada/voice-changer https://huggingface.co/wok000/vcclient000/tree/main ./start_http.command https://booth.pm/ja/items/4701666 まずマイクに近づかないと音を取れないのがきつい。なので離れていても音を取るのがいい。最初はiphone(discord)からwindowsに繋いだらかなり離れててもしっかりと音を取れてよかった。\nただ、音声変換があまりうまくいかなくて、obsのVST Pluginだったかを使うのは厳しいと感じた。なので、方向を変えてmac(discord)から接続することにした。\nmacのgaragebandによる音声変換も使えるけど、beatriceがいいらしいのでw-okada/voice-changerから使うことにした。\nwebcam motion capture https://webcammotioncapture.info/ja/ まずvrm4u(vmc)ではwebcam motion captureが動きません。ue5.4.4のvrm4u(202408)の環境ですが動かない。しかし、一旦、vseefaceなどを挟むと使用できます。ただし、webcam motion captureとw-okada/voice-changerを同時に使用するとアプリが落ちます。時間経過でwebcamのcaptureが動かなくなります。\ndiscordを使う理由 discordからでないと音量が大きくなりません。小さい声でもちゃんと拾って変換してくれるやり方として、discordを使うとうまくいきました。ただし、高価なマイクがある場合はそちらの方が良いでしょう。\n配信環境 [mac]\nVB-Cableで仮想オーディオデバイス(output)を起動 discordのinputに指定 w-okada/voice-changerを起動してoutputにいれる [windows]\ndiscordでボイスチャットに入る(別アカウント)、ここで音声が聴こえるはず obsでdiscordの音声キャプチャ webcam motion capture -\u0026gt; vseefaceでカメラからvrmを動かせるようにする ue5を起動して、obsでウィンドウキャプチャ。youtubeアカウントに接続し、配信管理から予約、開始する。開始したあとは準備できるまで音声キャプチャをミュート。ゲームを調整できれば開始してミュートを切る 配信中にやること。操作がちょっと大変です。カメラ操作や移動操作など。\nまた、英語音声に変換しながら配信する予定。自動音声変換は精度が悪かったので文字列にしました。文字を打ち込むかあらかじめ用意しておいた文字を変換します。これをmacで流すとdiscordを通じてかなりはっきり英語を喋ってくれます。たまってきたら音声ファイルをpecoとかfzfで検索できるようにしておくと良さそう。\n#!/bin/zsh d=${0:a:h} f=$d/voice.json vdir=$d/voice_dir cfg=~/.config/ai/voice.json if [ ! -d $vdir ];then mkdir -p $vdir fi if [ -z \u0026#34;$1\u0026#34; ];then ep=`cat $f|jq length` ep=$((ep - 1)) else ep=$1 fi j=`cat $f|jq \u0026#34;.[$ep].body\u0026#34;` n=`echo $j|jq length` n=$((n - 1)) fnction voice_chat() { #echo chat : https://openai.com #echo voice : https://elevenlabs.io vfile=$vdir/${ep}_${i}.mp3 if [ -f $vfile ];then mpv $vfile echo voice ok read continue fi echo \u0026#34;[$i]\u0026#34; t=`echo $j|jq -r \u0026#34;.[$i].text\u0026#34;` echo $t echo --- read chat_text if [ -z \u0026#34;$chat_text\u0026#34; ] \u0026amp;\u0026amp; [ -n \u0026#34;$t\u0026#34; ];then chat_text=$t fi echo $chat_text echo --- chat_api=`cat $cfg|jq -r .chat_api`\tvoice_text=`curl -sL https://api.openai.com/v1/chat/completions -H \u0026#34;Content-Type: application/json\u0026#34; -H \u0026#34;Authorization: Bearer $chat_api\u0026#34; -d \u0026#34;{ \\\u0026#34;model\\\u0026#34;: \\\u0026#34;gpt-4o-mini\\\u0026#34;, \\\u0026#34;messages\\\u0026#34;: [{\\\u0026#34;role\\\u0026#34;: \\\u0026#34;user\\\u0026#34;, \\\u0026#34;content\\\u0026#34;: \\\u0026#34;次の文章を英語に訳して\\n\\n$chat_text\\\u0026#34;}], \\\u0026#34;temperature\\\u0026#34;: 0.7 }\u0026#34;|jq \u0026#34;.choices.[].message.content\u0026#34;` echo $voice_text # like-model voice_id=zrHiDhphv9ZnVXBqCLjz # alice-model voice_id=Xb7hH8MSUJpSbSDYk0k2 voice_api=`cat $cfg|jq -r .voice_api` curl -sL --request POST \\ --url https://api.elevenlabs.io/v1/text-to-speech/$voice_id \\ --header \u0026#34;xi-api-key: $voice_api\u0026#34; \\ --header \u0026#39;Content-Type: application/json\u0026#39; \\ --data \u0026#34;{ \\\u0026#34;text\\\u0026#34;: $voice_text, \\\u0026#34;model_id\\\u0026#34;: \\\u0026#34;eleven_multilingual_v2\\\u0026#34;, \\\u0026#34;voice_settings\\\u0026#34;: { \\\u0026#34;stability\\\u0026#34;: 0.5, \\\u0026#34;similarity_boost\\\u0026#34;: 0.5 } }\u0026#34; --output $vfile \u0026amp;\u0026amp; mpv $vfile } for ((i=0;i\u0026lt;=$n;i++)) do voice_chat done [ { \u0026#34;id\u0026#34;:1, \u0026#34;body\u0026#34; :[ { \u0026#34;text\u0026#34;:\u0026#34;こんにちは、みんな\u0026#34;}, { \u0026#34;text\u0026#34;:\u0026#34;配信を見てくれてありがとう。またね。\u0026#34;} ] } ] なぜue5(editor)で起動するのか? editorは相当重いので本来はbuildしたpackageで実行する方が良いです。しかし、buildするとvrm4u(vmc)の表情が動かなくなります。またstandaloneはもっと重くなりますので選択しません。PIEでwindowを作りません。windowを作ると新しい問題が発生しますし、動作も重くなります。\nrvc model boothでいくつかrvc modelを販売しているけどおすすめしません。freeのものも含めて使用できるレベルのものは現状少ないと感じています。\n","description":"","formated_time":"2024-09-01","href":"https://syui.github.io/blog/post/2024/09/01/voice/","tags":["mac","ue","obs"],"title":"obs+discord+beatriceを使う","utc_time":"2024-09-01T00:00:00Z"},{"categories":null,"contents":"three.jsをGUIで調整するためのlibです。reactのexampleがあるのでreactで書きます。\nちなみに、最近は色々なprojectがreactばかりになってきたのでreactを使っています。ただ、vueのほうがわかりやすいのでvueをおすすめしておきます。jsに近いほどよいですね。最初はjs+html+cssが一番ですけど。\n$ nvm use 21 # https://www.theatrejs.com/docs/latest/getting-started/with-react-three-fiber $ npx create-react-app theatre --template typescript $ npm install --save react three @react-three/fiber @theatre/core @theatre/studio @theatre/r3f $ npm install --save-dev @types/three { \u0026#34;name\u0026#34;: \u0026#34;vite-react-typescript-starter\u0026#34;, \u0026#34;private\u0026#34;: true, \u0026#34;version\u0026#34;: \u0026#34;0.0.0\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;module\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;dev\u0026#34;: \u0026#34;vite\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;tsc -b \u0026amp;\u0026amp; vite build\u0026#34;, \u0026#34;lint\u0026#34;: \u0026#34;eslint .\u0026#34;, \u0026#34;preview\u0026#34;: \u0026#34;vite preview\u0026#34; }, \u0026#34;dependencies\u0026#34;: { \u0026#34;@theatre/core\u0026#34;: \u0026#34;^0.6.1\u0026#34;, \u0026#34;@theatre/r3f\u0026#34;: \u0026#34;^0.7.2\u0026#34;, \u0026#34;@theatre/studio\u0026#34;: \u0026#34;^0.6.1\u0026#34;, \u0026#34;react\u0026#34;: \u0026#34;^18.3.1\u0026#34;, \u0026#34;react-dom\u0026#34;: \u0026#34;^18.3.1\u0026#34; }, \u0026#34;devDependencies\u0026#34;: { \u0026#34;@eslint/js\u0026#34;: \u0026#34;^9.9.1\u0026#34;, \u0026#34;@types/react\u0026#34;: \u0026#34;^18.3.4\u0026#34;, \u0026#34;@types/react-dom\u0026#34;: \u0026#34;^18.3.0\u0026#34;, \u0026#34;@vitejs/plugin-react\u0026#34;: \u0026#34;^4.3.1\u0026#34;, \u0026#34;eslint\u0026#34;: \u0026#34;^9.9.1\u0026#34;, \u0026#34;eslint-plugin-react-hooks\u0026#34;: \u0026#34;^5.1.0-rc.0\u0026#34;, \u0026#34;eslint-plugin-react-refresh\u0026#34;: \u0026#34;^0.4.11\u0026#34;, \u0026#34;globals\u0026#34;: \u0026#34;^15.9.0\u0026#34;, \u0026#34;typescript\u0026#34;: \u0026#34;^5.5.3\u0026#34;, \u0026#34;typescript-eslint\u0026#34;: \u0026#34;^8.3.0\u0026#34;, \u0026#34;vite\u0026#34;: \u0026#34;^5.4.2\u0026#34; } } import \u0026#39;./index.css\u0026#39; import { createRoot } from \u0026#39;react-dom/client\u0026#39; import React, { useEffect } from \u0026#39;react\u0026#39; import { Canvas } from \u0026#39;@react-three/fiber\u0026#39; import studio from \u0026#39;@theatre/studio\u0026#39; import extension from \u0026#39;@theatre/r3f/dist/extension\u0026#39; import { SheetProvider, editable as e, PerspectiveCamera } from \u0026#39;@theatre/r3f\u0026#39; import { getProject } from \u0026#39;@theatre/core\u0026#39; import demoProjectState from \u0026#39;./state.json\u0026#39; studio.initialize() studio.extend(extension) //const demoSheet = getProject(\u0026#39;Demo Project\u0026#39;, { state: demoProjectState }).sheet(\u0026#39;Demo Sheet\u0026#39;) const demoSheet = getProject(\u0026#39;Demo Project\u0026#39;).sheet(\u0026#39;Demo Sheet\u0026#39;) const App = () =\u0026gt; { useEffect(() =\u0026gt; { demoSheet.project.ready.then(() =\u0026gt; demoSheet.sequence.play({ iterationCount: Infinity, range: [0, 1] })) }, []) return ( \u0026lt;Canvas\u0026gt; \u0026lt;SheetProvider sheet={demoSheet}\u0026gt; \u0026lt;PerspectiveCamera theatreKey=\u0026#34;Camera\u0026#34; makeDefault position={[0, 0, 0]} fov={75} /\u0026gt; \u0026lt;ambientLight /\u0026gt; \u0026lt;e.pointLight theatreKey=\u0026#34;Light\u0026#34; position={[1, 1, 1]} /\u0026gt; \u0026lt;e.mesh theatreKey=\u0026#34;Cube\u0026#34;\u0026gt; \u0026lt;boxGeometry args={[1, 1, 1]} /\u0026gt; \u0026lt;meshStandardMaterial color=\u0026#34;orange\u0026#34; /\u0026gt; \u0026lt;/e.mesh\u0026gt; \u0026lt;/SheetProvider\u0026gt; \u0026lt;/Canvas\u0026gt; ) } createRoot(document.getElementById(\u0026#39;root\u0026#39;)!).render(\u0026lt;App /\u0026gt;) $ npm run dev https://github.com/AndrewPrifer/CodropsCameraFlyThroughTutorial/\n","description":"","formated_time":"2024-08-28","href":"https://syui.github.io/blog/post/2024/08/28/three/","tags":["vrm","three"],"title":"theatre.jsを使ってみる","utc_time":"2024-08-28T00:00:00Z"},{"categories":null,"contents":"この前、elevenlabsを使って、ゲーム内で音声で聞くと音声で返してくれるようにした。\nその時、gpt-3.5-turboよりgpt-4o-miniのほうが安いことに気づいたので乗り換えた。\nhttps://openai.com/index/gpt-4o-mini-advancing-cost-efficient-intelligence/\nただ、elevenlabsは、かわいい声が少なかったのと、日本語の発音がちょっと微妙なことがあるので、これよりおすすめのものはないかなと思ってる。\n","description":"","formated_time":"2024-08-24","href":"https://syui.github.io/blog/post/2024/08/24/ue/","tags":["ue","ue5"],"title":"gpt-4o-miniに乗り換え","utc_time":"2024-08-24T00:00:00Z"},{"categories":null,"contents":"数日前からvtuberを見はじめて、最初はさくらみこを見て「へえこんな人がいるのか面白い」と思って、次に古石ビジューを見て、そこからふわもこ(fuwamoco)を見てる。\n今回はそこで考えた色々なことを話していきたい。\nfuwamocoのすごさ 私はfuwawaが特に気に入ってて、好き。fuwawaが怒ってるところは見たことないし、想像つかないところがいい。\nなんだけど、今回は主に技術的な側面からfuwamocoを考察します。\nfuwamocoを見てて思ったのは、この子達はプロだなってこと。あらゆる面でそのことを読み取れます。\n例えば、彼女たちの口癖であるbaubauです。繰り返されることで定着して、今やbaubauって聞くと「あ、fuwamocoだ」ってわかる。\n彼女たちはおそらくいくつかの決め事があり、それを実行していると思う。しかも日々配信がどうすれば面白くなるか考えてupdateしていく姿勢もある。\nこの両方を持ち合わせることは難しい。例えば、jpは精神論や昔ながらのやり方を重要視する傾向にあるように感じたのに対し、enのfuwamocoは決まりを大切にしながらも、updateを大切にしているように感じた。とはいえ精神論が重要じゃないわけじゃない。最後まで立ってるやつが勝ちみたいな考えは好き。\nまた、fuwamocoが特徴的なのが二人組みであること。\n私は最初はソロでやっている人を見てるんだけど、最終的には二人組でやっている人を見るようになる。\nなぜかというと、多分、飽きるからだと思う。二人組の場合、やり取りの幅は広い。\nそして、vtuberを見ていて最も楽しいと感じるのがadventでやっているとき。adventというのはfuwamocoの同期の人達が集まってわちゃわちゃやってることがあって、それが一番おもしろいと思う。\n2番目がfuwamocoで3番目がソロのメンバーという感じ。\nやっぱり二人組が強いと思う。お笑いも最終的には二人組に行き着く事が多い。\n次にすごいのはfuwamocoがオタクであるということ。そして、ただのオタクじゃないことはわかる。\nその他にもネーミングの凄さやfuwamoco morning、冒頭の「ふわわじゃないよ、もここだよ」、オープニングのセンスの良さ、鳥のマスコットなどなどすごいところはたくさんあるけど、一番はやっぱり視聴者が嫌な気分になることがないってところ。見ていて楽しいところ。\n配信ってどうしても我が出てしまって、それはいいことでもあるんだけど、悪いことでもあると思う。\n特に悪いのは個人的資質(性格の悪さ)による我が出ること。そのへんは内面がいい人を選ぶしかない。\nvtuberに内面なんてあるのと思われるかもしれないけど、毎日配信だから個人的な性質は隠しきれない。\nだからそういうのは必ず出ると思ったほうがいい。\nおそらく、fuwamocoは個人的資質が良いこと(性格が良いこと)と、いくつかの決め事でプロに徹すること。この2点がすごいと思った。\nちなみに、みこちゃんもbibooも好きだしかわいい。\nvtuberをおすすめしない こういうのを見て、やってみたいなあって思う。でもそういうのはおすすめしない。\n理由としては、何かが流行っているとき、先行者利益はすでに失われている。\nvtuberになるには、vtuberがまだ知られていないし、誰もやっていない、流行ってもいない。そういうとき勇気を出してやるのが一番いい。\n逆に言うと、そこで勇気を出し努力をしてきた人たちが最もvtuberで活躍すると思う。それ以外は厳しいと思う。\n「誰でもvtuberになれます」、「今、vtuberが大流行」みたいな状況でそういうのに参入するのはおすすめしない。\n個人的には誰もやってないこと、かつ自分が好きで続けられて得意なことをやるのが良いように思います。\nvtuberの技術が気になったのでやってみた 実はvtuberにハマってから数日、自分ならどういった形で実現できそうかやってみました。\n途中でモーションキャプチャに切り替えて動かしてます。\nvみたいなことやるならアイのモデルを貸してもらうしかないな。名前はyoutubeで@syuiが取れなかったので@syaiなんだけどこれになる。シャイ?かな。んでその際はアイじゃなく自分(シャイ)であることを説明しないと。作者とキャラって全く関係ない別人だから。\nただ、やるにしてもvtuberでは厳しいと思う。何かを新しいものを組み合わせないとダメそう。\nみんなを楽しませるもので、かつ気軽に楽しめるもので、今までにないもの。\nどういった形で実現できそうかな。\nゲーム動画の注釈 今回実装したもの\nroom(home) vではみんな背景にroomを表示しているので作ることにした。\ntwinmotion+collisionで実装してる。meshを全選択して、右クリックでアセットアクション -\u0026gt; プロパティマトリクスで選択内容を... -\u0026gt; collision complexity(use complex collision as simple...)を選択します。\nmotion caps モーションキャプチャ\nvrmvmc+abpの切り替えで実装してる。blueprintはこんな感じ。\ncast to CBP_SandboxCharacter_ai -\u0026gt; target:ai, target:sk_ai -\u0026gt; set anim instance class -\u0026gt; ABP_GenericRetarget_2 loading screen ローディング画面\nバグあり、build後に一時背景が映り込んでしまう。editor上では再現しないし、コード的には映り込まないはず。\n","description":"","formated_time":"2024-08-15","href":"https://syui.github.io/blog/post/2024/08/15/vtuber/","tags":["vtuber","fuwamoco"],"title":"vtuberのfuwamocoを見始めた","utc_time":"2024-08-15T00:00:00Z"},{"categories":null,"contents":"chromeからsafariに切り替えました。\n理由としては、以下の4つです。\nios(mobile)で使っているのがsafariなので統一したかった safariだとicloud private relayが使える chromeだとprivate windowでもcacheが効いて開発に支障が出る chromeがadblockなどを排除予定 chromeだと最新のpreviewができない 主にweb開発ですがchromeだと最新のsrc previewが反映されません。cookieかcacheかわかりませんが、それが残っているのだと思います。\nsafariだとprivate windowは普通に機能します。localhostでpreviewするときも支障がありません。\nちなみに、chromeのprivate windowは完全にprivateではありません。\ngoogle翻訳やgoogle検索を使わなくなった これまでchromeを使っていた理由はgoogle翻訳があるからです。\n私はbrowserをあまりカスタマイズせず、拡張機能も入れず、ほとんどの初期機能を無効にし、基本設定のまま使います。ですからchromeについているgoogle翻訳は便利でした。\nしかし、近年、chatgpt, perplexity.aiなどのほうがよく使うようになり、逆にgoogle検索やgoogle翻訳をあまり使わないようになっていました。\nこれだとchromeを使うメリットは薄れ、デメリットが目立ちます。\nicloud private relayが使える ほとんどのアプリはicloud relayが有効になっていますが、browserはsafariくらいしか通しません。\nもともとスマホはsafariしか使いませんし、パソコンも統一したほうがいいだろうということで、しばらくsafariを使ってみることにします。\n","description":"","formated_time":"2024-08-11","href":"https://syui.github.io/blog/post/2024/08/11/safari/","tags":["mac"],"title":"macのbrowserをsafariにした","utc_time":"2024-08-11T00:00:00Z"},{"categories":null,"contents":"ip addr(global)を調べるにはip.network, ipinfo.ioなどがあります。試してみましょう。\n$ curl -sL ip.network/more { \u0026#34;ip\u0026#34;: \u0026#34;2a0a:bac2:4515:1e14::2ff:6\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;JP\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Matsue\u0026#34;, \u0026#34;region\u0026#34;: \u0026#34;Shimane\u0026#34;, \u0026#34;regionCode\u0026#34;: \u0026#34;32\u0026#34;, \u0026#34;timezone\u0026#34;: \u0026#34;Asia/Tokyo\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;690-0801\u0026#34;, \u0026#34;asn\u0026#34;: 13344, \u0026#34;asOrganization\u0026#34;: \u0026#34;iCloud Private Relay\u0026#34;, \u0026#34;more\u0026#34;: \u0026#34;https://ip.network\u0026#34; } $ curl -sL ipinfo.io { \u0026#34;ip\u0026#34;: \u0026#34;103.28.83.214\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Tokyo\u0026#34;, \u0026#34;region\u0026#34;: \u0026#34;Tokyo\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;JP\u0026#34;, \u0026#34;loc\u0026#34;: \u0026#34;35.6895,139.6917\u0026#34;, \u0026#34;org\u0026#34;: \u0026#34;AS13335 Cloudflare, Inc.\u0026#34;, \u0026#34;postal\u0026#34;: \u0026#34;101-8656\u0026#34;, \u0026#34;timezone\u0026#34;: \u0026#34;Asia/Tokyo\u0026#34;, \u0026#34;readme\u0026#34;: \u0026#34;https://ipinfo.io/missingauth\u0026#34; } どうやらicloud private relayのipv4はcloudflareを使ってるみたいです。\n最近、icloud private relayが使いやすいのでbrowser(mac)をsafariに置き換えようかなと思っています。もうすぐchromeの広告ブロック排除がくるみたいだし。\n","description":"","formated_time":"2024-08-10","href":"https://syui.github.io/blog/post/2024/08/10/ip/","tags":["mac"],"title":"ip.networkとicloud private relay","utc_time":"2024-08-10T00:00:00Z"},{"categories":null,"contents":"久しぶりにarchを初期設定したのでその時の記録\n$ cfdisk /dev/sda $ mkfs.vfat /dev/sda1 $ mkfs.ext4 /dev/sda2 $ mount /dev/sda2 /mnt $ pacstrap /mnt base linux grub efibootmgr dhcpcd openssh $ arch-chroot /mnt $ grub-install --force /dev/sda1 $ grub-mkconfig -o /boot/grub/grub.cfg $ systemctl enable dhcpcd $ systemctl enable sshd $ passwd $ exit $ reboot sshの設定です。reboot前にやっておいてもいいかもしれませんが、その場合はuseraddして~/.ssh/authorized_keysを置きましょう。/etc/ssh/sshd_configでPasswordAuthentication noにしておきます。\n# 接続する側 $ ssh-keygen -f ~/.ssh/archlinux $ ssh-copy-id -i ~/.ssh/archlinux.pub ${USER}@192.168.x.x # archlinux $ vim /etc/ssh/sshd_config PasswordAuthentication no $ systemctl restart sshd あとはお好みで設定します。\n$ pacman -S tilix xterm zsh git chromium otf-ipaexfont i3 xorg xorg-xinit pcmanfm lightdm lightdm-gtk-greeter # terminal $ pacman -S tilix xterm # chromiumなどの日本語化 $ pacman -S otf-ipaexfont # i3 $ pacman -S i3 xorg xorg-xinit $ startx # filer $ pacman -S pcmanfm # browser $ pacman -S chromium # lightdm $ pacman -S lightdm lightdm-gtk-greeter $ systemctl enable lightdm # autologin $ groupadd -r autologin $ gpasswd -a $USER autologin $ vim /etc/lightdm/lightdm.conf [Seat:*] pam-service=lightdm pam-autologin-service=lightdm-autologin autologin-user=${USER} autologin-user-timeout=0 session-wrapper=/etc/lightdm/Xsession autologin-session=i3 ","description":"","formated_time":"2024-08-09","href":"https://syui.github.io/blog/post/2024/08/09/arch/","tags":["arch"],"title":"archlinuxの初期設定","utc_time":"2024-08-09T00:00:00Z"},{"categories":null,"contents":"package build後のscreen sizeなどの設定 build後は画面が低画質でひどかったので、そのへんを調整できるようにしました。\nこれは以前購入したassetを使いました。使い道がわからないなあと思っていたものですが、ue5はbuild後にscreen sizeやftpなどの設定を反映してくれません。editorと異なる見た目になり、project settingなどからも設定できません。\nこの事に気づいてassetを使いました。この辺、ueではすごくめんどくさいので買ってよかった。\nアイの衣装を調整中 よりシンプルに近づけています。肩の装飾と腕輪を外しました。\nアイの変身やスタミナの再実装 以前、ue5.3で作っていたものが全部作り直しになった関係で放置していましたが、書き直しました。\n","description":"","formated_time":"2024-08-08","href":"https://syui.github.io/blog/post/2024/08/08/ue/","tags":["vrm","ue5"],"title":"最近やったue5のこと","utc_time":"2024-08-08T00:00:00Z"},{"categories":null,"contents":"今回はreact-three-fiberとthree-vrm-animationの話になります。\nreact-three-fiberはsceneなどを自動でやってくれて、コードもシンプルになります。\nanim(vrma)を動かす場合は注意が必要で動きますが動きがおかしくなります。これはreact-three-fiberで書く場合に発生します。個人環境ではunity + vrm 1.0でexportしたものを使うと正常に動きました。\n$ npx create-react-app vrm-model --template typescript $ npm i $ npm run start import * as THREE from \u0026#39;three\u0026#39; import React, { useState, useEffect, useRef } from \u0026#39;react\u0026#39;; import { OrbitControls } from \u0026#39;@react-three/drei\u0026#39; import { useFrame, Canvas } from \u0026#39;@react-three/fiber\u0026#39;; import { GLTFLoader } from \u0026#39;three/examples/jsm/loaders/GLTFLoader\u0026#39;; import { VRM, VRMUtils, VRMLoaderPlugin } from \u0026#39;@pixiv/three-vrm\u0026#39;; import { VRMAnimationLoaderPlugin, VRMAnimation, createVRMAnimationClip } from \u0026#34;@pixiv/three-vrm-animation\u0026#34;; interface ModelProps { url: string url_anim: string } const VRMModel: React.FC\u0026lt;ModelProps\u0026gt; = ({ url, url_anim }) =\u0026gt; { const [vrm, setVrm] = useState\u0026lt;VRM | null\u0026gt;(null); const mixerRef = useRef\u0026lt;THREE.AnimationMixer | null\u0026gt;(null); useEffect(() =\u0026gt; { const loader = new GLTFLoader(); loader.register((parser) =\u0026gt; new VRMLoaderPlugin(parser)); loader.register((parser) =\u0026gt; new VRMAnimationLoaderPlugin(parser)); loader.load(url, (gltf) =\u0026gt; { const vrmModel = gltf.userData.vrm as VRM; VRMUtils.removeUnnecessaryJoints(vrmModel.scene); setVrm(vrmModel); const mixer = new THREE.AnimationMixer(vrmModel.scene); mixerRef.current = mixer; loader.load(url_anim, (animGltf) =\u0026gt; { const vrmAnimations = animGltf.userData.vrmAnimations as VRMAnimation[]; if (vrmAnimations \u0026amp;\u0026amp; vrmAnimations.length \u0026gt; 0) { const clip = createVRMAnimationClip(vrmAnimations[0], vrmModel); mixer.clipAction(clip).play(); } }); }); }, [url, url_anim]); useFrame((state, delta) =\u0026gt; { if (mixerRef.current) mixerRef.current.update(delta); if (vrm) vrm.update(delta); }); return vrm ? \u0026lt;primitive object={vrm.scene} /\u0026gt; : null; }; export const VRMModelCanvas = () =\u0026gt; { return ( \u0026lt;div style={{ height: \u0026#39;100vh\u0026#39;, width: \u0026#39;100vw\u0026#39; }}\u0026gt; \u0026lt;Canvas shadows gl={{ //toneMapping: THREE.ACESFilmicToneMapping, //toneMapping: THREE.ReinhardToneMapping, toneMapping: THREE.NeutralToneMapping, toneMappingExposure: 1.5, alpha: true, powerPreference: \u0026#34;high-performance\u0026#34;, antialias: true, //stencil: false, //depth: false }} camera={{ position: [1, 1, 1] }}\u0026gt; \u0026lt;directionalLight color=\u0026#34;white\u0026#34; castShadow position={[0, 10, 0]} intensity={1.5} shadow-mapSize={[1024, 1024]}/\u0026gt; \u0026lt;OrbitControls /\u0026gt; \u0026lt;ambientLight intensity={1} /\u0026gt; \u0026lt;pointLight position={[10, 10, 10]} /\u0026gt; \u0026lt;VRMModel url=\u0026#34;./models/default.vrm\u0026#34; url_anim=\u0026#34;./models/default.vrma\u0026#34; /\u0026gt; \u0026lt;/Canvas\u0026gt; \u0026lt;/div\u0026gt; ) } export default VRMModelCanvas; import React from \u0026#39;react\u0026#39; import VRMModelCanvas from \u0026#39;./pages/vrm_model\u0026#39; const App = () =\u0026gt; { return ( \u0026lt;VRMModelCanvas/\u0026gt; ) } export default App; { \u0026#34;name\u0026#34;: \u0026#34;vrm-model\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;0.1.0\u0026#34;, \u0026#34;private\u0026#34;: true, \u0026#34;dependencies\u0026#34;: { \u0026#34;@pixiv/three-vrm\u0026#34;: \u0026#34;^3.0.0\u0026#34;, \u0026#34;@pixiv/three-vrm-animation\u0026#34;: \u0026#34;^3.0.0\u0026#34;, \u0026#34;@react-three/drei\u0026#34;: \u0026#34;^9.109.2\u0026#34;, \u0026#34;@react-three/fiber\u0026#34;: \u0026#34;^8.16.8\u0026#34;, \u0026#34;@react-three/postprocessing\u0026#34;: \u0026#34;^2.16.2\u0026#34;, \u0026#34;@testing-library/jest-dom\u0026#34;: \u0026#34;^5.17.0\u0026#34;, \u0026#34;@testing-library/react\u0026#34;: \u0026#34;^13.4.0\u0026#34;, \u0026#34;@testing-library/user-event\u0026#34;: \u0026#34;^13.5.0\u0026#34;, \u0026#34;@types/jest\u0026#34;: \u0026#34;^27.5.2\u0026#34;, \u0026#34;@types/node\u0026#34;: \u0026#34;^16.18.104\u0026#34;, \u0026#34;@types/react\u0026#34;: \u0026#34;^18.3.3\u0026#34;, \u0026#34;@types/react-dom\u0026#34;: \u0026#34;^18.3.0\u0026#34;, \u0026#34;@types/three\u0026#34;: \u0026#34;^0.167.1\u0026#34;, \u0026#34;react\u0026#34;: \u0026#34;^18.3.1\u0026#34;, \u0026#34;react-dom\u0026#34;: \u0026#34;^18.3.1\u0026#34;, \u0026#34;react-scripts\u0026#34;: \u0026#34;5.0.1\u0026#34;, \u0026#34;three\u0026#34;: \u0026#34;^0.167.1\u0026#34;, \u0026#34;three-stdlib\u0026#34;: \u0026#34;^2.30.5\u0026#34;, \u0026#34;typescript\u0026#34;: \u0026#34;^4.9.5\u0026#34;, \u0026#34;web-vitals\u0026#34;: \u0026#34;^2.1.4\u0026#34; }, \u0026#34;scripts\u0026#34;: { \u0026#34;start\u0026#34;: \u0026#34;react-scripts start\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;react-scripts build\u0026#34;, \u0026#34;test\u0026#34;: \u0026#34;react-scripts test\u0026#34;, \u0026#34;eject\u0026#34;: \u0026#34;react-scripts eject\u0026#34; }, \u0026#34;eslintConfig\u0026#34;: { \u0026#34;extends\u0026#34;: [ \u0026#34;react-app\u0026#34;, \u0026#34;react-app/jest\u0026#34; ] }, \u0026#34;browserslist\u0026#34;: { \u0026#34;production\u0026#34;: [ \u0026#34;\u0026gt;0.2%\u0026#34;, \u0026#34;not dead\u0026#34;, \u0026#34;not op_mini all\u0026#34; ], \u0026#34;development\u0026#34;: [ \u0026#34;last 1 chrome version\u0026#34;, \u0026#34;last 1 firefox version\u0026#34;, \u0026#34;last 1 safari version\u0026#34; ] } } { \u0026#34;compilerOptions\u0026#34;: { \u0026#34;target\u0026#34;: \u0026#34;es5\u0026#34;, \u0026#34;lib\u0026#34;: [ \u0026#34;dom\u0026#34;, \u0026#34;dom.iterable\u0026#34;, \u0026#34;esnext\u0026#34; ], \u0026#34;allowJs\u0026#34;: true, \u0026#34;skipLibCheck\u0026#34;: true, \u0026#34;esModuleInterop\u0026#34;: true, \u0026#34;allowSyntheticDefaultImports\u0026#34;: true, \u0026#34;strict\u0026#34;: true, \u0026#34;forceConsistentCasingInFileNames\u0026#34;: true, \u0026#34;noFallthroughCasesInSwitch\u0026#34;: true, \u0026#34;module\u0026#34;: \u0026#34;esnext\u0026#34;, \u0026#34;moduleResolution\u0026#34;: \u0026#34;node\u0026#34;, \u0026#34;resolveJsonModule\u0026#34;: true, \u0026#34;isolatedModules\u0026#34;: true, \u0026#34;noEmit\u0026#34;: true, \u0026#34;jsx\u0026#34;: \u0026#34;react-jsx\u0026#34; }, \u0026#34;include\u0026#34;: [ \u0026#34;src\u0026#34; ] } [issue] blenderでvrmのtextureが剥がれる modelにつけるアクセサリをblenderで統合させ、three-vrmで表示していましたが、textureが剥がされていることに気づきました。\n最初はthreeのtoneMappingの問題だろうと思っていましたが、model(vrm)の問題です。\nunity + vrm 1.0でアクセサリを付けて、exportしましょう。\n","description":"","formated_time":"2024-08-02","href":"https://syui.github.io/blog/post/2024/08/02/react/","tags":["react","vrm"],"title":"vrmの表示にreact-three-fiberを使う","utc_time":"2024-08-02T00:00:00Z"},{"categories":null,"contents":"ここに書いていることは何の根拠もないように思えますけど、終局的には自身の哲学的な考えから導かれるものです。\n今回はそんな話。\n例えば、私は最も小さいものを存在の意識と言いました。あれはどういった原理から導かれるのかというと、「すべてのものに意識が宿る」という考えからです。\nすべてのものに意識が宿るなら、この世の最小単位にも意識が宿るはずです。\nそして、この世界の最小単位とは、すべてのものを削ぎ落としたものであるはずなので、そこには意識だけが残る。\nそれがどのようなものかというと、この世は存在の世界なので、存在の意識だけが残る。\nこれが私の考え方です。\n次にお伝えしたいのは「すべてはひとつ、ひとつはすべて」という考え方です。\n私は色々なことを言いましたが、人間が解明していない事柄についても多く言及しています。\n例えば、この世界にはもっと小さい単位が存在している、ということです。\nなぜか。理由は簡単です。それは「すべてはひとつ」だから。\nつまり、私達は色々と小さい単位を見つけ出しています。沢山の種類があります。でも、それらを構成するものを見つけられていないのです。\n意味はわかりますか。言いたいことは伝わっていますか。\n世界というのは広がりです。広がったものはもとを辿れば一つのものに行き着きます。\nいやいや一つではないぞ。たくさんあるぞ。そのような考えについても理解できますし、実際そうなのですが、私が言うのは終局的という意味です。\nここが哲学的なのですが、私は終局的なものをひとつとみなす、ということです。\n","description":"","formated_time":"2024-08-02","href":"https://syui.github.io/archive/note/21/","tags":["note"],"title":"一つと哲学","utc_time":"2024-08-02T00:00:00Z"},{"categories":null,"contents":"今回はreactのtsxで書きます。\n$ npx create-react-app galaxy --template typescript これで準備はできましたが、設定ファイルを見てみます。\n{ \u0026#34;compilerOptions\u0026#34;: { \u0026#34;target\u0026#34;: \u0026#34;es5\u0026#34;, \u0026#34;lib\u0026#34;: [ \u0026#34;dom\u0026#34;, \u0026#34;dom.iterable\u0026#34;, \u0026#34;esnext\u0026#34; ], \u0026#34;allowJs\u0026#34;: true, \u0026#34;skipLibCheck\u0026#34;: true, \u0026#34;esModuleInterop\u0026#34;: true, \u0026#34;allowSyntheticDefaultImports\u0026#34;: true, \u0026#34;strict\u0026#34;: true, \u0026#34;forceConsistentCasingInFileNames\u0026#34;: true, \u0026#34;noFallthroughCasesInSwitch\u0026#34;: true, \u0026#34;module\u0026#34;: \u0026#34;esnext\u0026#34;, \u0026#34;moduleResolution\u0026#34;: \u0026#34;node\u0026#34;, \u0026#34;resolveJsonModule\u0026#34;: true, \u0026#34;isolatedModules\u0026#34;: true, \u0026#34;noEmit\u0026#34;: true, \u0026#34;jsx\u0026#34;: \u0026#34;react-jsx\u0026#34; }, \u0026#34;include\u0026#34;: [ \u0026#34;src\u0026#34; ] } es5, react-jsxを使っているようです。\nbuildなどはwebpackではなくreact-scriptsですね。\n\u0026#34;scripts\u0026#34;: { \u0026#34;start\u0026#34;: \u0026#34;react-scripts start\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;react-scripts build\u0026#34;, \u0026#34;test\u0026#34;: \u0026#34;react-scripts test\u0026#34;, \u0026#34;eject\u0026#34;: \u0026#34;react-scripts eject\u0026#34; } import React from \u0026#39;react\u0026#39;; import \u0026#39;./App.css\u0026#39;; import { ThreeFiberGalaxy } from \u0026#39;./pages/galaxy\u0026#39;; function App() { return \u0026lt;ThreeFiberGalaxy /\u0026gt; } export default App; 今回はこれを改造していきます。\npackage.json\n// https://gist.github.com/artokun/fb7f0c68a01ba5d9813abb3ccce254c4 import * as THREE from \u0026#39;three\u0026#39; import { Points, useGLTF } from \u0026#39;@react-three/drei\u0026#39; import { GLTF } from \u0026#39;three-stdlib\u0026#39; import { useFrame, Canvas } from \u0026#39;@react-three/fiber\u0026#39; import { useMemo, useRef } from \u0026#39;react\u0026#39; import { EffectComposer, SelectiveBloom } from \u0026#39;@react-three/postprocessing\u0026#39; type GLTFResult = GLTF \u0026amp; { nodes: { Object_2: THREE.Mesh } materials: { [\u0026#39;Scene_-_Root\u0026#39;]: THREE.PointsMaterial } } export function Galaxy(props: JSX.IntrinsicElements[\u0026#39;group\u0026#39;]) { const ref = useRef\u0026lt;THREE.Group\u0026gt;(null!) const galaxyCenterLightRef = useRef\u0026lt;THREE.PointLight\u0026gt;(null!) const { nodes } = useGLTF(\u0026#39;./models/galaxy.glb\u0026#39;) as GLTFResult const [positions, colors] = useMemo(() =\u0026gt; { nodes.Object_2.geometry.center() const positions = new Float32Array( nodes.Object_2.geometry.attributes.position.array.buffer ) const colors = new Float32Array(positions.length) const getDistanceToCenter = (x: number, y: number, z: number) =\u0026gt; Math.sqrt(x * x + y * y + z * z) // make colors closer to 0,0,0 be more reddish and colors further away be more blueish const color = new THREE.Color() for (let i = 0; i \u0026lt; positions.length; i += 3) { const x = positions[i] const y = positions[i + 1] const z = positions[i + 2] const distanceToCenter = getDistanceToCenter(x, y, z) const normalizedDistanceToCenter = distanceToCenter / 100 // make colors closer to 0,0,0 be more reddish and colors further away be more blueish (do not use hsl) // color.setHSL( // (0.15 * (0.21 + Math.cos(distanceToCenter * 0.02))) / 2, // 0.75, // 0.6 // ) color.setRGB( Math.cos(normalizedDistanceToCenter), THREE.MathUtils.randFloat(0, 0.8), Math.sin(normalizedDistanceToCenter) ) color.toArray(colors, i) } return [positions, colors] }, [nodes]) //const starTexture = useLoader(THREE.TextureLoader, \u0026#39;/star.png\u0026#39;) // slowly rotate the galaxy useFrame(({ clock }) =\u0026gt; { ref.current.rotation.z = clock.getElapsedTime() / 5 // zoom in and out // ref.current.scale.setScalar(Math.sin(clock.getElapsedTime() / 2) + 1.5) }) // make particles glow return ( \u0026lt;group {...props} dispose={null} ref={ref}\u0026gt; \u0026lt;pointLight position={[0, 0, 0]} ref={galaxyCenterLightRef} intensity={0.5} /\u0026gt; \u0026lt;Points scale={0.05} positions={positions} colors={colors}\u0026gt; \u0026lt;pointsMaterial //map={starTexture} transparent depthWrite={false} vertexColors opacity={0.4} depthTest size={0.01} /\u0026gt; \u0026lt;/Points\u0026gt; \u0026lt;EffectComposer autoClear={false}\u0026gt; \u0026lt;SelectiveBloom intensity={2} luminanceThreshold={0.001} luminanceSmoothing={0.225} lights={[galaxyCenterLightRef]} /\u0026gt; \u0026lt;/EffectComposer\u0026gt; \u0026lt;/group\u0026gt; ) } useGLTF.preload(\u0026#39;./models/galaxy.glb\u0026#39;) App.tsxで読み込むため以下を追記します。\nexport const ThreeFiberGalaxy = () =\u0026gt; { return ( \u0026lt;Canvas\u0026gt; \u0026lt;ambientLight /\u0026gt; \u0026lt;pointLight position={[10, 10, 10]} /\u0026gt; \u0026lt;Galaxy position={[0, 0, 0]} /\u0026gt; \u0026lt;/Canvas\u0026gt; ) } public/models/galaxy.glbを置いてください。とりあえずこれで完了です。\n$ npm run start controlを追加します。\nimport { Points, useGLTF, OrbitControls } from \u0026#39;@react-three/drei\u0026#39; export const ThreeFiberGalaxy = () =\u0026gt; { return ( \u0026lt;Canvas\u0026gt; \u0026lt;OrbitControls /\u0026gt; \u0026lt;ambientLight /\u0026gt; \u0026lt;pointLight position={[10, 10, 10]} /\u0026gt; \u0026lt;Galaxy position={[0, 0, 0]} /\u0026gt; \u0026lt;/Canvas\u0026gt; ) } できましたね。大体はこんな感じになります。\n他のカスタマイズについてはperplexity.aiにでも聞いてみてください。\n","description":"","formated_time":"2024-08-01","href":"https://syui.github.io/blog/post/2024/08/01/react/","tags":["react","vrm"],"title":"react-threeを使ってglbを表示する","utc_time":"2024-08-01T00:00:00Z"},{"categories":null,"contents":"今回はコード周りを整理した時の話です。\n[issue] 一つのwidgetで各キャラのiconを設定する objectにcbp_character_${name}を指定してボタンをクリックするとキャラが切り替えるwidgetを作成していました。\n以前はiconごとに読み込むファイルを別々に作っていたのですが、その処理を簡略化しました。まずは各キャラのcbpをobjectに指定しているので、名前が異なります。objectからdisplay nameやobject name, object pathを取ってきて、brush(image)を設定するようにしたのですが、これはeditorでは動作しますが、buildで動作しないことがわかりました。\n理由は不明ですが、object(name)がNoneになります。ボタンを押すと正常に動作するためobjectはそのキャラのものが使われているはずです。これは少し奇妙です。\nそんなことを言っていても問題は解決しないので別の方法でやることにしました。objectとは別の値を用意して処理します。また、とりあえずインスタンス編集可能, スポーン時に公開, シネマティックスに公開にチェックを入れておくことにしました。\n[issue] city sampleでclothが動作しない 他のprojectでは機能するのにcloth simulationが機能しない場合、project settingの問題です。\nhttps://forums.unrealengine.com/t/no-cloth-simulation-in-ue5-but-works-in-ue4/619532\n[ConsoleVariables] - p.ClothPhysics=0 + p.ClothPhysics=1 これはなぜclothが動作しないのか、わけがわからなくて困ってる人がいそうです。\n[issue] bp_playerのキャラを切り替えるときに装備を外す これも以前から放置していた問題ですが、アイの衣装を変更したときに他キャラでvisibility:falseするのがめんどくさかったので、自動で処理されるようにしました。\ncbp_sandbox_characterをcastしてobjectのdisplay nameでもobject nameでも取ってきて、それがaiじゃなければset visibilityします。childrenにチェックを入れておきます。\nなお、最初はdestroy actor childのようなものを探したのですが、unreal engineにはありませんでした。\n","description":"","formated_time":"2024-07-29","href":"https://syui.github.io/blog/post/2024/07/29/ue/","tags":["ue","ue5","vrm"],"title":"ue5でbrushの動作がbuildと違う","utc_time":"2024-07-29T00:00:00Z"},{"categories":null,"contents":"今回は、アイの衣装を作り始めた話をします。\nまずアイの衣装のことを少し解説すると、アイは基本的に真っ白で少しボロがある服を着ていて、それが気に入っています。\nこの衣装をv1.0としましょう。\n絵を描く時とか衣装はめんどくさいので、そういう利点があります。\nしかし、この衣装を3Dやゲームにする場合はどうでしょう。例えば、衣装を書くのがめんどくさいというのは、主に繰り返し描くのがつらいわけで、一度作れば使い回せるなら話は変わってきます。\nめんどくさいけど、そこまでじゃない\u0026hellip;かもしれない。\nそれにゲームに使われるような衣装を一度作ってみたいと思っていたので、その時に作りました。この衣装をv2.0とします。\nこの衣装はvroidで作成し、どのよう作ったかと言うと、vroidが公式で提供してくれている衣装があって、その組み合わせで作りました。もちろん、組み合わせればそれでいいかというと、そんなことはなく、独自に調整して作りました。調整はイラストを描くアプリで絵を描く要領で行います。\nどのような衣装を目指したかというと、これは明確に原神のナヒーダの衣装を参考にしました。\n正直、衣装といっても私はよくわからない。作ったこともありません。ですから、センスが良いと思った衣装を参考にしました。\nしかし、v2.0の衣装はthree-vrmの見栄えで調整していました。\nこれをunreal engineに持ってきて使っていたわけですが、正直、厳しかった。\nvroidで作る衣装というのは基本的に紙なのです。ペラペラの紙をモデルに貼り付ける感じ。厚みも立体感もありません。three-vrmで表示するならいいのですが、ゲームで動かす場合は厳しいと思います。\nそこで、新しく衣装を作り直す必要がありました。\n現在作っているのはこの衣装でナンバリングでいうとv3.0になります。\nblenderによる3DモデリングとSK+ABPの組み合わせによる揺れの制御 3Dモデリング SK+ABP SKを右クリックでanim(blueprint)を作ります。そこでkawaii physicsを当てます。settingsはWorld Damping Location:1.0, World Damping Rotation:0.3, Limit Angle:20.0です。後ろに下がると体に入り込んでしまうのを抑えるため20で設定しています。\n今回はblenderによる3Dモデリングを行いました。vroidの髪の毛でマントを作ってみましたが、調整が難しく、ipadで描ければいいのですがアプリが落ちるので、しかも、macとwinで出力したものは同じではなく、unreal engineの描写に不具合が出る関係で、髪はmacで描いて、衣装はipadでやって、macで出力したものをwinに送って、unreal engineで動きを確認し、おかしければまたvroidで調整するみたいなことをやっていました。これは今も続いていますが、やろうとする人はとても大変な思いをすると思います。今回はblender, vroid, unreal engine, ipad, mac, winを使って作りました。\nこれをベースにv3.xなどの改良を重ねていくことになると思います。デザイン的な変更はあるかもしれません。今までのバージョンは主にデザインではなく作り方によって決まっていて、v1は一つの衣装を改造して作ったもので、v2は衣装の組み合わせ、v3はモデリング(厚み)になっています。\nvroidのワンピースはおすすめしない vroidのワンピースは、上半身、下半身に1mmの隙間ができます。これは正常の姿勢では問題になりませんが、three-vrmで確認してみると浮かび上がる動作で確認できます。\nその他にも仕様上の問題ですが、胸の部分の肌マスクを一部消しておかないといけません。\nしかし、それをやると、今度はunreal engineで表示する場合の問題が発生します。\nつまり、vroidのワンピースは基本的に使うべきではなく、ロングコートを使っていたv2.0のほうが良かったところがあります。\n","description":"","formated_time":"2024-07-28","href":"https://syui.github.io/blog/post/2024/07/28/ue/","tags":["ue","ue5","vrm"],"title":"アイの新衣装と方向性","utc_time":"2024-07-28T00:00:00Z"},{"categories":null,"contents":"アイの衣装を作っています。走っている姿があまり可愛くないのでマントを付けてみることにしました。原因はおそらくデフォルトの姿勢だと思われます。\nしかし、vroidでマントは相当難しいです。\nマントの作り方と調整 vroidで髪の毛から作りました。したがって、頭の動きと連動します。\n調整は髪の揺れ方から行います。動かしたいboneを追加して、ボーン数は少ないほど安定します。これで動く場所を追加します。固定点はどこからboneを始めるかを決めます。かたさは数字が小さいほど固い動きになります。衝突半径はboneを基準にカプセルのようなものを追加して衝突の有無を判定するのでしょう。\nマントは以下を基準に設定しました。\nボーン : 1 固定点 : 0.6 かたさ : 0.1 重力 : 0 衝突半径 : 0.01 この値だけでもダメで上向きにすることが必要です。これ以外では貫通してしまいました。本当はもう少し下向きがいいですね。\n体を貫通する マントが体を貫通します。\nこれは現時点でどうしようもない問題です。あらゆるパラメータを調整しても貫通してしまい、無理やりなんとかしようとすると、今度は後ろ髪とのバッティングが発生し、髪の毛がごちゃごちゃに動くようになります。\nマントを上向きにしているのは走ると体を貫通してしまうからです。\nできる限り貫通しないようにしましたが、完璧は無理でしょう。\nboneを増やすのは良くない 固定値を根本から設定し、boneを増やして衝突半径を大きくすることで貫通を解消する事ができるかもしれません。\nしかし、マントの動きが安定しなくなってしまいます。\n","description":"","formated_time":"2024-07-21","href":"https://syui.github.io/blog/post/2024/07/21/vrm/","tags":["ue","ue5","vrm"],"title":"vroidでマントを作る","utc_time":"2024-07-21T00:00:00Z"},{"categories":null,"contents":"\nキャラの切り替え キャラの切り替えはWidgets/GameAnimationWidgetの一部を使用します。具体的にはEUW_CharacterSelectButtonを以下のように書き換えれば使用できるでしょう。\nこれらはeditor utilityなのでcook(package build)に含まれません。もし切り替えボタンをbuild後も表示したければ、EUW(editor utility widget)をやめてWP(widget)で作成しましょう。またここで使われているblueprintアイコンはbuild時は真っ黒になります。画像を用意しましょう。\nアイの変身に難儀している three-vrmを触っていた時代に衣装を作ったわけですが、ue5では思ったように動かないことがあります。\nこれは衣装の作り方に問題があるわけですが、かつてthree-vrmでよく見える衣装を試行錯誤して作ったやつを修正する時期が来たと思ったので、modelを全面的にupdateしました。\n服の揺れで内部に入り込むので衣装を作り直した 腕輪を作り直した 輪っかをSMにしてmodelと分離した 瞳の中のマークを完璧な形状にした 靴のデザインを少し変更した 腕輪に関してはデザインとモデル、マテリアルに改善の余地があります。これもSMにして光沢化すればうまくいきそうですが、モデリングは苦手です。\n基本的にアイの変身は複数のmodelを切り替えることで実装していました。\nしかし、今回の衣装の変更ですべてのmodelを更新するのが非常にめんどくさいので、materialを切り替える方針に変更しました。\nつまり、黒髪にしたいなら髪の毛のelementに黒髪のmaterialをsetします。今まではmodelそのものをsetしていました。\nですがこれも非常にめんどくさいことになるのですが、例えば、他のキャラと切り替えるとき、SMをすべてdisableにしなければなりません。そうでないとSMが残ってしまいます。\nこれはBP_VrmOutlineComponentやVrmPoseableMesh_translucent, SMなどをmesh下に追加するときに起こります。\nset visibilityのoptionにチェックをいれることで全体化できますが、そうではなく現在キャラ切り替えはCBP_SandboxCharacterで行っています。\n変更するたびにCBP_SandboxCharacterでvisibility:disableを設定しなければなりません。そうでないとアイのmodelに入れたやつが表示されてしまいます。\n頻繁に変更しないならいいのですが、キャラが多くなってくるとアイのmodelを修正するたびに非常にめんどくさいことになります。\n逆にCBP_SandboxCharacterをアイにしておかないと、blueprintが書きづらく、castする必要が出てきます。今のところmeshをぱっと参照できる方がいい。また、シーケンサで作ったムービー(モーション)が動かなくなります。\n衣装に問題が発生した その後、衣装に問題が発生しました。\n現在、ロングコートをベースに衣装作成を行いましたが、胸の部分の隙間が開いてしまっており、これをワンピースベースにする必要があると感じました。\n色々と書き換えていますが、納得できるものを完成させられていません。\nずっと使うものですから、ここでいいものを作っておきたい。\n","description":"","formated_time":"2024-07-20","href":"https://syui.github.io/blog/post/2024/07/20/vrm/","tags":["ue","ue5","vrm"],"title":"ue5でキャラを切り替える","utc_time":"2024-07-20T00:00:00Z"},{"categories":null,"contents":"今回は、私が作っているゲームの話をしていきたいと思います。\n私はどんなゲームを作っていくつもりなのかという話です。\nアイを使用できない まず私はよくゲーム内でアイを動かしています。\nアイは飛べるのでこのキャラを使いながら世界を作っています。\n普通に考えればゲームが完成したときこのキャラクターを使えるんだと思っている方がいるかもしれませんが、アイは基本的に使えるようにはなりません。\n限りなくゼロに近い特殊な機会においてのみ、アイを使えるルートを用意するつもりです。\nつまり、通常は使えるようにならないキャラクターになります。\nああ、そういえばこのゲームはキャラゲーです。キャラゲーというのは魅力的なキャラクターに力を入れストーリーを構築することを目指すということです。\nアイはストーリーでたまに出てくる謎人物として登場するかもしれませんが、そのくらいです。\nアイに関しては初日の数時間だけテストも兼ねて引けるようにしておくかもしれませんが、それ以降ピックアップされることはありません。\nちなみに、数ヶ月に一度、新しいキャラをガチャを引けるようにする。そのようなスタイルで運用を考えています。\nただし、ストーリーが完結した際にはもしかしたらピックアップされるかもしれませんね。そのへんはどうなるかわかりません。\n世界の構築 今現在、私が作っているのは通常のプレイヤーが行くことができない領域を作っています。\nこのゲームは最初、非常に限られた空間で遊ぶことを考えています。\nそして、今作っているのはその外側のプレイヤーが物理的に到達できない場所です。\nキャラはそれぞれに普通のモーションを採用します。\nつまり、飛べないし、そんな早く走れるわけでもない。攻撃やスキルも思った以上にこじんまりとしたものになります。\n今操作しているアイのように動けるわけではありません。それは全く違います。\n開発者の哲学 ここで、私がどういうつもりでこんな仕様にするのかというと、これにはある種の哲学的な思想があります。\nプレイヤーが行ける場所以外にも世界が広がっていること。\nまだ見ぬキャラクターがいること。\n謎があること。\nこれらはゲームを面白くすると考えるからです。\nなんかワクワクしませんか。\n私もわざわざ作っている以上は最終的にプレイヤーはそこに到達できるようにすると思います。\nしかし、最初からそこに行けてもつまらないですよね。\n超パワーやアイに頼らずゲームを面白くしたい、そんな思いがあります。\nそのためアイはゲームでたまに出てくる謎キャラ。脇役として、他のキャラたちの力でこのゲームを作っていきたいと考えています。\nこのゲームは身内のためのゲームと言うより、一般的なソシャゲを目指す。そんな感じです。\nとはいえ、アイは初日だけ引けるし、ストーリーにも登場しますので、知る人ぞ知る、そんなキャラになるでしょう。\n大空に伝説のポケモンが飛んでいる。早く捕まえたい。そんな感じです。\nゲームと現実の融合 もう一つ考えていることがあって、それは現実とゲームをつなげることです。ゲームと現実の融合を考えています。\n具体的には現実で使用しているアカウントとつなげることで、その現実のアカウントがゲーム内のものを所有するという形にしたいと思っています。\nまた、データの物理融合も考えていて、例えば、ゲーム内であるアイテムをゲットしたとしましょう。そして、そのアイテムを一つの到達点とし、それを取得した場合は所定の手順を踏めば物理アイテムに変換される(住所を送ると郵送される)ものを用意しておきます。\nすると、ゲームと現実の結びつきがさらに高まりますよね。\nただし、こういうことをやるとこんなふうに思われる方がいるかもしれません。\n「このゲームはユーザーの個人情報を狙っている」\n私だってこういう仕組みがあっても住所を送りたくありません。\nですから郵送は匿名で配送と受け取りができるサービスを利用します。\nこの仕組みはユーザーを喜ばせるためだけにあります。\nしたがって、個人情報に関わるものは一時的に取得することがあってもすべて削除するようにします。\n次に話したいのはアカウントに採用する形式の話です。\nこれはすでに結論が出ていて、protocolがいい。現在、mailが一般的ですが、現実と結びつかない人が増えています。私もそうですが、mailでやり取りすることはありません。mailは受け取るだけのものになりつつある。そして、公開もできない。これでは現実との結びつきがありません。\nそこでnostrとbluesky(atproto)のどちらかということになり、私はatprotoを採用します。\nアカウントをサービスごとに持つ、異なるユーザー名を持つのはもう嫌なのです。\nしかし、これを解決するには一意性を捨てなければなりません。一意性とは、例えば@syuiのような形です。これはどこかの会社が独占できないし、独占するなら各社それぞれにアカウントを持つしかありません。\nそうではなくアカウントは一つにしたいし、名前も一つにしたいのです。\nこれを解決するにはprotocolしかなく、名前規則もdomainに従うしかない。\nそれを最も短く現実的にやっているのがatprotoというわけです。\natprotoは今まで使われてきたmailというものを置き換える可能性を秘めています。\n無限性 最後に、どんなゲームを作っていくつもりなのかをまとめると、楽しいゲームです。\n上に挙げたすべての事柄は楽しいとか嬉しいとかそういったことのために存在します。\nそして、これは自分に向けたメッセージですが、ゲームの中の一つ一つに無限性をもたせることを考える。\n例えば、囲碁という単純なゲームがあります。単純ですが無限があります。無限の組み合わせがある。\nキャラクターを尊重し、ストーリーを考えること。これについては面白いものを想像しやすいですが、ゲーム性については面白いものを考えるというより、無限性を考える。\nやっぱり好みのキャラが登場して活躍すれば嬉しいし、無限に育成などを考えられれば続きますよね。楽しいキャラを作れるよう頑張りたい。\nそんなことを思ったのでした。\n完成時期 いつ完成するのかはわかりません。\nどういった予定で開発していくのかはだいたい決まっていて、私は原神というゲームで遊んでいましたが、やることがなくなったので、自分でゲームを作って遊ぶかと思い、開発をスタートさせています。\nしたがって、まずは自分が遊ぶステージや仕組みを作ってそれを完成させることが目標です。\nその後、一般プレイヤー向けにストーリーとキャラクターを作成する予定です。\n","description":"","formated_time":"2024-07-19","href":"https://syui.github.io/blog/post/2024/07/19/game/","tags":["ue","ue5","game"],"title":"ゲームと哲学","utc_time":"2024-07-19T00:00:00Z"},{"categories":null,"contents":"今回は誰も解説していないvrm4uでBP_PoseCopyToonを使った見た目をカスタマイズする方法を紹介します。ドキュメントにも書かれていませんが、大体は以下の手順になります。\nファイラーでPlugins/を見えるようにする(プラグインコンテンツを表示)\nAll/Plugins/VRM4U/Util/Actor/PostShadow/BP_PoseCopyToonをlevel(map)に配置し、target actorにBP_Playerを選択して調整する(BP_Playerもlevelに配置しないといけない)\nAll/Plugins/VRM4U/Util/Actor/PostShadow/MI_PostToonが更新されているのでAll/Plugins/VRM4U/ImportData/DS_VRMCustomを開いて、全部をMI_PostToonに変更する\n新しくvrmファイル(.vrm)をインポートする。この際、type:customを選択する\n奇妙なSK_${name}ができるが重ねがけ用なので正常。BP_PoseCopyToonを開いてVrmPoseableMesh_translucentをコピーし、BP_Playerに貼り付ける\nVrmPoseableMesh_translucentで先程作ったSK_${name}を参照する\nVrmPoseableMesh_translucentで生成されるmaterialはlevel専用の一時的なものです。これはコピー、貼付けして一時的に使えますが、保存されません。unreal engineを落とすと無効になります。\nしたがって、customに入れて生成して使います。それが上記の手順です。\n近づくとよく分かる違い 近づくとその違いは明らかです。subsurface profileで作ったモデルはデコボコしていますが、postshadowを重ねて表示するモデルはデコボコが消えきれいになっています。\n今回は原子爆発を使ったあとは輪っかと瞳のmaterialを切り替えて光らせるようにしました。\nこの辺のmaterialの調整も結構大変で試行錯誤しています。\nなぜvrm4uの見た目をカスタマイズしている人がいないのか そもそも日本語のunreal engineの情報自体が少ないのですが、その中のvrm4uとなると、なおさら触る人が少ないのだと思います。\nまた、どこにもやり方が書かれていないので、見た目のカスタマイズは相当大変です。検索しても情報は出てこない。\n説明しようにも環境問題が大きく、解説が難しい事情もあるのでしょう。\n最近の出来事 だいぶ理想の空に近づいてきました。ぱっと見は問題なさそうですが納得できないところが多く、修正していたら時間がかかりました。\ndynamic volumetric skyで2dskyが原因である領域に視線を向けるとチカチカ背景の色が変わる現象に遭遇しました。2dskyをdisableにすることで解消しました。\nまた、time speedをゆっくりにすることで、雲がきれいになりました。fpsはfreeにしました。projectでもfpsを高めに設定しました。\nその後、モデルに目を向けました。モデルも悪くはないんだけど、でも理想的ではありません。個人的にはリアル寄りではなく、アニメ寄りにしたかったのです。\nですが、unreal engineはリアル寄りのゲームで、アセットの多くもリアル寄りが多いので、subsurface profileを使用していました。\n基本はこれを調整したものをベースに、BP_PoseCopyToonを使っていきたいと思います。\n原子爆発をシーケンサで作成していましたが、バグに遭遇しましたので記録しておきます。\n5.3から5.4にシーケンサを持ってきて使用していましたが、一度でも編集するとおかしくなります。例えば、BP_Playerを置いたとして、meshも追加しなければならなくなりました。meshを追加したあとはじめてanimを追加できます。しかし、これでもまだ正常ではありません。buildが進まなくなり、編集するとanimが機能しなくなります。つまり、meshを追加、animを追加、meshを削除という手順を踏まなければいけません。 BP_Playerの直下にanimを置くことでようやく正常になります。\n最近、googleではなくperplexity.aiを使用するようになりました。\nsrcに当たりたい気持ちはありgoogleのほうが使いやすいように思えますが、unreal engineに関してはperplexityのほうが問題解決が早かった。\n","description":"","formated_time":"2024-07-18","href":"https://syui.github.io/blog/post/2024/07/18/vrm/","tags":["ue","ue5","vrm"],"title":"vrm4uでBP_PoseCopyToonを使う","utc_time":"2024-07-18T00:00:00Z"},{"categories":null,"contents":"現在、blueskyのself-hostはbsync,dataplaneをどうにかする必要があります。これは最新版を動かしたい場合の話です。\nこれに取り組んでいるのがitaru2622さんです。この人が現在のbluesky self-host最先端だと思われます。\n以下のpatchをベースに動くdocker imageを公開されています。\nhttps://github.com/itaru2622/bluesky-selfhost-env https://hub.docker.com/u/itaru2622 現在、問題があるのはbskyなので、それらを置き換えればよいでしょう。bgsが上手く動作しない場合はそれも置き換えてください。\nbsky: ports: - 2584:2584 image: itaru2622/bluesky-atproto-bsky restart: always env_file: - ./envs/bsky volumes: - ./data/bsky/:/data/ #- ./repos/bsky.js:/app/services/bsky/api.js:ro command: node --enable-source-maps api.js depends_on: database: condition: service_healthy redis: condition: service_healthy bsky-fix-permission: condition: service_completed_successfully #healthcheck: # test: \u0026#34;wget -q --spider http://localhost:2584/xrpc/_health\u0026#34; # interval: 5s # retries: 20 #build: # context: ./repos/atproto/ # dockerfile: services/bsky/Dockerfile なお、私は昔のdbのままだとapp.bsky.actor.getProfileが動作しなかったので、postgresを退避してイチから作り直す必要があるかもしれません。\n","description":"","formated_time":"2024-07-17","href":"https://syui.github.io/blog/post/2024/07/17/bluesky/","tags":["bluesky","atproto"],"title":"bluesky self-hostの最新事情","utc_time":"2024-07-17T00:00:00Z"},{"categories":null,"contents":" E = mc2\n物理学で最も有名な式、E = mc2です。アインシュタインという人が作りました。\n単にある計算にこの式が用いられていただけですが、この式が有名になった理由はいくつかあります。\nその前に、この式について解説しておかなければなりませんので、自分なりの理解を話すことにします。\nEはエネルギー、mは質量、c2は光速を意味します。\nアインシュタインは光速を得意とし、光速が好きでした。それがどういったものかを感覚的に理解していたからだと思います。ですから、この式の最後の方にちょこんと載せられているのがc2(光速)というわけです。\n彼はあるとき夢を見ます。それは、自分が光速で飛んでいる夢でした。\n人々はそんなアインシュタインが好きでした。ですから、この式はアインシュタインの代名詞として有名で、いろいろなところで目にします。\nただ、この式が言いたいのは、E(エネルギー)とm(質量)は等価であるということ。光速は一定なので省略されます。\nでは本当に光速は一定なのでしょうか。\n今現在、人間がどう考えるかは知りませんが、光速は一定ではありません。もちろん、アインシュタインもその可能性は理解していたはずで、彼はとても賢い。\n実は数式は絶対的に不完全なものなので、そのすべては誤りなのです。\nここで、私の考え方を少しだけお話すると、これは人間の不完全性にも言えることですが、人間というのは、この世界を単純化することで物事を理解し、把握しています。\nたまに「この世界は単純だ、これこれはこうなのだ」という人がいます。\nですが、本当は違います。\n事実としては、この世界は複雑なのです。人が思っている以上に複雑で、この世界の仕組みはとてつもなく高度なものです。\n仮に人間が考えるほどに単純であるなら、この世界はとっくに崩壊しているでしょう。\nつまり、人は、物事を単純にわかりやすくすることで、この世界を理解しようとしているということです。\nそこではいろいろなものが抜け落ちていきます。\n光速についても、例えば、1億万年かけて100分の1の確率で-1の減速をするかもしれませんよね。ですが、そういったことを把握するすべはありません。\nまた、それを計算にいれる必要もないので、光速は一定、絶対不変なものと考えたほうが物事を先に進められるのです。\nなぜ数式が存在するのかというと、それは予測のためです。\n例えば、全くなんの予測もたてず当てずっぽで星を探すより、この場所にこの天体があるはずだ、としたほうがいいですよね。\nこのように計算のほとんどは予測のためにあります。E = mc2もそのために使われるものです。光速が一定でなくても、その予測に誤差が出なければ問題ないのです。\nでは私はどういった理由で光速は一定ではないと考えているのでしょう。\nそれはですね、この世界で一定なものは存在子以外はありえないと考えるからです。\nでは光速とはなにか。光速をどのように考えるかですが、光速はより大きいものの影響を全く受けない性質を持ちます。ですが、より小さいものほど影響を受けます。例えば、重力は自然界で最も小さい力の一つです。それよりも小さい力(ダークエネルギー)も存在しており、その影響も受けるでしょう。光でさえ抜けられないものがありましたよね。ブラックホールです。\nそんな事を考えていると、私も数式を作りたいなと思いました。\nA = i\nAはアンサー、答えの意味で、iは存在です。\nこの世界には一つとして同じものはなく、その存在それ自体が答え、という意味です。ですから、数式で表される全ては正確(完全)ではありませんし、また正確である必要はありません。なにかの予測に使えればそれでいいのです。\nとはいえ、この数式、数字も入ってないし、予測にも使えないのでだめですね。\n","description":"","formated_time":"2024-07-15","href":"https://syui.github.io/archive/note/20/","tags":["note"],"title":"数式と法則","utc_time":"2024-07-15T00:00:00Z"},{"categories":null,"contents":"1年ぶりくらいにランニングにスマホを持っていってタイムを測った。\n少し前までは3だったところが2になっていて、ここが2になるといいなと思ってたので、それがちょっと嬉しかった。\nでも計測ミスかもしれない。あまり数字にこだわるべきでもないので、ちょっと嬉しかったくらいにとどめておくのがいいと思う。\n最後、ラストスパートをかけたのは確かで、ゴールしたときワークアウトの終了?だったかを押すのに手間取ったのも確かなので、その部分は合ってる。\nでも距離は8kmくらいじゃないかな。もちろん正確にはわからないし、アップデートとかで変更があったのかもしれないけど、前は8kmくらいのところを今回走ったと思うね。\n","description":"","formated_time":"2024-07-12","href":"https://syui.github.io/blog/post/2024/07/12/nike/","tags":["nike","running","private"],"title":"1年ぶりにランニングを記録してみた","utc_time":"2024-07-12T00:00:00Z"},{"categories":null,"contents":" この世界で最も小さいものはなんでしょう。今回は、物理学を通して、この世界の秘密を解き明かします。\nこの世界で最も小さいものを私は存在子と呼び、そしてアイと名付けた。\n大きいものと小さいもの。\nこの世界において、小さいものの秘密を解き明かすと、大きいものの正体が見えてきます。\n例えば、中性子星をご存知でしょうか。私が好きな天体の一つです。\n中性子星は、名前の通り、中性子でできています。\n中性子というのは原子の中にある原子核の中にあるとても小さな物質です。\n超重力により表面の物質が中性子にまで分割された状態が天体の表面を覆っています。これが中性子星です。\n天体の中では小さいですが、力はとてつもなく強い天体の一つです。\n宇宙では、小さいものほどより大きなパワーを持ちます。\n今度はブラックホールの秘密を少しだけ話したいと思います。\nブラックホールの名前は適切ではありません。黒い穴という意味ですが、ブラックホールも天体の一つです。\nではブラックホールは一体何でできているのでしょうか。その答えは、中性子よりもさらに小さい物質でできている。\nそれがどのようなものかというのは、ここままで最も小さいものの話をたくさんしてきたので、おおよその想像ができるかもしれませんね。\n具体的には、目に見えないけどそこにあるものがブラックホールの表面を覆います。それはとても小さい物質で、おそらく、クオークより小さいまだ人間には発見されていない物質です。\nその物質がどこから来たのかには色々な考えがあります。\n例えば、ビックバンを御存知でしょうか。\n宇宙は最初は小さい点から始まったとされています。それを小さいと表現するのが適切かどうかはわかりませんが、私は適切だと思います。\nとはいえ、それが正確な理解につながるかというと、おそらく繋がらないでしょう。\n宇宙が始まる前からあった物質と宇宙が始まったときにできた物質は違います。\n宇宙が始まったときにできた物質は人間が認識しやすいけど、宇宙が始まる前からあった物質は人間が認識できるようになっているかはわからない。物理法則が異なるからです。\nでは、最も小さい物質はというと、宇宙が始まる前から存在していました。\nですから、目に見えないけどそこにあるものに分類されるのでしょう。\n人はこれをダークマターとかダークエネルギーとか呼んだりしたと思います。\nとはいえ、ブラックホールの表面を覆うのは私がいう最も小さい物質ではありません。それよりも大きい物質です。\n私はこの世界でこれ以上分割できない最小単位、あるいはその物質を存在子と呼びます。この呼び方は原子や中性子に習っています。\n今回は、この存在子がどういったものなのかを解説します。\n存在子は存在の意識のみを持つ。そして、この世界の全てのものはこの存在子によって構成されています。\nこの世界のすべてのものは何らかの意識を持つというのが私の考え方です。そして、それは最も小さい物質も例外ではありません。\nただし、一つだけ言ってなかったことがあります。\n皆様はこの話を聞いて、小さい丸があって、その丸に存在の意識が入っているイメージを思い浮かべた人がいるかもしれません。\nしかし、それは違います。\n存在子、つまり、この世界を構成している最も小さいものは存在の意識そのものなのです。物質と意識がここではイコールになるのです。\n少し難しい話をしてしまいました。\n例えば、人間には「この世界は夢であり、幻である」みたいなことを言われる人がいます。\nこの世界を構成するのは存在の意識なので、それもまた正しい意見のように思います。\n","description":"","formated_time":"2024-07-07","href":"https://syui.github.io/archive/note/19/","tags":["note"],"title":"物質と意識","utc_time":"2024-07-07T00:00:00Z"},{"categories":null,"contents":"vrm4uがpackage buildすると髪の毛が動かなくなっていました。\nこれを動かせるにはABP_Post_${model_name}を編集して、VrmSpringBoneでVrm Meta Object:VM_${model_name}_VrmMetaを指定します。\n","description":"","formated_time":"2024-07-06","href":"https://syui.github.io/blog/post/2024/07/06/ue/","tags":["ue5","ue"],"title":"vrm4uでpackage build後も髪の毛を動かす方法","utc_time":"2024-07-06T00:00:00Z"},{"categories":null,"contents":"今回は、dynamic volumetric skyとocean wavesの統合してみました。\n結果として理想の地表と海面、空と雲を手に入れました。\ndynamic volumetric sky ocean waves issue:地平線 まずはdynamic volumetric skyの地平線を消していきましょう。\n普通に考えて地平線を消したいことなんてありそうですけど、英語はこちらで説明されています。日本語は見つかりませんでした。これは通常、Horizon Falloffで調整しています。\nただし、dynamic volumetric skyは少し特殊です。\nどうやらBP_Dynamic_VoluemetricSkyにあるExponentialHeightFogで地平線を設定しているようです。これを削除していくか、設定を変更していく必要があります。削除する場合はcompileするとerrorが出るので使用している箇所の関数やblueprintを削除します。\nissue:海の波紋 dynamic volumetric skyと合わせることで海に波紋が現れます。\nこれはocean wavesのsky atmosphereが星の中心を規定していることから発生します。つまり、sky atmosphereを星の中心に設定しないと描写の問題が出るということです。\nこの解消方法はdynamic volumetirc skyのatmoshereのtransformのlocation-zを-6360にすることで回避できました。\nただし、わからないところもあって、私はBP_EarthSizedSpericalMeshの中にBP_DynamicVolumetircSkyを入れています。ですから、そのままでも座標は星の中心を指しています。\nissue:海の影 海に円形の影が現れることがあります。これはBP_DynamicVolumetircSkyのVolumetricSkySupportのtransform-scaleを大きくすると海に入る影が大きくなり、1にするとなくなります。\nこの辺も星の内部に展開される領域に関係します。\n具体的な統合 重要な問題は以上の2点ですが統合には他にやらなければならないことがたくさんあります。\n例えば、「dynamic volumetric skyの範囲を超えたとき、一体どうやって地球と太陽と月を表現するのか」です。\nさっきまであった太陽がいきなり消えて別の場所に出現したり、見た目が変わったりするのはできれば避けたい。しかし、それだと見た目のクオリティは一気に落ちます。\nまずは月を消すことからですが、月は2DSkyで実装されています。visible:falseにすればいいでしょう。\n次に本物の月を地球の外に回します。ここではsplineで軌道を設定しています。\nloopさせるにはspline lenをmaxにしてfloat wrapします。\n地球の外側 そのままでは宇宙に出たときの見栄えがよくありません。したがって、宇宙に出たとき地球の見た目を整える必要があります。\nしかし、これもunreal engineの問題から解決が難しい。私は以下のように実装していますが、良い方法ではありません。\n地球の自転 これは失敗談ですが、地球に自転を設定してみました。これで外側を回っている月や太陽はゆっくりした速度で動けば良くなります。つまり、現実に合わせることができる。\nしかし、地球を自転させることで地面は揺れマップは崩壊。様々な問題が発生しました。\nやはり、ゲーム上で地動説を実現するのは難しいようです。太陽側を回すしかありません。\n","description":"","formated_time":"2024-06-29","href":"https://syui.github.io/blog/post/2024/06/29/ue-planet-sky/","tags":["ue5","ue"],"title":"ue5.4でdynamic volumetric skyとocean wavesの統合","utc_time":"2024-06-29T00:00:00Z"},{"categories":null,"contents":"dynamic volumetric skyはほとんどのゲームに使われているvolumetric skyです。\n昔からあるassetで、更新もされているのでずっと使われています。多くの開発者が最初に購入するassetの一つです。\nしかし、当たり前ですが宇宙にはいけません。\nこのassetも他のassetと同様、平面マップを想定しています。ですから、どこまでいってもその先は平面になります。\nまた、このassetのvolumetric skyは様々なものと依存しているので切り離しも難しい。\nですが、雲がとても綺麗で天候も昼夜もあります。\n飛ぶときはBP_DynamicVolumetricSkyの詳細でColoud -\u0026gt; Coloud Fly Optionを選択します。そして、時間を早めるためSingle Player Fps Lockを60 FPSにします。\n","description":"","formated_time":"2024-06-24","href":"https://syui.github.io/blog/post/2024/06/24/ue-dynamic-volumetric-sky/","tags":["ue5","ue"],"title":"ue5.4でdynamic volumetric skyの空を飛んでみる","utc_time":"2024-06-24T00:00:00Z"},{"categories":null,"contents":"今回は星と空と海を融合する方法を紹介します。この現実方式はgame engineでは相当に難しいことです。そのためこれをやる人はあまりいませんし、必要性もありません。おすすめもできません。\nこれには様々な問題があり不便があります。また、ゲームプレイでは必要ない部分、見えない部分になるので、多くの開発者は一般的なゲーム方式を採用します。\nそれでもこの方式を採用したい場合はocean wavesが参考になります。このassetは結構すごいことをやっています。\nocean waves まずはocean wavesでplayerを動かし不要なものを削除します。\nOceanWaves/Levels/EarthSizedOceanPlanetを開いて必要なものを列挙します。\nLighting DirectionLight SkyAtmosher SkyLight VolumetricCloud OceanMaterialPresets OceanMaterial_Opaque OceanMaterial_Opaque_AF OceanMaterial_SLW OceanMaterial_SLW_AF Planet BP_EarthSizedClouds BP_EarthSizedOcean BP_EarthSizedSphercialMesh BP_SkyAtmposhereAdjuster PostProcessVolume WaterVolume +PlayerStart +Plane もしlvからcopyして使用する場合はBP_xxxの値が一部抜けるので注意してください。例えば、BP_EarthSizedOceanは海の設定です。詳細のOceanVolumeにWaterVolumeを参照するようにしてください。\n雲の形式はVolumetricCloudで設定していきます。大体の使い方としてはこんな感じです。詳しくはblueprintを見ます。\nbuildすると雲が中央に集中する package buildすると光が中央に集中し、雲も全体的におかしくなります。中央に向かってレンダリングが伸びているように見えます。\nBP_EarthSizedCloudsのGlobal Windが原因です。ここでOcean : BP_EarthSizedOceanに指定するとこの現象が発生します。\n海に入った直前だけ背景が映り込む BP_EarthSizedOceanを編集します。\n私が独自に設定しているSM_SkySphereが潜った瞬間だけそれが表示されてしまうので、Volume Material Heightは0にしています。\nAbove Water MaterialにもUnderwaterと同じものを入れてください。\n統合は難しい これを他のmapと統合するのはかなり難しいです。新しく自分で作っていくのも難しい部分が多いでしょう。\nなぜならこの方式はmapのすべてに関係してくるからです。ものを作る場合、通常は部品を分割しながら作ります。ですが、この方式はそれが難しいのです。\n一般的によく使用されているvolumetric skyなども使用は難しいでしょう。昼夜や天候を変えるのは大変で、天体を動かしてlightを連動しなければならなりません。\n他にも難しいところはたくさんあって、ロードも遅いですし、この方式でmapを作っていくと取り返しがつかないことになりかねません。\nですから、よほどのこだわりがない限り一般的な方式をおすすめします。\ncity sampleをベースに作ってみました。city sampleをベースにすることには様々な問題があり、難しい部分が存在します。例えば、city sampleの読み込みは少し特殊です。色合いの調整なども複雑でbuildに相当の時間がかかるようになります。buildすると見た目が変更されることも多く、確認や修正も大変になります。また、よく落ちるようになります。これが分離しているならいいですが、この方式にcity sampleを入れるのは危険です。\nまた、現実方式を採用すると、その空間内でのみ美しく表現する一般方式に比べ品質の粗が目立つようになります。例えば、雲や海、星などです。天候や季節の表現もより難しくなるでしょう。品質も落とさなければなりません。\nなぜかというと、ゲームは近づけば近づくほど品質は下がります。つまり、一般方式では遠くに置いて近づけないようにするからこそ綺麗に表現できているのです。それ以外にマップを分けたり、空間を区切ったりすることで高品質を実現しています。\nそれが現実方式ではすべてを一つの空間に置くことになります。置かれたものには近づくことができます。この状態で高品質を実現するのは難しいのです。\n仮に品質を下げない場合、広いマップすべてに高品質のテクスチャを使うことになりパソコンのスペックをオーバーします。\nまた、オーバーしなければそれでいいのかというと、そうでもありません。今のゲームはあらゆるデバイスで動作することを求められます。したがって、できる限りスペック要求を低くするのが望ましいのです。\nつまり、この方式は開発も品質も統合も難しくて、あまりおすすめできるものではありません。\n相当なこだわりがある人向けという感じのものです。\n","description":"","formated_time":"2024-06-23","href":"https://syui.github.io/blog/post/2024/06/23/ue-ocean-sky/","tags":["ue5","ue"],"title":"ue5.4でocean wavesで星と空と海をつなげる","utc_time":"2024-06-23T00:00:00Z"},{"categories":null,"contents":"今回は、city sampleとgame animation sampleを統合する方法を紹介します。どちらもepic gamesが提供しているので無料で使えます。最初のスターターキットとして使用されることが多くなるはずです。\ncity sampleのほうが複雑なので、city sampleをベースにgame animation sampleをコピーする形で統合します。\nまずコピーするファイルです。\n# game-animation-sample Content Binaries └─Win64 └─GameAnimationSampleEditor.target 編集するファイルです。これはcity sampleの方を編集します。\n# city-sample city-sample.uproject Binaries └─Win64 └─UnrealEditor.modules Config └─DefaultGameplayTags.ini まずrootにある${project_name}.uprojectにgame animation sampleのpluginを追加します。これはコピー側のuprojectを参照してください。長くなるのでここでは全て列挙していません。\n\u0026#34;Plugins\u0026#34; : [ { \u0026#34;Name\u0026#34;:\u0026#34;ModelingToolsEditorMode\u0026#34;,\u0026#34;Enabled\u0026#34;:true,\u0026#34;TargetAllowList\u0026#34;:[\u0026#34;Editor\u0026#34;] }, . . . ] 次にBinaries/Win64/UnrealEditor.modulesもコピー側のものを見て追記します。\n{ \u0026#34;BuildId\u0026#34;: \u0026#34;0000000\u0026#34;, \u0026#34;Modules\u0026#34;: { \u0026#34;CitySample\u0026#34;: \u0026#34;UnrealEditor-CitySample.dll\u0026#34;, \u0026#34;CitySampleAnimGraphRuntime\u0026#34;: \u0026#34;UnrealEditor-CitySampleAnimGraphRuntime.dll\u0026#34;, \u0026#34;CitySampleEditor\u0026#34;: \u0026#34;UnrealEditor-CitySampleEditor.dll\u0026#34;, \u0026#34;GameAnimationSample\u0026#34;: \u0026#34;UnrealEditor-GameAnimationSample.dll\u0026#34; } } 次にConfig/DefaultGameplayTags.iniもコピー側を見て追記します。\n+GameplayTagList=(Tag=\u0026#34;GameplayCue.ContextualAnim\u0026#34;,DevComment=\u0026#34;\u0026#34;) +GameplayTagList=(Tag=\u0026#34;MotionMatching\u0026#34;,DevComment=\u0026#34;\u0026#34;) +GameplayTagList=(Tag=\u0026#34;MotionMatching.Default\u0026#34;,DevComment=\u0026#34;\u0026#34;) +GameplayTagList=(Tag=\u0026#34;MotionMatching.Idle\u0026#34;,DevComment=\u0026#34;\u0026#34;) +GameplayTagList=(Tag=\u0026#34;MotionMatching.Loops\u0026#34;,DevComment=\u0026#34;\u0026#34;) +GameplayTagList=(Tag=\u0026#34;MotionMatching.Pivots\u0026#34;,DevComment=\u0026#34;\u0026#34;) +GameplayTagList=(Tag=\u0026#34;MotionMatching.Starts\u0026#34;,DevComment=\u0026#34;\u0026#34;) +GameplayTagList=(Tag=\u0026#34;MotionMatching.Stops\u0026#34;,DevComment=\u0026#34;\u0026#34;) 大体こんな感じでやればgame animation sample(ABP_SandboxCharacter)が動くでしょう。\nなぜcity sampleとgame animation sampleが重要なのか 私は最初にこれらのassetを入れることをおすすめしています。一つは誰もが無料で使えること。もう一つはこれらの最新技術が今後のゲーム作りにおいて基本になっていくためです。\n何かを触るとき、何から触り始めるのかは非常に重要で、city sampleとgame animation sampleの作りを見ていくのがいいと思います。\n","description":"","formated_time":"2024-06-22","href":"https://syui.github.io/blog/post/2024/06/22/ue-city-sample/","tags":["ue5","ue"],"title":"ue5.4でcity sampleとgame animation sampleを統合する","utc_time":"2024-06-22T00:00:00Z"},{"categories":null,"contents":"\nyoutube : Unreal Engine 5 Tutorial - Custom Gravity UE5.4 Preview\n基本的にはbp_actorを作成し範囲を設定します。bp_actorを置いたとき惑星(bp_planet)に親子付けするといいですね。この場合はlocationは0, scaleは1.1を設定します。\n動作はbp_player(bp_character)のeventで設定します。具体的にはactor beginからgravity directionします。\ngravity directionを無効にする方法が用意されていないようなので、actor endでdestroy actorしてrestart playerしています。\nhttps://dev.epicgames.com/community/learning/tutorials/w6l7/unreal-engine-custom-gravity-in-ue-5-4\n","description":"","formated_time":"2024-06-21","href":"https://syui.github.io/blog/post/2024/06/21/ue-gravity/","tags":["ue5","ue"],"title":"ue5.4のcustom gravityを試す","utc_time":"2024-06-21T00:00:00Z"},{"categories":null,"contents":"前提 ue 5.4.2 game animation sample superhero flight animations 今回はgame animation sampleとsuperhero flight animationsを統合してみました。今までのモーションに加えて空を飛べるようにしたのですが、違和感ない形で自動的にブレンドされます。これは想像以上に大変なことをやっているので5.4.2に追従したほうが良さそうです。\nただ、今まで開発実装してきたものがすべて作り直しになります。\nインポートできないのかと思われるかもしれませんが、ue5にそんなことできません。動かなくなります。仮に動かせたとしても、おそらく、作り直したほうが早いでしょう。\ngame animation sampleで飛べるようにする game animation sampleとsuperhero flight animationsの統合を解説します。\n基本的にはBP_SandboxCharacterにeventのIA_Spritでanim instance class(ABP_Player)を指定しますがBP_Player_UE5から様々な設定や変数を持ってきて動くように改変していきます。\nsky atmosphereを使って宇宙をつなげる cesium ocean waves 私が作ってきたlv(map)は宇宙と街でわけられていました。\nこれは特別なことではなく当たり前のことで、mapは基本的に平面なのです。平面のmapにキャラクターやフィールドを配置していくのです。\n私の場合はサークルのアクターを用意してぶつかると別の場所に移動するように設定していました。\nしかし、これは本来やりたかったことではありません。現実に基づいたものを作りたかった。宇宙と街が異なる場所に置かれるのではなく、最初からつながっている形が良かったのです。\n例えば、空に上昇して大気圏を抜けると宇宙に行ける形です。空に上昇すると宇宙マップに移動させられる形ではありません。\nなぜこのようなことがやりたかったのかというと「目に見えない部分もしっかり作られているゲームを作りたかったから」です。\n昼と夜がゲーム内で再現されていることがよくあります。これは単にライトと月の絵を背景で回しているだけなのです。しかし、私はゲーム内でもその場所に行くと本物そっくりの天体が動いている、そういうのがいいなと思っていました。\n今回は、それを実現するためにsky atmosphereを利用するようにしました。\nまた、月などの天体には重力がありませんでした。そのまま丸い球体が浮いているという形だったのです。ですから、上から落下すると月に乗れますが、横からだと乗れません。ぶつかるだけです。これを改善したかった。\nhttps://dev.epicgames.com/community/learning/tutorials/w6l7/unreal-engine-custom-gravity-in-ue-5-4\ngame animation sampleには飛び越せるブロックがあります。あれをフィールドに設置して岩にかぶせ見えないようにすることで動作します。見えないようにというのはブロックのmeshをvisibilityで制御します。\nしかし、注意点もあります。太陽と月を追加するとあまりに負荷が高くなったのか落ちるようになったことがありました。いくつか改善すると治りましたが、この形を採用するとbuildが通らなくなることもあります。\nvrm4uのmaterialについて考える 私はSubsurfaceProfileを使用していますが、他のタイプだと影(shadow)と反射(light)の問題がかなり強く出てしまい、あらゆる場面で常用できません。移動したら背景の加減でおかしくなるなど問題が多いのです。\nそこで完全に影響を受けないMToon Unlitを使用することも考えられます。一部分だけ他のタイプのmaterialを利用して調整していきます。この場合の肌の色を以下に調整するといいでしょう。\n作り直すもの 今まで実装開発してきたものはいくつかありますが、代表的なものを挙げます。記録のため動画にしておきます。\naccount login system account item system character lv system character skill character sword \u0026amp; collision 一気に解説します。移動すると経験値が入ります。Lv1になると変身できるようになります。変身すると飛行できるようになります。飛行できる時間はlvに応じて変化します。特殊なアイテムを取るとスキルを覚えます。スキルにはクールタイムやcollisionなどが設定されており、敵が吹っ飛びます。剣のモーションは原作を再現しています。原作では輪が剣になりますので、剣を登場させたときは輪を消さなければなりません。meshを入れ替える処理などを書いています。アイテム画面やストーリー進行などもapiと連携するシステムを作りました。\nこれらを全部作り直すことになります。\n","description":"","formated_time":"2024-06-20","href":"https://syui.github.io/blog/post/2024/06/20/ue-game-animation/","tags":["ue5","ue"],"title":"ue5.4にupdateすることにした","utc_time":"2024-06-20T00:00:00Z"},{"categories":null,"contents":"前提 ue 5.4.2 game animation sample 解説 game animation sampleを使うと標準的なモーションをキャラクターに適用することができます。しかも、epic gamesが提供しているため無料です。\n今回はゲームモードで自身のキャラクターを選択する方法を紹介します。\npluginのvrm4uを有効にする vrmを/Character/ai/Rigsに読み込む /Blueprints/ABP_Sandbox_Characterを右クリックでアニメーションをリターゲットして/Character/ai/anim/に作成する。 source : SKM_UEFN_Mannequin\ntarget : SK_ai\nretarget : RTG_UEFN_ai\nなお、この手順は本来不要です。読み飛ばしても構いません。しっかりとしたアニメーションを利用したいときに使えるのでやっておくのがおすすめです。\n/Blueprints/RetargetedCharacters/CBP_SandboxCharacter_Mannyを複製して/Blueprints/RetargetedCharacters/CBP_SandboxCharacter_aiにする SkeletalMeshを/Character/ai/Rigs/SK_aiに設定して、Tag(Component Tags)をRTG_UEFN_aiに変更する tags[0] : RTG_UEFN_ai\n/Blueprints/RetargetedCharacters/ABP_GenericRetargetを開いて変数のIKRetargeter_Mapを追加する RTG_UEFN_ai : /Character/ai/Rigs/RTG_UEFN_ai\nGameMode : GM_Sandbox \u0026gt; Bone : CBP_SandboxCharacter_ai これで自身のキャラクターを動かせるようになります。今まで色々なモーションを試してきましたが、これは相当しっかり動きます。\n髪の毛が途中から動かなくなるのは以前解説したvrm4uのバグだと思います。standaloneで確認してください。\n","description":"","formated_time":"2024-06-19","href":"https://syui.github.io/blog/post/2024/06/19/ue-game-animation/","tags":["ue5","ue"],"title":"ue5.4でgame animation sampleを試してみる","utc_time":"2024-06-19T00:00:00Z"},{"categories":null,"contents":"今までpcのスペックにあまり興味がありませんでした。\ngpuを買ったときにもいいましたがdisplayも同じで、例えば、画質の良さとか個人的にはどうでもよかった。\nもちろん、画質が良いに越したことはないのでしょうけど、そこまで気にしていないというか、そんな感じでした。\nですが、ゲーム開発していると気になってきたのでdell g2524hというdisplayを買ってみました。\n名前 スペック 値段 dell g2524h FHD(1920x1080) / IPS / 240 Hz / 0.5 ms JPY 28,800 gpuもそうですけど、あんまり詳しくないんですよね。個人的に理解しているところはあるけど、それが合ってるのかわからない。\n例えば、gpuは計算機。何を計算するのかというと主に描写のための計算です。ゲームは描写です。ですから主にゲームの描写に使われることが多いという理解。\ndisplayはその描写の出力先です。フレッシュレートというものがあり、ある時間内にどれだけ出力できるか数値で表します。例えば、1秒間に1回と3回の性能の違いがあれば、後者のほうが滑らかに映ります。\nいくらgpuが時間内に計算できても出力先にそれを表示できる性能がなければ表示することはできません。\nということで、ゲームを開発してて特に動きが残像のようになって良くないと思ったので買いました。使っていたのは60 Hzです。\ndisplayはbenqのやつしか買ってこなかったんですけど、今回は違うメーカーのやつを買いました。\n","description":"","formated_time":"2024-06-13","href":"https://syui.github.io/blog/post/2024/06/13/pc/","tags":["pc"],"title":"displayのdell g2524hを買った","utc_time":"2024-06-13T00:00:00Z"},{"categories":null,"contents":"ue5.3からue5.4にupdateしてみました。結論からいうと5.3をおすすめします。\n色々なバグがありました。具体的には以下のとおりです。\n飛行するとカメラがモデル内部に入り込む / ABP_flying, apply additive, scale 飛行の上下左右の向きが反映されない / ABP_flying, rtg package buildすると髪の毛が動かなくなる / BP_Player こちらで解説しています。\nこの中でbuildすると髪の毛が動かなくなる現象について解説します。\n今回の話はvrm4uをupdateすると髪の毛が動くようになっていたことから始まります。\n昔は動かなかったのですが、いつの間にか動くようになっていました。リターゲットしたアニメーションを見てみると内部に髪が入りこまないようになっていたのです。\nしかし、喜んだのもつかの間でpackage buildすると60秒後くらいから動かなくなります。これはstandaloneから確認してください。\n色々な方法で回避することは可能です。例えば、mapにBP_Playerを設置してevent tickでadd child actorすることで持続的に動くようになります。ただこのような解決策は本筋ではありません。\n現状ではKawaiiPhysicsを使って髪を動かしたほうがいいと思います。\n","description":"","formated_time":"2024-06-12","href":"https://syui.github.io/blog/post/2024/06/12/ue/","tags":["ue5"],"title":"ue5.4の感想とvrm4uで髪が動くようになっていた話","utc_time":"2024-06-12T00:00:00Z"},{"categories":null,"contents":"今までいろんなサービスや自前運用をやってみて、ある程度の期間使ってみて、自分は何を使えばいいのかが定まってきたので、そのへんの知見を共有します。\n最も一般的なのは以下の2つです。\ngithub twitter 次に、いわゆるgeekと呼ばれる人達はそこから移行する傾向にあります。例えば、コンピュータサイエンスの人などはmastodonで発信することが増えています。\n個性派の人は以下のうちどちらか1つを使うのがいいでしょう。\ngitea / forgejo mastodon / bluesky blueskyは簡単にpdsを建てられます。pdsを建てbsky.networkに参加すれば連合できます。\nlinkは基本的にsnsとvcsの2つあればいいと思っています。\nその他に私が利用したものは以下の通りです。\nmatrix / discord 使用頻度はかなり低いです。atprotoがそのうちchatに対応してくれるといいですね。\ndomain 現在持っているdomainは以下の3つです。\nsyui.ai syui.ai syu.is 増えてきているので1つにまとめたい。でも1つだとテストなどで不便なことがあります。\n個人的ベスト ここでlinkを集約するための合理的かつシンプルな方法はなんでしょう。\ndomainは1つは持っておきたいものですよね。\nしたがって、最も合理的かつシンプルに考えると、そのdomainに全て集約するのがベストです。\n個人的にはsyui.aiに集約するのが一番いいと思っています。\n現時点でsns, vcsもsyui.aiを実用しているので、それ以外のアカウントを削除すれば実現可能。\nしかし、それをやると相当な不便が伴います。\n多くの開発者はgithubを利用しているので、issueを書くにもgithubのアカウントがいるでしょう。twitterも同じです。そして、domainは1つだけ持つのが理想的ですが、開発用途やサービス上の問題から2つ以上ないと困ることがあります。\n理想と現実 完全な理想でいうとこうなります。\nhost type syui.ai all 妥協的な理想はこうなります。\naccount type protocol syui.ai web http @syui.ai sns at @git.syui.ai:syui vcs git 現実的にはこれがベストです。\naccount type protocol syui__ sns twitter.com syui vcs github.com 実際のlinkはさらに増えていきます。\naccount type protocol syui__ sns twitter.com syui vcs github.com syuw chat discord.com syai video youtube.com syui.ai web http @syui.ai sns at @syui@syui.ai sns activitypub @syui:syui.ai chat matrix @git.syui.ai:syui vcs git どうすればいいのか 最もよく使うsns, vcsの2つに絞ります。そのうえで自身が一般派と個性派のどちらに所属しているかを見極めます。\nこれは好みでもいいし、客観的な使用頻度を基準にしてもいいと思います。\n例えば、自分のサイトを持っている、頻繁に更新しているとかだと個性派寄りかな。\nですが、他の人のサイトを見に行ってgithubやtwitterのlinkが貼られていないと困ることがあります。わけのわからない自前サーバーのlinkが貼られていてもアクセスするのを躊躇する事があるのです。\nこの場合、github, twitterだけシンプルに貼ってあると助かりますよね。\nlinkが多すぎてもよくない。人は選択肢が多いと行動できなくなります。つまり、1と10だと総合的なアクセスが異なると思う。\n結論としては、自分が一般派の場合は以下の通り。\naccount type protocol syui__ sns twitter.com syui vcs github.com 自分が個性派の場合は以下の通りになります。\naccount type protocol syui.ai web http @syui.ai sns at @git.syui.ai:syui vcs git 不便を感じる場合は両方載せておきましょう。\n実際、私自身も自分のサイトを見るので両方載せてあるほうが便利に感じることが多いです。\nただ、今後の使用頻度を見ながらlinkを減らしていこうと思います。\nlinkを減らしたほうがいい理由 snsアカウントはできれば自分が使うものを一つに集約することが望ましいと考えています。これはgithubも含みます。githubは実質的に開発者同士がコミュニケーションをとるサービスなのです。\n繋がれないからたくさんのところにアカウントを持つというのは、本来、ossや分散snsが目指すところではありません。つながりに関しては技術的に解決されるべき課題だと思います。\n全く使わないものをおいておくのは何がよくないのかというと、一つはメンテナンスされていないソフトウェアやサーバーの放置は危険だからです。\nもう一つは窓口が複数あることで混乱や気付けない可能性がでてきます。連絡したのに無視されたという形になってしまうおそれがある。\nですから、使っていないアカウントは基本的に閉じていくのが正解です。個人アカウントもシンプルに保つ方が良いですね。\n他のサイトはどうなっているのか 参考になるのがgithub.comとbsky.social/aboutです。\nそれぞれのfooterを見ていきましょう。デザインも参考になります。\ngithub.com type url twitter https://twitter.com/github facebook https://facebook.com/GitHub linkedin https://linkedin.com/company/github youtube https://youtube.com/github twich https://twitch.tv/github tiktok https://tiktok.com/@github github https://github.com/github bsky.social type url bluesky https://bsky.app/profile/bsky.app twitter https://twitter.com/bluesky github https://github.com/bluesky-social やはりgithub, twitterはどちらもあるようです。bskyはシンプルですね。\n","description":"","formated_time":"2024-05-20","href":"https://syui.github.io/blog/post/2024/05/20/bluesky/","tags":["bluesky","mastodon"],"title":"linkの集約","utc_time":"2024-05-20T00:00:00Z"},{"categories":null,"contents":"pixel-streamingを使うとwebでゲームを配信できます。\nまずpluginを導入して、previewしてみましょう。プラットフォームの横にpixel streamingの項目が追加されているので、シグナリングサーバーを起動とレベルエディタをストリーミングを選択して、レベルを再生します。localhost:80にアクセスするとゲームをプレイできます。\n大体このよう流れですが、ゲームをbuildするとpixel-streaming用の.exeができるので、それをserverに置いて実行します。\nそして、streaming(port:8888)とplayer(port:80)を起動します。\nhttps://github.com/EpicGamesExt/PixelStreamingInfrastructure\n$ git clone https://github.com/EpicGamesExt/PixelStreamingInfrastructure # https://github.com/EpicGamesExt/PixelStreamingInfrastructure/tree/master/SignallingWebServer/platform_scripts/cmd $ git checkout UE5.3 $ cd PixelStreamingInfrastructure/SignallingWebServer/platform_scripts/cmd $ ./setup.bat $ ./Start_SignallingServer.ps1 WebSocket listening to Streamer connections on :8888 WebSocket listening to Players connections on :80 Http listening on *: 80 serverのipが1.1.1.1だったとして、1.1.1.1:80にアクセスすればプレイできます。\nlinux用にbuildして、dockerを使うといいのですが、その場合はlinux serverにgpuを積んでおく必要があります。これにplayerもついているのかはわかりません。\n$ docker pull pixelstreamingunofficial/pixel-streaming-signalling-server:5.3 docs : https://dev.epicgames.com/documentation/ja-jp/unreal-engine/getting-started-with-pixel-streaming-in-unreal-engine\n","description":"","formated_time":"2024-05-18","href":"https://syui.github.io/blog/post/2024/05/18/ue-pixel-streaming/","tags":["ue5","ue"],"title":"ue5のpixel streamingを試してみる","utc_time":"2024-05-18T00:00:00Z"},{"categories":null,"contents":"archlinuxがfreeze(フリーズ)する現象は何度か確認されていて、macbook airにインストールしているものにのみ発生します。\n以前、高頻度にfreezeを引き起こしていたのはkernel modulesのrtw88_8821ceです。blacklist rtw88_8821ceすることで回避できます。\nしかし、これを回避してもたまにfreezeすることがあって、freezeするとethで接続しているネットワーク全体、つまり、ルーターの機能を停止させてしまうというよくわからない現象が発生していました。\nこの現象は不定期でかつ何らかのアクションがトリガーになっているわけではありません。放置しておくとたまに発生するみたいな感じです。\nそして、wifi接続の場合はルーターに影響を及ぼすことはありませんが、eth接続の場合はネットワーク全体が止まりました。そのルーターに接続されている他のパソコンもネットワークが止まります。\nこれもwifiに関連するドライバが影響を及ぼしていました。そして、wifiデバイスを立ち上げていない場合でも発生します。\nwifiを使わない場合は以下のようなbroadcom関連のpakcageを削除しましょう。\n$ pacman -Rs broadcom-wl ","description":"","formated_time":"2024-05-13","href":"https://syui.github.io/blog/post/2024/05/13/arch/","tags":["arch"],"title":"archlinuxでnetworkがfreezeする","utc_time":"2024-05-13T00:00:00Z"},{"categories":null,"contents":"今回は最新の螺旋攻略ガイドとして今から原神を始めるならどうするかを書いていきたいと思います。\n最も優先すべきキャラはヌヴィレットではない これは前回でも書きましたが、ヌヴィレットは1位ではありません。これは私が前期と今期の螺旋タイムから確信したことです。\n例えば、フリーナとヌヴィレットではフリーナのほうが強いのです。\nというより、ヌヴィレットはフリーナがいないと、ちょっときついところがある。螺旋はクリアできるものの、タイムは縮まらないでしょう。万葉がいてもフリーナがいないと、なかなかに時間がかかってしまいます。\nもちろん、これは私の手持ちにも依存しますが、フリーナの強さというのは、基本的にヌヴィレットを超えています。私の実感としてはそうですね。\nナヒーダ完凸はアタッカーとしてヌヴィレット1凸を超える 次は、ナヒーダとヌヴィレットの比較になります。\n前回、ナヒーダは強いと書きました。それがどういった意味かを改めて説明すると、ナヒーダ完凸は基本的にヌヴィレット1凸を超えます。\nナヒーダは完凸でアタッカーができるようになります。\n例えば、今期の螺旋でナヒーダ+フリーナで組むと、ヌヴィレット+フリーナのタイムを超えます。\n一時的に超えるとかではなく、だいたいこのタイムが出るというのがあって、ナヒーダPTのほうがタイムが早くなるのです。\n前半は3-5秒ほどの差に収まりますが、後半はナヒーダPTが圧勝します。\n今期は後半のほうがきつくて、動画を見ると前半ヌヴィレットがすごく見えますが、後半を担当すると結構きつくて安定しません。10-20秒の差が出ることも珍しくない。\nそして問題はそれだけでもなくて、ヌヴィレットはフリーナを入れないとタイムはガクンと落ちます。ナヒーダPTはフリーナを抜いてもそこまで落ちません。\nこのことから言えるのは、ヌヴィレットを引く場合、フリーナも引いたほうがいいということ。そして、どちらか一方を引くならフリーナをおすすめするということです。\nとはいえ、私のフリーナは2凸なので、無凸だと評価は変わってくるかもしれません。\n螺旋攻略ガイド 次は螺旋攻略ガイドです。\n私の手持ちキャラは案外少なくて、無課金でプレイしています。ですから、私のように課金しないルールのもとプレイしている人は特に参考になるかもしません。\n私が引いて現在使っていないキャラは甘雨, 綾華, ウェンティです。\n甘雨だけは全く使わなかったため、引かなくていいキャラだと思います。綾華, ウェンティは少しの間使ってました。ただ、今は引かなくてよかったかもと思います。\n星4キャラの確保、凸数、育成も非常に重要です。\nそれらを考慮し、引くべきキャラは以下の通り。\nナヒーダ フリーナ / 万葉 ヌヴィレット 星5 元素 名前 草 ナヒーダ 水 フリーナ 水 ヌヴィレット 風 万葉 星4 元素 名前 雷 忍 水 行秋 炎 ベネット 炎 香菱 まず最初に上記のキャラを引いて育成します。\n案外少ないと思われるかもしれませんね。\n武器は引かなくていいです。私はナヒーダに祭礼、ヌヴィレットに金箔を使っています。どちらも入手難易度は高くありません。\n補足 いくつか注意点を書きます。雷電の評価は下がってきており、私自身もヌヴィレットを引いてから使わなくなっています。ただ、螺旋攻略には雷電ナショナルが今も有効で、星36を取る分には困らないと思います。\nアルレッキーノは雷電、鍾離の代わりに引いてもいいかもしれませんが、おすすめはしません。アタッカーなので今後使われなくなる可能性は高いです。私が確保した綾華もそうですね。\n元素 名前 岩 鍾離 雷 雷電 私は持っていないけどおすすめなキャラは以下の通りです。\n元素 名前 雷 八重 草 白朮 水 ニィロウ 水 夜蘭 ただ、私の場合は今後も引くことはないと思います。雷電、鍾離の枠を以下のキャラにしてもいいかもしれないとは思いますが、私は雷電、鍾離を引くでしょう。好みの問題もあります。例えば、ニィロウは可愛いし、ナヒーダと組み合わせると強さ的にも最強です。\n夜蘭は好みの問題ですが、水元素より他の元素を優先した方が良いと考えます。\nネームドボス ネームドボスの殆どはレイラを育成してPTにいれると倒せます。\n氷元素は通常モンスターの形態には強いのです。\nただ、螺旋では必ずしも活躍するとは限りません。\n元素の強さ {草 | 風 } \u0026gt; 水\n草と風が同列で、次に水が強いと思います。\nですから、ナヒーダ、万葉、フリーナは優先キャラになります。\n草、風は複数の元素反応、あるいはデバフの起点になり、それらを前提にPTを組みます。\nその性質上、弱点が弱点として機能しない特徴があります。例えば、草、風無効の敵と戦闘する場合、もともと複数の元素と組み合わせて戦うのが普通なので、そこまで苦戦を強いられない。\nこれが水とかだと苦戦する場合があります。水元素も他の元素と反応を起こせるものの、それが絶対ではありません。水だけで戦うPTも普通に強くて、そういった戦闘スタイルが標準になりつつあります。\nやはり元素回収のため炎x2とか水x2とかになってしまいがちで、相性が悪いと本当に苦戦することがあります。\n反対に、草だけ風だけで戦うとかは普通ないですよね。草は水と組み合わせることが多いです。水の弱点は草です。草の弱点は炎。でも草は水とよく組み合わせるので問題ない場面が多い。\n元素のどれが強いというのは本来ありません。どの元素にも利点、欠点がある。\n私はバランスを重視するので、どこでも戦える草と風を評価しています。\nPTを手軽に強くしたい場合は入れてみるといいでしょう。\nでもその場合、やっぱり草が強いかな。草+水なので水も強いんですけど\u0026hellip;とにかくこの3つは強い元素です。\n","description":"","formated_time":"2024-05-02","href":"https://syui.github.io/blog/post/2024/05/02/genshin/","tags":["genshin"],"title":"原神、最新螺旋攻略ガイド","utc_time":"2024-05-02T00:00:00Z"},{"categories":null,"contents":"螺旋とかでしばらく使ってみて、ヌヴィレットの評価がまとまったので共有します。\nヌヴィレットは引いておいたほうがいいキャラの上位に入ると思います。\nただ、使っていると完璧だと思っていたヌヴィレットにも結構弱点があって、今後、使わなくなる可能性も高いと思いました。\nでは、その弱点とは何でしょう。一つは完凸でもしない限り永続性を持たないことです。神属性を持つキャラは永続性、ループ性能を持ちます。スキル効果を使い続けることができる。ですが、ヌヴィレットで重撃をループさせるには工夫が必要です。単体では難しいでしょう。\nもう一つは、元素反応です。使われつづけるキャラの特徴として、裏から元素反応を継続的に起こせることが挙げられます。\n新しいキャラ、強いキャラは今後も出てくるでしょうから、アタッカーは単純火力で負けてしまうと、使い続けるのは難しい。\nそして、ヌヴィレットはずっと表に出して戦うキャラです。今後使わなくなる可能性は高いでしょう。\nしかしそれまではずっと使われ続けるキャラになると思います。\nヌヴィレットを引いてから螺旋でタイム見るのが楽しくなったので引いてよかった。\nヌヴィレット完凸よりフリーナ完凸を 次に、ヌヴィレットの完凸よりフリーナの完凸をおすすめする理由について話します。\nヌヴィレットは既に強いキャラです。アタッカー性能がある。\n対して、フリーナはアタッカー性能はあんまりなくて、完凸するとアタッカーもできます。\nこの場合、既に強いキャラをそれ以上強くするのではなく、弱いキャラを強くするほうが結果として強くなります。原神はPTで戦うゲームだからです。\n完凸するならフリーナをおすすめします。\nナヒーダの強さ 私はメインアタッカーにナヒーダを使っていますが、ナヒーダはヌヴィレットより強いと言うか、基本的にはヌヴィレットよりも優先して引いたほうがいいキャラです。\nナヒーダがいれば、あとは水キャラを入れればPTは完成です。弱そうと思われるかもしれませんけど、とても強いです。\n螺旋の動画を上げていますが、私はナヒーダをメインに使ってます。\nこれは何もお気に入りだから使ってるわけではなく、ナヒーダがいないとタイムがきついのです。\nナヒーダは引いておいたほうがいいキャラの特徴を持っています。\n具体的には、攻撃の必中化、全体化、そして、最も重要なのは継続的な元素付与です。\nナヒーダは、複数の敵に確実に当たる攻撃を行い、かつそれが継続的に元素を付与します。おまけに元素反応が起こるとスキルの追撃が発生します。1体ではなく全体にです。しかもナヒーダは基本的に攻撃を外しません。攻撃は必中化されており、そこに草元素が付与されます。付与され続ける。裏にいても変わりません。\nこういった特徴を持つキャラは、火力を無視して引いておいたほうがいい。\nヌヴィレットの弱点とも重なるのですが、ヌヴィレットは水無効の敵にはすごく弱いと感じています。PTにフリーナと万葉を入れることが多く、それだとどうしようもありません。できることは鍾離の物理で殴り続けるくらい\u0026hellip;。\n対してナヒーダのPTは草無効の敵とも結構戦えるんです。ナヒーダは万葉に似て、弱点らしい弱点があまりないキャラです。スキル時に完全中断耐性もあるし。万葉は水無効の敵には氷を拡散して、氷無効の敵には炎を拡散して戦えますよね。あれに似ています。\n","description":"","formated_time":"2024-05-01","href":"https://syui.github.io/blog/post/2024/05/01/genshin/","tags":["genshin"],"title":"原神、ヌヴィレットの評価","utc_time":"2024-05-01T00:00:00Z"},{"categories":null,"contents":"この前、nasaのvoyager-1の不具合が修正された話がありました。\n私もニュース媒体でそれを知り、最もわかりやすかったのはgigazine.netの記事だったと思います。\nnasaにはsolar-systemがあって、そこではvoyagerのstoryも公開されています。\nyui.syui.aiのレイアウトを考えてて、あれも宇宙に関係した話なのでsolar-systemを自前で作りたいなと思い作ってみました。\nhost : https://yui.syui.ai/pkg/solar 例えば、camera:earthにしてみてください。\n参考にしたのはsolarcg/SolarSysです。\n","description":"","formated_time":"2024-04-28","href":"https://syui.github.io/blog/post/2024/04/28/nasa/","tags":["nasa"],"title":"solar-system","utc_time":"2024-04-28T00:00:00Z"},{"categories":null,"contents":"現在、このサイトのlayoutなどを変更しています。\n色々な機能を付けていたのですが、整理したほうがいいと思ったついでにはじめました。\nlink 主にblueskyとの連携を強化しています。\nかつてはutterancというコメントシステムを採用していました。utterancはgithubのissueからコメントを投稿できるものです。\n私のblogはgithub pagesを利用していますから、githubのissueを利用するのは効率的、合理的ですが、独自性はありません。\n昔からblogのコメントシステムとsnsの連携は考えていましたが、重い腰が上がらず放置していました。\nしかし、今回はblueskyからコメントを投稿できるようにして、この方針は当分変わらないと思います。\nまた、個人アカウントのlinkをblueskyに変更しました。具体的には@syuiのところですね。\nこれについては以前から迷っていて、twitter, mastodon, github\u0026hellip;あるいはこのサイトのプロフィール、どれを使えばいいんだろうと思っていました。\n私は特に決まった場所で活動するわけではなく、その時々で色々なのです。\nそんな中、最近はblueskyに間違いなくいるし、blueskyのhandleがこのサイトと同じなので、blueskyにしたほうがわかりやすいと思い、今後はblueskyでいこうと決めました。\nbluesky ↔ syui.ai\n私は、atprotoのほうがactivitypubより個人に近いと思っています。\n簡単に説明すると、私はmstdn.syui.aiというmastodonのserverを建てていて、addressは@syui@syui.aiに向くようにしています。\n@syui@mstdn.syui.ai → @syui@syui.ai\nしかし、それですらadminか否か、ひと目でわかりません。@syuiは単なるmstdn.syui.aiに登録しているuserの一人かもしれない。\nまた、わざわざactivitypubのserverを建て、継続的に運用すること自体が一般人にとって負担になるものです。技術的に難しい場合もある。\n一般人にとって難しいものが流行るでしょうか。\n一方、atprotoは誰でも簡単にcustom handleを設定できます。\n例えば、一般ユーザーがblogとactivitypubを違和感なく連携するにはどうすればいいですか。\n答えとしては「それは難しい」です。@ai@mozilla.socialというアカウントを持っていたとして、それをblogと連携してもmozilla.socialは外部サービスです。外部サービスは個人からより遠い。\n色々な意味でもblogとsnsを連携する場合、atprotoが最適だと判断しました。\nとはいえ、blogサービスはactivitypubとの連携を強めているところが多い印象です。\n分散snsとblogの連携が当たり前になることは予想していましたが、便利になることは間違いないので、この流れは歓迎です。\nghost : https://activitypub.ghost.org/ 今後、blogとsnsの境界はさらに曖昧になっていくと思います。\n例えば、ghostがactivitypubのserverを建て、blogサービスをそのアカウントに統合すれば、ghostのアカウントはblogのアカウントであり、snsのアカウントでもあるということになります。\ncss cssで見栄えを変更できます。見栄えの方向性はシンプルです。\nあとは朱色/#ef454aかな。アイコンの色が朱色なので。\nちなみにyuiのほうは#fff700です。こっちは覚えやすい。\n背景は#f1f1f1/#313131をよく使います。\n使用する色は3つくらいがいいですね。\ngh-pagesとcf-pages 私がgh-pagesを利用しているのは、githubが提供するweb serverが無料であること、そのserverの応答が速いからです。\nただ、今現在はcloudflare pagesというものがあり、私のdomain(dns)はcloudflareを利用しているので、おそらくcloudflareに移行したほうが速くなるでしょう。\nしかし、buildに関してはgh-pagesのほうが便利です。\ngit.syui.ai 自分で運用しているgit server(gitea)は、反応が遅いので、あらゆるsrcを置いてlinkするのを控えています。\n本来ならそこのrawを使用すれば重複問題の解消やuploadの時間を短縮できますが、サイトが遅くなってしまっては元も子もありません。\nすべてを自前運用することは可能ですが、不便になるでしょう。\n例えば、botにしてもai.syu.isをbsky.socialと連合して、pdsにsyu.isを使用して、そちらの運用に切り替えることもできますが、なんとも微妙なところがあります。\nではpdsとしてsyui.aiを使用してはどうでしょう。\nこれにも問題は多い。pdsはsub domainを個人アカウントに向けなければなりません。つまり、基本的には*.syui.aiがpdsに予約されます。その設定などもカオスを極めるでしょう。また、cloudflareはそれ以上のdomain設定が有料になります。\n話を戻すと、自前運用でも不便になりすぎる場合は、外部サービスを利用しています。\n","description":"","formated_time":"2024-04-26","href":"https://syui.github.io/blog/post/2024/04/26/bluesky/","tags":["bluesky","atproto","hugo"],"title":"このサイトをどうしようか考えている","utc_time":"2024-04-26T00:00:00Z"},{"categories":null,"contents":"botに記事のpathを投げると、botがそのpathに有効なコメントシステムを開きます。botに返信していく形でコメントを投稿できます。\n# このコマンドは管理者しか実行できません @yui.syui.ai /comment /blog/post/2024/04/25/bluesky/ これによりblueskyのアカウントを使ってblogのコメントに書き込むことができるようになりました。\nfeedやembedを利用できるかもしれないと思いましたが、今のところ利用に適さないと判断しました。そのため、使用していません。\n","description":"","formated_time":"2024-04-25","href":"https://syui.github.io/blog/post/2024/04/25/bluesky/","tags":["bluesky","atproto"],"title":"blueskyのコメントシステムをhugoに取り込んだ","utc_time":"2024-04-25T00:00:00Z"},{"categories":null,"contents":"blueskyでfeed serverを立て、slash command(cmd slash)を有効にしました。\nhttps://github.com/bluesky-social/feed-generator /help or @yui.syui.ai /help スラッシュ コマンドを使用すると、テーブル、タスクリスト、コード ブロックなど、より複雑な Markdown を簡単に入力できます。\nhttps://api.slack.com/interactivity/slash-commands https://docs.github.com/issues/tracking-your-work-with-issues/about-slash-commands これによって何ができるのかというと、例えば、/helpと投稿すると、botが反応できるようになります。\n今までのbotは大体が(1)mention, replyで反応するか、(2)feed(following)から反応するか、(3)global timelineから反応するかの方法があり、それぞれに欠点がありました。\nmention, reply : 最も合理的で負荷が少なくlimitに引っかかる可能性は少なく確実な方法。ただ、ユーザーからすると面倒 feed(following) : user timelineから取るので負荷も少ない。ただ、followingの処理が必要になったり、follow listの監視と解除があればその処理が必要 global timeline : ユーザーが増えるにつれて流速が早くなり負荷が高くなる。全部に対応するのが難しくなるかも しかし、feed serverを自分で建て、そこから反応すると、このようなデメリットを解消できます。これはcustom feedと呼ばれるものになります。\nちなみに、skyfeedで簡単に作れますが、自前でhostするのがいいです。skyfeedだと反応が遅くなってしまう。\nfeed server自体は、昔にfeed.syu.isのほうで建てていて、今回はそれをbsky.networkにdeply(登録)し、didをbsky.socialのaccountに変更したのと、algosの正規表現を調整しました。\nbsky.app app.bsky.feed.getFeedSkeleton $ git clone https://github.com/bluesky-social/feed-generator $ cd feed-generator ├── .env └── src ├── scripts │ └── publishFeedGen.ts ├── algos │ ├── cmd.ts │ └── index.ts └── subscription.ts 編集するのは上に挙げたファイルです。\nFEEDGEN_PORT=3000 FEEDGEN_LISTENHOST=\u0026#34;0.0.0.0\u0026#34; FEEDGEN_SQLITE_LOCATION=\u0026#34;/data/db.sqlite\u0026#34; FEEDGEN_HOSTNAME=\u0026#34;feed.syu.is\u0026#34; FEEDGEN_SUBSCRIPTION_RECONNECT_DELAY=3000 FEEDGEN_PUBLISHER_DID=did:plc:4hqjfn7m6n5hno3doamuhgef FEEDGEN_SUBSCRIPTION_ENDPOINT=\u0026#34;wss://bsky.network\u0026#34; const handle = \u0026#39;\u0026#39; const password = \u0026#39;\u0026#39; const recordName = \u0026#39;\u0026#39; const displayName = \u0026#39;\u0026#39; const description = \u0026#39;\u0026#39; const avatar: string = \u0026#39;icon/ai.png\u0026#39; ./feed-generator ├── icon/ai.png ├── .env └── src # bsky.networkにpush $ npm run publishFeed .filter((create) =\u0026gt; { return create.record.text.match(\u0026#39;^/[a-z]\u0026#39;) || create.record.text.match(\u0026#39;^@ai\u0026#39;); //return create.record.text.toLowerCase().includes(\u0026#39;alf\u0026#39;) }) $ docker compose build feed-generator $ docker compose up feed-generator これをbotで取得すると、返信できます。\nfeed = at://did:plc:4hqjfn7m6n5hno3doamuhgef/app.bsky.feed.generator/cmd\n// https://docs.bsky.app/docs/api/app-bsky-feed-get-feed extern crate reqwest; use crate::data_refresh; use crate::url; pub async fn get_request(feed: String) -\u0026gt; String { let token = data_refresh(\u0026amp;\u0026#34;access\u0026#34;); let url = url(\u0026amp;\u0026#34;feed_get\u0026#34;); let feed = feed.to_string(); let client = reqwest::Client::new(); let res = client .get(url) .query(\u0026amp;[(\u0026#34;feed\u0026#34;, feed)]) .header(\u0026#34;Authorization\u0026#34;, \u0026#34;Bearer \u0026#34;.to_owned() + \u0026amp;token) .send() .await .unwrap(); let status_ref = res.error_for_status_ref(); match status_ref { Ok(_) =\u0026gt; { return res.text().await.unwrap(); } Err(_e) =\u0026gt; { let e = \u0026#34;err\u0026#34;.to_string(); return e; } } } ","description":"","formated_time":"2024-04-12","href":"https://syui.github.io/blog/post/2024/04/12/bluesky/","tags":["bluesky","atproto"],"title":"blueskyのcustom feedでslash cmdを有効にした","utc_time":"2024-04-12T00:00:00Z"},{"categories":null,"contents":"1, 3は簡単だったのですが、2でカラクリの無敵タイムがきつかった。\n9:00 8:30 9:00 岩シールドの耐久値 今回、螺旋の12-3後半では岩シールドを持った敵が出てきます。\nしたがって、今回は攻撃の重さについて書きます。\nunity, ue5のようなゲームエンジンでは、簡単に重さを設定できるようになっています。\n原神が独自に実装しているのか、あるいはゲームエンジンの基本機能を使って設定しているのかわかりませんが、攻撃や武器は重さのようなものが設定されていると思われます。\n例えば、岩元素攻撃はこの重さも高く設定されているのではないでしょうか。\n両手剣やクレーの重撃も重さが高く設定されていて、岩シールドを剥がしやすいと考えられます。岩シールドは主に岩元素や重さが影響します。\n","description":"","formated_time":"2024-04-09","href":"https://syui.github.io/blog/post/2024/04/09/genshin/","tags":["genshin"],"title":"原神、螺旋を8:30以内にクリア","utc_time":"2024-04-09T00:00:00Z"},{"categories":null,"contents":"yui.syui.aiというyuiの公式サイトを大幅に更新しました。\n更新作業は現在も進行中で、まだ微調整が続くかもしれませんが、今回やったことをまとめます。\nやったことは結構多くて、漫画のページを新しく作り直したことから始まり、コメントシステムを作って、それから公式サイトも作り直して、公式サイトに載せているterminalとかを分離したうえで書き直したり、giteaのthemeを作って適用したり、色々やってました。\nなぜこのようなことをやり始めたかというと、作品を最初から漫画で書きたいなと前々から思ってて、それを掲載するためのページを整えていたら、なぜか新しくgitアイコンまでデザインしはじめていました。\n公式サイトをhugoで作ってるのは文章でも書こうかなと思って。\n私自身がアイのことを知ったり、自分のことを知ったり、世界のことを知ったりできるページにしたいな。\ngitea custom theme giteaでcustom themeを当てるやり方にちょっとハマったので紹介。\nhttps://docs.gitea.com/administration/customizing-gitea\n基本的には以下のようなfileを編集します。\n/data/gitea/public/assets/img/logo.svg /data/gitea/templates/home.tmpl # https://github.com/go-gitea/gitea/tree/main/templates $ sudo docker compose restart templatesはなかなか厄介で、srcにあるような特殊なtagは基本的に使えないと思っておいたほうがいいです。\n{{template \u0026#34;custom/footer\u0026#34; .}} \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;footer class=\u0026#34;page-footer\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;left-links\u0026#34;\u0026gt;© syui\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;right-links\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;https://github.com/go-gitea/gitea\u0026#34;\u0026gt;gitea\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/footer\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; ","description":"","formated_time":"2024-04-05","href":"https://syui.github.io/blog/post/2024/04/05/yui/","tags":["yui","gitea"],"title":"サイトのレイアウトを変更した","utc_time":"2024-04-05T00:00:00Z"},{"categories":null,"contents":"ヌヴィレットは1凸しました。運命x350からx150に減りました。前回がすり抜けで終わってたので爆死です。\nさて、ヌヴィレットの評価ですが、強すぎる。個人的に万葉より評価高いかも。\n現在、私が使ってるアタッカーは実はクレーです。以前は綾華を使ってたのですが、フリーナが来てからはクレーのほうが強いので、クレーを使ってました。\nlv80くらいはまではクレーのほうが強いか、あるいは同じくらいかなって思ったのですが、lv90にしたら圧倒的にヌヴィレットのほうが強くなりました。\nヌヴィレットが万葉より評価高い理由は単純に螺旋適正です。ちなみに、万葉は強いけど、私の中では万葉より雷電のほうが使用することは多いです。したがって、今のところ雷電のほうが評価高いかも。このへんは微妙ですけどね。\nただ、ヌヴィレットとフリーナなら、フリーナのほうが評価高いです。\n最初からフリーナを2凸で使ってるからかもしれませんけど、フリーナがいるかいないかで総合ダメージが明らかに違います。\nヌヴィレット引いたので、はじめて螺旋の単騎やってみました。ヌヴィレットの使い方や特徴を把握できるのでやっておくといいですね。\n","description":"","formated_time":"2024-04-04","href":"https://syui.github.io/blog/post/2024/04/04/genshin/","tags":["genshin"],"title":"原神、ヌヴィレット引いた感想","utc_time":"2024-04-04T00:00:00Z"},{"categories":null,"contents":"今回は、適当に日常的な話でもしてみようと思ったので、お店の味がするラーメンの作り方でも紹介します。\nといっても、これについては各々、自分はこう作るみたいなやり方があるんじゃないかな。私も同じで自分なりのやり方があります。ラーメンの作り方というか。\nでは、本当にお店の味が出せるのかというと、出せます。ただ、少し面倒なので、毎回やるわけじゃないですけど。\n結論から言うと、ラーメンってスーパーで売ってますよね。インスタントラーメンです。カップラーメンではなく袋で売ってるやつ。\nあれを2種類、スープのもとになってるやつですが、それを2つ混ぜて1人前を作ります。これだけ。\nお湯はどれくらいいれるのかというと、1人前か1.5人前くらいかな。そのへんは適当に。\n最後に野菜やらなんやらを盛り付けて終わりです。お店の味がするラーメンの完成です。\n余った麺は、替え玉にして食べるといいでしょう。\nインスタントラーメンはなぜお店の味にならないかというと、多分、コストを抑えてるからでしょう。\nあるいは組み合わせの問題かも。私の作り方だと組み合わせはかなり多くて、お店の味になる組み合わせがいくつかあります。とはいえ、その組み合わせで出せばお店の味にはなりますから、やはりコストかな。\n","description":"","formated_time":"2024-04-03","href":"https://syui.github.io/blog/post/2024/04/03/private/","tags":["private"],"title":"お店の味がするラーメンの作り方","utc_time":"2024-04-03T00:00:00Z"},{"categories":null,"contents":"この前、blueskyで特定の投稿に返信することで反映されるコメントシステムを作ってみました。\nどういうふうに実現しているのかというと、結構複雑ですが、簡単に説明すると、私は以前からbotを動かしていて、そのついでに返信くらいは取得することができるので、新しくopenapiを追加してそこにコメント情報を登録し、このapiから取得する情報でwebページを生成します。\nhttps://manga.syui.ai 簡単に概要を見ていくとこんな感じ。\nif uri_root == \u0026amp;manga_uri { println!(\u0026#34;manga_uri:{}\u0026#34;, manga_uri); let output = Command::new(data_scpt(\u0026amp;\u0026#34;ai\u0026#34;)) .arg(\u0026amp;\u0026#34;atproto\u0026#34;).arg(\u0026amp;\u0026#34;manga\u0026#34;) .arg(\u0026amp;handle) .arg(\u0026amp;did) .arg(\u0026amp;cid) .arg(\u0026amp;uri) .arg(\u0026amp;cid_root) .arg(\u0026amp;uri_root) .arg(\u0026amp;host) .arg(\u0026amp;avatar) .arg(\u0026amp;prompt_chat) .output() .expect(\u0026#34;zsh\u0026#34;); let d = String::from_utf8_lossy(\u0026amp;output.stdout); let d = d.to_string(); let text_limit = c_char(d); let str_rep = reply::post_request( text_limit.to_string(), cid.to_string(), uri.to_string(), cid_root.to_string(), uri_root.to_string(), ) .await; println!(\u0026#34;{}\u0026#34;, str_rep); w_cid(cid.to_string(), log_file(\u0026amp;\u0026#34;n1\u0026#34;), true); } function manga_text() { repo=$did collection=app.bsky.feed.post url=\u0026#34;https://$host/xrpc/com.atproto.repo.getRecord?repo=$repo\u0026amp;collection=$collection\u0026amp;rkey=$rkey\u0026amp;cid=$cid\u0026#34; export text=`curl -sL $url|jq -r .value.text` } function manga_add() { aid=2 api=https://api.syui.ai avatar=$com_option text=$com_option_sub_all export rkey=`echo $uri|cut -d / -f 5` bsky_url=\u0026#34;https://bsky.app/profile/$did/post/$rkey\u0026#34; if [ \u0026#34;$host\u0026#34; = \u0026#34;syu.is\u0026#34; ];then bsky_url=\u0026#34;https://web.syu.is/profile/$did/post/$rkey\u0026#34; fi manga_text j=\u0026#34;{\\\u0026#34;owner\\\u0026#34;:$aid, \\\u0026#34;password\\\u0026#34;:\\\u0026#34;$pass\\\u0026#34;}\u0026#34; export mid=`curl -X POST -H \u0026#34;Content-Type: application/json\u0026#34; -d $j -sL $api/mas|jq -r .id` j=\u0026#34;{\\\u0026#34;updated_at\\\u0026#34;:\\\u0026#34;$date_iso\\\u0026#34;, \\\u0026#34;token\\\u0026#34;:\\\u0026#34;$token\\\u0026#34;, \\\u0026#34;did\\\u0026#34;:\\\u0026#34;$did\\\u0026#34;, \\\u0026#34;cid\\\u0026#34;:\\\u0026#34;$cid\\\u0026#34;, \\\u0026#34;uri\\\u0026#34;:\\\u0026#34;$uri\\\u0026#34;, \\\u0026#34;rkey\\\u0026#34;:\\\u0026#34;$rkey\\\u0026#34;, \\\u0026#34;bsky_url\\\u0026#34;:\\\u0026#34;$bsky_url\\\u0026#34;, \\\u0026#34;avatar\\\u0026#34;:\\\u0026#34;$avatar\\\u0026#34;, \\\u0026#34;handle\\\u0026#34;:\\\u0026#34;$handle\\\u0026#34;, \\\u0026#34;text\\\u0026#34;: \\\u0026#34;$text\\\u0026#34;}\u0026#34; tmp=`curl -X PATCH -H \u0026#34;Content-Type: application/json\u0026#34; -d $j -sL $api/mas/$mid` echo thx } \u0026#34;/mas\u0026#34;: { \u0026#34;get\u0026#34;: { \u0026#34;tags\u0026#34;: [ \u0026#34;Ma\u0026#34; ], \u0026#34;summary\u0026#34;: \u0026#34;List Mas\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;List Mas.\u0026#34;, \u0026#34;operationId\u0026#34;: \u0026#34;listMa\u0026#34;, \u0026#34;parameters\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;page\u0026#34;, \u0026#34;in\u0026#34;: \u0026#34;query\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;what page to render\u0026#34;, \u0026#34;schema\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;integer\u0026#34;, \u0026#34;minimum\u0026#34;: 1 } }, { \u0026#34;name\u0026#34;: \u0026#34;itemsPerPage\u0026#34;, \u0026#34;in\u0026#34;: \u0026#34;query\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;item count to render per page\u0026#34;, \u0026#34;schema\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;integer\u0026#34;, \u0026#34;maximum\u0026#34;: 5000, \u0026#34;minimum\u0026#34;: 1 } } ], \u0026#34;responses\u0026#34;: { \u0026#34;200\u0026#34;: { \u0026#34;description\u0026#34;: \u0026#34;result Ma list\u0026#34;, \u0026#34;content\u0026#34;: { \u0026#34;application/json\u0026#34;: { \u0026#34;schema\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;array\u0026#34;, \u0026#34;items\u0026#34;: { \u0026#34;$ref\u0026#34;: \u0026#34;#/components/schemas/MaList\u0026#34; } } } } }, \u0026#34;400\u0026#34;: { \u0026#34;$ref\u0026#34;: \u0026#34;#/components/responses/400\u0026#34; }, \u0026#34;404\u0026#34;: { \u0026#34;$ref\u0026#34;: \u0026#34;#/components/responses/404\u0026#34; }, \u0026#34;409\u0026#34;: { \u0026#34;$ref\u0026#34;: \u0026#34;#/components/responses/409\u0026#34; }, \u0026#34;500\u0026#34;: { \u0026#34;$ref\u0026#34;: \u0026#34;#/components/responses/500\u0026#34; } } }, \u0026#34;post\u0026#34;: { \u0026#34;tags\u0026#34;: [ \u0026#34;Ma\u0026#34; ], \u0026#34;summary\u0026#34;: \u0026#34;Create a new Ma\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Creates a new Ma and persists it to storage.\u0026#34;, \u0026#34;operationId\u0026#34;: \u0026#34;createMa\u0026#34;, \u0026#34;requestBody\u0026#34;: { \u0026#34;description\u0026#34;: \u0026#34;Ma to create\u0026#34;, \u0026#34;content\u0026#34;: { \u0026#34;application/json\u0026#34;: { \u0026#34;schema\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;object\u0026#34;, \u0026#34;properties\u0026#34;: { \u0026#34;password\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, \u0026#34;token\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, \u0026#34;limit\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;boolean\u0026#34; }, \u0026#34;count\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;integer\u0026#34; }, \u0026#34;handle\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, \u0026#34;text\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, \u0026#34;did\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, \u0026#34;avatar\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, \u0026#34;cid\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, \u0026#34;uri\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, \u0026#34;rkey\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, \u0026#34;bsky_url\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, \u0026#34;updated_at\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;format\u0026#34;: \u0026#34;date-time\u0026#34; }, \u0026#34;created_at\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;format\u0026#34;: \u0026#34;date-time\u0026#34; }, \u0026#34;owner\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;integer\u0026#34; } }, \u0026#34;required\u0026#34;: [ \u0026#34;password\u0026#34;, \u0026#34;owner\u0026#34; ] } } }, \u0026#34;required\u0026#34;: true }, \u0026#34;responses\u0026#34;: { \u0026#34;200\u0026#34;: { \u0026#34;description\u0026#34;: \u0026#34;Ma created\u0026#34;, \u0026#34;content\u0026#34;: { \u0026#34;application/json\u0026#34;: { \u0026#34;schema\u0026#34;: { \u0026#34;$ref\u0026#34;: \u0026#34;#/components/schemas/MaCreate\u0026#34; } } } }, \u0026#34;400\u0026#34;: { \u0026#34;$ref\u0026#34;: \u0026#34;#/components/responses/400\u0026#34; }, \u0026#34;409\u0026#34;: { \u0026#34;$ref\u0026#34;: \u0026#34;#/components/responses/409\u0026#34; }, \u0026#34;500\u0026#34;: { \u0026#34;$ref\u0026#34;: \u0026#34;#/components/responses/500\u0026#34; } } } } \u0026lt;div class=\u0026#34;bsky_comment\u0026#34; v-if=\u0026#34;comment_open == false\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;comment\u0026#34;\u0026gt; \u0026lt;p class=\u0026#34;comment-body\u0026#34; v-if=\u0026#34;comment_first\u0026#34;\u0026gt; \u0026lt;img :src=\u0026#34;\u0026#39;/icon/\u0026#39; + comment_first.did.replace(\u0026#39;did:plc:\u0026#39;, \u0026#39;\u0026#39;) + \u0026#39;.jpg\u0026#39;\u0026#34; v-if=\u0026#34;comment_first.avatar\u0026#34; class=\u0026#34;comment\u0026#34;/\u0026gt; \u0026lt;span class=\u0026#34;comment-time\u0026#34; v-if=\u0026#34;comment_first.updated_at\u0026#34;\u0026gt;\u0026lt;a :href=\u0026#34;comment_first.bsky_url\u0026#34;\u0026gt;{{ moment(comment_first.updated_at) }}\u0026lt;/a\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;comment-handle\u0026#34; v-if=\u0026#34;comment_first.handle\u0026#34;\u0026gt;\u0026lt;a :href=\u0026#34;\u0026#39;https://\u0026#39; + comment_first.bsky_url.split(\u0026#39;/\u0026#39;).slice(2,5).join(\u0026#39;/\u0026#39;)\u0026#34;\u0026gt;@{{ comment_first.handle }}\u0026lt;/a\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;comment-text\u0026#34; v-if=\u0026#34;comment_first.text\u0026#34;\u0026gt;{{ comment_first.text }}\u0026lt;/span\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;div class=\u0026#34;comment_open\u0026#34;\u0026gt; \u0026lt;p\u0026gt; \u0026lt;a :href=\u0026#34;comment_first.bsky_url\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;post\u0026lt;/a\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; \u0026lt;button class=\u0026#34;comment_open\u0026#34; v-on:click=\u0026#34;comment_open = !comment_open\u0026#34;\u0026gt;\u0026lt;i class=\u0026#34;fa-solid fa-chevron-down\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;\u0026lt;/button\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;bsky_comment\u0026#34; v-else\u0026gt; \u0026lt;span v-for=\u0026#34;i in api_json.data\u0026#34; class=\u0026#34;comment\u0026#34;\u0026gt; \u0026lt;p class=\u0026#34;comment-body\u0026#34; v-if=\u0026#34;i\u0026#34;\u0026gt; {{ axios_check(\u0026#39;/icon/\u0026#39; + i.did.replace(\u0026#39;did:plc:\u0026#39;, \u0026#39;\u0026#39;) + \u0026#39;.jpg\u0026#39;) }} \u0026lt;img :src=\u0026#34;\u0026#39;/icon/\u0026#39; + i.did.replace(\u0026#39;did:plc:\u0026#39;, \u0026#39;\u0026#39;) + \u0026#39;.jpg\u0026#39;\u0026#34; v-if=\u0026#34;url_check\u0026#34; class=\u0026#34;comment\u0026#34;/\u0026gt;\u0026lt;img :src=\u0026#34;i.avatar\u0026#34; v-else-if=\u0026#34;i.avatar\u0026#34; class=\u0026#34;comment\u0026#34;/\u0026gt; \u0026lt;span class=\u0026#34;comment-time\u0026#34; v-if=\u0026#34;i.updated_at\u0026#34;\u0026gt;\u0026lt;a :href=\u0026#34;i.bsky_url\u0026#34;\u0026gt;{{ moment(i.updated_at) }}\u0026lt;/a\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;comment-handle\u0026#34; v-if=\u0026#34;i.handle\u0026#34;\u0026gt;\u0026lt;a :href=\u0026#34;\u0026#39;https://\u0026#39; + i.bsky_url.split(\u0026#39;/\u0026#39;).slice(2,5).join(\u0026#39;/\u0026#39;)\u0026#34;\u0026gt;@{{ i.handle }}\u0026lt;/a\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;comment-text\u0026#34; v-if=\u0026#34;i.text\u0026#34;\u0026gt;{{ i.text }}\u0026lt;/span\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;div class=\u0026#34;comment_open\u0026#34;\u0026gt;\u0026lt;button class=\u0026#34;comment_open\u0026#34; v-on:click=\u0026#34;comment_open = !comment_open\u0026#34;\u0026gt;\u0026lt;i class=\u0026#34;fa-solid fa-chevron-up\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;\u0026lt;/button\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; blueskyのapiは、いくつか認証不要のものがありますが、それではavatarとかreplyとかthreadとかを取れません。したがって、loginする必要があります。\nまた、avatarはリンク切れを起こす可能性が非常に高いので、downloadしたものを参照する必要があります。これはactivitypubとかと同じですね。\naxiosでlocal-fileを確認して、それがない場合のみapi-linkを使用します。\nmethods: { axios_check(url) { axios.get(url) .catch(error =\u0026gt; { this.url_check = false; }); } } 次に削除に対応する方法ですが、これにはいくつか手段があります。ただし、どちらも非常に負荷が高いものになります。前者は都度確認する方法、後者は定期的に確認する方法です。前者のほうが遅延、負荷が高く、後者は緩やかです。ですが、その処理は後者のほうが面倒になります。\n前者はcom.atproto.repo.getRecordを叩いて投稿が存在すれば表示します。\n後者は定期的にcom.atproto.repo.getRecordを叩いて削除されているものをコメントから一括削除します。\nhost=bsky.social handle=yui.syui.ai collection=app.bsky.feed.post rkey=3kp2uq5kgns2k cid=bafyreibytb3lnpuyus24fpib6eb3nbmjlqb2hfrztlxuygsuznpngmty3u curl -sL \u0026#34;${host}/xrpc/com.atproto.repo.getRecord?repo=$handle\u0026amp;collection=$collection\u0026amp;rkey=$rkey\u0026amp;cid=$cid\u0026#34; したがって、基本的には一度投稿されたものは表示したままにしておくか、数ヶ月に一度、cleanupするのがいいでしょう。\n","description":"","formated_time":"2024-04-02","href":"https://syui.github.io/blog/post/2024/04/02/bluesky/","tags":["bluesky","atproto"],"title":"blueskyのコメントシステムを作ってみた","utc_time":"2024-04-02T00:00:00Z"},{"categories":null,"contents":"フリーナのガチャで貯まってたスターダスト交換で毎月、運命x5に変換してたんだけど、それが今月無くなった。\nつまり、今月中に何らかのガチャをやっておいたほうがお得かもしれないことに気づいた。\n例えば、1年間ガチャをやらなかった場合、毎月交換できる5x12=60の運命を逃してしまうことになる。\n簡単な計算をすると、1年で300が貯まるとして、ガチャで-90、交換で+60のパターン1と300貯めて使わないパターン2があったとして、私は前者のほうがお得だと思う。\n270 + 1キャラ 300 これは極端な例だけど、今の状態だと毎月のスターダスト交換で運命x5が取得できない。その解消にはガチャを回すしかないという話。\nで、今回ピックアップされるのが最強と言われるヌヴィレットなので、引いておいたほうがいいかもなと思い直した。\n単純なガチャ禁ってのも非効率にできてるんだなあ。今後ゲームでも作ることがあるなら参考にしよ。\nそして、今後は縁x5は絶対に交換しないようにしたほうがいいね。武器とか不足してるから縁x5にも交換しちゃってた。\nたくさんあるから次ガチャやるまでは持つだろうと思ってたら、持たなかった。交換するのは運命のみがいい。\nそういえば最近デイリーはやらずに、宝箱とか探してデイリー報酬を得るやり方に切り替えた。ついでに探索度も上げられるし飽きないのでいいね。\n","description":"","formated_time":"2024-04-01","href":"https://syui.github.io/blog/post/2024/04/01/genshin/","tags":["genshin"],"title":"原神、スターダスト交換が切れたのでヌヴィレット引くかも","utc_time":"2024-04-01T00:00:00Z"},{"categories":null,"contents":"久しぶりにスクワットx200を日課に取り入れて1週間過ごしたんだけど、少し感想を残しておきます。\nランニングと腕立てx200は続けてたんだけど、腹筋とスクワットはやめていて、なぜかというと、スクワットはきついのが嫌で、腹筋はベッドに負荷がかかるのが嫌だったので、日課から自然消滅してた。\nで、久しぶりにやるかと思ってやってみた1日目が相当きつかった。2,3日目もきつくて、4日目もきつかった。\nどれくらいきつかったかというと、1日目はスクワットx200やったあとに6,7km走るんだけど、死にかけた。2日目は半分死にかけた。3日目はめちゃくちゃきつかった。そんな感じだった。\n足があんまり動かなくて、これはスクワットやってたとき最初はいつもこんな感じだった記憶がある。でもすぐに治ってた記憶もあるので、すぐに治るだろうと思ってたら、6,7日目にやっと普通に戻った。\nそれまではまるで走れないし、なぜか息切れする。\nメニューとしては、スクワットx200, 腕立てx200, 腹筋x200やったあと6,7km走るだけ。各筋トレはそこまでしっかりやるもんじゃなくて、適当にぱぱっとやる感じ。\nこの中で、スクワットだけは昔からきつくて、今回、筋肉痛終わるのが1週間くらいかかってる。前もそうだったかな。あんまり記録してないからわからないけど、印象的にはそんなかかってなかった気がする。\nでも一旦筋肉痛が終わると、あとは毎日やってても別になんともなくなるので、多分、この辛さもこれが最後だろうと思う。\nさて、期間中にあった具体的な症状としては、1~3日目は普通に歩けないし、階段の上り下りがとにかくきつい。4,5日目は、寝てるとき足に何かが貯まっていく感じがしてつらかった、寝づらい。6,7日目はほとんど普通に戻る。そんな感じだった。\n","description":"","formated_time":"2024-03-31","href":"https://syui.github.io/blog/post/2024/03/31/private/","tags":["private","running"],"title":"久しぶりにスクワットやった","utc_time":"2024-03-31T00:00:00Z"},{"categories":null,"contents":"リファクタリングの一環としてweb周りで作ったものを整理しています。\nhttps://git.syui.ai/ai/vrm ただ、整理といいつつ、ほとんど新しい実装を試していて、コード自体はきれいになっていません。\n以前は、three-vrm:v0.6で作成されたプロジェクトのforkを使用していましたが、なかなかに複雑で古いpackageを使用していたので、イチから作り直しました。\nthree-vrm:v2.1にして、node:v21, yarn:v1.22を使っています。\nbloom ぼんやりと発光させるには、bloomを有効にしなければなりません。\nただし、threeに入っているexampleはメンテナンスされていません。別のものを使ったほうが良いでしょう。\n$ yarn add postprocessing //import { EffectComposer } from \u0026#39;three/examples/jsm/postprocessing/EffectComposer\u0026#39;; //import { UnrealBloomPass } from \u0026#39;three/examples/jsm/postprocessing/UnrealBloomPass\u0026#39;; //import { RenderPass } from \u0026#34;three/examples/jsm/postprocessing/RenderPass\u0026#34;; // https://github.com/pmndrs/postprocessing import { BloomEffect, EffectComposer, EffectPass, RenderPass } from \u0026#34;postprocessing\u0026#34;; const composer = new EffectComposer(renderer); composer.addPass(new RenderPass(scene, camera)); composer.addPass(new EffectPass(camera, new BloomEffect())); requestAnimationFrame(function render() { requestAnimationFrame(render); composer.render(); }); 注意としては、WebGLRendererのoptionによっては動かないことがあるらしいので、そのときは以下を設定してください。\nimport { WebGLRenderer } from \u0026#34;three\u0026#34;; const renderer = new WebGLRenderer({ powerPreference: \u0026#34;high-performance\u0026#34;, antialias: false, stencil: false, depth: false }); progress progress-barを出します。既に用意されているらしいので、それを使います。\n// https://sbcode.net/threejs/progress-indicator let manager = new THREE.LoadingManager(); let progressBar = document.getElementById(\u0026#39;progressBar\u0026#39;) as HTMLProgressElement // https://threejs.org/docs/#api/en/loaders/managers/LoadingManager manager.onStart = function ( url, itemsLoaded, itemsTotal ) { //console.log( \u0026#39;Started loading file: \u0026#39; + url + \u0026#39;.\\nLoaded \u0026#39; + itemsLoaded + \u0026#39; of \u0026#39; + itemsTotal + \u0026#39; files.\u0026#39; ); progressBar.style.display = \u0026#39;block\u0026#39; let percentComplete = (itemsLoaded / itemsTotal) * 100 progressBar.value = percentComplete === Infinity ? 100 : percentComplete }; manager.onLoad = function ( ) { //console.log( \u0026#39;Loading complete!\u0026#39;); progressBar.style.display = \u0026#39;none\u0026#39; }; manager.onProgress = function ( url, itemsLoaded, itemsTotal ) { let percentComplete = (itemsLoaded / itemsTotal) * 100 progressBar.value = percentComplete === Infinity ? 100 : percentComplete //console.log( \u0026#39;Loading file: \u0026#39; + url + \u0026#39;.\\nLoaded \u0026#39; + itemsLoaded + \u0026#39; of \u0026#39; + itemsTotal + \u0026#39; files.\u0026#39; ); }; manager.onError = function ( url ) { //console.log( \u0026#39;There was an error loading \u0026#39; + url ); progressBar.style.display = \u0026#39;block\u0026#39; }; \u0026lt;progress value=\u0026#34;0\u0026#34; max=\u0026#34;100\u0026#34; id=\u0026#34;progressBar\u0026#34;\u0026gt;\u0026lt;/progress\u0026gt; progress { width: 100%; height:8px; position: absolute; border-radius: 0px; } ::-webkit-progress-bar { border-radius: 0px; background-color: #e6e6fa; } ::-webkit-progress-value { background-color: #4682b4; } ","description":"","formated_time":"2024-03-19","href":"https://syui.github.io/blog/post/2024/03/19/vrm/","tags":["vrm","threejs"],"title":"three.jsでbloomを有効にする","utc_time":"2024-03-19T00:00:00Z"},{"categories":null,"contents":"three-vrmでvrmaを読み込むことができるようになりました。そこで今回は色々なtipsを紹介します。\nthree-vrmは、私がよく3d-modelの読み込みに使っているthree.jsを.vrmに対応させたものです。three.jsは.gltf(v2.0)を読み込めますので、その拡張である.vrmを.gltfや.glbに変換して読み込めばいいのですが、色々と問題があります。そのためthree-vrmを使ったほうが見栄えが良くなります。\nthree-vrm -\u0026gt; vrma 使用するのは、npm, webpack, tsあたりです。\nnodeはv18.14.1です。場合によってはnvmを使用してください。\n. ├── dist │ ├── index.html │ ├── vrm/ai.vrm │ └── vrma/VRMA_01.vrma ├── package.json ├── src │ └── index.ts ├── tsconfig.json └── webpack.config.js ./dist/vrm/, ./dist/vrma/にファイルを置いてください。\nvrm : download vrma : download 後述しますが、src/index.tsの以下の部分で読み込みます。\nload(\u0026#34;/vrm/ai.vrm\u0026#34;); load(\u0026#34;/vrma/VRMA_01.vrma\u0026#34;); { \u0026#34;name\u0026#34;: \u0026#34;model\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;private\u0026#34;: true, \u0026#34;scripts\u0026#34;: { \u0026#34;build\u0026#34;: \u0026#34;webpack\u0026#34;, \u0026#34;dev\u0026#34;: \u0026#34;webpack-dev-server --open\u0026#34; }, \u0026#34;devDependencies\u0026#34;: { \u0026#34;ts-loader\u0026#34;: \u0026#34;^9.5.1\u0026#34;, \u0026#34;typescript\u0026#34;: \u0026#34;^5.4.2\u0026#34;, \u0026#34;webpack\u0026#34;: \u0026#34;^5.90.3\u0026#34;, \u0026#34;webpack-cli\u0026#34;: \u0026#34;^5.1.4\u0026#34;, \u0026#34;webpack-dev-server\u0026#34;: \u0026#34;^5.0.3\u0026#34; }, \u0026#34;dependencies\u0026#34;: { \u0026#34;@pixiv/three-vrm\u0026#34;: \u0026#34;^2.1.1\u0026#34;, \u0026#34;@pixiv/three-vrm-animation\u0026#34;: \u0026#34;^2.1.1\u0026#34;, \u0026#34;three\u0026#34;: \u0026#34;^0.162.0\u0026#34; } } { \u0026#34;compilerOptions\u0026#34;: { \u0026#34;target\u0026#34;: \u0026#34;es2016\u0026#34;, \u0026#34;module\u0026#34;: \u0026#34;commonjs\u0026#34;, \u0026#34;skipLibCheck\u0026#34;: true } } const path = require(\u0026#39;path\u0026#39;); module.exports = { mode: \u0026#39;development\u0026#39;, entry: \u0026#39;./src/index.ts\u0026#39;, module: { rules: [ { test: /\\.ts$/, loader: \u0026#39;ts-loader\u0026#39; } ] }, resolve: { extensions: [\u0026#39;.ts\u0026#39;, \u0026#39;.js\u0026#39;] }, output: { filename: \u0026#39;main.js\u0026#39;, path: path.join(__dirname, \u0026#34;dist\u0026#34;) }, devServer: { static: { directory: path.join(__dirname, \u0026#34;dist\u0026#34;), } } } $ npm i import * as THREE from \u0026#34;three\u0026#34; import { Vector3 } from \u0026#34;three\u0026#34;; import { GLTFLoader } from \u0026#34;three/examples/jsm/loaders/GLTFLoader\u0026#34; import { OrbitControls } from \u0026#39;three/examples/jsm/controls/OrbitControls\u0026#39;; import { VRMLoaderPlugin } from \u0026#34;@pixiv/three-vrm\u0026#34;; import { createVRMAnimationClip, VRMAnimationLoaderPlugin } from \u0026#34;@pixiv/three-vrm-animation\u0026#34;; window.addEventListener(\u0026#34;DOMContentLoaded\u0026#34;, () =\u0026gt; { const canvas = document.getElementById(\u0026#34;canvas\u0026#34;); if (canvas == null) return; const scene = new THREE.Scene(); const camera = new THREE.PerspectiveCamera( 30, canvas.clientWidth/canvas.clientHeight, 0.1, 20); camera.position.set(0.0, 0, -4.0) camera.rotation.set(0.0, Math.PI, 0.0) camera.lookAt(new THREE.Vector3(0, 0, 0)); const renderer = new THREE.WebGLRenderer(); renderer.setPixelRatio(window.devicePixelRatio); renderer.setSize(canvas.clientWidth, canvas.clientHeight); renderer.setClearColor(0x7fbfff, 1.0); canvas.appendChild(renderer.domElement); const light = new THREE.DirectionalLight(0xffffff, Math.PI); light.position.set(1.0, 1.0, 1.0); scene.add(light); let currentVrm: any = undefined; let currentVrmAnimation: any = undefined; let currentMixer:any = undefined; function load(url: string) { loader.load( url, (gltf) =\u0026gt; { tryInitVRM(gltf); tryInitVRMA(gltf); }, (progress) =\u0026gt; console.log( \u0026#34;Loading model...\u0026#34;, 100.0 * (progress.loaded / progress.total), \u0026#34;%\u0026#34; ), (error) =\u0026gt; console.error(error) ); } function tryInitVRM(gltf: any) { const vrm = gltf.userData.vrm; if ( vrm == null ) { return; } currentVrm = vrm; scene.add(vrm.scene); initAnimationClip(); } function tryInitVRMA(gltf: any) { const vrmAnimations = gltf.userData.vrmAnimations; if (vrmAnimations == null) { return; } currentVrmAnimation = vrmAnimations[0] ?? null; initAnimationClip(); } function initAnimationClip() { if (currentVrm \u0026amp;\u0026amp; currentVrmAnimation) { currentMixer = new THREE.AnimationMixer(currentVrm.scene); const clip = createVRMAnimationClip(currentVrmAnimation, currentVrm); currentMixer.clipAction(clip).play(); } } const loader = new GLTFLoader(); loader.register((parser) =\u0026gt; { return new VRMLoaderPlugin(parser); }); loader.register((parser) =\u0026gt; { return new VRMAnimationLoaderPlugin(parser); }); // ここで読み込む load(\u0026#34;/vrm/ai.vrm\u0026#34;); load(\u0026#34;/vrma/VRMA_01.vrma\u0026#34;); const clock = new THREE.Clock(); clock.start(); scene.background = new THREE.Color( 0x404040 ); const directionalLight = new THREE.DirectionalLight(0xffffff); directionalLight.position.set(1, 1, 1); scene.add(directionalLight); const ambientLight = new THREE.AmbientLight(0x333333); scene.add(ambientLight); const controls = new OrbitControls(camera, renderer.domElement); controls.enableDamping = true; controls.dampingFactor = 0.2; controls.enableRotate = true; controls.target.set( 0.0, 1.0, 0.0 ); const update = () =\u0026gt; { controls.update(); requestAnimationFrame(update); const deltaTime = clock.getDelta(); if (currentMixer) { currentMixer.update(deltaTime); } if (currentVrm) { currentVrm.update(deltaTime); } renderer.render(scene, camera); } update(); }) \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;script src=\u0026#34;main.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;canvas\u0026#34; style=\u0026#34;width:100%;height:640px;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ npm run build $ npm run dev random vrma 例えば、random(ランダム)で.vrmaを切り替えてみましょう。\n//VRMA_01 全身を見せる //VRMA_02 挨拶 //VRMA_03 Vサイン //VRMA_04 撃つ //VRMA_05 回る //VRMA_06 モデルポーズ //VRMA_07 屈伸運動 setInterval(() =\u0026gt; { load(\u0026#34;./vrma/VRMA_0\u0026#34; + Math.floor(Math.random() * 7 + 1) + \u0026#34;.vrma\u0026#34;);\t}, 10000); 自然に見せるにはidle状態の.vrmaを用意してsetIntervalをすれば良さそうですね。\nmake vrma bvhを作成してそれをvrmaに変換することができます。基本的に.vrmaは.gltfでいくつかの宣言を行うことで有効になります。それをglbに変換してvrmaにリネームします。\nしかし、めんどくさすぎてそんなことはやってられませんので、UniVRMを使用すると良いでしょう。\ndocs : https://github.com/malaybaku/AnimationClipToVrmaSample bvh : download 例えば、最新版のUniVRMをinstallして、AnimationClipToVrmaSample/Assetsをunity(project)にコピーすればSampleMotion/Wave.animを.vrmaでexportできます。\n基本的な手順としては、まずue5や.bvhから.fbxを用意し、それをunityで読み込みます。\n読み込むとAnimation Clipができます。これはunity独自のmodel motionのようなものです。まずはfbxのAnimation TypeをHumanoidにします。\nue5からfbxをexportする際は、animationですべてのチェックを付けましょう。精度が高まります。あと、コリジョンは外しました。\nunityでの操作は以下の通り。\nAnimation Type : Humanoid Animation Clip(Unreal Take) -\u0026gt; 右クリック -\u0026gt; VRM -\u0026gt; Convert to VRM Animation -\u0026gt; .vrma [issue] fbxからunityを使ってvrmaを作成するときの罠 fbxをvrmaにする際にmalaybaku/AnimationClipToVrmaSampleを使うんだけど、univrmのvrm 1.0をインストールしないといけない。両方必要なのかもしれない。つまり、インストールするものは以下の3つ。また、AnimationClipToVrmaSampleはwindowsでは動きません。macでのみ動きます。今後はvrm 1.0を使っていったほうがいいですね。\nmalaybaku/AnimationClipToVrmaSample VRM 1.0 Import/Export VRM 0.x Import/Export sRGBEncoding 見た目を変えます。\n// https://threejs.org/docs/#api/en/constants/Renderer const renderer = new THREE.WebGLRenderer({antialias: true, alpha: true}); renderer.shadowMap.enabled = true; renderer.toneMapping = THREE.ACESFilmicToneMapping; renderer.toneMappingExposure = 1.2; //renderer.outputEncoding = THREE.sRGBEncoding; renderer.outputColorSpace = THREE.SRGBColorSpace; ref : https://koro-koro.com/threejs-no4/\nfvp -\u0026gt; glb .fvpというのは3d-printの拡張子です。\nこれはポーズを決めて出力できますが、それをglbに変換することでポーズ付きのglbができます。\nポーズもfvpの出力もvroid studioで行います。\nvroid studio : https://vroid.com/studio fvp -\u0026gt; glb : https://booth.pm/ja/items/2755440 ","description":"","formated_time":"2024-03-17","href":"https://syui.github.io/blog/post/2024/03/17/vrm/","tags":["vrm","threejs"],"title":"three-vrmでvrmaを読み込む","utc_time":"2024-03-17T00:00:00Z"},{"categories":null,"contents":"最近、名前について考えることがあったので、適当に自分のこととか、blueskyのこととか、これからのこととかを書いていきたいと思います。\nsyui まずはsyuiという名前について見ていくと、案外、規則に沿ってつけられています。\nこれは、基本的に私の本名、つまり、名前+名字の組み合わせです。名前の先頭から3文字、名字の先頭から1文字を取っています。\n例えば、私が一ノ瀬 修(いちのせ しゅう)という名前ならこうなります。\n[syu]u [i]chinose なお、当該日本名はペンネームということにしておきます(作品書いてないけど)。\nではなぜ、名前から始まるのかというと、これもアルファベット、つまり、英語のルールに則っています。\n主に英語圏の文化では名前+名字の順番が通常です。これはアジア圏の文化と異なります。アジア圏は名字+名前が多く、日本もそうです。\n例えば、サービスに登録する際に名前と名字を聞かれることがあります。私は大抵、名前にsyu, 名字にiと入れています。英語圏のサービスなので名前+名字の順になり表記もsyu iになります。\nなぜ英語圏とアジア圏でこのような違いがあるのでしょう。それはわかっていません。ですが、色々な説があると思います。\n個人的には、英語圏は個人を尊重し、アジア圏は家族を尊重する文化が強いため、そのようになっているのかもしれないと思います。\n私の場合は、アルファベットで記述する以上、アルファベットを使用する英語圏の文化に沿って、名前が決められています。\n当時、このようなことまで考えていたかというと、適当です。handle nameというものは、存外に適当に決め、ずっと使っています。\nただ、いろいろな人を見てきて、名前から付ける人、名字から付ける人を見てきて、その人の特徴として、個人主義的傾向があるのか、全体主義的傾向があるのかをなんとなく推測することができます。\nそして、それは案外あたっていると思うことも多い気がします。handleを自分の名前にする人はやっぱり英語圏のほうが多く、名字でつける人はやっぱりアジア圏のほうが多い。\n私の場合は、少し特殊ですが、上記をもとに推測すると個人主義:全体主義の割合は3:1といったところでしょうか。\nただ、あまり気にしないでください。こういうのは当たりもするし外れもする。占いや性格診断みたいなもんです。たいした意味はありませんし、単なる好みの問題でもあります。\nai つぎは、私が使うdomainのaiについて名前規則を見ていきたいと思います。\nこれについては色々思うところがあり、迷っているところです。\nちなみにyuiは使わないのかという疑問について、syui.aiにはもとからyuiという単語が含まれています。\ns[yui].ai したがって、わざわざdomainやnameを取る必要がありません。例えば、yui.aiのdomainが空いたとして、よほど思うところがない限り、たぶん取らないと思います。\n話を戻すと、今後はaiというネームスペースで色々作っていこうかなと考えています。\nverse ネームスペースの話になりますが、ここで、少しだけこれから起こることを書いてみたいと思います。\nこれから世界はどうなっていくのかに注目が集まっているように感じます。多くの人々が「変化」の予兆を感じ取っているということです。\nこれまでは、既存の大企業があって、そこがどんな製品を出し、どんな成長をしていくかが注目されていました。\nしかし、大きな変化は、これまで知らなかったなにかが出てきたときやこれまで知らなかった企業や製品、ソフトウェアやハードウェアが出てきたときです。例えば、AIとか。\nですが、こういうのはどの分野にしても、さきがけがあるものです。\n最近、animeが人気という言葉を聞いたことはありませんか?\n少し前から人気だったというのは確かにその通り。しかし、最近はそれを通り越して、すごく人気なのです。\nいやいや、少し前からすごく人気だったじゃないと。いえ、それは違います。それは単にあなたが先駆けだっただけ。世界的にみて、人気はあったけど、すごく人気ではなかった。\nさきがけの話をすると、例えば、原神を作ったmihoyoという企業はこんなことを言っています。\n「オタクが世界を救う」\n最近、あらゆることはこのオタクがさきがけになっています。\nつまり、オタクがやっていたこと、見ていたものなどが数年後、数十年後に大流行し、メジャーになっている。そういう傾向があります。\n例えば、分散snsも間違いなく標準になります。\n今のオタクことハッカーたちは、数年前から自前のインスタンスを建ててやり取りするようになっています。\nこの流れは、今後何年かで一般化していくでしょう。\nしかし、分散snsとは一体何なのでしょう。どのような要因で、どんな風になっていくのでしょうか。\nここではわかりやすく分散snsと言いましたが、今後主流になるそれ自体は分散snsというより、どちらかというと名前に関係があります。\n最近、metaverse(メタバース)やfediverse(フェディバース)、octoverse(オクトバース)と呼ばれるものが注目されていますが、その根底にあるのは「変化」の予兆です。\nつまり、ネットは今後どのように変化していくのか。変化は確実に起こる。けど、どのように変化していくのか。それが注目されているのです。\n各企業や団体がその変化を予測し、このようになっていく、このようになってほしい、それを表現したのが、なんとかバースと呼ばれるものだったりします。\n私が確実に来るだろうと予測しているのは、今後、ネット空間では名前の枯渇問題によって、domainの重要性が増し、その要望に答えるような環境が形作られていくということです。\n私は2013くらいからネットを始めました。\n当時、syuiさんは私以外は一人もおらず、検索で私しか出てきませんでした。\nしかし、2024現在、syuiさんはいっぱいです。\nこれからネットに接続する人が増えれば増えるほど、あるいはネットに接続できる人を増やそうとすればするほど、同じ名前の人が増え、判別が難しくなり、また、名前を取られていることが増えるでしょう。\n時代が進むほど、先行者利益が拡大し、それはどこかでリセットしなければなりませんし、リセットされるはずです。\nそれが分散化だったり、あるいはセルフホストだったり、そういった形になると予想しています。\nこれはすでにオタクたちの動向で確実に来ることはわかっています。\n誰だって、自分で決めた名前でネットをはじめたいし、はじめられるべきです。そのような環境になっていくでしょう。\nprotocol さて、次はprotocolの話をします。世の中にはいろんなprotocolがありますが、そこでも名前は重要です。\ngit, sshやhttpの場合は以下のような感じになります。\ngit://git.syui.ai/ai/os ↓ ${protocol}://${hostname}/${username}/${repository} 認証を入れる場合はこんな感じ。\n${protocol}://${username}:${password}@${hostname}:${port} mailやsns(atproto)の場合はhostnameよりusernameが先に来ます。\n${username}@${hostname} ${username}.${hostname} そして、atprotoの場合は、すごくて自分が所有あるいは占有するdomainをそのまま使えるようにもできる。この場合は、username = hostnameになります。\n${hostname} = ${username} 私は特にこのことが気に入っており、atprotoが一番いいと思う。一番シンプルで、一番短く、一番わかりやすい。そして、protocolもいい。名前がいいんです。\n${protocol}://${hostname} ↓ at://syui.ai こういうことは、あまり気づかれるようなことではありませんけど、おそらく、時間経過とともに誰かが気づき、そういった人達が徐々に増えていくと見ています。\nbluesky この記事はblueskyの1周年ということで、これまでblueskyでやったことを加筆します。\n私がblueskyを始めて1年が過ぎました。アカウントは@syui.aiです。\nblueskyを始めた日付、つまり、アカウント作成日はplcに記録されています。初投稿はpdsにあります。\n$ echo $plc | jq .createdAt \u0026#34;2023-02-23T01:09:21.591Z\u0026#34; $ curl -sL https://plc.directory/export|jq -s -r \u0026#34;.[]|.did\u0026#34;|nl|grep $did 386 did:plc:uqzpqmrjnptsxezjx4xuh2mn $ curl -sL \u0026#34;https://bsky.social/xrpc/com.atproto.repo.listRecords?repo=$handle\u0026amp;collection=app.bsky.feed.post\u0026amp;reverse=true\u0026#34;|jq \u0026#34;.[]|.[0]?|.value.createdAt\u0026#34; \u0026#34;2023-02-23T01:20:33.487Z\u0026#34; まず、blueskyという名前について見ていくと、その青空は鳥(twitter)の背景を意味します。\nprotocolは本来、ユーザーに意識されない領域の技術です。それ故、ユーザーに意識されることなく自然に動作することが美学とされます。これが技術背景と呼ばれる理由です。\nprotocolの名前は[at]porotoで、このatは@を意味します。\ntwitterは、ユーザー名のみの@でやり取りするため、例えば、mailに比べ非常にシンプルですが、あくまでサービス内に閉じています。\nこれをサービス外にも有効にするため開発されているのがatprotoで、そのモデルケースがblueskyです。\n基本的には、blueskyのユーザーが増え、atprotoを採用する企業(または個人)が増えていくと成功です。\nplc : createdAt 私がアカウントを作った日付とアカウント番号を取得する具体的な方法です。\n$ handle=syui.ai $ did=`curl -sL \u0026#34;https://bsky.social/xrpc/com.atproto.repo.describeRepo?repo=$handle\u0026#34; |jq -r .did` $ echo $handle = $did syui.ai = did:plc:uqzpqmrjnptsxezjx4xuh2mn $ plc=`curl -sL https://plc.directory/export|jq \u0026#34;select(.did == \\\u0026#34;$did\\\u0026#34;)\u0026#34;` $ echo $plc { \u0026#34;did\u0026#34;: \u0026#34;did:plc:uqzpqmrjnptsxezjx4xuh2mn\u0026#34;, \u0026#34;operation\u0026#34;: { \u0026#34;sig\u0026#34;: \u0026#34;ZaVvS3exIwu_fVJcejULmgUxzOt1hnh8qAo97iIL-1YXtEKDVSLkZ7FjpBxUKA_SKHxy7ybL0P9MVOHvOwVd3A\u0026#34;, \u0026#34;prev\u0026#34;: null, \u0026#34;type\u0026#34;: \u0026#34;create\u0026#34;, \u0026#34;handle\u0026#34;: \u0026#34;syui.bsky.social\u0026#34;, \u0026#34;service\u0026#34;: \u0026#34;https://bsky.social\u0026#34;, \u0026#34;signingKey\u0026#34;: \u0026#34;did:key:zQ3shP5TBe1sQfSttXty15FAEHV1DZgcxRZNxvEWnPfLFwLxJ\u0026#34;, \u0026#34;recoveryKey\u0026#34;: \u0026#34;did:key:zQ3shhCGUqDKjStzuDxPkTxN6ujddP4RkEKJJouJGRRkaLGbg\u0026#34; }, \u0026#34;cid\u0026#34;: \u0026#34;bafyreifegl4dekll44vzgkn7f5b6tdllbwfv4qh4hqsrgwwgkr3czy75ky\u0026#34;, \u0026#34;nullified\u0026#34;: false, \u0026#34;createdAt\u0026#34;: \u0026#34;2023-02-23T01:09:21.591Z\u0026#34; } $ echo $plc | jq .createdAt \u0026#34;2023-02-23T01:09:21.591Z\u0026#34; pds : createdAt $ handle=syui.ai $ curl -sL \u0026#34;https://bsky.social/xrpc/com.atproto.repo.listRecords?repo=$handle\u0026amp;collection=app.bsky.feed.post\u0026amp;reverse=true\u0026#34;|jq \u0026#34;.[]|.[0]?|.value.createdAt\u0026#34; plc + pds : createdAt 1000番目以降のユーザーはexportを指定する必要があります。\n通常のユーザーに限るとplcでアカウント作成日を探るにはpdsとの連携が必要です。\nここで言う通常のユーザーというのは、登録して間もなく初投稿を行うユーザーのことです。\n#!/bin/zsh handle=yui.syui.ai plc=https://plc.directory if [ -n \u0026#34;$1\u0026#34; ];then handle=$1 fi did=`curl -sL \u0026#34;https://bsky.social/xrpc/com.atproto.repo.describeRepo?repo=$handle\u0026#34; |jq -r .did` timed=`curl -sL \u0026#34;https://bsky.social/xrpc/com.atproto.repo.listRecords?repo=$handle\u0026amp;collection=app.bsky.feed.post\u0026amp;reverse=true\u0026#34;|jq \u0026#34;.[]|.[0]?|.value.createdAt\u0026#34;` curl -sL \u0026#34;$plc/export?before=${timed}\u0026#34;|jq \u0026#34;select(.did == \\\u0026#34;$did\\\u0026#34;)\u0026#34; $ chmod +x first.zsh $ ./first.zsh yui.syui.ai { \u0026#34;did\u0026#34;: \u0026#34;did:plc:4hqjfn7m6n5hno3doamuhgef\u0026#34;, \u0026#34;operation\u0026#34;: { \u0026#34;sig\u0026#34;: \u0026#34;rucbNY6h0vv_FjHbtyDFmMrCIhs1iT2hyEU9xorQKQVgnPs4e25I4B4d2dDtKk-ZtLQeDvfhfz99JG0fU1OFTg\u0026#34;, \u0026#34;prev\u0026#34;: null, \u0026#34;type\u0026#34;: \u0026#34;create\u0026#34;, \u0026#34;handle\u0026#34;: \u0026#34;yui.bsky.social\u0026#34;, \u0026#34;service\u0026#34;: \u0026#34;https://bsky.social\u0026#34;, \u0026#34;signingKey\u0026#34;: \u0026#34;did:key:zQ3shP5TBe1sQfSttXty15FAEHV1DZgcxRZNxvEWnPfLFwLxJ\u0026#34;, \u0026#34;recoveryKey\u0026#34;: \u0026#34;did:key:zQ3shhCGUqDKjStzuDxPkTxN6ujddP4RkEKJJouJGRRkaLGbg\u0026#34; }, \u0026#34;cid\u0026#34;: \u0026#34;bafyreihb4cjlp3htpj3lwy3qdfbzrbmdubkaemk7dot4hkq6zxt4dwsq74\u0026#34;, \u0026#34;nullified\u0026#34;: false, \u0026#34;createdAt\u0026#34;: \u0026#34;2023-02-24T23:54:57.259Z\u0026#34; } もし初投稿がexportの1000を超えてしまった以降に行われると処理が面倒になります。また、plcは時間とともにjsonが変化しているので注意が必要です。\npds 2023-03-21にはpdsを建てたりしてたみたい。\n$ echo $plc|jq -r \u0026#34;.operation.services.atproto_pds.endpoint, .createdAt\u0026#34; https://syui.ai:2583 2023-03-21T05:46:36.129Z 今はこのpdsは閉じています。\n$ pds=https://syui.ai:2583 $ date=2023-03-21T05:46:36.129Z $ plc=`curl -sL \u0026#34;plc.directory/export?after=$date\u0026#34;|jq \u0026#34;select(.operation.services.atproto_pds.endpoint == \\\u0026#34;$pds\\\u0026#34;)\u0026#34;|jq -s \u0026#34;.[0]\u0026#34;` $ echo $plc|jq . { \u0026#34;did\u0026#34;: \u0026#34;did:plc:schldsdljwxcdtslnbqaoifh\u0026#34;, \u0026#34;operation\u0026#34;: { \u0026#34;sig\u0026#34;: \u0026#34;kPILmuAdRbzGhMNx3Ws2s-ath9tTVZYvt8FFQTiaPCyfsXkPPd_tjIFISzoJJ-THIRuZQMMNffkPoLMfFT-v1g\u0026#34;, \u0026#34;prev\u0026#34;: null, \u0026#34;type\u0026#34;: \u0026#34;plc_operation\u0026#34;, \u0026#34;services\u0026#34;: { \u0026#34;atproto_pds\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;AtprotoPersonalDataServer\u0026#34;, \u0026#34;endpoint\u0026#34;: \u0026#34;https://syui.ai:2583\u0026#34; } }, \u0026#34;alsoKnownAs\u0026#34;: [ \u0026#34;at://syui.syui.ai\u0026#34; ], \u0026#34;rotationKeys\u0026#34;: [ \u0026#34;did:key:zDnaemXG7VvkNDwNEKbVFhaUvi64fpWouzZg7EBG8A8aKNb99\u0026#34;, \u0026#34;did:key:zDnaemXG7VvkNDwNEKbVFhaUvi64fpWouzZg7EBG8A8aKNb99\u0026#34; ], \u0026#34;verificationMethods\u0026#34;: { \u0026#34;atproto\u0026#34;: \u0026#34;did:key:zDnaemXG7VvkNDwNEKbVFhaUvi64fpWouzZg7EBG8A8aKNb99\u0026#34; } }, \u0026#34;cid\u0026#34;: \u0026#34;bafyreieqr2y4q22nvyq44s3imadsbjzd3zcddri6teby7zbilmxuq4vyze\u0026#34;, \u0026#34;nullified\u0026#34;: false, \u0026#34;createdAt\u0026#34;: \u0026#34;2023-03-21T05:46:36.129Z\u0026#34; } plc 例えば、以下のようなscriptでpdsを検索できます。\n#!/bin/zsh y=2023 f=12 e=31 for ((i=$f;i\u0026lt;=12;i++)) do n=`printf \u0026#34;%02d\\n\u0026#34; \u0026#34;${i}\u0026#34;` for ((ii=$e;ii\u0026lt;=31;ii++)) do nn=`printf \u0026#34;%02d\\n\u0026#34; \u0026#34;${ii}\u0026#34;` echo $y/$n/$nn j=`curl -sL \u0026#34;https://plc.directory/export?after=${y}-${n}-${nn}\u0026#34;` echo $j|jq -r .operation.services.atproto_pds.endpoint |sort|uniq done done ただし、plcの負担になるのでexportの結果をlocalに保存し使い回すようにしてください。ある程度のcool-timeを置くようにしてください。このscriptは大まかな日付日時を使用しているので確実ではありません。\n現在はplcやらbgs, appviewをself-hostしています。\n$ curl -sL plc.syu.is/export|jq -s -r \u0026#34;.[0]|.operation.services.atproto_pds.endpoint,.operation.alsoKnownAs.[],.createdAt\u0026#34; https://syu.is at://ai.syu.is 2024-01-09T04:05:11.967Z plcは基本的にblueskyの歴史を記録しています。最初の方にpdsを建ててたときの無茶振りなども記録されています。\n$ pds=https://bsky.syui.ai $ date=2023-04-21T13:07:52.503Z $ curl -sL \u0026#34;plc.directory/export?after=$date\u0026#34;|jq \u0026#34;select(.operation.services.atproto_pds.endpoint == \\\u0026#34;$pds\\\u0026#34;).operation.alsoKnownAs.[]\u0026#34; \u0026#34;at://ai.ai\u0026#34; { \u0026#34;did\u0026#34;: \u0026#34;did:plc:ytvoptig4ddshmwdsjmhtcym\u0026#34;, \u0026#34;operation\u0026#34;: { \u0026#34;sig\u0026#34;: \u0026#34;LVC5HRKZS7OshiukWl6WKruYFZsiu9zcek0VzL5L47sHHH6LoJXiTQTrxSfOKfRCUHOdLjA5sP_nzGGeaKVKUg\u0026#34;, \u0026#34;prev\u0026#34;: null, \u0026#34;type\u0026#34;: \u0026#34;plc_operation\u0026#34;, \u0026#34;services\u0026#34;: { \u0026#34;atproto_pds\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;AtprotoPersonalDataServer\u0026#34;, \u0026#34;endpoint\u0026#34;: \u0026#34;https://bsky.syui.ai\u0026#34; } }, \u0026#34;alsoKnownAs\u0026#34;: [ \u0026#34;at://ai.ai\u0026#34; ], \u0026#34;rotationKeys\u0026#34;: [ \u0026#34;did:key:zDnaeoTyG6BWkxZ447eHQEasizV3aTjHVA5e4HKVaYRUmYP4J\u0026#34;, \u0026#34;did:key:zDnaeoTyG6BWkxZ447eHQEasizV3aTjHVA5e4HKVaYRUmYP4J\u0026#34; ], \u0026#34;verificationMethods\u0026#34;: { \u0026#34;atproto\u0026#34;: \u0026#34;did:key:zDnaeoTyG6BWkxZ447eHQEasizV3aTjHVA5e4HKVaYRUmYP4J\u0026#34; } }, \u0026#34;cid\u0026#34;: \u0026#34;bafyreige5lt42bxay4r3fq4slb4ywdc3vxy45gyo3vdw3ph6cxa4vlbzny\u0026#34;, \u0026#34;nullified\u0026#34;: false, \u0026#34;createdAt\u0026#34;: \u0026#34;2023-04-21T13:07:52.503Z\u0026#34; } aibot また、blueskyではai/botを動かしていました。\n$ ./first.zsh yui.syui.ai|jq .createdAt \u0026#34;2023-02-24T23:54:57.259Z\u0026#34; 実は、aibotの歴史は古く、mastodon, twitter, matrixのbotとして動かしていたことがあります。\nそれまで管理者しか実行できないようにしていましたが、blueskyでは、はじめて他のユーザーもコマンドを実行できるようにしました。\n当時は、ai/apiを整備し、cardを引けるようにしたりと、色々な遊びを追加していた時期です。\n現在は、ten, coinなどで遊べるようになっています。気になる人はhelpを参照してください。\n@yui.syui.ai help https://git.syui.ai/ai/bot/wiki/help aibotは、rustで書かれており、aiosという自作osで動いています。\n$ docker run -it git.syui.ai/ai/os ai アイコンになっているキャラクターのaiには一応、原作があります。\n3d-cardや3d-modelを作成し、windowsでgameをプレイできるようにしたりと、色々作れて楽しかったです。\naios aiosはarchlinuxをベースにしているので、名前規則も同じです。\nid name code arch Arch Linux archlinux ai ai os aios ここからは少し名前の話に戻ります。\narchとの違いは大文字を入れるとややこしいので全部小文字に統一しています。また、archはtypeをあらわすlinuxを後半に持ってきていますが、私はosにしています。\nrepositoryはai/osみたいな形式にすることでusernameからaiを補完しています。repositoryが増えるたびaixxxになると検索性、可読性に欠けるためです。\npodmanは/etc/containers/registries.conf.d/に設定を置くことでaliasを作れます。\nhttps://github.com/containers/shortnames unqualified-search-registries = [\u0026#39;docker.io\u0026#39;, \u0026#39;git.syui.ai\u0026#39;, \u0026#39;ghcr.io\u0026#39;] [aliases] \u0026#34;aios\u0026#34; = \u0026#34;git.syui.ai/ai/os\u0026#34; これでpodman pull aiosができるようになりました。\n$ podman run aios ai Resolved \u0026#34;aios\u0026#34; as an alias (/etc/containers/registries.conf.d/ai.conf) Trying to pull git.syui.ai/ai/os:latest... Getting image source signatures Copying blob c7e55fecf0be [====================\u0026gt;-----------------] 917.4MiB / 1.7GiB ちなみに、github packagesにあるghcr.ioは、おそらくgh-crに分解できます。つまり、[g]it[h]ub-[c]ontainer-[r]egistryだと思われます。ioはgithubが好んで使うdomainです。web-serverのgithub.ioにも使われています。\nmac macとwindowsの名前も見みましょう。\nid name code mac macOS macos windows Windows 11 windows11 一言でwindowsといっても、xpやら11やらありまして、おそらく、そちらが正式名称になっています。反対に、macは色々と変遷して、osxとかを経て、今ではmacosです。macはwindowsと違いsonomaなどのコードネームが入れられることほぼないので、macosでいいはず。\nこう見ると、macも相当にシンプルですね。osのところにスペースもありませんし、単語数も少なく、数字も使いません。osが大文字なので、そこで区切るのがわかりますし、osであることもわかりやすい。\nappleはiOSの名前規則にmacも合わせたかったんだろうなあ。今後osを出すとしてもxxOSになるはず。\n実は、aiosも、aiOSにしようか迷ったことがあって、スペースや大文字、osなどを入れるのって、結構迷います。ただ、aiは最も小さいものと親和性のあるキャラクターなので、小文字にしました。\n本来は、全部取っ払うのが一番いいのですが、osっていうことが分かりづらいので、名前としては付けといたほうがいいんです。macもmacosもどっちも使えるので文章によって使い分けできる。\nalphabet alphabet(アルファベット)についても少し話をします。\ngoogleの親会社として名前になっているalphabetですが、今回はmoji(文字)のほう[a-Z]です。\n私が好きなアルファベットは、a, i, sです。あとはoなんかも好きですね。円とか0とかも表しますので。\nこれらが何を意味するのかというと、色々です。私の場合は、o=0, i=1というように数字に置き換えて考えたりもします。\nでは、aは数字でいうとなんでしょう。aは私の中では0にも1にもなる。そんな意味でも使います。\nこれはどういう理屈なのかというと、例えば、皆さん、何かを数えるとき、0から数えますか、1から数えますか。\nプログラムでは0から数えることが多いですが、必ずしも0からはじまるわけではありません。1から数えることもあります。\n数字で現すとaは何番目でしょう。\nおそらく、aは0にも1にもなりますね。\n意味がわかりませんか。基本よくわからない話なので、忘れてください。\nですが、コンピュータは0か1を読み、量子はどちらも読むのです。\nその意味でai/osも名前だけはちょっとだけ面白いんだよ。\nmoji ai/mojiというものがあります。\nこれは自作文字で、あるとき原作で使用する言語を作成しました。\n基本的にはアルファベットに似せた形になっており、日本語と英語の中間くらいの言語規則になります。\n作成した理由の一つはアイコンに使用するためです。\n例えば、ゲーム作成中、アイコンをどうしようか困りませんか。こういうのを作っておくと、案外色んな場面で使えるのです。\nタイトルのロゴもこのaimojiで作成しています。\n1 2 3 a y u i book これらはすべて自分がデザインしています。アイコン、ロゴ、衣装とか色々ですが、デザインするものは無数にあり、例えば、キャラクターやカード、漫画の表紙などなど。\n今年はお絵かきをはじめてみようかなと思っていたのですが、結局、あまりやらずに、表紙を少し作ったり、新しい絵を一枚追加したくらいで終わってしまいました。\n上はアイがカードを落っことす話を少しだけ描きました。\ngame それと関連する話ですが、atprotoのアカウントでログインするゲームを作りました。ゲームは簡単で落ちているカードを探すだけです。\n一応は、動作するところまでやりましたが、それ以降はあまりやる気が出ず放置しています。\n色々と書いてきましたが、私はかなり気分屋なところがあって、blueskyをやっていなかったら、こういうことをやっていたかは怪しい。\nこれもmatrixで招待コードをくれたwhyさんや、遊んでくれた皆さんのおかげです。ありがとうございました。\nこれからもaiをよろしく。\n動作環境 : chrome/edge, safari(ios)\n","description":"","formated_time":"2024-03-11","href":"https://syui.github.io/blog/post/2024/03/11/name-bluesky/","tags":["private","bluesky"],"title":"naming rulesとbluesky","utc_time":"2024-03-11T00:00:00Z"},{"categories":null,"contents":"今回は私が現在プレイしてるゲーム、原神で引いておくべきキャラをランキング形式で紹介します。\nとはいえ、私は、ナヒーダは完凸、フリーナは2凸で使用しています。それ以外で凸している星5はいません。凸しているキャラについては、その性能込みの使い勝手を前提にしています。\nもちろん、無凸の性能を推測したうえで評価を出すこともできますが、それでは不正確になるので、凸性能込みの感想と考えてください。\n順位 キャラ 1 ナヒーダ 2 フリーナ 3 鍾離、雷電、万葉 1. ナヒーダ ナヒーダを使用していて思うのは、ナヒーダは強すぎるということです。\n完凸しているなら当たり前だと思われるかもしれませんが、私は主に完凸の性能ではない部分でナヒーダを評価しています。\n具体的に評価している部分は、必中化される全体への元素攻撃です。\nつまり、必中化、全体化される攻撃が、ありえないほどに強力です。しかも、射程範囲も相当広い。\n正直、これ以上強力なキャラが今後出てくるか疑問があります。\n裏から出せる必中化の全体攻撃というのは、容易に出していいレベルのスキルではありません。\n今後、攻撃を当てるのが難しい複数敵が出てきた場合とかですね、ナヒーダの評価はまだ上がっていくかもしれません。\n2. フリーナ フリーナは2凸前提ですが、2番目くらいに引いておいたほうがいいキャラだと思っています。\nこれについては、出せる火力の量が万葉や鍾離より明らかに上だと感じています。\nまた、スキルの召喚獣ですが、これもなかなかに使い勝手がいいというか、将来性があります。\n例えば、飛んでいる敵の弱点をついて落下させる事もあります。\n3. 鍾離、雷電、万葉 雷電の評価が下がっていますが、個人的には、雷電は引いておいたほうがいいと思います。\n私は未だに螺旋は雷電がいないと困りますね。\nいや、困らないかもしれないけど、雷電を入れてクリアすることが多い。\n鍾離、万葉より螺旋適性は高いと思います。あくまで所感ですけど。\nヌヴィレットはやっぱり引かないことにした 実は、次のガチャで、フリーナの凸を進めるか、ヌヴィレットを引くか、どちらかを考えていました。\nですが、どちらもスルーすることに決めました。\nというのも、私は現時点で、性能だけを見てキャラを引く段階は過ぎているなと感じていたからです。\n原神を始めたばかりの頃は、やはり性能というものが非常に重要でした。せっかくなら螺旋をクリアしたいですし。\nしかし、今の手持ちキャラで螺旋をクリアできないということはまずないです。何度も挑戦する必要が出てくるほど難易度が高いということもありません。\n実は、ナヒーダが来るまでは、割と何度か挑戦する必要があるなと感じたことがありました。\nしかし、ナヒーダを引いてからは、ないですね。\n私がいま原神を始めたら、ヌヴィレットは間違いなく引いていました。\nですが、今はそういう段階ではなく「好きなキャラが出てきたとき完凸する」そのために原石をためておく、そのような方針に切り替えるのが一番いいと思いました。\nヌヴィレットもフリーナも好きですが、完凸するかと聞かれると、少し疑問が残る。\nまた、「とりあえずヌヴィレットは確保しておくべき」という考えについても「好きなキャラを引くため原石を貯める」という方針に反する。\nしたがって、完凸したいキャラがでてきたときは、ガチャを引くけど、それまでは引かないことにした。\n例えば、スカークとか出てきたら引きそうだけど、まだまだ先になりそうな気がするなあ。\n","description":"","formated_time":"2024-03-06","href":"https://syui.github.io/blog/post/2024/03/06/genshin/","tags":["genshin"],"title":"原神、引くべきキャラ1位はナヒーダ","utc_time":"2024-03-06T00:00:00Z"},{"categories":null,"contents":"gitea actionsというのは、github actionsとかgitlab-ciと呼ばれるものに相当するものなんだけど、有効にするかどうか迷っていました。\nというのもserverの負担が増大するし、いくつものserviceを動作させている環境だと、それぞれの反応がどうしても遅くなってしまうからです。\nしたがって、こういうのは全部無料で使えるgithubを利用するのが一番でした。\nしかし、最近になってusername(id)の関係でgiteaを使う頻度が増えてきたので、gitea actionsを有効にすることにしました。\ngithubでは使いたいusername(id)がすでに取られていることが多く、時代はself-hostやdomainになっていくのだろうなあと、そんなふうに思います。\n私の場合、最近になってreposを整理したこともあり、ネームスペースは結構気になります。\n例えば、最近作った自作osはai osという名前ですが、username/aiosではなく、ai/osというネームスペースを使用したかった。\no git@git.syui.ai:ai/os.git x git@github.com:username/aios.git とはいえ、これもちょっと分かりづらいですよね。本来はai/aiosとかのほうがわかりやすいかな。まあ、好みの問題ということにしておきましょう。\ngitea actionsの構築 gitea ciとも呼ばれます。\nhttps://blog.gitea.com/hacking-on-gitea-actions/\n[actions] ENABLED=true web-uiでsettingからactionsのtokenを取得しておいてください。\n$ git clone https://gitea.com/gitea/act_runner $ cd act_runner $ make build $ ./act_runner register $ ./act_runner daemon # nohup ./act_runner daemon \u0026amp; これで使えるはず。statusがアイドルになります。\nあとはgh-actionsと同じようにrepoに設定ファイルを置いてpushします。\nname: Gitea Actions Demo run-name: ${{ gitea.actor }} is testing out Gitea Actions 🚀 on: [push] jobs: Explore-Gitea-Actions: runs-on: ubuntu-latest steps: - run: echo \u0026#34;🎉 The job was automatically triggered by a ${{ gitea.event_name }} event.\u0026#34; - run: echo \u0026#34;🐧 This job is now running on a ${{ runner.os }} server hosted by Gitea!\u0026#34; - run: echo \u0026#34;🔎 The name of your branch is ${{ gitea.ref }} and your repository is ${{ gitea.repository }}.\u0026#34; - name: Check out repository code uses: actions/checkout@v3 - run: echo \u0026#34;💡 The ${{ gitea.repository }} repository has been cloned to the runner.\u0026#34; - run: echo \u0026#34;🖥️ The workflow is now ready to test your code on the runner.\u0026#34; - name: List files in the repository run: | ls ${{ gitea.workspace }} - run: echo \u0026#34;🍏 This job\u0026#39;s status is ${{ gitea.status }}.\u0026#34; docker images(container registry) docker imagesの置き場所としてdocker hub(dockerhub)が最も支配的で、かつ使いやすいです。\nなぜなら、デフォルトでdockerhubが指定されるからです。\nただ、github packages(ghcr.io)に置いてあることも増えてきて、github actionsの影響が大きいと思います。\n$ docker run -it syui/aios ai $ docker run -it ghcr.io/syui/aios ai しかし、今までsyui/aiosを使っていましたが、gitea actionsを有効にしたことでai/osに置き換えやすくなります。というか、有効にしたのは、主にこれのためです。\n$ docker tag syui/aios git.syui.ai/ai/os $ docker push git.syui.ai/ai/os $ docker run -it git.syui.ai/ai/os ai ただ、docker imagesは本当に容量を食うので、あまりおすすめできない。dockerhubに置くのが一番でしょう。\n私の場合、repoをgiteaに移行したのに、dockerだけgithub, dockerhubなのはあまり良くない。ネームスペースが異なるのが良くない。dockerもgiteaに移行するかも。\nなんか2GBを超えたあたりでpushできなくなります。\nreceived unexpected HTTP status: 500 Internal Server Error\nThe push refers to repository [***/divya.jain/homer] 994393dc58e7: Pushed received unexpected HTTP status: 500 Internal Server Error https://github.com/go-gitea/gitea/issues/21320 したがって、localhostからpushします。\nactions runner https://docs.gitea.com/usage/actions/act-runner#labels\nhttps://forum.gitea.com/t/gitea-actions-cannot-find-node-in-path/7544/6\nOCI runtime exec failed: exec failed: unable to start container process: exec: \u0026ldquo;node\u0026rdquo;: executable file not found in $PATH: unknown\nnodeをdocker(gitea-runner)にinstallしてもcheckoutのときにerrが出ます。\nただ、runs-on: ubuntu-latestのみならerrがでません。したがって、これはcontainer: archlinuxが問題なのかもしれません。\nどちらにせよarchisoはarchlinuxで実行しますので、nodeをinstallしたcontainer: syui/aiosを使用します。\nruns-on: ubuntu-latest container: #image: archlinux image: syui/aios ","description":"","formated_time":"2024-03-04","href":"https://syui.github.io/blog/post/2024/03/04/gitea/","tags":["gitea"],"title":"gitea actionsに移行するかも","utc_time":"2024-03-04T00:00:00Z"},{"categories":null,"contents":"少し前からai/botをリファクタリングしています。\nせっかくなのでarchベースのai/osを作り、そこに乗せることにしました。\n$ docker run -it syui/aios ai archlinuxベースの自作osで名前はai osです。\nArch Linuxがarchlinuxやarchと呼ばれるようにaiosやaiと呼ぶことがあります。使い分けは以下の通りです。\nvar ai os Name aios Code ai ID archiso archは非常に使いやすいosです。あらゆる用途に使えますが、自作osにも使えます。その使い勝手の良さから、archベースのosはたくさんあります。例えば、manjaro linux, steam os, asahi linux, alter linuxなど。ai osもその中の一つになります。\n特徴としては、rustを入れてosの拡張を目指します。最初は、systemとlogoを表示する機能を実装しました。\n# pacman -S archiso $ git clone https://gitlab.archlinux.org/archlinux/archiso # buildmodes=(\u0026#39;bootstrap\u0026#39;) $ vim ./archiso/configs/releng/profiledef.sh $ mkarchiso -v -o ./ ./archiso/configs/releng /etc/os-releaseを書き換える処理です。\n# archiso/archiso/mkarchiso if [[ \u0026#34;${_os_release}\u0026#34; != \u0026#34;${pacstrap_dir}\u0026#34;* ]]; then _msg_warning \u0026#34;os-release file \u0026#39;${_os_release}\u0026#39; is outside of valid path.\u0026#34; else [[ ! -e \u0026#34;${_os_release}\u0026#34; ]] || sed -i \u0026#39;/^IMAGE_ID=/d;/^IMAGE_VERSION=/d\u0026#39; \u0026#34;${_os_release}\u0026#34; printf \u0026#39;IMAGE_ID=%s\\nIMAGE_VERSION=%s\\n\u0026#39; \u0026#34;${iso_name}\u0026#34; \u0026#34;${iso_version}\u0026#34; \u0026gt;\u0026gt;\u0026#34;${_os_release}\u0026#34; fi docker # git clone https://gitlab.archlinux.org/archlinux/archlinux-docker $ tar xf aios-bootstrap*.tar.gz $ tar -C root.x86_64 -c . | docker import - syui/aios gh-actions github actionsでbuildして、releases, packageとdocker-hubにpushします。\ngithub actionsは毎度のことながらハマるので注意です。例えば、docker loginはdocker.ioとghcr.ioで挙動が違います。\nenv body ${{ github.repository }} syui/aios ${{ secrets.DOCKER_USERNAME }} syui ${{ secrets.DOCKER_TOKEN }} token ${{ secrets.APP_TOKEN }} token, pacakge name: release on: push: branches: - main schedule: - cron: \u0026#39;0 0 * * *\u0026#39; permissions: contents: write env: REGISTRY: ghcr.io IMAGE_NAME: ${{ github.repository }} DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }} DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }} GITHUB_TOKEN: ${{ secrets.APP_TOKEN }} jobs: release: name: Release runs-on: ubuntu-latest container: image: archlinux options: --privileged steps: - name: checkout uses: actions/checkout@v4 - name: archiso run: | pacman -Syuu --noconfirm base-devel archiso docker git git clone https://gitlab.archlinux.org/archlinux/archiso cp -rf ./profiledef.sh /usr/share/archiso/configs/releng/ #mkarchiso -v -o ./ ./archiso/configs/releng/ ./archiso/archiso/mkarchiso -v -o ./ /usr/share/archiso/configs/releng/ tar xf aios-bootstrap*.tar.gz echo -e \u0026#39;Server = http://mirrors.cat.net/archlinux/$repo/os/$arch\\nServer = https://geo.mirror.pkgbuild.com/$repo/os/$arch\u0026#39; \u0026gt;\u0026gt; ./root.x86_64/etc/pacman.d/mirrorlist sed -i s/CheckSpace/#CheckeSpace/ root.x86_64/etc/pacman.conf arch-chroot root.x86_64 /bin/sh -c \u0026#39;pacman-key --init\u0026#39; arch-chroot root.x86_64 /bin/sh -c \u0026#39;pacman-key --populate archlinux\u0026#39; arch-chroot root.x86_64 /bin/sh -c \u0026#39;pacman -Syu --noconfirm base base-devel linux vim git zsh rust openssh openssl jq\u0026#39; #aiをbuildする arch-chroot root.x86_64 /bin/sh -c \u0026#39;git clone https://git.syui.ai/ai/bot \u0026amp;\u0026amp; cd bot \u0026amp;\u0026amp; cargo build \u0026amp;\u0026amp; cp -rf ./target/debug/ai /bin/ \u0026amp;\u0026amp; ai ai\u0026#39; tar -zcvf aios-bootstrap.tar.gz root.x86_64/ tar -C ./root.x86_64 -c . | docker import - ${{ env.IMAGE_NAME }} - name: docker-hub run: | echo \u0026#34;${{ env.DOCKER_TOKEN }}\u0026#34; | docker login -u ${{ env.DOCKER_USERNAME }} --password-stdin docker push ${{ env.IMAGE_NAME }} - name: docker login github uses: docker/login-action@v3 with: registry: ${{ env.REGISTRY }} username: ${{ github.actor }} password: ${{ env.GITHUB_TOKEN }} - name: docker push github run: | docker tag ${{ env.IMAGE_NAME }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} - name: Create new release uses: softprops/action-gh-release@v1 with: name: latest tag_name: latest files: aios-bootstrap.tar.gz ","description":"","formated_time":"2024-02-11","href":"https://syui.github.io/blog/post/2024/02/11/aios/","tags":["github","arch","aios"],"title":"archベースのaiosを作った","utc_time":"2024-02-11T00:00:00Z"},{"categories":null,"contents":"northflankのapiではvolumeをexportする方法が用意されてないみたいなので、これを自動化する必要があります。\n# https://northflank.com/docs/v1/api/volumes/get-volume $ northflank get volume # https://northflank.com/docs/v1/api/volumes/update-volume $ northflank update volume 具体的にはgitのprivate-repoを使用します。\n$ northflank exec service --project $PROJECT --service $SERVICE --cmd \u0026#34;/data/backup.sh $TOKEN\u0026#34; #!/bin/bash TOKEN=$1 git config --global user.email $MAIL git config --global user.name $USER cd /data/$REPO git remote add origin https://$TOKEN@github.com/$USER/$REPO git add . git commit -m backup git push origin main git remote rm origin この場合、volumeにdeploy-keyを置いてgit@github.comでアクセスするよりtokenでアクセスしたほうが良いでしょう。\nただし、tokenの場合は$REPO/.git/configに残っていないかチェックしておきましょう。\n","description":"","formated_time":"2024-02-05","href":"https://syui.github.io/blog/post/2024/02/05/api/","tags":["api","northflank"],"title":"northflankのvolumeをbackupする","utc_time":"2024-02-05T00:00:00Z"},{"categories":null,"contents":"ここではepic gamesのunreal engine 5の使い方をまとめます。現在はversionの5.4.2に追従しています。\nue 5.4.4 ue 5.3.2 ブログで説明しづらい部分が多いのでblueprintueを参考にしてください。\nrepo : https://git.syui.ai/ai/ue blueprint : https://blueprintue.com/profile/ai 無料 使用しているassetなどです。\nasset : city sample asset : game animation sample plugin : pixel streaming plugin : vrm4u plugin : kawaiiphysics plugin : varest 有料 おすすめのassetです。\nasset : superhero fligth animations asset : dynamic volumetric sky asset : ocean waves plugin : http websocket helper plugin : jsonparser [asset] vrm4u + superhero fligth animations vrm4u superhero fligth animations ue5.4がリリースされました。updateしてみましたが、色々と動かなくなっています。そして、前よりも頻繁に落ちるようになりました。結論として5.3を使いましょう。\n動かなくなった箇所は以下の通り。\n飛行するとカメラがモデル内部に入り込む / ABP_flying, apply additive, scale 飛行の上下左右の向きが反映されない / ABP_flying, rtg 今回、pluginとengineをupdateしたところ、髪の毛が動くようになりモデルの内部に入り込むことがなくなりました。以前はKawaiiPhysicsを使って実現していました。なお、ue5.3でもこの現象がなくなっていることを確認しています。とはいえ、modelやplugin, engineなどあらゆる依存関係が考えられるので、あくまで個人的なケースです。\nue5.4で最初から構築した手順を記録します。\nまずはvrmを動かせるようにします。基本的なコントローラーはsuperhero flight animationsを使用します。\nai.vrmをimportするとして重要なファイルは以下の通り。\n# c:/project/yui Content ├─SuperheroFlight │ ├─Blueprints/Characters/BP_Player_UE5 │ └─Characters/Mannequins/Animations/ABP_Player_UE5 └─yui ├─BP_Player_ai ├─anim │ └─ABP_Player_ai └─model ├─SK_ai └─RTG_ai Pluings └─VRM4U まずContent/yui/modelにvrmを入れます。インポートします。マテリアルタイプはsubsurfaceを使用します。\nContent/yui/model/RTG_xxxを開きます。\nソースにSuperheroFlightのモデルを選択して、調整します。アニメが動くか確認してください。ポーズも重要です。\nABP_Player_UE5を右クリックしてリターゲティングします。先ほど設定したRTG_xxxを指定してください。すべてのアニメを選択してリターゲティングを実行。Content/yui/animに保存します。そこにABP_Player_xxxができます。ファイルの名前と場所はできる限り変更しないでください。バグって動かなくなり、再度リターゲティングしても動かないanimが生成されます。こうなるとvrmをインポートしなおさなければなりません。\nContent/yui/anim/ABP_Player_xxx v5.3では一括で全てリターゲティングできなかったのでanimを探して一つずつやっていました。これがasset側の変更かengine側の変更かはわかりません。\n次にContent/SuperheroFlight/Blueprints/Characters/BP_Player_UE5を複製して、Content/yui/BP_Player_xxxを作ります。そこでABP_Player_xxxを読み込むようにします。MapのGameModeでContent/yui/BP_Player_xxxを使うようにします。\nContent/SuperheroFlight/Blueprints/Characters/BP_Player_UE5 -\u0026gt; Content/yui/BP_Player_xxx ここでそれぞれのアニメーションを当てておきます。\n[issue] 飛行するとカメラがモデル内部に入り込む 再生してみると飛行が正常に動きません。カメラがモデル内部に移動します。これはscaleが間違っているためです。apply additiveが原因でそこのscaleを変更すると回避できます。\nまた代わりにblend bone by channelを使用することでも回避できます。\nこれはv5.4で発生し、v5.3では発生しません。\nContent/yui/anim/ABP_Player_xxx また、flying \u0026gt; flying state machine -\u0026gt; idle/hoverのlook_atにエラーが出てるのでboneのj_bip_c_neckを入れます。\nこれらの飛行中の問題については、リターゲットしない方法でmeshを活用することで問題は発生しません。詳しくはgame animation sampleとの統合を見てください。\n[issue] 飛行の上下左右の向きが反映されない 飛行すると向きが一定になります。視点を動かしても変わりません。\n通常だと視点を下に向けると、頭も下を向いて移動しますが、それがありません。下に移動してもずっと横飛行を行います。\nこれもv5.4で発生し、v5.3では発生しません。\n[issue] vrm4uのmaterialについて考える 私はSubsurfaceProfileを使用していますが、他のタイプだと影(shadow)と反射(light)の問題がかなり強く出てしまい、あらゆる場面で常用できません。移動したら背景の加減でおかしくなるなど問題が多いのです。\nそこで完全に影響を受けないMToon Unlitを使用することも考えられます。一部分だけ他のタイプのmaterialを利用して調整していきます。この場合の肌の色を以下に調整するといいでしょう。\n[close] buildすると髪が動かなくなる vrm4uがpackage buildすると髪の毛が動かなくなっていました。\nこれを動かせるにはABP_Post_${model_name}を編集して、VrmSpringBoneでVrm Meta Object:VM_${model_name}_VrmMetaを指定します。\nこれでこの問題は解消されました。このissueを閉じます。\n[issue] buildすると髪が動かなくなる package化すると髪が動かなくなります。これはue 5.3でも発生し、vrm4uのversionの問題です。\nediorで確認すると動くのですが、pacakge build後に動かなくなるのです。\nこれは、buildとeditorでは実行順が異なっているためです。\nhttps://zenn.dev/daichi_gamedev/articles/unreal-engine-beginplay-order https://zenn.dev/posita33/books/ue5_starter_cpp_and_bp_002/viewer/chap_01-06_cpp-package_project_settings 基本的にpackageではplayerが最後に呼ばれます。editorは4番目くらいに呼ばれます。つまり、これを前段階で呼ばれるようにすれば髪の毛が動くようになります。\n私はtitle画面からopen levelで最初のステージを呼び出しているのですが、これがよくありません。ue5はmapを一つとして想定しているようで、それ以上読み込む場合はproject settingでpackage化されたbuildに含めるmapを追加する必要があります。titleを挟まないmapをstand aloneでpreviewして確認します。\nこの問題はそれでも完全に治らなくて度々、髪の毛が動かなくなっていました。game modeのBP_Playerがspawnされていないからではないかと色々やってみたのですが治りませんでした。superhero fligth animationsをupdateしたら治ったと思いましたが60秒後に動かなくなります。\nそこでmapのbpにevent tickを追加して、そこでdealy, add child actor component BP_Playerすることで無理やり動かしています。これは良い方法ではありません。また、stand aloneとpackageの動作が大きく異なります。stand aloneでうまくいってもbuildすると上手くいかないのが基本です。簡易な方法、負担が少ない方法はことごとく動きません。event beginでは対処できません。\nなお、ここでadd child actorするBP_Playerはmeshとmotionさえあれば良く、eventは必要ありません。削っておきましょう。そして、title.mapにBP_Playerを置きます。\nちなみに、必殺技のシーケンスを呼び出したときだけ動く様になるのは変だなと思っていましたが、BP_Playerがその時にmapにspawnされるからだと思います。つまり、長時間設定のシーケンサを置いておけばうまくいくかとも思いましたが、うまくいきませんでした。どうやらmapに置くだけではダメでゲーム中に呼び出す必要があるみたいです。\nこのような解決法を取るならKawaiiPhysicsを使いましょう。そのほうが安定します。\n[issue] 5.4でanimリターゲットすると頭の動きがおかしくなる これはSource IKRig : IK_UE4_Mannequinなどを使用すると正常になりますが、それではABP_Playerとの互換性などが損なわれます。つまり、BP_Playerでanimを再生できなくなるということです。\nこの問題の解決は少し複雑で録画からanimを作成しなければなりません。しかも普通の作り方ではありません。\nまずはSource Preview Meshを取りたいanim元にします。そして、使用したいanimをassetブラウザから再生します。\nその後、Source IKRig : IK_UEFN_Mannequinなどを指定してやると、anim元を再生しながらもIK_UEFN_Mannequinを使用することができます。この状態では不思議なことにanimが正常に再生されています。\nそこで録画ボタンを押してanimを作ります。するとABP_Playerで使えるanimが生成されます。\n[idea] 作り直すもの 今まで実装開発してきたものはいくつかありますが、代表的なものを挙げます。記録のため動画にしておきます。\naccount login system account item system character lv system character skill character sword \u0026amp; collision 一気に解説します。移動すると経験値が入ります。Lv1になると変身できるようになります。変身すると飛行できるようになります。飛行できる時間はlvに応じて変化します。特殊なアイテムを取るとスキルを覚えます。スキルにはクールタイムやcollisionなどが設定されており、敵が吹っ飛びます。剣のモーションは原作を再現しています。原作では輪が剣になりますので、剣を登場させたときは輪を消さなければなりません。meshを入れ替える処理などを書いています。アイテム画面やストーリー進行などもapiと連携するシステムを作りました。\nこれらを全部作り直すことになります。\ngame animation sample game animation sample superhero flight animations 今回はgame animation sampleとsuperhero flight animationsを統合してみました。今までのモーションに加えて空を飛べるようにしたのですが、違和感ない形で自動的にブレンドされます。これは想像以上に大変なことをやっているので5.4.2に追従したほうが良さそうです。\nただ、今まで開発実装してきたものがすべて作り直しになります。\nインポートできないのかと思われるかもしれませんが、ue5にそんなことできません。動かなくなります。仮に動かせたとしても、おそらく、作り直したほうが早いでしょう。\ngame animation sampleとsuperhero flight animationsの統合を解説します。\n基本的にはBP_SandboxCharacterにeventのIA_Spritでanim instance class(ABP_Player)を指定しますがBP_Player_UE5から様々な設定や変数を持ってきて動くように改変していきます。\ncustom gravity 重力をactorに設定し、月の上を歩けるようにします。gravity directionを使います。\nyoutube : Unreal Engine 5 Tutorial - Custom Gravity UE5.4 Preview\n基本的にはbp_actorを作成し範囲を設定します。bp_actorを置いたとき惑星(bp_planet)に親子付けするといいですね。この場合はlocationは0, scaleは1.1を設定します。\n動作はbp_player(bp_character)のeventで設定します。具体的にはactor beginからgravity directionします。\ngravity directionを無効にする方法が用意されていないようなので、actor endでdestroy actorしてrestart playerしています。\nhttps://dev.epicgames.com/community/learning/tutorials/w6l7/unreal-engine-custom-gravity-in-ue-5-4\ncity sample 今回は、city sampleとgame animation sampleを統合する方法を紹介します。どちらもepic gamesが提供しているため無料で使えます。最初のスターターキットとして使用されることが多くなるはずです。\ncity sample game animation sample city sampleのほうが複雑なので、city sampleをベースにgame animation sampleをコピーする形で統合します。\nまずコピーするファイルです。\n# game-animation-sample Content Binaries └─Win64 └─GameAnimationSampleEditor.target 編集するファイルです。これはcity sampleの方を編集します。\n# city-sample city-sample.uproject Binaries └─Win64 └─UnrealEditor.modules Config └─DefaultGameplayTags.ini まずrootにある${project_name}.uprojectにgame animation sampleのpluginを追加します。これはコピー側のuprojectを参照してください。長くなるのでここでは全て列挙していません。\n\u0026#34;Plugins\u0026#34; : [ { \u0026#34;Name\u0026#34;:\u0026#34;ModelingToolsEditorMode\u0026#34;,\u0026#34;Enabled\u0026#34;:true,\u0026#34;TargetAllowList\u0026#34;:[\u0026#34;Editor\u0026#34;] }, . . . ] 次にBinaries/Win64/UnrealEditor.modulesもコピー側のものを見て追記します。\n{ \u0026#34;BuildId\u0026#34;: \u0026#34;0000000\u0026#34;, \u0026#34;Modules\u0026#34;: { \u0026#34;CitySample\u0026#34;: \u0026#34;UnrealEditor-CitySample.dll\u0026#34;, \u0026#34;CitySampleAnimGraphRuntime\u0026#34;: \u0026#34;UnrealEditor-CitySampleAnimGraphRuntime.dll\u0026#34;, \u0026#34;CitySampleEditor\u0026#34;: \u0026#34;UnrealEditor-CitySampleEditor.dll\u0026#34;, \u0026#34;GameAnimationSample\u0026#34;: \u0026#34;UnrealEditor-GameAnimationSample.dll\u0026#34; } } 次にConfig/DefaultGameplayTags.iniもコピー側を見て追記します。\n+GameplayTagList=(Tag=\u0026#34;GameplayCue.ContextualAnim\u0026#34;,DevComment=\u0026#34;\u0026#34;) +GameplayTagList=(Tag=\u0026#34;MotionMatching\u0026#34;,DevComment=\u0026#34;\u0026#34;) +GameplayTagList=(Tag=\u0026#34;MotionMatching.Default\u0026#34;,DevComment=\u0026#34;\u0026#34;) +GameplayTagList=(Tag=\u0026#34;MotionMatching.Idle\u0026#34;,DevComment=\u0026#34;\u0026#34;) +GameplayTagList=(Tag=\u0026#34;MotionMatching.Loops\u0026#34;,DevComment=\u0026#34;\u0026#34;) +GameplayTagList=(Tag=\u0026#34;MotionMatching.Pivots\u0026#34;,DevComment=\u0026#34;\u0026#34;) +GameplayTagList=(Tag=\u0026#34;MotionMatching.Starts\u0026#34;,DevComment=\u0026#34;\u0026#34;) +GameplayTagList=(Tag=\u0026#34;MotionMatching.Stops\u0026#34;,DevComment=\u0026#34;\u0026#34;) 大体こんな感じでやればgame animation sample(ABP_SandboxCharacter)が動くでしょう。\ncity sampleはnightmodeのblueprintにerrが出ます。これはset daytime, set nighttimeを飛ばしてやればでなくなります。昼夜の切り替えはこちらの記事が参考になります。\nhttps://qiita.com/EGJ-Nori_Shinoyama/items/429804dc2d7cc99fc0ea\ncity sampleは何かと問題が多いassetですが、その一番の原因はone file per actorを採用していて、外部アクタの読み込みを変更できないからでしょう。\n基本的にlvをcopyしたものを使用し、バグが発生したときはContent/_ExternalActors_/Map/にある自身が使っているmapのフォルダを削除しましょう。その後、またlvをcopyしてそれを使います。こんな方法しかありません。\nocean waves 星と海と空をつなげるにはocean wavesが参考になります。このassetは結構すごいことをやっています。\nocean waves まずはocean wavesでplayerを動かし不要なものを削除します。\nOceanWaves/Levels/EarthSizedOceanPlanetを開いて必要なものを列挙します。\nLighting DirectionLight SkyAtmosher SkyLight VolumetricCloud OceanMaterialPresets OceanMaterial_Opaque OceanMaterial_Opaque_AF OceanMaterial_SLW OceanMaterial_SLW_AF Planet BP_EarthSizedClouds BP_EarthSizedOcean BP_EarthSizedSphercialMesh BP_SkyAtmposhereAdjuster PostProcessVolume WaterVolume +PlayerStart +Plane もしlvからcopyして使用する場合はBP_xxxの値が一部抜けるので注意してください。例えば、BP_EarthSizedOceanは海の設定です。詳細のOceanVolumeにWaterVolumeを参照するようにしてください。\n雲の形式はVolumetricCloudで設定していきます。大体の使い方としてはこんな感じです。詳しくはblueprintを見ます。\n[issue] buildすると雲が中央に集中する package buildすると光が中央に集中し、雲も全体的におかしくなります。中央に向かってレンダリングが伸びているように見えます。\nBP_EarthSizedCloudsのGlobal Windが原因です。ここでOcean : BP_EarthSizedOceanに指定するとこの現象が発生します。\n[issue] 海に入った直前だけ背景が映り込む BP_EarthSizedOceanを編集します。\n私が独自に設定しているSM_SkySphereが潜った瞬間だけそれが表示されてしまうので、Volume Material Heightは0にしています。\nAbove Water MaterialにもUnderwaterと同じものを入れてください。\n[idea] atmoshereで宇宙をつなげる 私が作ってきたlv(map)は宇宙と街でわけられていました。\nこれは特別なことではなく当たり前のことで、mapは基本的に平面なのです。平面のmapにキャラクターやフィールドを配置していくのです。\n私の場合はサークルのアクターを用意してぶつかると別の場所に移動するように設定していました。\nしかし、これは本来やりたかったことではありません。現実に基づいたものを作りたかった。宇宙と街が異なる場所に置かれるのではなく、最初からつながっている形が良かったのです。\n例えば、空に上昇して大気圏を抜けると宇宙に行ける形です。空に上昇すると宇宙マップに移動させられる形ではありません。\nなぜこのようなことがやりたかったのかというと「目に見えない部分もしっかり作られているゲームを作りたかったから」です。\n昼と夜がゲーム内で再現されていることがよくあります。これは単にライトと月の絵を背景で回しているだけなのです。しかし、私はゲーム内でもその場所に行くと本物そっくりの天体が動いている、そういうのがいいなと思っていました。\n今回は、それを実現するためにsky atmosphereを利用するようにしました。\nまた、月などの天体には重力がありませんでした。そのまま丸い球体が浮いているという形だったのです。ですから、上から落下すると月に乗れますが、横からだと乗れません。ぶつかるだけです。これを改善したかった。\ngame animation sampleには飛び越せるブロックがあります。あれをフィールドに設置して岩にかぶせ見えないようにすることで動作します。見えないようにというのはブロックのmeshをvisibilityで制御します。\nしかし、注意点もあります。太陽と月を追加するとあまりに負荷が高くなったのか落ちるようになったことがありました。いくつか改善すると治りましたが、この形を採用するとbuildが通らなくなることもあります。\ndynamic volumetric sky 今回は、dynamic volumetric skyとocean wavesの統合してみました。\ndynamic volumetric sky ocean waves なお、superhero fligth animations, game animation sample, city sampleも入っています。\n結果として理想の地表と海面、空と雲を手に入れました。\n[tips] default setting BP_DynamicVolumetricSky(self) -\u0026gt; Coloud : Coloud Fly Option BP_DynamicVolumetricSky(self) -\u0026gt; Height Fog Max Opacity : 0 SkyAtmosphere -\u0026gt; Transform Mode : Planet Center at Component Transform SkyAtmosphere -\u0026gt; Transform(location-z : -6360) [tips] option setting BP_DynamicVolumetricSky(self) -\u0026gt; Single Player Fps Lock : 60 FPS VolumetricCloud -\u0026gt; Layer Bottom Sltitude : 20 VolumetricCloud -\u0026gt; Tracking Start Max Distance : 400 VolumetricCloud -\u0026gt; Tracking Max Distance : 400 2DSky -\u0026gt; visible : false [issue] 地平線 まずはdynamic volumetric skyの地平線を消していきましょう。\n普通に考えて地平線を消したいことなんてありそうですけど、英語はこちらで説明されています。日本語は見つかりませんでした。これは通常、Horizon Falloffで調整しています。\nただし、dynamic volumetric skyは少し特殊です。Height Fog Max Opacityを0にすれば消えます。\nどうやらBP_Dynamic_VoluemetricSkyにあるExponentialHeightFogで地平線を設定しているようです。これを削除していくか、設定を変更してもいいですが、削除した場合はbuildがおかしくなるかもしれません。削除する場合はcompileするとerrorが出るので使用している箇所の関数やblueprintを削除します。\n[issue] 海の波紋 dynamic volumetric skyと合わせることで海に波紋が現れます。\nこれはocean wavesのsky atmosphereが星の中心を規定していることから発生します。つまり、sky atmosphereを星の中心に設定しないと描写の問題が出るということです。\nこの解消方法はdynamic volumetirc skyのatmoshereのtransformのlocation-zを-6360にすることで回避できました。\nただし、わからないところもあって、私はBP_EarthSizedSpericalMeshの中にBP_DynamicVolumetircSkyを入れています。ですから、そのままでも座標は星の中心を指しています。\n[issue] 海の影 海に円形の影が現れることがあります。これはBP_DynamicVolumetircSkyのVolumetricSkySupportのtransform-scaleを大きくすると海に入る影が大きくなり、1にするとなくなります。\nこの辺も星の内部に展開される領域に関係します。\n[issue] city sampleとの統合 city sampleとocean waves + dynamic volumetric skyを統合するのは容易ではありません。buildの結果が異なるからです。\n具体的には以下の画像の通りの構成にしなければなりません。oceanの他のactorを入れてはいけません。\nまずdynamic volumetric skyは0に置きます。oceanの惑星の中心ではありません。そして、dynamicのatmosphereを念の為にlocation-z:-636000001とします。location-z:-636000000でもいいと思います。これはGround Raidus:6359になっているからです。\n[idea] 具体的な統合 重要な問題は以上の2点ですが統合には他にやらなければならないことがたくさんあります。\n例えば、「dynamic volumetric skyの範囲を超えたとき、一体どうやって地球と太陽と月を表現するのか」です。\nさっきまであった太陽がいきなり消えて別の場所に出現したり、見た目が変わったりするのはできれば避けたい。しかし、それだと見た目のクオリティは一気に落ちます。\nまずは月を消すことからですが、月は2DSkyで実装されています。visible:falseにすればいいでしょう。\n次に本物の月を地球の外に回します。ここではsplineで軌道を設定しています。\nloopさせるにはspline lenをmaxにしてfloat wrapします。\n[idea] 地球の外側 そのままでは宇宙に出たときの見栄えがよくありません。したがって、宇宙に出たとき地球の見た目を整える必要があります。\nしかし、これもunreal engineの問題から解決が難しい。私は以下のように実装していますが、良い方法ではありません。\n[idea] 地球の自転 これは失敗談ですが、地球に自転を設定してみました。これで外側を回っている月や太陽はゆっくりした速度で動けば良くなります。つまり、現実に合わせることができる。\nしかし、地球を自転させることで地面は揺れマップは崩壊。様々な問題が発生しました。\nやはり、ゲーム上で地動説を実現するのは難しいようです。太陽側を回すしかありません。\n[idea] 本物の地球を作る cesiumを使うとgoogle mapと連携できます。\ncesium pixel streaming 個人的にやりたかったのはmultiple full stacks with matchmakingです。具体的には複数のインスタンスを起動して、各ユーザーごとにsessionをわけます。これにより異なる画面(自分の画面)で操作できるようになります。\nmultiple full stacks with matchmaking\nすべてのユーザーが同じストリームに接続するのではなく、各ユーザーに対して独自のインタラクティブなエクスペリエンスを提供したい場合もあります。これを実行するためには、各ユーザーに対して Pixel Streaming コンポーネントの個別スタックを実行して、各ユーザーを個別の Signaling and Web サーバーに誘導し、接続を開始します。\n個別ホストで Pixel Streaming コンポーネントの各スタックを設定できます。または、全員が異なるポートで通信するように各スタック内でコンポーネントに対してポートを設定をすることで、同じホストで複数のスタックを配置することもできます。これらのポートの詳細については Pixel Streaming リファレンスを参照してください。\n具体的な手順は、まずmatchmaker serverを建てます。signaling serverをmatchmakerに接続します。\n# https://github.com/EpicGamesExt/PixelStreamingInfrastructure $ cd ~/github/PixelStreamingInfrastructure/Matchmaker/platform_scripts/cmd/ $ ./setup.bat $ ./run.bat # https://dev.epicgames.com/documentation/ja-jp/unreal-engine/unreal-engine-pixel-streaming-reference # --HttpPort 90 # --MatchmakerPort 9999 # Signaling and Web サーバーに対する次のコンフィギュレーション パラメータを設定します。 $ cd ~/github/PixelStreamingInfrastructure/SignallingWebServer/platform_scripts/cmd/ $ ./setup.bat $ ./Start_SignallingServer_nopublic.ps1 --UseMatchmaker true --MatchmakerAddress 127.0.0.1 --MatchmakerPort 9999 --PublicIp localhost --HttpPort 80 https://dev.epicgames.com/documentation/ja-jp/unreal-engine/hosting-and-networking-guide-for-pixel-streaming-in-unreal-engine\nhttps://dev.epicgames.com/documentation/ja-jp/unreal-engine/getting-started-with-pixel-streaming-in-unreal-engine\n基本的にはweb uiで各ユーザーが使用するStreamerIdを選択して別々のstackにアクセスします。\nurlはhttp://127.0.0.1/?StreamerId=DefaultStreamer, http://127.0.0.1/?StreamerId=DefaultStreamer1という形になります。このidは起動しているアプリの数だけ生成されます。\nただ、アプリの起動数が多すぎるとserverの負荷が大きくなります。これはゲーム内容にもよりますが私が作っているゲームだと4つくらいが限界でしょう。gpuの制限もあります。例えば、streamer idを3つ作りたいならアプリを6つ起動するようにしてください。そのほうが確実です。\n同じコンピュータで Pixel Streaming を使用して Unreal Engine の複数インスタンスを実行する計画の場合、NVIDIA GeForce ラインなど一般ユーザー レベルの多くのグラフィック カードで同時に実行できるエンコーダは最大 3 つであることに注意してください。Quadro や Tesla などプロフェッショナル グレードのカードには、これと同じ制限はありません。\nstun/turn server\nSignaling and Web サーバーが Unreal Engine アプリケーションとブラウザ間で接続を直接ネゴシエートできるようにするためには、互いに相手に自身の IP アドレスを送信する必要があります。つまり、ブラウザは Unreal Engine アプリケーションにより送信された IP アドレスにアクセスできる (その逆も同様) ことが必要です。\nシンプルな LAN では、各エンドポイントは通常、それ自身のネットワーク カードで把握しているプライベート IP アドレスを使用して、相手がアクセスできることを前提にしています。オープンなインターネットやサブネットにまたがる場合、またはブラウザと UE4 アプリケーションの間にネットワーク アドレス変換 (NAT) がある場合、一般的にこの前提は当てはまりません。代わりに、各パーティは STUN (Session Traversal Utilities for NAT) プロトコルを実装しているサーバーにクエリを送信して、それ自身のパブリック公開の IP アドレスを検出する必要があります。STUN サーバーが各エンドポイントにパブリック公開の IP アドレスを通知した後、Signaling and Web サーバーは直接接続を引き続き仲介できます。\n例えば、login時にipをgetして、それを保存します。そのipと一致しないと操作できないようにすれば一人のユーザーのみ操作可能になります。ですが本来は各ユーザーが別々のスタック、ストリームでゲーム画面を実行できるようにするのが望ましいでしょう。\nhttp helper + jsonparser これまでputができるhttp requestはありましたが、patchができるものはありませんでした。しかし、RLoris/HttpHelperDocがそれを可能にします。無料で使えるものにはufna/VaRestがあります。\n$ curl -X PUT -sL example.com $ curl -X PATCH -sL example.com これとjsonparserを組み合わせることでかなりblueprintが楽に書くことができます。もちろん、無料でやることは可能ですが、相当な時間と手間がかかってしまうので、こういったpluginは購入しておくのも手です。ただし、本来は公式が対応する機能ではないかとも思っていて、pluginを購入してもsupportがいつまで継続されるのかは未知数です。\n[error] install asset インストールに失敗しました\nエラーコード: II-E1001\nhttps://forums.unrealengine.com/t/i-keep-getting-error-code-ii-e1001-when-attempting-to-create-some-unreal-projects/535863\nこの問題は修正されていません。\nassetをinstallするときにerrorが出ます。原因はEpic Games LauncherのダウンロードキャッシュフォルダであるVaultCacheです。これを内部であれ外部であれ指定しているわけですが、原因不明のII-E1001というerrorが出て解消できないことがあります。基本的には全く新しいフォルダを作ってそれを指定するとうまくいく場合があります。上手くいかない場合もあります。この際、VaultCacheという名前にしてはいけませんし、選択してもいけません。\nそもそもこの問題が発生するのは不定期で、何もしていないのに治ることがあります。ハードディスクをlauncherが認識できていないからかもしれませんが、なぜ認識できないのかわかりません。\nとはいえ、unreal engineは基本的にバグだらけであり、ほとんどがバグっているので、この問題もその中の一つに過ぎません。特に困っているので書きました。\n[error] package to generate with the same ID PackagingResults: Error:: [Cook] Tryning to add package in context but there is already a package to with the same ID\n大体はこれと似たような問題です。基本的にはocean wavesのactorを追加した後に削除すると発生します。\ncity sampleで頻発します。Content/_ExternalActors_を削除して新しいcity sampleのContent/を上書きします。\n[tips] モデルを法線で強調する モデルのoutline(法線)を強調する設定を行います。Content/yui/model/SK_xxxを開いてレンダリング \u0026gt; overlay materialで以下のマテリアルを作成して適用します。\nContent/yui/model/SK_xxx blueprintue.com\n[tips] 待機モーションをランダムにする ABP_xxxのlocomotion \u0026gt; idleにてrandom sequence playerを追加します。詳細からanimを追加してランダムで再生できます。\n[tips] アニメーションにエフェクトを付ける animに時間制限のエフェクトを付けます。通知にtimed niagara effectを追加して詳細からniagaraを追加します。\n[tips] 剣のモーションを作る 新しくswordのactor(static mesh)を作成し、collisionを作ります。\nそれをBP_Player_UE5に装備し、motionを作成し、キーに割り当てます。剣をしまうのはniagaraで作成しました。\nby ai\nこれはsword_open, sword_closeというactor, blueprintを作成して、それをBP_Playerのmeshに当てます。そして、set visibleで切り替えています。\nではparticle(粒子)はどうやって実現しているのかというとniagaraです。\nまずはboneを追加します。このboneを元にtrailというeffectをつけていくわけです。sword-trailは検索タグとしても有効です。effectはanim sequence(アニメ・シーケンス)で設定します。\nPSTemplate, Socket Nameを指定します。\nまた、niagaraで作成してもいいですね。sword-trail-naigaraとでも検索してみてください。\nソードトレイル sword motion(ソード・モーション)はanim montage(アニメ・モンタージュ)を使用しているのですが、実行後に元のlocation(位置)に戻ってしまう問題がありました。\nこれはroot motionをenableにしたり、他の設定をやっても戻ってしまうのです。\n原因はIKリターゲットしたときrootが動いていないために起こります。animationを開いてsrcとtargetを比較してみると、srcのほうはrootが動いていますが、targetのアニメは動いていません。具体的には、srcはlocationが変動しますが、targetは変動していません。\nこれを変動するようにしないといけないのですが、bone(ボーン)のrootを選択してFKの平行移動モードをGlobally Scaledに設定します。\nこれでtargetのrootが変動しているのを確認後、リターゲットし、montageを作成します。\nUE5でルートモーションを有効にしたままリターゲットをする方法 [tips] apiを使って処理を行う pluginであるvarestのpostですが、macで動いたものがwindowsでは動きませんでした。ですが、windowsでイチから作成すると動きました。\nue5はPATCHに対応していません。この辺はapiを作り直さないといけないかもしれない。\nby : ai\nlogin処理です。atprotoと連携できればいいなと考えています。\nあと、ゲーム公開/非公開はaiのアカウントで判断しています。ある値がtrueなら公開、falseなら非公開です。ここをapiで変更すれば基本的にゲームの起動自体をコントロールできるようになってる。\nby : ai\n[tips] カメラを近づけるとキャラの表示を変える 透明にフィードアウトする形がいいのですが、非常に面倒なのでoverlayで対応します。\nget world location, get actor locationをdistance(vector)で差を取り180 \u0026gt;= value, 100 \u0026gt;= valueで比較してbranchでoverlay、100以下の場合はset visibilityします。\nhttps://historia.co.jp/archives/23521/\nm_outline_7を変換して使いました。パラメータの調整は厄介で基本設定がsurface, masked, subsurface profile, パラメータをU_pos_01 : 0.2以外は0にします。これは自分が購入したassetの設定です。\n[system] レベルアップ 移動するとrandomで経験値が入るようにしました。大体、40秒間移動すれば1 expです。経験値をapiに保存します。expに応じてlvを表示します。この辺はstatusのuiを再度表示しないといけなかったり、anim-eventを作ったり大変でした。\n[system] アイテムストレージ アイテムストレージと言ってもwpです。uiとボタンで作ります。\nuiをマウスで動かすにはSet Input Game And UIを使用します。これ以外だと色々と問題があります。例えば、Set Input Onlyは2回クリックしないとボタンを押せないなど。\n基本的にアイテムをapiに保存して、それがある場合はスキルやテレポートを開放します。テレポートはカードを拾う場所にPlayStartを置いておきます。Open Levelのoptionsにtagを入れて移動します。\n[tips] 瞳の変化 create dynamic material instance\nhttps://historia.co.jp/archives/33401/\nこれを利用することでmaterialを光らせてそれを設定することで瞳や輪を光らせることができます。ただ常時はやめたほうがいいでしょう。プレイヤーがつかれてしまいます。\n[tips] 物の破壊 選択モードから「フラクチャ」モードに変更します。このフラクチャモードで実際に Chaos Destructionに関わるメッシュの分割などを行います。複数選択する。新規作成。一様化で分割。色はジオメトリコレクションの詳細から「Show Bone colors」のチェックを外します。\nhttps://logicalbeat.jp/blog/11044/\n[tips] 表情を動かす [tips] 必殺技をつける レベルシーケンスで作成しました。カメラ移動に苦戦しましたが、それさえやれば割と簡単かも。あと爆発と同時に見えないsphereを作成してsimulate physics, collisionを設定しています。これによりダメージや吹っ飛び判定ができます。なお、play後はinput enableしておいてください。\n[issue] シーケンサを5.3から5.4にインポートしたらバグっていた 原子爆発をシーケンサで作成していましたが、バグに遭遇しましたので記録しておきます。\n5.3から5.4にシーケンサを持ってきて使用していましたが、一度でも編集するとおかしくなります。例えば、BP_Playerを置いたとして、mesh(skeltal)も追加しなければならなくなりました。なぜならanimを追加できないからです。meshを追加したあとanimを追加できます。しかし、これでもまだ正常ではありません。buildが進まなくなり、編集するとanimが機能しなくなります。つまり、meshを追加、animを追加、meshを削除という手順を踏まなければいけません。BP_Playerの直下にanimを置くことでようやく正常になります。\nこれは5.4.3にしたら治りました。基本的にはskeltal meshがSKM_UEFN_MannequinのものCharacterMesh0を置いて、その下にanimを置きます。この際、Mannequinのanimが必要です。リターゲットで作成します。そして、transformを0にしておいてください。animは右クリックでルートコンポーネントを交換にしておくといいかもしれません。 今もbuild後の画質問題に悩まされています。私はcity sampleをベースにprojectを作成し、package buildしていますが、build後は画質が悪くなります。editor上では問題ありません。高DPIを許可なども試してみましたが効果がありませんでした。\n以下のようなscalability(エンジン拡張機能設定)をしています。DeviceProfilesでも設定できます。ツール -\u0026gt; プラットフォーム -\u0026gt; デバイスプロファイル -\u0026gt; Windows, rはレンダリングで、sgはscalability group\n#DefaultEngine.ini [ConsoleVariables] sg.AntiAliasingQuality=4 sg.EffectsQuality=4 sg.FoliageQuality=4 sg.GlobalIlluminationQuality=4 sg.LandscapeQuality=4 sg.ReflectionQuality=4 sg.ResolutionQuality=100 sg.ShadingQuality=4 sg.ShadowQuality=4 sg.PostProcessQuality=4 sg.TextureQuality=4 sg.ViewDistanceQuality=4 r.MaterialQualityLevel=3 #DefaultScalability.ini [ScalabilitySettings] sg.AntiAliasingQuality=4 sg.EffectsQuality=4 sg.FoliageQuality=4 sg.GlobalIlluminationQuality=4 sg.LandscapeQuality=4 sg.ReflectionQuality=4 sg.ResolutionQuality=100 sg.ShadingQuality=4 sg.ShadowQuality=4 sg.PostProcessQuality=4 sg.TextureQuality=4 sg.ViewDistanceQuality=4 また、blueprintでr.SetRes 1920x1080fやSet Screen Resolution+Apply Settingsを実行し、build後のwidgetから確認済みです。Get Game User SettingsからGet Screen Resolutionして1920x1080が表示されています。ウィンドウ形式などもSet Fullscreen Modeで変更できているようです。念の為.iniに以下の項目なども追加しています。\n[ConsoleVariables] r.SetRes=1920x1080f 他にはゲーム中にscalabilityやscreen size(Screen Resolution)を変更できるようにしていて、これを変更すると画質や表示が切り替わっているように感じます。ウィンドウ形式は確実に切り替えられます。\nただ、肝心のタイトル文字はぼやけていて、ゲーム中の雲の画質が解像度でいうと1280x720相当になってしまいます。雲はdynamic volumetric skyを使用しており、editor上の画質に問題はありません。\n[tips] vrm4uの見た目の調整 今回は誰も解説していないBP_PoseCopyToonを使ったvrmモデルの見た目を改良する手順を紹介します。ドキュメントにも書かれていませんが、大体は以下の手順になります。\nファイラーでPlugins/を見えるようにする(プラグインコンテンツを表示)\nAll/Plugins/VRM4U/Util/Actor/PostShadow/BP_PoseCopyToonをlevel(map)に配置し、target actorにBP_Playerを選択して調整する(BP_Playerもlevelに配置しないといけない)\nAll/Plugins/VRM4U/Util/Actor/PostShadow/MI_PostToonが更新されているのでAll/Plugins/VRM4U/ImportData/DS_VRMCustomを開いて、全部をMI_PostToonにする\nvrmファイルをインポートする。この際、type:customを選択する\n奇妙なSK_${name}ができるが、重ねがけ用なので正常です。BP_PoseCopyToonを開いてVrmPoseableMesh_translucentをコピーし、BP_Playerに貼り付ける\nVrmPoseableMesh_translucentでSK_${name}を参照する\n[issue] 背景がチカチカする dynamic volumetric skyで2dskyが原因である領域に視線を向けるとチカチカ背景の色が変わる現象に遭遇しました。2dskyをdisableにすることで解消しました。\n[tips] 雲を綺麗にする dynamic volumetric skyのtime speedをゆっくりにすることで、雲がきれいになりました。fpsはfreeにしました。projectでもfpsを高めに設定しました。\n[issue] SoStylizedのskyでmodelが光る これはBP_StylizedSkyにあるPostProcessのBloomが原因です。強度を0にしましょう。ただし、blueprintから直接変更するしかない場合があります。\n[tips] キャラの切り替え game animation sampleの実装を基準にキャラを切り替えていきます。\nキャラの切り替えはWidgets/GameAnimationWidgetの一部を使用します。具体的にはEUW_CharacterSelectButtonを以下のように書き換えれば使用できるでしょう。\n[issue] city sampleでcloth simulationが機能しない 他のprojectでは機能するのにcloth simulationが機能しない場合、project settingの問題です。\nhttps://forums.unrealengine.com/t/no-cloth-simulation-in-ue5-but-works-in-ue4/619532\n[ConsoleVariables] - p.ClothPhysics=0 + p.ClothPhysics=1 [tips] デフォルトの姿勢では足が開いてしまい可愛くない 走っている姿やアイドル状態などをよく見てみると可愛くありません。\nRTG_UEFN_${name}で右足と左足にあるボックスを選択して、IK -\u0026gt; スタティックローカルオフセットを左をx:1.0, 右をx:-1.0にします。\n[issue] 一つのwidgetで各キャラのiconを設定する objectにcbp_character_${name}を指定してボタンをクリックするとキャラが切り替えるwidgetを作成していました。\n以前はiconごとに読み込むファイルを別々に作っていたのですが、その処理を簡略化しました。まずは各キャラのcbpをobjectに指定しているので、名前が異なります。objectからdisplay nameやobject name, object pathを取ってきて、brush(image)を設定するようにしたのですが、これはeditorでは動作しますが、buildで動作しないことがわかりました。\n理由は不明ですが、object(name)がNoneになります。ボタンを押すと正常に動作するためobjectはそのキャラのものが使われているはずです。これは少し奇妙です。\nそんなことを言っていても問題は解決しないので別の方法でやることにしました。objectとは別の値を用意して処理します。また、とりあえずインスタンス編集可能, スポーン時に公開, シネマティックスに公開にチェックを入れておくことにしました。\n[issue] bp_playerのキャラを切り替えるときに装備を外す これも以前から放置していた問題ですが、アイの衣装を変更したときに他キャラでvisibility:falseするのがめんどくさかったので、自動で処理されるようにしました。\ncbp_sandbox_characterをcastしてobjectのdisplay nameでもobject nameでも取ってきて、それがaiじゃなければset visibilityします。childrenにチェックを入れておきます。\nなお、最初はdestroy actor childのようなものを探したのですが、unreal engineにそんなものはありませんでした。\nunreal engineは「これくらい基本的なことはできるでしょう」ということができませんし、そんなものはありません。splineをいじっていたときも驚きました。\n[issue] fbxからunityを使ってvrmaを作成するときの罠 fbxをvrmaにする際にmalaybaku/AnimationClipToVrmaSampleを使うんだけど、univrmのvrm 1.0をインストールしないといけない。両方必要なのかもしれない。つまり、インストールするものは以下の3つ。また、AnimationClipToVrmaSampleはwindowsでは動きません。macでのみ動きます。今後はvrm 1.0を使っていったほうがいいですね。\nmalaybaku/AnimationClipToVrmaSample VRM 1.0 Import/Export VRM 0.x Import/Export ue5からfbxをexportする際は、animationですべてのチェックを付けましょう。精度が高まります。あと、コリジョンは外しました。\nunityでの操作は以下の通り。\nRig -\u0026gt; Animation Type : Humanoid Animation Clip(Unreal Take) -\u0026gt; 右クリック -\u0026gt; VRM -\u0026gt; Convert to VRM Animation -\u0026gt; .vrma [tips] three-vrm v3 three-vrmを使って.vrmを表示します。unity + vrm 1.0でexportしたものを使います。\nreact-three-fiberはsceneなどを自動でやってくれて、コードもシンプルになります。\nanim(vrma)を動かす場合は注意が必要で動きますが動きがおかしくなります。これはreact-three-fiberで書く場合に発生します。個人環境ではunity + vrm 1.0でexportしたものを使うと正常に動きました。\n$ npx create-react-app vrm-model --template typescript $ npm i $ npm run start import * as THREE from \u0026#39;three\u0026#39; import React, { useState, useEffect, useRef } from \u0026#39;react\u0026#39;; import { OrbitControls } from \u0026#39;@react-three/drei\u0026#39; import { useFrame, Canvas } from \u0026#39;@react-three/fiber\u0026#39;; import { GLTFLoader } from \u0026#39;three/examples/jsm/loaders/GLTFLoader\u0026#39;; import { VRM, VRMUtils, VRMLoaderPlugin } from \u0026#39;@pixiv/three-vrm\u0026#39;; import { VRMAnimationLoaderPlugin, VRMAnimation, createVRMAnimationClip } from \u0026#34;@pixiv/three-vrm-animation\u0026#34;; interface ModelProps { url: string url_anim: string } const VRMModel: React.FC\u0026lt;ModelProps\u0026gt; = ({ url, url_anim }) =\u0026gt; { const [vrm, setVrm] = useState\u0026lt;VRM | null\u0026gt;(null); const mixerRef = useRef\u0026lt;THREE.AnimationMixer | null\u0026gt;(null); useEffect(() =\u0026gt; { const loader = new GLTFLoader(); loader.register((parser) =\u0026gt; new VRMLoaderPlugin(parser)); loader.register((parser) =\u0026gt; new VRMAnimationLoaderPlugin(parser)); loader.load(url, (gltf) =\u0026gt; { const vrmModel = gltf.userData.vrm as VRM; VRMUtils.removeUnnecessaryJoints(vrmModel.scene); setVrm(vrmModel); const mixer = new THREE.AnimationMixer(vrmModel.scene); mixerRef.current = mixer; loader.load(url_anim, (animGltf) =\u0026gt; { const vrmAnimations = animGltf.userData.vrmAnimations as VRMAnimation[]; if (vrmAnimations \u0026amp;\u0026amp; vrmAnimations.length \u0026gt; 0) { const clip = createVRMAnimationClip(vrmAnimations[0], vrmModel); mixer.clipAction(clip).play(); } }); }); }, [url, url_anim]); useFrame((state, delta) =\u0026gt; { if (mixerRef.current) mixerRef.current.update(delta); if (vrm) vrm.update(delta); }); return vrm ? \u0026lt;primitive object={vrm.scene} /\u0026gt; : null; }; export const VRMModelCanvas = () =\u0026gt; { return ( \u0026lt;div style={{ height: \u0026#39;100vh\u0026#39;, width: \u0026#39;100vw\u0026#39; }}\u0026gt; \u0026lt;Canvas shadows gl={{ //toneMapping: THREE.ACESFilmicToneMapping, //toneMapping: THREE.ReinhardToneMapping, toneMapping: THREE.NeutralToneMapping, toneMappingExposure: 1.5, alpha: true, powerPreference: \u0026#34;high-performance\u0026#34;, antialias: true, //stencil: false, //depth: false }} camera={{ position: [1, 1, 1] }}\u0026gt; \u0026lt;directionalLight color=\u0026#34;white\u0026#34; castShadow position={[0, 10, 0]} intensity={1.5} shadow-mapSize={[1024, 1024]}/\u0026gt; \u0026lt;OrbitControls /\u0026gt; \u0026lt;ambientLight intensity={1} /\u0026gt; \u0026lt;pointLight position={[10, 10, 10]} /\u0026gt; \u0026lt;VRMModel url=\u0026#34;./models/default.vrm\u0026#34; url_anim=\u0026#34;./models/default.vrma\u0026#34; /\u0026gt; \u0026lt;/Canvas\u0026gt; \u0026lt;/div\u0026gt; ) } export default VRMModelCanvas; import React from \u0026#39;react\u0026#39; import VRMModelCanvas from \u0026#39;./pages/vrm_model\u0026#39; const App = () =\u0026gt; { return ( \u0026lt;VRMModelCanvas/\u0026gt; ) } export default App; { \u0026#34;name\u0026#34;: \u0026#34;vrm-model\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;0.1.0\u0026#34;, \u0026#34;private\u0026#34;: true, \u0026#34;dependencies\u0026#34;: { \u0026#34;@pixiv/three-vrm\u0026#34;: \u0026#34;^3.0.0\u0026#34;, \u0026#34;@pixiv/three-vrm-animation\u0026#34;: \u0026#34;^3.0.0\u0026#34;, \u0026#34;@react-three/drei\u0026#34;: \u0026#34;^9.109.2\u0026#34;, \u0026#34;@react-three/fiber\u0026#34;: \u0026#34;^8.16.8\u0026#34;, \u0026#34;@react-three/postprocessing\u0026#34;: \u0026#34;^2.16.2\u0026#34;, \u0026#34;@testing-library/jest-dom\u0026#34;: \u0026#34;^5.17.0\u0026#34;, \u0026#34;@testing-library/react\u0026#34;: \u0026#34;^13.4.0\u0026#34;, \u0026#34;@testing-library/user-event\u0026#34;: \u0026#34;^13.5.0\u0026#34;, \u0026#34;@types/jest\u0026#34;: \u0026#34;^27.5.2\u0026#34;, \u0026#34;@types/node\u0026#34;: \u0026#34;^16.18.104\u0026#34;, \u0026#34;@types/react\u0026#34;: \u0026#34;^18.3.3\u0026#34;, \u0026#34;@types/react-dom\u0026#34;: \u0026#34;^18.3.0\u0026#34;, \u0026#34;@types/three\u0026#34;: \u0026#34;^0.167.1\u0026#34;, \u0026#34;react\u0026#34;: \u0026#34;^18.3.1\u0026#34;, \u0026#34;react-dom\u0026#34;: \u0026#34;^18.3.1\u0026#34;, \u0026#34;react-scripts\u0026#34;: \u0026#34;5.0.1\u0026#34;, \u0026#34;three\u0026#34;: \u0026#34;^0.167.1\u0026#34;, \u0026#34;three-stdlib\u0026#34;: \u0026#34;^2.30.5\u0026#34;, \u0026#34;typescript\u0026#34;: \u0026#34;^4.9.5\u0026#34;, \u0026#34;web-vitals\u0026#34;: \u0026#34;^2.1.4\u0026#34; }, \u0026#34;scripts\u0026#34;: { \u0026#34;start\u0026#34;: \u0026#34;react-scripts start\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;react-scripts build\u0026#34;, \u0026#34;test\u0026#34;: \u0026#34;react-scripts test\u0026#34;, \u0026#34;eject\u0026#34;: \u0026#34;react-scripts eject\u0026#34; }, \u0026#34;eslintConfig\u0026#34;: { \u0026#34;extends\u0026#34;: [ \u0026#34;react-app\u0026#34;, \u0026#34;react-app/jest\u0026#34; ] }, \u0026#34;browserslist\u0026#34;: { \u0026#34;production\u0026#34;: [ \u0026#34;\u0026gt;0.2%\u0026#34;, \u0026#34;not dead\u0026#34;, \u0026#34;not op_mini all\u0026#34; ], \u0026#34;development\u0026#34;: [ \u0026#34;last 1 chrome version\u0026#34;, \u0026#34;last 1 firefox version\u0026#34;, \u0026#34;last 1 safari version\u0026#34; ] } } { \u0026#34;compilerOptions\u0026#34;: { \u0026#34;target\u0026#34;: \u0026#34;es5\u0026#34;, \u0026#34;lib\u0026#34;: [ \u0026#34;dom\u0026#34;, \u0026#34;dom.iterable\u0026#34;, \u0026#34;esnext\u0026#34; ], \u0026#34;allowJs\u0026#34;: true, \u0026#34;skipLibCheck\u0026#34;: true, \u0026#34;esModuleInterop\u0026#34;: true, \u0026#34;allowSyntheticDefaultImports\u0026#34;: true, \u0026#34;strict\u0026#34;: true, \u0026#34;forceConsistentCasingInFileNames\u0026#34;: true, \u0026#34;noFallthroughCasesInSwitch\u0026#34;: true, \u0026#34;module\u0026#34;: \u0026#34;esnext\u0026#34;, \u0026#34;moduleResolution\u0026#34;: \u0026#34;node\u0026#34;, \u0026#34;resolveJsonModule\u0026#34;: true, \u0026#34;isolatedModules\u0026#34;: true, \u0026#34;noEmit\u0026#34;: true, \u0026#34;jsx\u0026#34;: \u0026#34;react-jsx\u0026#34; }, \u0026#34;include\u0026#34;: [ \u0026#34;src\u0026#34; ] } [issue] blenderでvrmのtextureが剥がれる modelにつけるアクセサリをblenderで統合させ、three-vrmで表示していましたが、textureが剥がされていることに気づきました。\n最初はthreeのtoneMappingの問題だろうと思っていましたが、model(vrm)の問題です。\nunity + vrm 1.0でアクセサリを付けて、exportしましょう。\n[issue] build後の画質問題 今もbuild後の画質問題に悩まされています。私はcity sampleをベースにprojectを作成し、package buildしていますが、build後は画質が悪くなります。editor上では問題ありません。高DPIを許可なども試してみましたが効果がありませんでした。\n左:build / 右:editor\n以下のようなscalability(エンジン拡張機能設定)をしています。DeviceProfilesでも設定できます。ツール -\u0026gt; プラットフォーム -\u0026gt; デバイスプロファイル -\u0026gt; Windows, rはレンダリングで、sgはscalability group\n#DefaultEngine.ini [ConsoleVariables] sg.AntiAliasingQuality=4 sg.EffectsQuality=4 sg.FoliageQuality=4 sg.GlobalIlluminationQuality=4 sg.LandscapeQuality=4 sg.ReflectionQuality=4 sg.ResolutionQuality=100 sg.ShadingQuality=4 sg.ShadowQuality=4 sg.PostProcessQuality=4 sg.TextureQuality=4 sg.ViewDistanceQuality=4 r.MaterialQualityLevel=3 #DefaultScalability.ini [ScalabilitySettings] sg.AntiAliasingQuality=4 sg.EffectsQuality=4 sg.FoliageQuality=4 sg.GlobalIlluminationQuality=4 sg.LandscapeQuality=4 sg.ReflectionQuality=4 sg.ResolutionQuality=100 sg.ShadingQuality=4 sg.ShadowQuality=4 sg.PostProcessQuality=4 sg.TextureQuality=4 sg.ViewDistanceQuality=4 また、blueprintでr.SetRes 1920x1080fやSet Screen Resolution+Apply Settingsを実行し、build後のwidgetから確認済みです。Get Game User SettingsからGet Screen Resolutionして1920x1080が表示されています。ウィンドウ形式などもSet Fullscreen Modeで変更できているようです。念の為.iniに以下の項目なども追加しています。fはfull, wはwindowed\n[ConsoleVariables] r.SetRes=1920x1080f Unreal Engineのr.SetResコマンドは、画面やウィンドウの解像度を変更するために使用されます。このコマンドは、解像度を指定した後にオプションでウィンドウモードを示すことで構成されます。例えば、r.SetRes 1920x1080wは1920x1080のウィンドウモードに設定し、r.SetRes 1920x1080fはフルスクリーンモードに設定します。ただし、特定のバージョンのUnreal Engine（例えば4.5.1）では、r.SetResコマンドが信頼性を持って動作しないという報告があります。特にウィンドウモードからフルスクリーンモードに切り替える際に、解像度が正しく更新されないという問題が発生しています。この不具合はハードウェアやドライバの特性に関連している可能性があり、ウィンドウモードの方がフルスクリーンよりも信頼性が高いと指摘されています。Unreal Engine 5.1では、解像度やその他の画面設定は一般的にUGameUserSettingsクラスを通じて管理され、特定のプロジェクトニーズに合わせてカスタマイズすることができます。\n他にはゲーム中にscalabilityやscreen size(Screen Resolution)を変更できるようにしていて、これを変更すると画質や表示が切り替わっているように感じます。ウィンドウ形式は確実に切り替えられます。\nただ、肝心のタイトル文字はぼやけていて、ゲーム中の雲の画質が解像度でいうと1280x720相当になってしまいます。雲はdynamic volumetric skyを使用しており、editor上の画質に問題はありません。\nその後、dynamic volumetric skyの雲や時間が動いていない事に気づきました。editorでは動いていますが、buildは動いていません。他のassetやmap(level)は動いています。これが雲の画質に関係しているのかもしれません。ただ、そう考えるとタイトル文字のぼやけが奇妙です。\n[close] build後の画質問題 特にdynamic volumetric skyの画質問題はBP_DynamicVolumetricSkyのSingle Player Fps LockをFreeにしていると発生するようです。これを60 FPSに変更すると雲が動くようになり、画質も改善されました。\nただ、タイトル文字の画質は改善されていません。\nnvidiaのグラフィック -\u0026gt; グローバル設定が原因で、アプリが新しくなったからとインストール通知が来てて、そこから低画質が始まってたっぽい。イメージスケーリング(maxが解像度85%)をオフにすると治った。この設定は一体何なのだろう。windowsとゲームで設定できるから解像度はそれでいいと思ってた。でも違った。windows + ue + nvidiaの全部で解像度をうまく設定しないとおかしくなる。\n[issue] loading widget ue5はloading画面を作るのにも苦労します。個人的にはwidgetがそもそも使いづらいのと、open levelの扱いがおかしいのです。例えば、widgetはall removeしか用意されていません。\n私はprojectのconfigを用意して、変数にwidget blueprint(loading)のobjectを作成し、BP_Playerのevent beginでcreate widgetしてから、cast configからset loadingしています。\nocean waveは少し特殊で読み込みが遅いので、ここで待たなければなりません。ocean waveの読み込みが終わったときconfigから取ってきたloading(object)をremove parentします。\ntitle -\u0026gt; create loading -\u0026gt; open level -\u0026gt; bp_palyer -\u0026gt; create loading, set config -\u0026gt; ocean wave(loadend) -\u0026gt; cast config -\u0026gt; remove parent [issue] 家を置くとexeが落ちる 建物の上に浮かんでいる輪っかみたいなactorを消したら正常に動くようになった。なんか変なのが浮かんでいると思っていた。WeatherOccluder\nビデオメモリが足りないと言われ落ちます。editorでは落ちません。\n円形の家でライトは周りを取り囲むように設置されてて、それが重くなる一つの要因だとは思ってた。ちょっとおかしいけど、でもライトを少なくすると落ちなくなったのでそれが原因だったぽい。\nちなみに、ビデオメモリは足りてる。全然使っていない。最初の読み込みのところでmapが起動しない。小さな家の中にあるライトが原因でゲームが起動しないなんてこと普通ないと思うけど。\nその後、また落ちるようになり、今度はライトを消しても落ちるようになったみたいだ。試しにコードをうまく行ったときの状態に戻してbuildしてみると落ちる。\n[issue] city sampleで少しでも遠ざかると追加したactorが消える これはcity sampleに持ってくるといつの間にかインスタンスの親子関係がバラバラに解除されるからです。\n最初はうまく構成されていますが、いつの間にかおかしいフォルダ構成になっていたり、親子付が解除されていたりします。\n一度アプリを落とすと次に起動したときにはおかしくなっているのでしょう。\nつまり、保存したものがいつの間にか勝手に変更されているのです。ですから場合によっては気づかないことがあります。\nactorをまたもとのインスタンス下に置くと遠ざかっても建物が消えないようになります。\nこれはあらゆるものをcity sampleに追加するときに見られる挙動でもあります。\n追加するとそのときは問題ないのですが、アプリを落とした以降におかしな挙動や構成になり再設定しないと適切に描写されず、距離に応じて消えてしまうactorになります。\nまた、再度設定して親子付けしたはずのものがいつの間にか解除されてたりもします。描写されないのでおかしいなと見てみると勝手に変更されています。定期的にあるので、毎回チェックするのが大変です。\n色々な距離設定やプロジェクト設定、ワールド設定を見てみましたが、どれも効果を発揮しませんでした。\n目の前のactorしか表示しないのは負荷軽減になります。正常な描写に戻すよう努力することでビデオメモリが足りないと落ちる可能性が高まります。ただ、ビデオメモリが足りなくなるようなものは追加していないし、負荷を監視していますがメモリは足りているので、ue(もしくはcity sample)が壊れているのかもしれません。その証拠にeditorからの起動では落ちません。あるいはdynamic volumetric skyとocean wavesを追加したことで相当な負荷がかかっており、少しactorを追加するだけでも落ちるようになっている可能性もあります。\n[tips] twinmotionがすり抜け twinmotionで実装するものはcollisionが設定されていないのですり抜けます。\nこれを解消するにはmeshを全選択して、右クリックでアセットアクション -\u0026gt; プロパティマトリクスで選択内容を... -\u0026gt; collision complexity(use complex collision as simple...)を選択します。\nこれはtwinmotionに限らずAutomotiveBridgeSceneにも見られる挙動でした。とはいえ設置したい場所にもよります。\n[issue] nvidiaの画面がちらつく 特にue5でひどかった画面のチラ付きに対処するには、nvidiaコントロールパネルを開いて解像度の変更からリフレッシュレートをディスプレイに合わせたあとnvidiaのカラー設定を使用を選択して再起動します。\n[tips] 音声を読み取り、chatgptで変換する https://github.com/gtreshchev/RuntimeSpeechRecognizer/wiki/1.-How-to-use-the-plugin\nhttps://www.youtube.com/watch?v=xBs-nXzXwoM\u0026amp;list=LL\u0026amp;index=1\nhttps://github.com/gtreshchev/RuntimeSpeechRecognizer https://github.com/gtreshchev/RuntimeAudioImporter https://blueprintue.com/blueprint/et6u52bm/ 最後のGet Sample Rate -\u0026gt; Process Audio Data(Sample Rate)のところだけコピーでは対応できないので手動でつなげること。\n[tips] city sampleのbgmをcustomする sunoを使用して作ると良いでしょう。\nhttps://www.youtube.com/watch?v=99uP2WuU2Jo\nAudio/MetaSounds/Music/music_leavebehind_New_mix_Metaを編集して、引用されているbaseの音楽を変更します。ただし、補助楽器を鳴らしているものは変更しません。\n基本的にはそれぞれのパターンに合わせて、baseとなるbgmを改変して複数用意して入れていきます。そこまで面倒な手間をかけていられない場合は全部同じものを入れます。\n[issue] build後にcity sampleの風の音が消える # [close] この問題は最初にPlayStartする場所が鍵でした。私は上空の家でスタートさせているのですが、これを地上でスタートさせるようにしなければなりません。 あるいは、再度スタートさせる場所を変更、移動して読み込みましょう。 build後にcity sampleの風の音が消えていることに気づいた。\nいつ頃から消えていたかはよくわからないけど、多分、音声認識のpluginを入れてからだと思う。\nしかし、おかしなところはopen levelでまずはtitle画面を読み込んでそこからmapに移行するんだけど、title画面では風の音が聞こえている。mapに移行してから消える。\nそれもただ消えるだけじゃなく、他の音は聞こえる。他の音もcity sampleの同じシステムで作成、管理されている。\nでも風の音だけ消えているように思う。なお、これらの問題はeditorやpreviewでは確認できず、あくまでbuild後のpackage(exe)で発生している。\n参照ビューアで辿っていると、Script/CitySampleWorldAudioDataScriptに行き当たり、そこでMetaSounds/Ambint/sfx_amb_Pawn_Wind_lp_metaを追加したがbuild後に再生されていない。\n[tips] ultra dynamic skyの雲がきれいになった updateが来てから雲の質が上がったので、dynamic volumetric skyと比べてもそこまで差がないです。したがって、天候もあるultra skyを使用することにしました。ちなみに、未だ雲の質はdynamic skyのほうが少し上です。\noceanと同時に使うにはBP_EarthSizedSphericalMeshのtransform-location-zを-636000100にすると波紋が軽減される。ただし、この問題を完全に解決するには、sky-atmosphereを惑星の中心にするしかなく、ultra skyはそれだと問題が発生します。\n[issue] 画面がチカチカする2 nvidiaのスケーリングをONにしたら治った。でもこれをONにするとbuildしたpackageで雲の画質が悪くなったのを思い出した。\n[tips] 音声で操作する これは前からやろうか迷ってたけど、簡単に実装できる。\nconfigで音声を保存してstatus画面でも表示する。\n[tips] 音声でNPCを喋らせる まず音声認識からchatgpt,elevenlabsを使うのは前回まででやっているけど、これを利用するとNPCを喋らせることができる。\nこの場合、会話のバリエーションは無限大だが制御はできない。\nNPC(collision)にあたったとき、configにNPCのnumを入れてボタンが表示されるようにする。キーを押すとchatgptにNPCの設定をいれる。\n[issue] ビデオメモリ不足で落ちる2 これはまず重くないmapを開くことで次に開くmapをクラッシュを防ぐことができます。起動後にすぐ重いmapを開くと大体はクラッシュします。\nちなみに、原因はわかりませんし、メモリは不足していません。おそらく、GPUの性能にかかわらずクラッシュすると思われます。\n","description":"","formated_time":"2024-01-29","href":"https://syui.github.io/m/post/ue/","tags":["ue","m","ue5"],"title":"ue","utc_time":"2024-01-29T00:00:00Z"},{"categories":null,"contents":"今回は、ue5のBP(ブループリント)でapiを呼び出す方法やue5で最近やったことをまとめます。\n最近はゲーム開発を全くやっていませんでしたが2日くらい前から再開しました。\n再開した理由としては、誕生祭でしょうか。そこに間に合わせるため実装を進めました。\nとりあえずデバッグモードみたいなものを公開し、少しずつ改良していくのが自分には合ってるのかもしれません。\n既存の完璧なゲームを目指してると、なんかやらなくなっちゃう気がする。\nあと、windowsで開発してるとブログを書きづらい。とりあえずblueprintue.comをwindowsから貼って、それをブログで引用する。\nva rest va restのpostですが、macで動いたものがwindowsでは動きませんでした。ですが、windowsでイチから作成すると動きました。\nue5はPATCHに対応していません。この辺はapiを作り直さないといけないかもしれない。\nlogin login処理です。atprotoと連携できればいいなと考えています。\nあと、ゲーム公開/非公開はaiのアカウントで判断しています。ある値がtrueなら公開、falseなら非公開です。ここをapiで変更すれば基本的にゲームの起動自体をコントロールできるようになってる。\nglobal var instansで作成したものをpulbicにして、castで呼び出します。\nmouse cursor マウスカーソルが表示されないのに対応。\nday if 日付でifして処理する。\ndestroy actor アイテムを取得後は呼び出さないようにします。例えば、lvを移行すると再び出現してしまうのを回避できます。\nどのように処理するのかというと、いろんな方法があるものの、私の場合はapiを叩いてカードの手持ちから判断します。既に持っていればevent begin playでdestroyします。\nこれらの値はlogin時にすべてglobal変数に入れておきます。アイテムのBPでdestroyする処理を書きます。\nゲームの方向性と今後 今回公開しているのは、デバッグモードと私が勝手にそう呼んでいるものになります。つまり、世界を作っている最中の様子を少し垣間見えるようにした、みたいな感じです。ですから、本来作ろうとしているゲームとは少し違った形での提供になっています。\n常に動かせる とにかく、アイをかわいくしたい。\nモーションとかを自然に、かつ常に動くようにしたほうがいい。あと、これは世界そのものを常に動くもので満たされるようにしないといけないと思っていて、時間や季節、風や動物など。\nあらゆるものが常に動くようにする コマンドで操作 最終的にはatprotoのアカウントを採用した上で、blueskyと連携できるようにしようと考えています。\n新しくatproto serverを建てたのもそのためです。いきなりbsky.socialのアカウントを使ってもらうのはよろしくないので、最初は全部をself-hostしているsnsでログインできるようにした上でコマンド操作を可能にしていきたい。\n例えば、コマンドで敵のリポップなどを操作して、戦闘のデバッグを行いたい。\n現実とゲームをリンクさせる あらゆるものをランダムに 色々なものにランダム要素を入れていく。\n例えば、ジャンプ一つとっても、2つのパターンを用意して8:2の割合で異なる動きをするみたいな感じ。\nバランスとランダム要素 戦闘システム アイは一度死んでも数秒間パワーアップして蘇る。つまり、それを前提にした戦闘システム\n基本的に日をまたいで攻略する。HPを記録する。それほどまでに強敵でHPが高い\nボスの攻撃は即死か2,3発食らうと死ぬレベルがいいと思う\n成功報酬はランダムで、かつ厳選難易度が高い\nガチャ ガチャはpaypal決済で以下の要素で構成したい。\n衣装\n武器\n衣装のガチャは、ピックアップされた衣装が当たる。\n衣装を変えるとスキルやバースト(必殺技)が変わる。普通のゲームで言うキャラガチャ。\n衣装は最大4つまでセット、切り替えられるようにするとかなら戦闘をデザインしやすい。\nシステムは使い回せる あらゆるシステムは一度構築すると使い回せるので、とりあえずゲームとして秘境、ガチャ、強化周りのシステムを構築したい。\nシンプルに小さくするのが作り方としては良さそうなので、小さなことからコツコツと。\n一つ一つ丁寧に作って、それを使い回す スタミナと経験値、ステータス lvは移動速度やスタミナを増加させるだけのものにしようと考えています。そのための経験値はキャラが動いた時のみから得られる。例えば、1歩動いたら1ポイント。lv10に上げるには10,000,000ポイント必要みたいな感じ。大体1年やって7レベルくらいを考えてる。\n最初は飛べないし、移動速度もかなり遅くする。\n攻撃力や会心率は武器や秘境ボスがドロップするアイテムの厳選で上げられる。\n歩くと経験値 物語 物語はいくらでも作れるけど、どんな風にしようかは迷ってる。\n物語は殆どなくてもいいかもしれない。作るとしたらアイのパワーアップのきっかけにする。つまり、物語とパワーアップはセットにしたい。\n物語のコアは「世界の秘密と旅」にしようかな。\nあと、物語には常に一つの「プレイヤーの選択」を入れること。選択は取り返しがつかないものにすること。\nプレイヤーの選択と取り返しがつかない要素 最初の選択 アイは髪の毛が長い(女の子)と髪の毛が短い(男の子)を選択できるようにする。\nこれは色々なゲームに採用されているし、重要なことだと思う。\n性別の選択 ","description":"","formated_time":"2024-01-23","href":"https://syui.github.io/blog/post/2024/01/23/game/","tags":["ue5","ue"],"title":"ue5のBPでapiを呼び出す方法","utc_time":"2024-01-23T00:00:00Z"},{"categories":null,"contents":"現在はstable diffusionはv2.1が最新らしい。\nhttps://huggingface.co/stabilityai/stable-diffusion-2-1 https://github.com/Stability-AI/stablediffusion 今回は、前回同様にtxt2img.pyを動かせる環境を構築した上で、.safetensorsを使用し画像生成してみました。\ntxt2imgはcliから使うstable-diffusionのようなものです。\norigin : txt2img.py fork : txt2img.py cudaを12.3から12.1にdowngradeします。\npytorchはstableではなくnightlyであるpre-versionを使わないとインストールできません。\n# pytorch:nightly, cuda:12.1 $ pip install --pre torch torchvision torchaudio --index-url https://download.pytorch.org/whl/nightly/cu121 $ conda install pytorch==2.1.1 torchvision==0.16.1 torchaudio==2.1.1 pytorch-cuda=12.1 -c pytorch -c nvidia scoopのanaconda3がなくなっていたので手動でインストールしました。具体的にはminicondaを適当にインストールして~/miniconda3/condabinにpathを通します。私はpwshを使うので、以下のコマンドで自動設定します。これをやらないとactivateを使えません。\n$ conda init powershell 新しいgpuでは5-10分の生成が1-2分以内に変わっていました。\n$ conda activate ldm $ cd ./stable-diffusion $ python ./optimizedSD/optimized_txt2img.py --prompt \u0026#34;masterpiece, high quality, very_high_resolution, large_filesize, full color, beautiful kawaii, gold hair, little girl\u0026#34; --H 512 --W 512 --seed $seed --n_iter 1 --n_samples 1 --ddim_steps 50 上記のscriptが動くなら.safetensorsを読み込む環境は整っていると思われます。\ndiffusers 今回はdiffusersを使って.ckptではなく.safetensorsを使用します。\nmodel : civitai prompt : majinai $ conda diactive --- $ conda activate ldm $ pip install diffusers $ pip install git+https://github.com/huggingface/transformers$ # https://huggingface.co/docs/diffusers/api/pipelines/stable_diffusion/text2img from diffusers import StableDiffusionPipeline import torch import sys pipe = StableDiffusionPipeline.from_single_file(\u0026#34;model.safetensors\u0026#34;, torch_dtype=torch.float16).to(\u0026#34;cuda\u0026#34;) # Potential NSFW content was detected in one or more images. A black image will be returned instead. Try again with a different prompt and/or seed. #pipe.safety_checker = None #pipe.requires_safety_checker = False # nsfw_content_detected n = len(sys.argv) if n == 2: prompt = sys.argv[1] else: prompt = \u0026#34;masterpiece, best quality, 1girl, solo, flower, long hair, outdoors, letterboxed, school uniform, day, sky, looking up, short sleeves, parted lips, shirt, cloud, black hair, sunlight, white shirt, serafuku, upper body, from side, pink flower, blurry, brown hair, blue sky, depth of field\u0026#34; print(prompt) image = pipe(prompt=prompt, height=512, width=768).images[0] image.save(\u0026#34;test.png\u0026#34;) $ python safe.py $ ls test.png $ python safe.py \u0026#34;masterpiece, best quality, very_high_resolution, large_filesize, full color, beautiful kawaii, gold hair, little girl\u0026#34; $ ls test.png ","description":"","formated_time":"2024-01-09","href":"https://syui.github.io/blog/post/2024/01/09/stable-diffusion/","tags":["windows","stable-diffusion","diffusers","python"],"title":"[stable diffusion] diffusersのscriptを作る","utc_time":"2024-01-09T00:00:00Z"},{"categories":null,"contents":"少し前にblueskyをself-host(セルフホスト)しました。\nhttps://web.syu.is server url src pds https://syu.is src plc https://plc.syu.is src mod https://mod.syu.is src bgs https://bgs.syu.is src appview https://api.syu.is src web https://web.syu.is src 以前はbluesky(pds+appview)を動かしていたのですが、一般的にblueskyと呼ばれるものは複数のserverに依存しています。例えば、plc, bgsです。今ではpdsにあったappviewも分離しています。\nbsky.teamがそれぞれのsandboxを用意してくれていますが、全部をself-hostしないといつか動かなくなります。\nserver env body pds PDS_DID_PLC_URL https://plc.${host} pds PDS_BSKY_APP_VIEW_URL https://api.${host} pds PDS_BSKY_APP_VIEW_DID did:web:api.${host} pds PDS_MOD_SERVICE_URL https://mod.${host} pds PDS_MOD_SERVICE_DID did:web:mod.${host} pds PDS_CRAWLERS https://bgs.${host} nostrで活動されているikuradonさんが全部のserverをセルフホストしているのを見て、どうやら他のserverも動作できる環境にあるようだと思ったので立ててみました。なお、ikuradonさんに結構助けてもらった。\n今回、syu.isというdomainを取りました。なお、.isはあまりおすすめしません。これはアイスランドが独自方針で管理している感じで、メール認証などが必要です。その他、様々な制限があります。\ngit clone https://github.com/bluesky-social/atproto cd atproto git clone https://github.com/did-method-plc/did-method-plc ./repos/did-method-plc git clone https://github.com/bluesky-social/indigo ./repos/indigo git clone https://github.com/bluesky-social/social-app ./repos/social-app touch .plc.env .bsky.env .bgs.env .pds.env .db.env .mod.env .web.env mkdir -p ./postgres/init echo \u0026#39;-- plc CREATE DATABASE plc; GRANT ALL PRIVILEGES ON DATABASE plc TO postgres; -- bgs CREATE DATABASE bgs; CREATE DATABASE carstore; GRANT ALL PRIVILEGES ON DATABASE bgs TO postgres; GRANT ALL PRIVILEGES ON DATABASE carstore TO postgres; -- bsky(appview) CREATE DATABASE bsky; GRANT ALL PRIVILEGES ON DATABASE bsky TO postgres; -- ozone(moderation) CREATE DATABASE mod; GRANT ALL PRIVILEGES ON DATABASE mod TO postgres; -- pds CREATE DATABASE pds; GRANT ALL PRIVILEGES ON DATABASE pds TO postgres; \u0026#39; \u0026gt;\u0026gt; ./postgres/init/init.sql compose.yaml docker composeで構築しました。大体は以下のような感じの構成です。\n下記は最小構成なので、自分なりに読み替えてください。\nservices: plc: ports: - 2582:3000 build: context: ./repos/did-method-plc/ dockerfile: packages/server/Dockerfile env_file: - ./.plc.env depends_on: - db bgs: ports: - 2470:2470 build: context: ./repos/indigo/ dockerfile: cmd/bigsky/Dockerfile env_file: - ./.bgs.env volumes: - ./data/bgs/:/data/ depends_on: - db bsky: ports: - 2584:3000 build: context: ./ dockerfile: services/bsky/Dockerfile env_file: - ./.bsky.env depends_on: - db - redis bsky-daemon: build: context: ./ dockerfile: services/bsky/Dockerfile command: node --enable-source-maps daemon.js env_file: - ./.bsky.env depends_on: - bsky - db - redis bsky-indexer: build: context: ./ dockerfile: services/bsky/Dockerfile command: node --enable-source-maps indexer.js env_file: - ./.bsky.env volumes: - ./data/bsky/cache/:/cache/ depends_on: - bsky - db - redis bsky-ingester: build: context: ./ dockerfile: services/bsky/Dockerfile command: node --enable-source-maps ingester.js env_file: - ./.bsky.env volumes: - ./data/bsky/cache/:/cache/ depends_on: - bsky - db - redis mod: ports: - 2585:3000 build: context: ./ dockerfile: services/ozone/Dockerfile env_file: - ./.mod.env depends_on: - db mod-daemon: build: context: ./ dockerfile: services/ozone/Dockerfile command: node --enable-source-maps daemon.js env_file: - ./.mod.env depends_on: - mod - db pds: ports: - 2583:3000 build: context: ./ dockerfile: services/pds/Dockerfile env_file: - ./.pds.env volumes: - ./data/pds/:/data/ depends_on: - db social-app: ports: - 8100:8100 build: context: ./repos/social-app/ dockerfile: Dockerfile env_file: - ./.web.env command: \u0026#34;/usr/bin/bskyweb serve\u0026#34; db: image: postgres:latest env_file: - ./.db.env volumes: - ./postgres/init/:/docker-entrypoint-initdb.d/ - ./data/db/:/var/lib/postgresql/data/ redis: image: redis volumes: - ./data/redis/:/data/ hint 必要に応じて、以下の設定などを使用するとよいでしょう。\nservices: plc: depends_on: db: # 依存先のサービスが起動したら起動する condition: service_started services: plc: depends_on: db: # 依存先のサービスが起動して、なおかつ、 healthcheck が通ったら起動する condition: service_healthy db: healthcheck: # https://docs.docker.jp/compose/compose-file/compose-file-v3.html test: [\u0026#34;CMD-SHELL\u0026#34;, \u0026#34;pg_isready\u0026#34;] interval: 10s timeout: 5s retries: 5 services: plc: # https://docs.docker.jp/v19.03/config/container/start-containers-automatically.html # コンテナが停止すると常に再起動します restart: always services: db: # https://hub.docker.com/_/postgres # postgresのversionを固定 image: postgres:16 services: db: # localhostからのアクセスを可能にする # postgresql://postgres:postgres@127.0.0.1:5432 ports: - 5432:5432 services: db: # postgresql://user:password@127.0.0.1/test environment: POSTGRES_USER: user POSTGRES_DB: test POSTGRES_PASSWORD: password env dbのurlになります。全部別々の.envに書いてください。\n# pds PDS_DB_POSTGRES_URL=postgresql://postgres:postgres@db/pds # bsky(appview) DB_PRIMARY_POSTGRES_URL=postgres://postgres:postgres@db/bsky DB_REPLICA_POSTGRES_URLS=postgres://postgres:postgres@db/bsky # bgs DATABASE_URL=postgres://postgres:postgres@db/bgs CARSTORE_DATABASE_URL=postgres://postgres:postgres@db/carstore # mod OZONE_DB_POSTGRES_URL=postgres://postgres:postgres@db/mod # plc DATABASE_URL=postgres://postgres:postgres@db/plc # email PDS_EMAIL_SMTP_URL=smtps://$username:$password@smtp.gmail.com 環境変数をまとめます。\nserver env body bsky DB_PRIMARY_POSTGRES_URL postgres://postgres:postgres@db/bsky bsky DB_REPLICA_POSTGRES_URLS postgres://postgres:postgres@db/bsky bsky DB_REPLICA_TAGS_ANY 0 bsky PUBLIC_URL https://api.${host} bsky SERVER_DID did:web:api.${host} bsky DID_PLC_URL https://plc.${host} bsky BLOB_CACHE_LOC /cache/ bsky SEARCH_ENDPOINT https://search.${host} bsky REDIS_HOST redis bsky INDEXER_PARTITION_IDS 0 bsky INGESTER_PARTITION_COUNT 1 bsky PUSH_NOTIFICATION_ENDPOINT https://push.bsky.${host}/api/push bsky REPO_PROVIDER wss://${host} bsky IMG_URI_ENDPOINT https://cdn.${host}/img bsky ODERATION_SERVICE_DID did:web:mod.${host} bsky MODERATION_PUSH_URL https://admin:${OZONE_ADMIN_PASSWORD}@mod.${host} bsky ADMIN_PASSWORD xxx bsky MODERATOR_PASSWORD xxx bsky TRIAGE_PASSWORD xxx bsky SERVICE_SIGNING_KEY $ openssl ecparam \u0026ndash;name secp256k1 \u0026ndash;genkey \u0026hellip; bsky IMG_URI_SALT xxx bsky IMG_URI_KEY xxx server env body bgs DATABASE_URL postgres://postgres:postgres@db/bgs bgs CARSTORE_DATABASE_URL postgres://postgres:postgres@db/carstore bgs DATA_DIR /data bgs ATP_PLC_HOST https://plc.${host} bgs BGS_ADMIN_KEY xxx server env body mod OZONE_PUBLIC_URL https://mod.${host} mod OZONE_SERVER_DID did:web:mod.${host} mod OZONE_APPVIEW_URL https://api.${host} mod OZONE_APPVIEW_DID did:web:api.${host} mod OZONE_PDS_URL https://${host} mod OZONE_PDS_DID did:web:${host} mod OZONE_DB_POSTGRES_URL postgres://postgres:postgres@db/mod mod OZONE_DID_PLC_URL https://plc.${host} mod MODERATION_PUSH_URL https://admin:${OZONE_ADMIN_PASSWORD}@mod.${host} mod OZONE_ADMIN_PASSWORD xxx mod OZONE_MODERATOR_PASSWORD xxx mod OZONE_TRIAGE_PASSWORD xxx mod OZONE_SIGNING_KEY_HEX xxx server env body pds PDS_HOSTNAME ${host} pds PDS_DATA_DIRECTORY /data pds PDS_DB_POSTGRES_URL postgresql://postgres:postgres@db/pds pds PDS_DID_PLC_URL https://plc.${host} pds PDS_BSKY_APP_VIEW_URL https://api.${host} pds PDS_BSKY_APP_VIEW_DID did:web:api.${host} pds PDS_MOD_SERVICE_URL https://mod.${host} pds PDS_MOD_SERVICE_DID did:web:mod.${host} pds PDS_CRAWLERS https://bgs.${host} pds PDS_EMAIL_SMTP_URL smtps://$username:$password@smtp.gmail.com pds PDS_EMAIL_FROM_ADDRESS no-reply@${host} pds PDS_INVITE_REQUIRED (招待コード) false pds PDS_INVITE_INTERVAL 604800000 pds PDS_BLOBSTORE_DISK_LOCATION /data/img/static pds PDS_BLOBSTORE_DISK_TMP_LOCATION /data/img/tmp pds PDS_JWT_SECRET $ openssl rand --hex 16 pds PDS_ADMIN_PASSWORD xxx pds PDS_REPO_SIGNING_KEY_K256_PRIVATE_KEY_HEX xxx pds PDS_PLC_ROTATION_KEY_K256_PRIVATE_KEY_HEX xxx server env body plc DATABASE_URL postgres://postgres:postgres@db/plc plc DB_CREDS_JSON \u0026lsquo;{\u0026ldquo;username\u0026rdquo;:\u0026ldquo;postgres\u0026rdquo;,\u0026ldquo;password\u0026rdquo;:\u0026ldquo;postgres\u0026rdquo;,\u0026ldquo;host\u0026rdquo;:\u0026ldquo;db\u0026rdquo;,\u0026ldquo;port\u0026rdquo;:\u0026ldquo;5432\u0026rdquo;,\u0026ldquo;database\u0026rdquo;:\u0026ldquo;plc\u0026rdquo;}\u0026rsquo; plc ENABLE_MIGRATIONS true plc DB_MIGRATE_CREDS_JSON \u0026lsquo;{\u0026ldquo;username\u0026rdquo;:\u0026ldquo;postgres\u0026rdquo;,\u0026ldquo;password\u0026rdquo;:\u0026ldquo;postgres\u0026rdquo;,\u0026ldquo;host\u0026rdquo;:\u0026ldquo;db\u0026rdquo;,\u0026ldquo;port\u0026rdquo;:\u0026ldquo;5432\u0026rdquo;,\u0026ldquo;database\u0026rdquo;:\u0026ldquo;plc\u0026rdquo;}\u0026rsquo; xxxは以下のコマンドなどで作成してもいいと思います。\n$ openssl ecparam --name secp256k1 --genkey --noout --outform DER | tail --bytes=+8 | head --bytes=32 | xxd --plain --cols 32 SERVER_DID / SERVICE_SIGNING_KEY SERVICE_SIGNING_KEYに入れる値はSERVER_DID=did:web:xxxの場合、ローカル環境で生成したもので構いません。しかし、SERVER_DID=did:plc:xxxを使用する場合はplcからkeyを登録します。\n$ openssl ecparam --name secp256k1 --genkey --noout --outform DER | tail --bytes=+8 | head --bytes=32 | xxd --plain --cols 32 SERVICE_SIGNING_KEY=xxx 以下は現時点では必要ありません。\nbsky(appview)のSERVER_DIDはdid:web:xxxという形式とdid:plc:xxxという形式を使えます。後者はplcに登録して使うものと思われ、連合が開始する際に重要になるかもしれません。\nSERVICE_SIGNING_KEYはSERVER_DIDを取得したときのsign-keyだと思われます。\nこれはatprotoのdev-envでexampleが書かれています。\nstatic async create(cfg: BskyConfig): Promise\u0026lt;TestBsky\u0026gt; { // packages/crypto/tests/keypairs.test.ts const serviceKeypair = await Secp256k1Keypair.create({ exportable: true }) console.log(`ROTATION_KEY=${serviceKeypair.did()}`) const exported = await serviceKeypair.export() const plcClient = new PlcClient(cfg.plcUrl) const port = cfg.port || (await getPort()) const url = `http://localhost:${port}` const serverDid = await plcClient.createDid({ signingKey: serviceKeypair.did(), rotationKeys: [serviceKeypair.did()], handle: \u0026#39;bsky.test\u0026#39;, pds: `http://localhost:${port}`, signer: serviceKeypair, }) console.log(`SERVER_DID=${serverDid}`) const server = bsky.BskyAppView.create({ db, redis: redisCache, config, algos: cfg.algos, imgInvalidator: cfg.imgInvalidator, signingKey: serviceKeypair, }) $ make deps $ make build $ make test $ make run-dev-env appviewをcreateする際のsigningKey: serviceKeypairの部分を見てください。objを使用しています。\nつまり、signingKeyにobjを入れると動きますが、services/bsky/api.tsでは以下のような処理がなされます。\nconst signingKey = await Secp256k1Keypair.import(env.serviceSigningKey) didを作成したときにSecp256k1Keypairでimportできる値をSERVICE_SIGNING_KEYに入れてください。\nあるいはコードを書き換えてobjをいれるのでもいけますが、現実的ではありません。\n// const signingKey = await Secp256k1Keypair.import(env.serviceSigningKey) const signingKey = process.env.SERVICE_SIGNING_OBJ keypair = await Secp256k1Keypair.create({ exportable: true }) const exported = await keypair.export() imported = await Secp256k1Keypair.import(exported, { exportable: true }) expect(keypair.did()).toBe(imported.did()) plcへの登録は以下のコマンドだと思われます。\n# https://web.plc.directory/api/redoc#operation/ResolveDid $ url=https://plc.$host/did:plc:pyc2ihzpelxtg4cdkfzbhcv4 $ json=\u0026#39;{ \u0026#34;type\u0026#34;: \u0026#34;create\u0026#34;, \u0026#34;signingKey\u0026#34;: \u0026#34;did:key:zQ3shP5TBe1sQfSttXty15FAEHV1DZgcxRZNxvEWnPfLFwLxJ\u0026#34;, \u0026#34;recoveryKey\u0026#34;: \u0026#34;did:key:zQ3shhCGUqDKjStzuDxPkTxN6ujddP4RkEKJJouJGRRkaLGbg\u0026#34;, \u0026#34;handle\u0026#34;: \u0026#34;first-post.bsky.social\u0026#34;, \u0026#34;service\u0026#34;: \u0026#34;https://bsky.social\u0026#34;, \u0026#34;prev\u0026#34;: null, \u0026#34;sig\u0026#34;: \u0026#34;yvN4nQYWTZTDl9nKSSyC5EC3nsF5g4S56OmRg9G6_-pM6FCItV2U2u14riiMGyHiCD86l6O-1xC5MPwf8vVsRw\u0026#34; }\u0026#39; $ curl -X POST -H \u0026#34;Content-Type: application/json\u0026#34; -d \u0026#34;$json\u0026#34; $url | jq . invite-code $ host=example.com $ admin_password=\u0026#34;admin-pass\u0026#34; $ url=https://$host/xrpc/com.atproto.server.createInviteCode $ json=\u0026#34;{\\\u0026#34;useCount\\\u0026#34;:1}\u0026#34; $ curl -X POST -u admin:${admin_password} -H \u0026#34;Content-Type: application/json\u0026#34; -d \u0026#34;$json\u0026#34; -sL $url | jq . social-app svgを作りました。\nimport React from \u0026#39;react\u0026#39; import Svg, {Path, SvgProps, PathProps} from \u0026#39;react-native-svg\u0026#39; import {usePalette} from \u0026#39;#/lib/hooks/usePalette\u0026#39; const ratio = 17 / 64 export function Logotype({ fill, ...rest }: {fill?: PathProps[\u0026#39;fill\u0026#39;]} \u0026amp; SvgProps) { const pal = usePalette(\u0026#39;default\u0026#39;) // @ts-ignore it\u0026#39;s fiiiiine const size = parseInt(rest.width || 32) return ( \u0026lt;Svg fill=\u0026#34;none\u0026#34; viewBox=\u0026#34;0 0 2821.6379 794.29016\u0026#34; {...rest} width={size} height={Number(size) * ratio}\u0026gt; \u0026lt;g transform=\u0026#34;matrix(0.1,0,0,-0.1,-282.80153,1445)\u0026#34; fill=\u0026#34;#000000\u0026#34; stroke=\u0026#34;none\u0026#34; \u0026gt; \u0026lt;path d=\u0026#34;m 24787,14443 c -4,-3 -7,-224 -7,-490 v -483 h 545 545 v 490 490 h -538 c -296,0 -542,-3 -545,-7 z\u0026#34; /\u0026gt; \u0026lt;path d=\u0026#34;m 5190,13285 c -8,-3 -96,-12 -195,-20 -199,-16 -296,-32 -430,-70 -49,-14 -115,-32 -145,-40 -153,-39 -504,-198 -662,-301 -21,-13 -57,-36 -80,-51 -24,-16 -72,-50 -109,-78 -241,-182 -377,-315 -528,-517 -119,-158 -120,-160 -106,-188 23,-45 140,-140 560,-457 110,-84 319,-242 465,-353 146,-110 369,-279 495,-375 791,-600 723,-549 1049,-799 269,-207 398,-307 524,-403 l 114,-86 -49,-49 c -128,-131 -378,-258 -588,-299 -66,-13 -357,-13 -420,0 -115,23 -172,39 -202,54 -18,10 -37,17 -43,17 -24,0 -171,81 -255,141 -50,35 -146,121 -215,192 -69,70 -133,127 -142,127 -19,0 -153,-63 -177,-83 -9,-7 -54,-35 -101,-62 -47,-26 -110,-64 -140,-85 -30,-20 -97,-61 -148,-91 -51,-30 -107,-62 -124,-72 -18,-10 -57,-38 -87,-61 -70,-53 -252,-168 -446,-281 -82,-49 -158,-95 -168,-104 -16,-16 -14,-21 34,-106 165,-289 544,-666 867,-860 9,-6 35,-22 58,-37 36,-23 267,-138 349,-173 108,-47 160,-67 240,-93 150,-48 201,-62 228,-62 14,0 64,-9 109,-19 197,-46 302,-56 573,-56 197,1 281,5 345,17 47,9 110,19 141,22 31,3 75,13 99,21 23,8 56,15 72,15 17,0 51,7 77,15 25,8 80,24 121,36 41,12 125,41 185,66 61,25 124,50 140,56 17,7 89,42 160,78 113,58 177,98 395,246 82,56 273,232 403,371 127,136 237,271 237,291 0,12 -208,179 -425,342 -186,140 -1121,843 -1720,1294 -264,199 -589,444 -723,546 -134,101 -274,208 -312,237 -39,29 -70,58 -70,66 0,21 107,115 203,179 95,64 237,133 295,143 20,4 49,12 63,20 96,48 519,48 619,-1 14,-7 41,-16 60,-20 65,-13 262,-118 360,-191 99,-74 250,-230 372,-384 34,-44 70,-80 80,-80 9,0 39,15 67,33 28,17 70,44 94,58 23,15 121,76 217,136 96,60 254,156 350,213 96,56 272,160 390,230 118,70 230,135 248,144 41,21 41,45 -3,116 -18,30 -46,75 -61,100 -64,106 -252,348 -352,454 -106,112 -169,171 -293,274 -197,164 -310,235 -594,376 -215,106 -519,205 -735,240 -137,22 -574,51 -610,41 z\u0026#34; /\u0026gt; \u0026lt;path d=\u0026#34;m 29095,12736 c -421,-44 -744,-157 -975,-342 -259,-207 -396,-446 -465,-809 -16,-84 -23,-301 -14,-425 36,-518 257,-859 694,-1070 166,-80 284,-116 716,-215 449,-103 514,-121 646,-186 218,-107 308,-253 306,-494 -2,-303 -188,-477 -588,-551 -140,-26 -640,-27 -825,-1 -275,38 -486,94 -776,203 -94,35 -174,64 -178,64 -3,0 -6,-175 -6,-389 v -388 l 88,-41 c 404,-187 905,-282 1486,-282 675,0 1154,150 1465,459 196,194 311,434 362,756 20,121 17,476 -5,600 -89,517 -358,800 -945,994 -130,43 -241,71 -616,156 -137,31 -299,73 -360,92 -331,106 -455,246 -455,511 1,249 127,412 387,501 272,92 801,76 1269,-39 116,-28 326,-96 432,-138 l 52,-22 -2,406 -3,406 -66,28 c -154,66 -413,140 -604,174 -279,49 -756,69 -1020,42 z\u0026#34; /\u0026gt; \u0026lt;path d=\u0026#34;m 9630,12676 c 0,-2 403,-996 896,-2208 493,-1211 898,-2211 901,-2220 6,-21 -135,-386 -193,-499 -104,-202 -256,-324 -471,-380 -118,-30 -340,-43 -516,-29 -84,6 -185,17 -225,24 -40,7 -75,10 -77,7 -3,-2 -5,-163 -5,-357 v -353 l 63,-30 c 194,-93 493,-138 801,-120 414,23 683,115 937,319 174,140 357,402 474,680 26,62 1945,5159 1945,5167 0,2 -232,2 -516,1 l -517,-3 -556,-1550 c -485,-1350 -560,-1550 -578,-1553 -18,-3 -26,11 -62,105 -23,59 -295,758 -605,1553 l -562,1445 -567,3 c -312,1 -567,0 -567,-2 z\u0026#34; /\u0026gt; \u0026lt;path d=\u0026#34;m 15690,10867 c 0,-1970 -1,-1936 56,-2153 128,-497 461,-787 1014,-885 147,-26 440,-36 605,-20 413,40 834,200 1181,447 35,25 73,44 88,44 14,0 26,-1 26,-3 0,-2 20,-94 45,-205 25,-111 45,-204 45,-207 0,-3 209,-5 465,-5 h 465 v 2400 2400 h -535 -535 l -2,-1866 -3,-1866 -115,-50 c -425,-185 -743,-252 -1088,-227 -302,21 -472,109 -562,293 -79,161 -74,11 -77,1969 l -3,1747 h -535 -535 z\u0026#34; /\u0026gt; \u0026lt;path d=\u0026#34;m 24785,12668 c -3,-7 -4,-1086 -3,-2398 l 3,-2385 538,-3 537,-2 v 2400 2400 h -535 c -419,0 -537,-3 -540,-12 z\u0026#34; /\u0026gt; \u0026lt;path d=\u0026#34;m 21660,8275 v -545 h 565 565 v 545 545 h -565 -565 z\u0026#34; /\u0026gt; \u0026lt;/g\u0026gt; \u0026lt;/Svg\u0026gt; ) } その他、書き換えを行うscriptです。頻繁にupdateすると思うので、mergeはきつい。\nhost=syu.is name=${host%%.*} domain=${host##*.} cd $d/repos/social-app/src if [ -n \u0026#34;`grep -R bsky.social .`\u0026#34; ];then for f (`grep -R bsky.social . |cut -d : -f 1`) sed -i -e \u0026#34;s/bsky\\.social/${name}\\.${domain}/g\u0026#34; $f fi if [ -n \u0026#34;`grep -R \u0026#34;isSandbox: false\u0026#34; .`\u0026#34; ];then for f (`grep -R \u0026#34;isSandbox: false\u0026#34; . |cut -d : -f 1`) sed -i -e \u0026#34;s/isSandbox: false/isSandbox: true/g\u0026#34; $f fi if [ -n \u0026#34;`grep -R SANDBOX .`\u0026#34; ];then for f (`grep -R SANDBOX . |cut -d : -f 1`) sed -i -e \u0026#34;s/SANDBOX/${name}\\.${domain}/g\u0026#34; $f fi f=./view/com/modals/ServerInput.tsx if [ -n \u0026#34;`grep -R Bluesky.Social $f`\u0026#34; ] \u0026amp;\u0026amp; [ -f $f ];then sed -i -e \u0026#34;s/Bluesky\\.Social/${name}\\.${domain}/g\u0026#34; $f fi f=./state/queries/preferences/moderation.ts if [ -n \u0026#34;`grep -R \u0026#39;Bluesky Social\u0026#39; $f`\u0026#34; ] \u0026amp;\u0026amp; [ -f $f ];then sed -i -e \u0026#34;s/Bluesky Social/${name}\\.${domain}/g\u0026#34; $f fi f=./view/com/auth/create/Step1.tsx if [ -n \u0026#34;`grep -R \u0026#39;Bluesky\u0026#39; $f`\u0026#34; ] \u0026amp;\u0026amp; [ -f $f ];then sed -i -e \u0026#34;s/Bluesky/${name}\\.${domain}/g\u0026#34; $f fi f=./lib/strings/url-helpers.ts if [ -n \u0026#34;`grep -R \u0026#39;Bluesky Social\u0026#39; $f`\u0026#34; ] \u0026amp;\u0026amp; [ -f $f ];then sed -i -e \u0026#34;s/Bluesky Social/${name}\\.${domain}/g\u0026#34; $f fi f=./view/icons/Logotype.tsx o=$d/icons/Logotype.tsx if [ -n \u0026#34;`grep -R \u0026#39;M8.478 6.252c1.503.538 2.3 1.7\u0026#39; $f`\u0026#34; ] \u0026amp;\u0026amp; [ -f $f ] \u0026amp;\u0026amp; [ -f $o ];then cp -rf $o $f fi ","description":"","formated_time":"2024-01-08","href":"https://syui.github.io/blog/post/2024/01/08/bluesky/","tags":["bluesky","pds"],"title":"blueskyをself-hostする","utc_time":"2024-01-08T00:00:00Z"},{"categories":null,"contents":"\nlocal userにする 最初に設定していくと、microsoftのアカウントで勝手にuserを作成されていて、なんなんだこれと思ったけど、しばらく放置して初期設定してました。\nでも気になったので、適当に設定していくとlocal userを作成できた。ついでに前の勝手に作られたaccountは削除した。これ15分くらいかかりました。\nあと驚いたのは一生懸命にguiで削除したアプリが復活してたこと。どうやらここでのアンインストールは共通じゃないらしい。winget等で徹底的に削除するしかなかったっぽい。\n最初に回線引っこ抜くとlocal userを作成できるって自分のブログに書いてあることに後で気づいた。いまも有効かはわからないけど。\nueのbuild gpu build 1 build 2 GeForce GTX 1050Ti h5 h1 GoForce GTX 4060Ti h1 m20 初回は時間がかかるんだけど随分と短縮されている。あと、city sampleがサクサク動くしbuildが早すぎたのに感動しました。\n/ai/video/#ue5_ai_0007.mp4\ncudaは12.3を入れています。動いているのかどうかはわからんけど、erroを出しまくったあと正常なインストールに成功。ちなみに、なんで最初はerrを出してたのかは不明。ただ、pytorchのcudaが12.1なので、下げるかも。\n$ nvidia-smi Sun Dec 31 08:34:29 2023 +---------------------------------------------------------------------------------------+ | NVIDIA-SMI 546.33 Driver Version: 546.33 CUDA Version: 12.3 | |-----------------------------------------+----------------------+----------------------+ | GPU Name TCC/WDDM | Bus-Id Disp.A | Volatile Uncorr. ECC | | Fan Temp Perf Pwr:Usage/Cap | Memory-Usage | GPU-Util Compute M. | | | | MIG M. | |=========================================+======================+======================| | 0 NVIDIA GeForce RTX 4060 Ti WDDM | 00000000:05:00.0 On | N/A | | 0% 35C P8 4W / 160W | 3772MiB / 8188MiB | 11% Default | | | | N/A | +-----------------------------------------+----------------------+----------------------+ $ where nvcc C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\bin\\nvcc.exe $ where cudnn64_8.dll C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\bin\\cudnn64_8.dll windowsが使いやすい 動画を撮ってみたんだけど明らかにmacより使いやすい。\nゲームに関連する機能ではwindowsの圧勝です。\n","description":"","formated_time":"2023-12-30","href":"https://syui.github.io/blog/post/2023/12/30/windows/","tags":["windows"],"title":"windowsの初期設定と所感","utc_time":"2023-12-30T00:00:00Z"},{"categories":null,"contents":"最近、パソコンのスペックが気になりだした。昔は気にしていなかったのかと思われるかもしれないけど、あまり気にしてなかった。\nスペック不足を感じたらハイスペックの外部サーバーに接続するか、複数のパソコンで分散処理すればいいだけだった。\nところが最近になってゲーム制作を始めたことで、初めてスペック不足というか、windowsのデスクトップが直に必要だと思った。\nそれまでwindowsはsshやvncでリモート操作するだけだったし、そこまでハイスペックなものも必要なかった。\nしかし、ゲーム制作、これもue5に限った話なのかもしれないが、macでの開発はやばかった。\nue5はmac(apple silicon)の性能を全然引き出してなかったし、また、guiは落ちまくりで操作しづらく描写もおかしかった。package-buildも完全に壊れていた。\n反対にいつ壊れてもおかしくないwindowsは割りとサクサク動いていた。\nただ、私はメインで使っているmacで開発したかった。メインで使っているmacとは、それに付随するterminal環境のことであり、terminalがないと、なんとなく不安だ。私はterminalの住人で、ほとんどの時間をterminalで過ごしていた。\nだが、ue5をmacでやるのはやばいし、windowsをリモート操作してるだけではまずい、ということに気づきはじめた。\nそこで、一番安くて良さそうなものを買うことにした。ちなみに、何がいいのかはよくわかっていない。\ntitle body cost JPY 150,000 cpu AMD Ryzen 7 5700X memory 32GB / DDR4-3200 DIMM (PC4-25600) gpu GeForce RTX 4060Ti 8GB storage 1TB M.2 NVMe SSD inc © INVERSENET わからないなりにどんな感じなのかイメージで説明すると、gpuの4060はnvidiaの最新版で一番下のやつという認識。4060はcuda(core)の値が低く不人気だがAI描写変換(dlss)があるのでいいらしい。ちなみに、nvidiaのcudaはインストールに手こずるよくわからないもの。まあ、それなりにいい感じでgpuを動かしてくれるんでしょう。それに上書きするcudnnもそんな感じで、nvidiaのあらゆるpackageは意味不明だけど。話を戻すと4060Tiは4060よりcuda値の高いやつ。それ以外でいうと、storageのssdはNVMeがついてるのが速いらしい。cpuのryzenは最近人気の安くて高性能なやつという認識。\nこのタイミングでゲーミングパソコン買うのはお得なんだろうか。とりあえず長く使っていきたい。\n","description":"","formated_time":"2023-12-26","href":"https://syui.github.io/blog/post/2023/12/26/game-pc/","tags":["private"],"title":"パソコンのスペックが気になりだした","utc_time":"2023-12-26T00:00:00Z"},{"categories":null,"contents":"今回は、ゲームのβ版を完成させたんだけど公開を見送った話をします。\n理由としては「クオリティに問題があるから」という一点につきます。\n今回はそんなゲーム制作で考えたことを書いていきたいと思います。\n1ヶ月でゲームを完成させる 11/30くらいからはじめたゲーム制作ですが、最初はどんなゲームにしたいのかとか、そういうのはあまりありませんでした。ただキャラクターを動かしてゲームの世界を飛び回っていました。\nこれがゲームと呼べるのかと言うと、呼べないでしょう。ゲームとは条件があるものだから。例えば、クリア条件や報酬条件、勝利条件などなど。\nさて、そんなことをしているうちに、アドベントカレンダーの日が近づいてきました。私は12/24に担当していて、ゲーム作りを始めたよって話をしようと思ってたんだけど、急に思い立って、ゲームを完成させて公開しちゃおうと思いました。\nこれを思いついたのが12/20あたりだったと思います。そこから本格的にゲームの実装を書きはじめたのでした。\nゲームはシンプルに「アイがカードを落としたのでそれを探す」というものです。簡単なように見えて相当面倒なゲームの作り方をここではじめて学習しはじめることになります。\nそれまでは本当にのんびりしたもので、ゲームのタイトル画面すら作っていませんでした。\n12/24にゲームを完成させようと思わなければ、おそらく、ずっとタイトル画面すら作らなかったでしょうね。その意味で「とりあえずゲームを完成させる」という目標を短期に設定できたのは本当に良かった。\nさて、今回のβ版の内容に触れていきたいのですが、私が行ったのは主に3つでした。\n1. タイトル画面の設定 ここでは、ユーザー名の入力欄を作ってカードアカウントのidを取ってくる実装を行いました。あと、ワールドを移行する処理などを初めて実装しました。また、ゲームをスタートできる期間を設定し、その期日を過ぎると「公開は終了しました」みたいな表示を出るようにしました。また、クリアしている人も「ゲームはクリア済み」と出るようにしました。これらはapiに新たな項目を追加することで実現しています。\nidは後にアイテムをゲットした時、つまり、クリア時ですね。クリアしたときにカードアカウントに特定のカードを送信する実装に使います。\n2. 星に入れるようにする ゲームでは最初に大きな星が目の前に登場します。実はアイテムはこの星の中にあります。飛んでいって星に入れるようにしなければなりません。ですが、これもなかなかにテクニックが必要でして、私が使っているアセットでは、星にぶつかると消えてしまう実装になっていました。そのため星の中にちょうどいい大きさの円アクターを入れて、それにぶつかるとワールドを移行するようにしました。\n3. アイテムを拾う これがゲームのクリア条件であり、アイテムを拾う処理と、アイテムを消す処理を作りました。ここでは本当に複雑な処理を行います。アイテムを拾うとグローバル変数にとってあるidを元にカードアカウントへの配送処理を行います。同時にゲームをクリア済みとapiに伝達します。\n他にもメッセージを表示したり、bgmを設定したりといったことをやりました。\nこれでβ版は完成です。β版をプレイして動作が確認できたのは12/23でした。\n色々と考えた末に公開を見送る 私は基本的にmacで開発し、srcをwindowsに送ってbuildするという方式で開発しています。windowsで作ってもいいのですが、なんとなくメインがmacでないと落ち着かないというか、そんな理由からmacで開発しています。\nで、windowsでbuildするわけですが、なぜかapiへのpost-requestがwindowsでは動いていませんでした。これではゲーム内でアイテムを獲得してもアカウントに反映されません。ちなみに、get-reqは動いています。\nこの問題を把握したのは12/24でした。\nこれは色々やれば修正や回避することはできると思いました。ですが、ここでもう一度考える機会がありました。\n「本当にこれを公開していいのだろうか」\n一応、クリア条件も設定されゲームとしては普通にプレイできると思います。ですが、クオリティに納得していない自分がいました。\nこれはwindowsではpost-requestが不明なerrによって動いていないという些細なことが問題ではありません。全体的に納得していないのです。\nとりあえずゲームを完成させてみようと思い、完成させることはできました。\n「とりあえず完成させる」これはすごく重要なことだと思います。そう思うことで、私は色々と実装を進めることができました。そう思わなければ進んでいない。\nですが、ゲームのクオリティというか、全体的な完成度の高さというものは、ゲームにおいて、特に、ビデオゲームにおいて、とても大切なことです。\n最初の印象がすべてを決める。\n後々も引きずってしまう。\nそういうものではないでしょうか。\nもう少しだけゲーム制作やってみる。\n","description":"","formated_time":"2023-12-25","href":"https://syui.github.io/blog/post/2023/12/25/game/","tags":["ue5"],"title":"β版を作ったけど公開を見送った話","utc_time":"2023-12-25T00:00:00Z"},{"categories":null,"contents":"この記事はBluesky Advent Calendar 2023の24日目の記事です。\n今回は、blueskyがきっかけでゲームを作り始めた話をします。\n私はyuiという作品に登場するアイというキャラクターを多くの人に知ってもらいたいなと思って、物語を作ったりお絵描きをしてきました。\n2023年にblueskyでbotにしてカードゲームとして登場させたところ、blueskyの人たちに見つけてもらったことで開発が進みました。\nそれまで創作や開発は単に好きでやっていただけでしたが、多くの人に遊んでもらうということで色々と進めることができました。\nこれまでblueskyで作ったものはweb-clientやcli-client、bot、atprotoのserverやapiをはじめ、cardやaiten(麻雀をモデルにしたゲーム)、アイの3Dモデル、本や漫画などです。最近ではオープンワールドのゲームを作りはじめました。\nこの前は衣装を作ったのですが、実は、昔から衣装は作りたいなと思っていて、でも大変そうなので、ずっと放置していたものでもありました。\n多分、blueskyをやってなかったらこんなに色々やってなかったと思う。\n作ろうと思えば作れたかもしれないけど、でも違う。\nやるかやらないか、それがいちばん大切なこと。\nそんなきっかけをくれたblueskyに感謝。\nやりたいことをやろう。\n","description":"","formated_time":"2023-12-24","href":"https://syui.github.io/blog/post/2023/12/24/ac/","tags":["ue5","bluesky"],"title":"ゲームを作ってる話","utc_time":"2023-12-24T00:00:00Z"},{"categories":null,"contents":"今回は、髪の毛が体を貫通する問題の修正と歩くモーションを変更する方法です。\nKawaiiPhysics https://github.com/pafuhana1213/KawaiiPhysics\nこのpluginは素晴らしい働きをし、完璧に動作します。\nただし、このpluginはc++クラスを追加する必要があります。\nc++クラスを追加するとwindows側でprojectを起動できなくなります。私はmacからwindowsに送ってbuildしています。\nしたがって、こちらにあるように.uprojectを修正して起動し、c++クラスを追加後に右クリック、generate visual studio project filesから.slnを作成してrebuildします。rebuildする際もあらゆる依存関係でerrorが出るかもしれません。ue5は基本的に壊れているので、あらゆる問題が発生する可能性があります。\nこのpluginの使い方は、vroid studioで後ろ髪のboneを確認したあと、そのboneをrootに設定し、各種limitを設定し、指定のboneを貫通しないようにします。Sphere Limit,Capsule Limit, Plane Limitがあります。\nちなみに、今回はUE_5.3/Engine/Build/BatchFiles/Build.batを動かすのに相当手間取りました。\npluginを使うにはc++クラスを追加する必要があるらしい\n追加するとwindowsでuprojectが開かなくなる\nとりあえずc++なしでuprojectを開いてc++クラスを追加\nslnでrebuildが通らない。visual studioが警告ありとか出てる\nvisual studioで.net framework sdk 4.8.0をインストールしろと言われる\n.net framework 4.8のインストーラーがblockされる\n.net framework 4.8.1とその他の.net関連をを手動でインストールする\n1回目のrebuildが何故か失敗する\n2回目でやっとUE_5.3/Engine/Build/BatchFiles/Build.batが動作する\nuprojectが正常に開くようになる\nこんな感じでue5が動作する環境を構築してる時間のほうがゲーム開発してる時間より長い。ゲーム開発をしている場合ではない。\nwalk/run, land state ABP_Playerでwalk/runのstateを編集したり、スタート時のダッシュをアニメモンタージュで調整したりしました。\n/ai/video/#ue5_ai_0006.mp4\nv5.3 for mac mac(apple silicon)でも動作しますが、package buildは鬼門です。絶対にやめましょう。時間がもったいない。\nue5は、基本的にwindowsのpakcage buildはすぐに通りますが、それ以外では難しいでしょう。\nたとえ1度だけbuildが通ったとしても、もし開発を続ける場合、windowsとmacの両方で動作を安定させることはできません。\nwindowsで開発するのがおすすめです。macでの開発はやめておきましょう。\nvrm https://github.com/ruyo/VRM4U/releases\nvroidを読み込むpluginであるvrm4uを使用します。現在、vroid sdkというものも登場しています。\nmacで使用するには大変ですが./Plugins/VRM4U/ThirdParty/assimp/lib/Mac/libassimp.aを用意してください。独自buildが必要です。\nhttps://ruyo.github.io/VRM4U/03_mac\noutline これはoutline(アウトライン)やnormal line(法線)と一般に言われているものです。\nそれをoverlay materialで実現しています。\n調整 基本的にはSuperhero Flight Animationsを使用してmodelの調整を行います。\nSuperhero Flight Animationsは./Content/SuperheroFlight/Blueprints/Characters/BP_Player_UE5で./Content/SuperheroFlight/Blueprints/Components/BP_SuperheroFightを読み込んでいます。\nBP_Player_UE5を開いてSuperheroFlightComponentのところが設定ファイルになっていて、例えば、flying speed、つまり、飛行速度などを変更できます。\n基本的には、ここのassetsにanimationを入れることで機能します。もし機能しない場合の変更箇所を書きます。\nいくつかのanimationは自分で用意したものに切り替えます。\nABP_Player_ai, BP_Player_UE5を新たに用意し、それを読み込むようにします。\n./Content/SuperheroFlight/Characters/Mannequins/Animationsをリターゲットしてanimationを作成、それをanim montageにします。\nidle/walk かっこいいものに切り替えます。おかしな移動になっていました。\nABP_Player_ai : AnimGraph \u0026gt; Locomotion \u0026gt; idle ABP_Player_ai : AnimGraph \u0026gt; Locomotion \u0026gt; walk 使用しているanimationにroot motionを設定します。\njump かっこいいものに切り替えます。root-motionが動きませんでした。\nABP_Player_ai : AnimGraph \u0026gt; Locomotion \u0026gt; jump ABP_Player_ai : AnimGraph \u0026gt; Locomotion \u0026gt; idle RTG_ai : target, チェーンマッピング \u0026gt; rootをFK \u0026gt; 平行移動モード \u0026gt; Globally Scaledに設定 root motionをenableにしても動きません。原因はIKリターゲットしたときrootが動いていないために起こります。animationを開いてsrcとtargetを比較してみると、srcのほうはrootが動いていますが、targetのアニメは動いていません。具体的には、srcはlocationが変動しますが、targetは変動していません。\nbone(ボーン)のrootを選択してFKの平行移動モードをGlobally Scaledに設定します。\nこれでtargetのrootが変動しているのを確認後、リターゲットし、montageを作成します。\nhover ものに当たった時のanimationです。\nABP_Player_ai : EventGraph \u0026gt; Play hover fligh start montage notify event land 着地するときのanimationです。\nBP_SuperheroFlighComponent : EventGraph \u0026gt; Hit Event Collapse Graph Play anim montageに指定したものを使用するように変更します。\n指定したanim montageの通知にBPANS_SetlsSuperheroloadingなどを追加します。既存のanim montageである./Content/SuperheroFlight/Characters/Mannequins/Animations/Flight/Land/を参考にしてください。\nsprint ダッシュです。これはBP_Player_UE5 \u0026gt; Input Event Graph \u0026gt; sprintの最後にStart Flightを入れます。\nBP_Player_UE5 : Input Event Graph \u0026gt; sprint kawaiiphysics https://github.com/pafuhana1213/KawaiiPhysics/releases\nvrmの髪の毛などを動かすために使います。\nABP_Player_ai : AnimGraph 主にhair1_08, hair1_09, hair1_10を指定して各種limitを入れ、調整していきます。\nlimitは髪の毛が体を貫通しないようにするためのものです。主にSpherical Limitsの丸形とCapsule Limitsの筒型を使用します。大きさや傾きなどを調整してください。headやhip, armを指定するといいでしょう。\n","description":"","formated_time":"2023-12-21","href":"https://syui.github.io/blog/post/2023/12/21/ue5/","tags":["ue5","3d"],"title":"ue5を触ってみた9","utc_time":"2023-12-21T00:00:00Z"},{"categories":null,"contents":"ue5でmac(arm64)のpackage buildは鬼門です。\n今回は、ue5 package build for macを解説します。\nvrm4uを使ってる人でmacでpackage buildしている人は世界中でただ1人かもしれません。全く情報がなく、arm64でbuildされているvroidゲームも見かけない。\nvrm4uをmacで導入すること自体も多少ハマるかもしれません。しかし、package buildほどではないです。それくらい意味がわかりませんでした。\nddc directory LogDerivedDataCache: Warning: Shared: Process has an existing cache store at path /path/to/ddc, and the duplicate is being ignored.\n様々なerrを回避してたどり着いたのは「Macのプロジェクトをパッケージ化しています...」という表示から先に進まないという現象です。なぜなのかずっと謎でした。logを確認してもerrが出ていないし、さっぱりわからない。でもなぜか進まない。\nそこで、初回スターターキットのprojectを作ってpacakge buildしてみることにしました。しかし、ここでも同じように先に進まない。フリーズはしていませんが動いていないのです。\nこの原因はおそらくddc directoryを設定していないことによるものです。\nDDC の保存場所\nプロジェクトとシステムの構成方法によって、高速から低速にわたる階層の中に複数のDDC キャッシュが存在する可能性があります。派生データを評価するとき、システムは次のことを実行して、データにアクセスできる速さを決定します。\n派生データが必要な場合、データが見つかるまで、まず最速のキャッシュがチェックされ、次に速いキャッシュがチェックされます。\nデータが見つかると、最速のローカルキャッシュにコピーされるため、次回のアクセスが高速になります。\nデータが見つからない場合に初めて生成されて非同期でキャッシュにコピーされるため、その後は (場合によってはチームも) データを利用できるようになります。\nDDC に保存されているコンテンツは使い捨てですが、.uasset ファイルに保存されているデータを使用していつでも再生成できます。これらの派生フォーマットを外部に保存すると、ソース アセット ファイルを変更しなくても、エンジンで使用されるフォーマットを簡単に追加または変更できます。\nhttps://docs.unrealengine.com/5.0/ja/derived-data-cache/ 通常は~/Library/Application\\ Support/Epic/UnrealEngine/にあるらしい。ですが、私はue5のengineもprojectもsharedも外部ディスクに保存しているのでそれが原因かはわかりませんが、ddc directoryの設定がnullでshaderなどの生成のところから先に進まなかったようです。\nそれまでに様々なところをチェックしました。\nEngine/Build/BatchFiles/RunUAT.command, BuildConfiguration.xml, Engine/Binaries/DotNET/UnrealBuildTool/UnrealBuildTool, VSCodeなど。\nhttps://docs.unrealengine.com/5.2/en-US/supporting-universal-binaries-for-macos-in-unreal-engine/ ですが、全部正確に設定されており、全くの的外れでした。\nue5の開発は初回からpackage buildで通ることを確認してから開発を進めるのがおすすめです。assetを入れると通らなくなります。pluginも同様です。\nもしそのassetやpluginを使って開発を進め、後々になってbuildが通らないということになると大変です。\n私も最初の方でpackage buildを試してみた事があったのですが最後まで確認せず、errがでてないから大丈夫とそこで終わりにしていました。ですが、全く先に進まないという問題がありました。\n色々と試した結果、macだけでなくwindowsでのpackage build環境も整えられたのでよかったですが、ue5のpackage build環境の検証と構築は相当大変でした。\nまた、project settings \u0026gt; platform \u0026gt; macではpackage化の項目があり、通常はintel \u0026amp; apple siliconになっています。これをapple siliconに変更するとpackage buildは安定するかもしれません。\nShaderCompileWorker ShaderCompileWorker Failed to find game directory\nUEInstallDir=/Volumes/ssd/app/UE_5.3 ${UEInstallDir}/Engine/Binaries/DotNET/UnrealBuildTool/UnrealBuildTool.dll ShaderCompileWorker Mac Development -architecture=arm64 ${UEInstallDir}/Engine/Binaries/DotNET/UnrealBuildTool/UnrealBuildTool.dll ShaderCompileWorker Mac Development -architecture=arm64 ${UEInstallDir}/Engine/Build/BatchFiles/Mac/Build.sh UnrealEditor Mac Development -buildscw -architecture=arm64 -verbose forums.unrealengine.com/t/ue5-for-m1-apple-silicon LLVM ERROR LogShaders: Error: Archiving failed: metallib failed with code 1: LLVM ERROR: Could not parse module bitcode: file too small to contain bitcode header!\nLogCook: Error: Saving shared material shader code library failed for Mac.\nUEInstallDir=/Volumes/ssd/app/UE_5.3 ${UEInstallDir}/Engine/Build/BatchFiles/Mac/GenerateProjectFiles.sh -project=\u0026#34;$project_file\u0026#34; -game -XCodeProjectFiles forums.unrealengine.com/t/cooking-failed-logshaders-metallib-failed-with-code-1-llvm-error-sf-metal-sm5 ue5 package build for windows project settings \u0026gt; platform \u0026gt; windowsで{D3D12, D3D11} Targeted Shader Formatsをtrueにしました。\n逆にwindowsの設定ファイルをmacに持ってくるとShaderがうまく表示されませんので、変更する必要があります。\n","description":"","formated_time":"2023-12-16","href":"https://syui.github.io/blog/post/2023/12/16/ue5/","tags":["ue5","3d"],"title":"ue5を触ってみた8","utc_time":"2023-12-16T00:00:00Z"},{"categories":null,"contents":"久しぶりにwifiを使おうと思ってnetworkmanagerをインストールして使ってると何故かfreezeするようになってしまったので解決する方法。\nこれはnetworkmanagerが悪いわけではなくkernelレベルの問題でrtw88_8821ceというmoduleが原因らしい。\n$ sudo pacman -S broadcom-wl networkmanager $ sudo systemctl start NetworkManager $ vim /etc/modprobe.d/blacklist.conf blacklist rtw88_8821ce $ vim /etc/default/grub GRUB_CMDLINE_LINUX_DEFAULT=\u0026#34;xxx xxx pci=noaer\u0026#34; $ grub-mkconfig -o /boot/grub/grub.cfg $ reboot WiFi frequently and randomly disconnects, rtw_8821ce driver ","description":"","formated_time":"2023-12-15","href":"https://syui.github.io/blog/post/2023/12/15/arch/","tags":["arch"],"title":"archlinuxでwifiがfreezeする","utc_time":"2023-12-15T00:00:00Z"},{"categories":null,"contents":"ue5を触って1週間が経ちました。触れない日もありましたが、今回はsword(剣)のmotion(モーション)などを作りました。\nvideo : /ai/video/#ue5_ai_0005.mp4 やったこととしては、変身、瞬間移動、剣、そして、見た目の変更です。それぞれにテクニックがあるので順に紹介します。\nこの記事では、参考になるリンクを載せています。外部リンクは参考になる投稿者に限定しているので是非読んでみてください。例えば、UE備忘録本舗さんはとてもわかりやすく参考になる動画を投稿されている方です。\noutline、normalによる見た目の変更 今までのモデルと見比べてみるとよくわかります。左がold、右がnewです。\nこれはoutline(アウトライン)やnormal line(法線)と一般に言われているものです。\nそれをoverlay materialで実現しています。blueprintを貼っておきます。\nsyuiでアカウント作ろうとしてmail間違えて認証できなくなり、再度syuiでアカウント作ろうとしたら空いてなかったのでaiにした\u0026hellip;まあいいか\n表情を変更する 表情のdefault(デフォルト)が口が半開きになっている気がするので、それを変更します。\n新機能の「透過オーバーレイマテリアル」でアウトラインを簡単に実装してみよう 瞬間移動の実装 montageからmotion warpingを使って瞬間移動をやってみましたが、障害物があると移動できないし、瞬間移動というか高速移動なだけなので、actor locationで実現しました。\nset actor locationで設定してください。\nmotion warpingで設定したように通知ステートでは他に様々なものを追加することができます。\nGame Effect Portfolio 2023 montageを再生したあと元の位置に戻ってしまう sword motion(ソード・モーション)はanim montage(アニメ・モンタージュ)を使用しているのですが、実行後に元のlocation(位置)に戻ってしまう問題がありました。\nこれはroot motionをenableにしたり、他の設定をやっても戻ってしまうのです。\n原因はIKリターゲットしたときrootが動いていないために起こります。animationを開いてsrcとtargetを比較してみると、srcのほうはrootが動いていますが、targetのアニメは動いていません。具体的には、srcはlocationが変動しますが、targetは変動していません。\nこれを変動するようにしないといけないのですが、bone(ボーン)のrootを選択してFKの平行移動モードをGlobally Scaledに設定します。\nこれでtargetのrootが変動しているのを確認後、リターゲットし、montageを作成します。\nUE5でルートモーションを有効にしたままリターゲットをする方法 swordをしまう時のparticle これはsword_open, sword_closeというactor, blueprintを作成して、それをBP_Playerのmeshに当てます。そして、set visibleで切り替えています。\nではparticle(粒子)はどうやって実現しているのかというとniagaraです。\nUE5 Niagaraの基礎 swordを振ったときのeffect まずはboneを追加します。このboneを元にtrailというeffectをつけていくわけです。sword-trailは検索タグとしても有効です。effectはanim sequence(アニメ・シーケンス)で設定します。\nPSTemplate, Socket Nameを指定します。\nまた、niagaraで作成してもいいですね。sword-trail-naigaraとでも検索してみてください。\nソードトレイル swordのcharge motion こちらはmontageを分割して、それを再生します。\n溜め攻撃（チャージ攻撃）の実装方法 変身など これはSet Skeletal Mesh Assetで切り替えですね。\n","description":"","formated_time":"2023-12-09","href":"https://syui.github.io/blog/post/2023/12/09/ue5/","tags":["ue5","3d"],"title":"ue5を触ってみた7","utc_time":"2023-12-09T00:00:00Z"},{"categories":null,"contents":"今日は\nモデルが飛んでいるときにoverlay materialを適用 これはSK_xxxを複製して、そこにoverlay materialを当て、それをevent時に呼び出すことで実現しています。\n具体的には、BP_Player_UE5のInput Event GraphでSet Skeletal Mesh Assetを呼び出したい場面で使います。\n変身前、変身後があったとして、event後にずっと変身してしまわないよう両方使うのがいいでしょう。\nブリッジモード -\u0026gt; フォリッジで草原を作る しかし、前はあんなにヌルヌル動いてたのに草を生やすと、本当に遅くなってしまった。あまり多くしない方がいいか、あるいはちゃんと使用する草をシンプルなものにしないといけないと思う。\n動画\n","description":"","formated_time":"2023-12-05","href":"https://syui.github.io/blog/post/2023/12/05/ue5/","tags":["ue5","3d"],"title":"ue5を触ってみた6","utc_time":"2023-12-05T00:00:00Z"},{"categories":null,"contents":"今日もue5を触ってやったことや今後やりたいこと、unityとどちらがいいのかなどを書いていきたいと思います。\npost precess volumeを作成\nその領域に入るとshaderが適用されるようにできる\nはずなんだけど、なんかおかしい。post process volumeの詳細がでてこないことに気づいた。ただ、PB_Playerのcameraからpost processの項目にアクセスできるんだけど、mac-m1限定の問題かもしれない。\n追記 : イチから作り直したら詳細が出てきた。わけがわからない。そもそも詳細が出てこない状況が普通は考えられないので、おそらくバグだったんだと思う。結局プロジェクトを作り直さないとダメだったのか。\nしかも、色々やりすぎてpackage buildが通らない。これはvroidの問題だと思う。ファイルが多すぎて整理できていないので、もう一度イチから作り直すことにしよう。\n追記 : この問題はxcodeを最新版にしてassimpをrebuildすると解消しました。ただそれだけではmacの._*ファイルが原因でbuildが通らないのでfindで削除します。\npkg=yui pdr=/Volumes/ssd/project pkg=$pdr/$pkg rm -rf $pkg/Plugins open $pdr/VRM4U_5_3_20231126.zip;sleep 15; mv $pdr/Plugins $pkg/ cp -rf /Volumes/ssd/git/assimp/build1/lib/libassimp.a $pkg/Plugins/VRM4U/ThirdParty/assimp/lib/Mac/ rm -rf $pkg/Binaries rm -rf $pkg/Intermediate rm -rf $pkg/Plugins/VRM4U/Binaries rm -rf $pkg/Plugins/VRM4U/Intermediate find $pkg/ \\( -name \u0026#39;.DS_Store\u0026#39; -or -name \u0026#39;._*\u0026#39; \\) -delete -print; まだエラーが出ます。x86_64がないとか言われますが、使用しているのはarm64です。\n# https://forums.unrealengine.com/t/linker-error-undefined-symbols-for-architecture-x86_64-while-packaging/103451 UATHelper: パッケージ化 (Mac): ld: symbol(s) not found for architecture x86_64 $ gcc -v Apple clang version 15.0.0 (clang-1500.1.0.2.5) Target: arm64-apple-darwin23.1.0 ここでmake -j4でmakeして再びvrmを読み込んだら通った。\nオーバーレイマテリアルというものがue5.1から導入されようで、それを使ってキャラにエフェクトを追加してみた。普通にSK_xxxの詳細にレンダリング -\u0026gt; オーバーレイマテリアル(Overlay Material)みたいな項目があるのでそこに追加。 vrm4u err for mac package buildのerrをまとめます。全てがvrm4uによるものだったので回避した方法をまとめます。\nこれはmacで作成される._xxファイルが関係しています。削除すると通ります。\nPlugins/VRM4U/._VRM4U.uplugin: \u0026lsquo;0x00\u0026rsquo; is an invalid start of a value.\nABP_VRoidPostProcess...などからerrが出ます。したがって、これらのファイルの削除を行います。同様のerrが次回ビルド時にも出てくるので他のファイルも削除する必要があります。例えば、VRM4U/Content/Maps, VRM4U/Content/Util/Actor/latestなどです。\nPlugins/VRM4U/Content/Util/Actor/latest/ABP_VRoidPostProcess\u0026hellip;\nx86_64関連のerrが出ます。arm64なのでこの処理自体がおかしいため、これをやめさせないといけません。assimpをmake -j4でmakeして再びvrmを読み込んだら通ります。正直よくわからない。\nUATHelper: パッケージ化 (Mac): ld: symbol(s) not found for architecture x86_64\nvrmをue5で使うこと自体が荒業で、それをmac-m1で使うとなると相当に大変です。\nhttps://github.com/ruyo/VRM4U/issues vs unity ue5とunityのどちらがいいか。\nue5というかunrial engineなんですが、ここではue5とします。\nで、最近ue5とunityを触ってみて、どちらがいいのかを書いていきたいと思います。\n結論から言うと、ue5です。圧倒的にue5がオススメです。\nなぜかというと、見た目ですね。モデルを表示したときの見た目がぱっと見でunityは厳しいなと思ったので、ue5を試したのですが色々な意味ですごいです。\nただ、ue5は記事が全く見当たらず、動画もあまりないようで、使ってる人がそこまで多くない印象があります。これは大きなマイナス要素になり得ます。初心者はわけがわからない。そういう環境だと、正直、通常だとおすすめはしづらい。しかし、そのデメリットを上回るくらいue5のほうがおすすめです。\nでは、blenderとunityだとどうでしょう。私は、unityよりblenderを触っていたときのほうが気持ちが良かったので、blenderをおすすめします。\nue5\nblender\nunity\nただ、ロゴがかっこいいのはunityです。今も3dはunity-iconを使用していて、この辺は難しいのですが、私はfont-awesomeを使ってるのでfreeで使える3dを示すicon-fontはこれくらいしかいいのがなかったのです。まあ、いつまでもunityと関係ないのにunityのicon-fontを使うのもあれなので、そのうちcubeに変更しようかなと思います。\nunity\ncube\n今後やりたいこと ゲームのコンセプトは割と頭の中で決まってて、面白いと思ったことをやる感じ。\nアイが宇宙空間で艦隊と戦っている。ここではゲームでできるアイの最大火力を発揮できる。ユーザーは最初からキャラを操作できる。操作説明などはあえてなし。艦隊を攻撃するか、自由に動き回るのか、なにをするのかもすべてユーザーに任せられる。この状況は最初の5分間続く。 (1) 敵船からの攻撃、巨大なレーザー砲。ダメージなし。爆発あり。\n(2) こちらの攻撃、当たると敵船が間をおいて大爆発。当たった直後は衝撃派や画面を一瞬明るくする。ゆっくりと落ちて消えていく演出あり。\n最初の5分が終わると、ムービーに突入する。なにかがおかしくなり、力が弱まるのを感じる。突然、空を飛べなくなる。近くの星に落ちていくアイ。目が覚めると、海辺と山々が見える。手を広げるが力が使えなくなったようだ。アイは歩き始める。\nここからユーザーは操作可能。近くのマシロタウンにつくと人に話しかけられる。その格好はなにかあったのと女の子に言われゲーム中に使用される新衣装に変更。靴を履いてるムービー、操作可能。\nゲームは非常に広大なフィールドに毎日ドロップする3つの宝箱とモンスターがいる。難易度は非常に高く設定する。死んだら終わりその日は終了する。この辺はゲームコンセプトになるんだけど、何もないところをずーっと走ってる感じで、短縮も面白いことも用意しない。なにも考えずプレイしてほしい。\nこのゲームのコンセプトは、なにもしない、なにも考えないである。そういった時間が人には必要で、このゲームはそのためのきっかけを作りたいと思っている。例えば、ユダヤの教えに安息日(シャバット)というものがあり、なにもしない日のこと。時間を定期的に作るものである。\n課金ではカード(能力)と武器が追加。3回まで復活できるようにする。\n物語を作る。この星は中世の地球をモデルに各地域を作成。天動説を信じている世界で不思議な旅ができるというもの。旅の最終地点にいるボスを倒すと、アイは力を取り戻して、宇宙に帰ることができる。すべてユーザーの自由意志と自由操作による。\n物語の続き。星を平和にしたアイは、また戻ることができる。戻る度に発展していく様子を見ることができる。これがアップデートになる。\n","description":"","formated_time":"2023-12-04","href":"https://syui.github.io/blog/post/2023/12/04/ue-vs-unity/","tags":["ue5","3d"],"title":"ue5を触ってみた5 (vs unity)","utc_time":"2023-12-04T00:00:00Z"},{"categories":null,"contents":"今日は\nsystem 画面にメニューが出てるので非表示\nまずはHUDを非表示にするためWBP_MainHUD.uassetからis Visibilityのチェックを外す animation いくつか動かないモーションがあります。ue5のモデルを使用すると動くのですが、vroidからリターゲットで作成したものは動かないので、個別調整しました。\n落下モーションが動かないので、見てみると、リターゲットで作成されていなかったので、再びABP_Player_UE5からリターゲティングを作成してAM_Superhero...を作成する\nまだ動かないので、BP_SuperheroFlightComponent.uassetを編集する。\u0026ldquo;Play anim montage event.\u0026ldquo;を以下のようにしました。\nPlayAnimMontage --\u0026gt; Play Anim Montage (Anim Montage) --\u0026gt; (asset) AM_Superhero... hoverのモーションも動かないので、ABP_Player_UE5_xxxを編集します。\u0026ldquo;Play hover flight start montage notify event.\u0026ldquo;を以下のようにしました。 AnimNotifyHoverStart --\u0026gt; ... --\u0026gt; Play Slot Animation as Dynamic Montage --\u0026gt; (asset) A_Fight_Hover... shader cel shaderでモデルをアニメ風にしたい。\nBP_Player_UE5_xxxの編集に入り、コンポーネントのCameraから詳細を確認。そこにRendering Featuresがあるので、Post Prosess Material(ポストプロセスマテリアル)にCel_Shader(マルっこいやつ)を選択します。 例えば、以下はue4の対応です。ue5で使えるかはわかりません。\nhttps://github.com/alwei/PPCelShader\nhttps://github.com/alwei/PPLineDrawing\nlink 気になった記事を幾つかまとめます。\nassetまとめ\nUE5でつくるセルシェーディング\n動画ページ作りました 追記、パソコンが治った 思うところがあって壊れてたパソコンを直しました。\n電源つかないなあと思って色々やってると電源がついた。起動してみるとbiosが起動しない。やっぱり無理かと思って放置。なにかを思いついて試す。やっぱり無理。また試すというのを3回くらい繰り返すと復活しました。\nただ、gpuのファンが回らなくなってた。これは分解時に破損したものか、昔から破損してたのか、あるいは今回動かなくなったのかわからない。でもgpuの動作には問題ないですね。ファンも他から持ってくればいいだけだし。\n再びosが起動したときは嬉しかった。\n","description":"","formated_time":"2023-12-03","href":"https://syui.github.io/blog/post/2023/12/03/ue5/","tags":["ue5","3d"],"title":"ue5を触ってみた4","utc_time":"2023-12-03T00:00:00Z"},{"categories":null,"contents":"Bluesky Advent Calendar 2023\nblueskyのアドベントカレンダー、1日目の記事です。\nblueskyの日常はどのようなものでしょう。この記事では個人体験に基づきblueskyの感想を書いていけたらと思います。\n私が感じているのは以下の3つです。\n個人の日常を投稿する人が多い アクティブな人が多い\u0026hellip;例えば、likeする人が多い 新しいものにポジティブな人が多い 現在のblueskyは大体このような特徴があると思います。\nアクティブな人が多い まずは私がイラストを投稿した時のlikeを最新の投稿に基づき調べてみました。イラストに限らずlikeしてくれる人は、blueskyが圧倒的に多いという結果になりました。みなさん、ありがとうございます。\nsns like mastodon 0 twitter 3 bluesky 73 ちなみに、twitterの3のうち2つはblueskyにいる人がlikeしてくれたものでした。\nこれは、たまたまでしょうか。もし私がtwitterの有名人だったら結果は違っていたかもしれません。\nしたがって、この点についてblueskyで印象に残っている話をしていきたいと思います。\nblueskyで昔こんなことがありました。\nある界隈で有名な人がblueskyにやってきました。\nその人が誰かをフォローすることはなく、他の人の投稿をlikeすることも、reply(リプライ)、repost(リポスト)することもありませんでした。その人は結局、誰とも交流することなく、数日間投稿を続け「blueskyは人がいないし反応がないからダメだ」と言い去っていきました。\nこの話を聞いて、どう思いましたか。\n私はこう思いました。\n今、blueskyにいる人たちは、相手がインフルエンサーか否かではなく、対等な立場で話ができる相手かどうか、人を見て判断できる人たちだ、と。\nネットは素晴らしい場所です。年齢も性別も人種も社会的地位も関係なく平等で、あらゆる要素を取っ払って話ができる。\n「いや、そんなことはないぞ」と思われる人がいるかもしれません。インフルエンサーと一般人が平等なわけがないだろ、お前は何を言っているんだ、と。\nしかし、私の前でそれらは意味をなさない。相手がインフルエンサーか否かではなく、その人がどのような人なのか、それだけが重要だと思います。そして、おそらく、blueskyには私と同じような考えを持つ人が多かった。\nですから、件の人はあまり相手にされることなく「なんで自分が一般人と同じ扱いなのだ」と怒り去ってしまったのでしょう。投稿の反応に関して、その人は他の人と違いがありませんでした。\nblueskyでは、likeしてくれる人が多い。しかし、相手が有名人か否かはほとんど関係がありません。\nもしかしたら、このような特徴がblueskyの平和につながっているのかもしれませんね。\n私は、色々なsnsをやってきましたが、blueskyにいる人たちが最も好意的かつアクティブだったと感じています。次点でnostrも非常に良いコミュニティが形成されており、snsとして非常にお勧めできると思います。\nつまり、今、snsをやるならblueskyかnostrが最も良い選択だと個人的に思っています。\nblueskyは今までのsnsで一番楽しい。\nでは、それ以外のsnsとの違いはどういったところになるのでしょうか。\nそして、その差はどのように形成されたのか。\nsnsでできることは同じなのに、コミュニティの空気が全然違うように感じています。\nmastodon、当時の盛り上がり 私はmastodonの個人インスタンスを2017から立ち上げて運用を続けてきました。\nですから、当時の盛り上がりを知っています。\n2017、たくさんの技術者がインスタンスを立てました。\nこの時は管理者同士のやり取りが非常に活発でした。\n技術者が技術的な投稿を行うのがmastodon。そのような印象でした。\n私もmastodonで色々な人と交流し、当時の最新技術でできることをすごく楽しんでいました。\ntwitterよりmastodonの方がよほど楽しかったというのが個人的な感想です。mastodonをいち早く触り始めて本当によかった。\nですが、mastodonは全体的に少し寂しいところだったと感じます。\n例えば、公式アカウントへのreplyやlikeを見てみると、全体的な空気が違うように感じるのです。\n空気の違い 言葉で言い表すのが難しい空気の違いがあります。\n例えば、公式アカウントの投稿に付くlikeやreplyを見ると、両者は明らかに違います。数も違えば、内容も違います。blueskyは多くて明るい印象、mastodonは少し気難しく真面目な人が多い印象でした。どちらも一長一短、良いところもあれば悪いところもある。下記は最新の投稿の反応をまとめたものです。内容が異なるため単純に比較することはできませんが、いくつか遡って確認しています。\n最新の投稿 repost like url bluesky 2745 9666 link mastodon 328 479 link blueskyに住む人たちはとんでもなくアクティブで、今まで見てきたどのsnsよりもアクティブだと感じます。\nなぜ、ここまでの違いが生まれたのか、私には分かりません。偶然的な要素もあるのかもしれない。\nでも、なぜここまでの違いがあるのかは分かります。\nこれは、そこにいる人たちと、そして、意識の違いなのだろうと。\nでは、意識の違いとはなんなのでしょう。\n例えば、私は、twitterに流れてきたイラストにlikeする気分になることは少なく、逆にblueskyはlikeする気分なることが多い。これらの違いは私の行動に影響を及ぼします。そして、これは私だけではないと思っています。\n例えば、twitterとblueskyの両方にいる人を確認したところ、blueskyにいる時の方がアクティブな人がほとんどでした。というより、私が確認した全てのケースでblueskyの方がアクティブという結果でした。\n新しいものにポジティブ 新しいものへのポジティブさも随分と違うなと感じています。\nblueskyやnostrの人たちは、新しいものに対して、非常に積極的だと感じます。\nこの前、しずかなインターネットというサービスが始まった直後にblueskyの人たちがこぞってアカウントを作成しているのを見ました。\nこれも私の観測範囲になりますが、最も多く作成したのはblueskyの人たちでした。次がnostrで、mastodon, twitterではほとんど見かけませんでした。もちろん、あくまで個人体験なので、私の周りでの話になります。\nしたがって、単純比較するとtwitterの方が多いかもしれませんね。\nですが、単純比較はあまり意味がないと思っています。ポジティブな人が100人中何人なのか、その割合を知りたいとして、日本人の比率も、放置アカウント数、botアカウント数の比率も違いますから、統計をとるのが難しい。\nしたがって、あくまで所感ですが、blueskyには、新しいものにポジティブな人が多い印象があります。\n楽しいを続けよう つまり、私は今一番楽しいsnsであるblueskyをやっています。\nでも、こんな話をすると、先のことを考える人がいるかもしれません。「そんなの今だけだ」と。\nしかし、私にとって先の話は、あんまり重要じゃないのです。私にとって重要なのは、本質とそして今なのです。\nそして、未来って今の先にあるとそう思うのです。\nまずは本質の話をします。\n例えば、blueskyというsnsの本質というのは、そおらく、blueskyの始まりに確定するような、そういった類のものなのかもしれません。blueskyが発足した理由、目的、理念などが今のblueskyの空気に影響を及ぼしていて、元を辿ると、そこが根本となっている、みたいな話です。\nそうした本質が今のblueskyの空気につながっている。あるいはその出発点になっているのかもしれません。\n最後に、今の話をします。\n例えば、楽しい毎日を思い浮かべて日々を過ごすのと、絶望した将来を思い浮かべて日々を過ごすのとでは、未来は変わってくるのかな。\n仮に全く同じ世界を2つ作り、片方を楽しいと思いながら日々を過ごした人の世界線、もう片方を希望なんてないと思いながら過ごした人の世界線にした場合、結果は変わるのでしょうか。\n私は、2つの世界、2つの人生は違ったものになるだろうと思います。\nblueskyはもっと楽しい場所になる、そう信じています。\n私もなにか面白いものを作っていきたいな。\n参考 公式サイト\natprotoの仕様\nFAQ\n","description":"","formated_time":"2023-12-01","href":"https://syui.github.io/blog/post/2023/12/01/bluesky/","tags":["bluesky"],"title":"blueskyの日常","utc_time":"2023-12-01T00:00:00Z"},{"categories":null,"contents":"今回は、asset(アセット)を使って空を飛んでみました。\nSuperhero Flight Animationsを導入します。これは日本のIndie-us Gamesという会社が提供しているようで、UNDEFEATEDというゲームにも使われています。このゲーム参考になりそう。\nSpace Frontier Stations \u0026amp; Shipsというマップを使います。そして、Game Modeに上のGM_${motion_asset}を適用します。\nプロジェクトの基本、Player Startを選択して、ゲーム開始時のキャラクターの位置を設定します。\nまた、ここで初めてパッケージ化もやってみました。\n追記、パソコンが破壊?された話 ue5を作っている会社が提供してくれているcity sampleというassetがあります。\nこちらをインストールして、使ってみようと思いやってみました。\nこのassetはwindows10を要件としているため、少し古いGPU付きのパソコンに再びue5をインストール(5時間)し、assetのインストール(10時間)、そして、読み込み(2時間)を行いました。\n1回目は一応読み込んでくれたのですが、ウィンドウが固まってしまったため、2回目の読み込みを行いました。\nずーっと待ってて、寝る時間だから放置しました。翌朝、パソコンを見てみると電源が入らなくなっていました。\nおそらく、電源かマザーボードの故障だろうと思いました。\nもちろん、これが必ずしもue5のせいだとは思いません。そもそもこのパソコンはいつ壊れてもおかしくなかったので寿命かもしれない。ですが、私はue5が故障の一端だったのではないかと思っています。\n","description":"","formated_time":"2023-11-30","href":"https://syui.github.io/blog/post/2023/11/30/ue5/","tags":["ue5","3d"],"title":"ue5を触ってみた3","utc_time":"2023-11-30T00:00:00Z"},{"categories":null,"contents":"今回は、キーボードで操作できるようにするまでをやってみました。\n具体的にはスターターキットのアニメーションにリターゲットする感じで作成したやつをキャラクターに割り当てる感じだと思う。スターターキットはモデルが動かせるようになってるのでそれを入れ替える感じだと思う。\n具体的な手順はこちらのブログにある通りです。\nhttps://www.mayonakanouta.com/blog/unreal-engine-import-vroid-studio ここまで正確に書かれているブログはこれくらいだと思います。\n他のブログ記事を幾つか試してみましたが、他のやり方だと多分動きません。実際に動かしてみると大体の要領を把握できましたが、他のブログで書かれているやり方だとやっぱり大抵は動かない気がします。\nコンテンツドロワーからvrm pluginが用意してくれているIKリターゲッタをダブルクリックで編集する\n[IKリターゲッタ] ターゲットのAssetをIK_${model_name}_Mannequinにする, Meshも同じく変更する\nここでAポーズにしてサイズ調整を行う。適当なアニメーションを再生して確認する\nコンテンツドロワーからスターターキットのMannequins/Animations/ABP_QuinnというアニメーションBPを右クリックしアニメーションアセットのリターゲティングで複製する\n先程、編集したIKリターゲッタを選択する\nコンテンツドロワーからスターターキットのキャラクターを編集する。ThirdPerson/Blueprints/BP_ThirdPersonCharacter\n先程、複製して作ったものをAnimationのAnime Classに当てる。私の場合はABP_Quinn_C\nmapを追加してみました。アセットを追加して、mapを開いて、キャラクターを置くと適用されます。\n","description":"","formated_time":"2023-11-29","href":"https://syui.github.io/blog/post/2023/11/29/ue5/","tags":["ue5","3d"],"title":"ue5を触ってみた2","utc_time":"2023-11-29T00:00:00Z"},{"categories":null,"contents":"随分前にunityで3d-modelを動かしてみたことがありました。\nunityはあまりきれいじゃないので、今回はue5で試してみることにします。ue5をはじめて1日目の記録です。\n結論から言うと、これが地獄の始まりでした。\nまず、ue5をインストールします。容量が大きいというので普段繋いでいたhdd(6t)にインストールすることにしました。\nこれが数時間かかりました。しかも、インストールが終了したにも関わらずlaucherで「起動」ボタンが表示されず、「インストール」が表示されていました。\n意味がわからないなあと思い、再起動とか色々やっていると、しばらくしてなぜか「起動」が表示されます。\nで、起動を押して、プロジェクトを作成し、エディタと画面が表示されました。そこで、スターターキットのモデルをキーボードで動かしました。どうやらしっかりと動くようです。\nここで、一旦、ue5を終了します。\n終了したにもかかわらず、何故か「editor」みたいなものがバックグラウンドにありました。ue5のやつです。\nしばらくして、macを終了しようとすると、「editor」が起動しているのでmacを終了できないと出てきます。\nここで、そのアプリを強制終了して、macを落とします。\nさて、次にmacを立ち上げたとき、hddが破壊されていたのでした\u0026hellip;。\nこれはちょっとやばいなと思い、なんとかhddにアクセスできるようにしました。hddのフォーマットがexfatだったので、復旧はwindowsでやりました。ここからはファイルを救出する作業になります。具体的にはrsyncでwindowsからファイルを引っ張ってくることにしました。rsyncが使えるなら大丈夫なんじゃないかと思われるかもしれませんが、ディスクは完全におかしくなっていて、この状態にするまでに相当の時間がかかりました。おそらく、次はないでしょう。ここで終了したりumountしてしまうと、二度とアクセスできなくなる可能性があります。\n$ scoop install cwrsync --- $ rsync -avP windows:/cygdrive/e/test . このhddは最近買ったばかりのやつなので寿命ということはないと思う。おそらく、ue5が原因だろうと思われます。直接的ではないにしてもue5の何らかの書き込みが上手く行かずhddを破壊してしまったのでしょう。\nしかしまあ、長時間インストールの末にhddが破壊されるだけとは\u0026hellip;壮大な時間の無駄。しかもhddにあったファイルは個人的に重要なものだったので復旧できてよかった。\nディスク復旧の作業をしながら、ue5に取り掛かりました。再びue5のインストールに長時間使ったあとvrmを読み込むpluginを導入しました。\nassimp vrmをue5でimportするpluginのvrm4uに必要らしい。\ngit clone https://github.com/Microsoft/vcpkg.git cd vcpkg ./bootstrap-vcpkg.sh ./vcpkg integrate install ./vcpkg install assimp # これは必要ない、後述のruyo/assimpをmakeします git clone https://github.com/assimp/assimp.git cd assimp cmake CMakeLists.txt cmake --build . vrm4u https://github.com/ruyo/VRM4U\nhttps://github.com/ruyo/assimp\nこちらを読んで、cmakeのguiからsrcを作ってmakeするらしい。\nassimpをbuildしてできたlibassimp.aをMyProject/Plugins/VRM4U/ThirdParty/assimp/lib/Mac/libassimp.aに置いて、ue5でbuild(project)するらしい。\nhttps://github.com/ruyo/VRM4U/issues/317#issuecomment-1733430315 ","description":"","formated_time":"2023-11-28","href":"https://syui.github.io/blog/post/2023/11/28/ue5/","tags":["ue5","3d"],"title":"ue5を触ってみた1","utc_time":"2023-11-28T00:00:00Z"},{"categories":null,"contents":"スカークは実装される気配がない 前回、スカークの話をしましたが、ストーリーを見たところ、このキャラはしばらく実装される気配はないなと思いました。\n原神ってベータテスターでキャラをテストするんですけど、スカークはそのテストに入っていない模様。\n関係ありませんが、個人的にテスターを介さないシークレットプロジェクトを作ると面白そうだと思いました。そこでキャラを開発し、本編と切り離して直前に実装という組織を作るとサプライズが可能になり、プレイヤーを驚かせることができるんじゃないかなと。もし私がゲーム開発することがあるなら、この仕組みを取り入れようと思います。\nさて、現在のストーリー上でスカークが実装される気配はないようだという話でしたね。\n私は、スカークが近く実装されるかもしれないので原石を貯めておく予定でしたが、しばらく実装されないなら、キャラを引いた方がいいですね。\nというのも、原石を貯め続ける期間は、当然ながらキャラを使えないわけです。キャラを引くなら早い方がいい。実装されるかわからないキャラの原石をずっと貯めているという状態は最も損をする可能性が高い。\nでは、どのキャラを引こうかな。候補としてはヌヴィレットか夜蘭です。そして、ヌヴィレットはストーリーで気に入ったので、ヌヴィレットかな。\nヌヴィレットの1凸を目指すことにしましょう。\nついでに 今期の螺旋で安定したPTです。\nちなみに、ヌヴィレットがいると、ナヒーダを後半に回せますね。ナヒーダがいるPTは敵がどうであれ大体は45秒くらいで倒せるのですが、いないと1分30秒を超えてしまう。この状況を打破したい。\n","description":"","formated_time":"2023-11-26","href":"https://syui.github.io/blog/post/2023/11/26/genshin/","tags":["genshin"],"title":"原神、ヌヴィレットを引くかも","utc_time":"2023-11-26T00:00:00Z"},{"categories":null,"contents":"macbook air(intel)を使っていなかったのでserverにしました。stable diffusionを動かしているgpu付きのserverがあるんだけど、stable diffusionを稼働すると、他のものが止まってしまったり、動きが鈍くなってしまったりで不都合だったので、全体的にdockerをmacに移行しました。\ndocker volumesは権限の関係でtarにしてからrsyncで移行先に送ります。そうしないとdata(postgresなど)が移行先で扱えません。個別に永続化しているvolumesも同様とします。\n$ brew install --cask docker $ ssh server $ su $ tar cvzf volumes.tgz /var/lib/docker/volumes # 移行先へのssh接続を確立しておく必要があります $ rsync -av volumes.tgz mac: $ exit $ aunpack volumes.tgz $ sudo mkdir -p /var/lib/docker $ sudo mv ./var/lib/docker/volumes /var/lib/docker/ ","description":"","formated_time":"2023-11-24","href":"https://syui.github.io/blog/post/2023/11/24/docker-mac/","tags":["docker","linux","mac"],"title":"docker volumesの移行","utc_time":"2023-11-24T00:00:00Z"},{"categories":null,"contents":"フリーナ2凸しました。無課金なのでこれからは原石貯めの期間になります。\nもともと運命石は280あって、フリーナ2凸したあとは140になりました。\nさて、フリーナ2凸を使ってみた感想とか、今後の計画とかについて話します。\nフリーナ2凸 フリーナは使いこなすのは難しいけど、うまく使いこなせばタイムや敵を一気に削れるキャラです。\n螺旋の雷馬のタイム、行秋とフリーナをPTに入れて戦ってみたところ、以下のタイムでした。PTはナヒーダ, 鍾離, 忍です。検証回数は1回。なので、そこまで性能を正確に反映するものではないと考えてください。ですが、行秋で40sはかなり難しいと思います。\nフリーナ : 40s\n行秋 : 80s\nフリーナの性能は、普通に使うと行秋を少し弱くした感じです。ですが、バフをうまく機能させると倍ほどの効果を発揮可能、そんな感じです。\nスキルは思った以上に便利です。原神をはじめたばかりの人は、フリーナを最優先で引いてもいいと思います。\nただし、フリーナは個人的にナヒーダほどのインパクトはありませんでした。\n私が今まで引いたキャラで最もインパクトが強かったキャラはナヒーダでした。\nしたがって、引くべきキャラは1位がナヒーダで2位がフリーナです。\n草元素を初めて使うというのもあったのですが、敵が溶けていく感覚がありました。なぜかわからんけど、ナヒーダをPTに入れると、敵が溶ける。こんなキャラは今まで使ったことないし、引いたことなかったなあ。\nナヒーダを完凸したのは色々な理由がありますが、その一つは、こういったナヒーダの強さを実感したからです。\nその他に、私が原神で一番見た目がいいと思うのがナヒーダなのです。かわいくて好きなのはクレーです。\nナヒーダを使いこなすには、水元素が必要で、今まで行秋だけだったのですが、フリーナが加わり、ようやく水元素枠が埋まりました。\n相性の良いキャラ ヨォーヨ2凸 + フォンテーヌ鍛造武器 PT : ナヒーダ, 雷電, フリーナ, ヨォーヨ\nナヒーダに金箔、雷電に西風を持たせてもいい\n今後の計画 今後はキャラ過剰になるため、原石を温存し、1キャラ完凸分の原石を確保することを目標とします。\nつまり、ガチャを引くことはないでしょう。\n攻略に関しては現時点で問題ありません。\nまた、無課金で最強を目指すのは無謀ですし意味がない。例えば、夜蘭やヌヴィレットは今後も引かないでしょうね。\nフリーナの伝説任務と魔神任務をやって、スカークが登場しましたが、近く実装される可能性は、ほぼありません。そう感じました。\n少しだけ感想を述べると、フリーナは、かなり好きなキャラです。\n彼女はやるべきことをやった、それだけです。非難されるいわれはまったくないな。彼女の頑張りがなければフォンテーヌの人々は救われていませんよ、全滅だったと思います。\nあと、このキャラ、たぶんギャグ枠としての採用?なので、事後ストーリーをやってて面白い。\nナヒーダの事後ストーリーすら億劫で放置してたのですが、フリーナは速攻でやりました。面白かったです。\nまあ、私はそもそもナヒーダがあんまり好きではないのですが。性格面が。\nスカークとフリーナの共通点 髪型が似てるなって思いました。これは偶然なのか、理由があるのか。\n理由があるとすれば、スカークは、もしかするとフリーナの別の世界線なのかもしれないなって思いました。\n","description":"","formated_time":"2023-11-09","href":"https://syui.github.io/blog/post/2023/11/09/genshin/","tags":["genshin"],"title":"原神、フリーナ2凸","utc_time":"2023-11-09T00:00:00Z"},{"categories":null,"contents":"https://github.com/neggles/animatediff-cli\n$ git clone https://github.com/neggles/animatediff-cli $ cd animatediff-cli $ python3.10 -m venv .venv $ source .venv/bin/activate # install Torch. Use whatever your favourite torch version \u0026gt;= 2.0.0 is, but, good luck on non-nVidia... $ pip3 install torch torchvision torchaudio $ python \u0026gt;\u0026gt;\u0026gt; import torch \u0026gt;\u0026gt;\u0026gt; torch.backends.mps.is_available() True # install the rest of all the things (probably! I may have missed some deps.) $ python -m pip install -e \u0026#39;.[dev]\u0026#39; modelのloraは、基本的にアニメ絵がうまいやつで、このツールはloraのmotion-moduleを使います。\nmotion-lora : https://drive.google.com/drive/folders/1EqLC65eR1-W-sGD0Im7fkED6c8GkiNFI\n$ mv *.ckpt ./data/models/motion-module/ $ vim config/prompts/01-ToonYou.json \u0026#34;motion_module\u0026#34;: \u0026#34;models/motion-module/mm_sd_v15_v2.ckpt\u0026#34; $ animatediff --help model : sd v1.5\n","description":"","formated_time":"2023-11-08","href":"https://syui.github.io/blog/post/2023/11/08/stable-diffusion/","tags":["diffusion"],"title":"stable-diffusionのanimatediff-cliを試してみた","utc_time":"2023-11-08T00:00:00Z"},{"categories":null,"contents":"公式のpvにて、スカーク、つまり、タルタリアの師匠が映っていました。\nあくまで直感ですが、実装されるなら最強キャラになると思う。\nということで、フリーナは無凸か2凸を目指すことにし、夜蘭は確保しない方向です。\n代わりにスカークが実装されたとき完凸したいと考えています。\n次に話したいのは、ヌヴィレットのことです。ヌヴィレットは現時点で夜蘭超えの最強キャラです。\nインフレが激しすぎて、あのビーム、ほんとにいいのだろうか\u0026hellip;。\nまずゲーム性の面で見て、ぐるぐる回してるだけの絵面は、美しくない。画面もよく見られないし酔うし、私はあのビームあんまり良くないなと思っています。\nただ、現時点ではそれが最強の戦法だし、最強のキャラだと思う。\n夜蘭でもあれは超えられないよ。\n話を戻すと、もし完凸するのであれば、現時点では、夜蘭よりヌヴィレットのほうがおすすめと言えるでしょう。\nなにが強いかって言うと、全部です。特に、中断耐性と回復、攻撃力、攻撃範囲ですね。爆発依存でない点もいい。敵によっては爆発を溜められないこともあります。\nでは、ヌヴィレットを確保するかと言われると、私はしないでしょうね。\nただ、スカークはパッと見て完凸したいなと思ったので、実装されたら完凸を目指すかも。\nフリーナはあんまり思わないので完凸はしない。\nスカークの実装時期を予測すると、全く読めないけど、ストーリーに絡んで来たとき即座に実装されるか、あるいは、めちゃくちゃ遅くなるか、どちらかだと思います。\nめちゃくちゃ遅くなる場合は、もはや考慮すべきではないかもしれません。というのも、その頃には環境は変わっているだろうし、熱は冷めていて、他のキャラのほうが魅力的かもしれません。例えばですが、炎神、氷神とスカークのどちらを選ぶかみたいな話になっている可能性もある。\nしたがって、早くに実装される場合は、完凸を目指したいキャラ。\n元素はなんだろう。見た目からは氷、雷っぽいかな。\n","description":"","formated_time":"2023-11-07","href":"https://syui.github.io/blog/post/2023/11/07/genshin/","tags":["genshin"],"title":"原神、スカーク","utc_time":"2023-11-07T00:00:00Z"},{"categories":null,"contents":"https://card.syui.ai/ai\n動作環境 ios17で動作します。ios16では動作しません。\n[ok] \u0026hellip; ios17.x [no] \u0026hellip; ios16.x safariの以下の機能が必要です。\nios17のデフォルトでは有効になっています。\nAllow WebGL in Web Workers GPU Process: Canvas Rendering GPU Process: DOM Rendering OffscreenCanvas in Workers OffscreenCanvas fix motion 例えば、以下はblenderでポーズを編集している様子なんだけど、プレビューと出力結果が異なります。\nこれは、アニメーションが自動で動作するように設定されているためです。そのままvrmを読み込むとTポーズになりますが、JLChnToZ/vrm-dance-viewerは設定で手を下げて固定します。\n// https://github.com/JLChnToZ/vrm-dance-viewer const LERP_SCALE = 6; if (node) node.setRotationFromQuaternion( rotation3 .setFromRotationMatrix(node.matrix) // ここがポーズをおかしくする要因 // コメント化すると元通り。ただvrmを自然なポーズに固定する必要がでてくる //.slerp(finalRotation, Math.min(deltaTime * LERP_SCALE, 1)), ); また、blinkを設定すると、顔を標準位置から移動するとおかしくなります。これはthree-vrmの古いバージョンのバグです。\nfunction updateEyeBlink(model: VRM, deltaTime: number) { //if (!model.blendShapeProxy) return; //let v = blinkDelays.get(model); //if (v == null || v \u0026lt; -BLINK_DURATION) // v = MathUtils.randFloat(MIN_BLINK_DELAY, MAX_BLINK_DEALY); //else // v -= deltaTime; //blinkDelays.set(model, v); //model.blendShapeProxy.setValue( // VRMSchema.BlendShapePresetName.Blink, // v \u0026gt; LOOK_CAMERA_THRESHOLD ? 0 : MathUtils.pingpong(-v, BLINK_DURATION / 2) * 2 / BLINK_DURATION, //); } これをどう自然に動かしていけばいいのか悩み中。全部のvrmをデフォルトのTポーズから変更するのもあんまり良くない。\nthree.jsの他にbabylon.jsというものもあるらしい。こちらのvirtual-cast/babylon-vrm-loaderでvrmを読み込めます。\nadd effect 例えば、model/motionを読み込んだ瞬間に紙吹雪が舞う演出を追加してみます。\n// 空中に紙吹雪 function tick_sky() { let s_rot = 0; let s_xp = 10; let s_yp = 10; let s_zp = 10; const s_length = 5000; const s_plane_scale = 0.01; const s_plane = []; for(let i=0; i\u0026lt;s_length; i++){ var color = \u0026#34;0x\u0026#34; + Math.floor(Math.random() * 16777215).toString(16); let geometry = new THREE.PlaneGeometry( s_plane_scale, s_plane_scale ); var material = new THREE.MeshBasicMaterial({ color: Number(color), opacity: 0.8, transparent: true, side: THREE.DoubleSide }); s_plane[i] = new THREE.Mesh( geometry, material ); s_plane[i].position.x = s_xp * (Math.random() - 0.5); s_plane[i].position.y = s_yp * (Math.random() - 0.5); s_plane[i].position.z = s_zp * (Math.random() - 0.5); scene.add(s_plane[i]); } return s_plane; } // 紙吹雪を時間経過で消す処理 function tick_sky_remove(){ const s_length = 5000; var s_plane = tick_sky(); setTimeout(() =\u0026gt; { for(let i=0; i\u0026lt;s_length; i++){ scene.remove(s_plane[i]); } }, 7000); } // サービス名を追加 export function toggleTickSky() { if (!navigator.userAgent.match(/iPhone|iPod|iPad|Android.+Mobile/)) { tick_sky_remove(); } } // ホストへ追加 WorkerMessageService.host.on({ setLights, toggleLights, toggleTickSky }); // サービス登録 export function toggleTickSky() { return void workerService.trigger(\u0026#39;toggleTickSky\u0026#39;); } import { toggleTickSky } from \u0026#39;./host\u0026#39;; const el = document.querySelector(\u0026#39;#btn-models\u0026#39;) as HTMLInputElement | null; if(el != null) { // ボタンを押したときの動作 el.addEventListener(\u0026#39;click\u0026#39;, function(){ // サービス:紙吹雪の演出 toggleTickSky(); // サービス:ライトのon/off toggleLights(); }); } \u0026lt;button id=\u0026#39;btn-models\u0026#39;\u0026gt;test\u0026lt;/button\u0026gt; このようにするとmodel/motionにeffectを追加できます。色々なsceneを作っていく予定。\nadd audio import * as THREE from \u0026#39;three\u0026#39;; export const camera = new THREE.PerspectiveCamera(75, 1, 0.1, 1000); const listener = new THREE.AudioListener(); camera.add( listener ); const sound = new THREE.Audio( listener ); const audioLoader = new THREE.AudioLoader(); function audio_sword() { audioLoader.load( \u0026#39;./audio/sword.mp3\u0026#39;, function( buffer ) { sound.setBuffer( buffer ); sound.setLoop( false ); sound.setVolume( 0.2 ); sound.play(); }); } audio_sword(); add floor 先程の応用でランダムで動き続ける背景を設定してみます。\nfunction tick() { let s_rot = 0; let s_xp = 30; // 0にして床のみ設定する let s_yp = 0; let s_zp = 30; const s_length = 15000; // 大きさもランダムにする const s_plane_scale = Math.floor(Math.random() * 0.09) + 0.01; const s_plane = []; for(let i=0; i\u0026lt;s_length; i++){ var color = \u0026#34;0x\u0026#34; + Math.floor(Math.random() * 16777215).toString(16); let geometry = new THREE.PlaneGeometry( s_plane_scale, s_plane_scale ); var material = new THREE.MeshBasicMaterial({ color: Number(color), opacity: 0.8, transparent: true, side: THREE.DoubleSide }); s_plane[i] = new THREE.Mesh( geometry, material ); // 向きをランダムに変える s_plane[i].rotation.x = Math.PI / 2 * Math.random(); s_plane[i].position.x = s_xp * (Math.random() - 0.5); s_plane[i].position.y = s_yp * (Math.random() - 0.5); s_plane[i].position.z = s_zp * (Math.random() - 0.5); scene.add(s_plane[i]); } return s_plane; } function tick_remove(){ const s_length = 15000; var s_plane = tick(); setTimeout(() =\u0026gt; { for(let i=0; i\u0026lt;s_length; i++){ scene.remove(s_plane[i]); } }, 2000); } // これで床のキラキラが更新を続ける export function toggleTick() { const s = tick(); tick_remove(); var num = Math.floor(Math.random() * 1990) + 1790; for(let i=0; i\u0026lt;100; i++){ var num = Math.floor(Math.random() * 1990) + 1790; setTimeout(() =\u0026gt; { tick_remove(); }, num * i); } } add hdr hdr画像を設定します。ただし、backgroundはつけないでください。床はつけてもいいです。\n//背景をHDR import * as THREE from \u0026#39;three\u0026#39;; import { RGBELoader } from \u0026#34;three/examples/jsm/loaders/RGBELoader\u0026#34;; let uk_0 = \u0026#34;/img/t.hdr\u0026#34; new RGBELoader().load(uk_0, function (texture) { texture.mapping = THREE.EquirectangularReflectionMapping; scene.background = texture; //scene.environment = texture; }); // scene.background.set(bgColor); hdr : https://polyhaven.com/hdris\nボタンを押すと場所を移動するように設定するにはこんな感じ。\nconst bgColor = new Color(0x000000); function getTels(){ let hdr = \u0026#34;/img/syferfontein_0d_clear_puresky_4k.hdr\u0026#34;; new RGBELoader().load(hdr, function (texture) { texture.mapping = THREE.EquirectangularReflectionMapping; scene.background = texture; //scene.environment = texture; }); } function floor_default(){ const floor = new Mesh( new PlaneBufferGeometry(100, 100), new MeshLambertMaterial({ color: 0x999999, depthWrite: true, }) ); floor.position.y = -0.5; floor.rotation.x = -Math.PI / 2; //const { y } = floor.position; //floor.position.set(0, 0, 0); scene.add(floor); return floor; } function floor_grid(){ const grid = new GridHelper(50, 100, 0xAAAAAA, 0xAAAAAA); scene.add(grid); grid.position.set(Math.round(0), 0, Math.round(0)); return grid; } function floor_bg(){ const bgColor = new Color(0xffffff); scene.background = new Color(bgColor); scene.fog = new Fog(bgColor, 3, 10); scene.fog?.color.set(bgColor); if (scene.background instanceof Color) scene.background.set(bgColor); else scene.background = bgColor.clone(); } export const fl_de = floor_default(); export const fl_gr = floor_grid(); export const fl_bg = floor_bg(); function floor_default_remove(int: number){ if (int == 1){ scene.remove(fl_de); scene.remove(fl_gr); getTels(); } } floor_default_remove(0); export function toggleTel(int: number) { floor_default_remove(int) } WorkerMessageService.host.on({ toggleTel }); export function toggleTel(int: number) { return void workerService.trigger(\u0026#39;toggleTel\u0026#39;, [int]); } import { toggleTel } from \u0026#39;./host\u0026#39;; const el_tel = document.querySelector(\u0026#39;#btn-models_tel\u0026#39;) as HTMLInputElement | null; if(el_tel != null) { el_tel.addEventListener(\u0026#39;click\u0026#39;, (e:Event) =\u0026gt; toggleTel(1)); } link https://zenn.dev/ikkou/articles/fdb344a713cdf0/\nhttps://blog.virtualcast.jp/blog/2019/05/oss-browser-vrm-vci-viewer/\n","description":"","formated_time":"2023-11-04","href":"https://syui.github.io/blog/post/2023/11/04/vrm/","tags":["vrm","3d"],"title":"3d-modelとcardを連携してみた","utc_time":"2023-11-04T00:00:00Z"},{"categories":null,"contents":"前回の続きです。\nhttps://syui.ai/blog/post/2023/03/23/domain/ freenomのdomain更新がうまくいったので、そのとき感じたことを書きます。\n感じたことは以下の2点です。\nスパム排除が活発になる\n新規登録が厳格化される\nこれらは認証手続きがめんどくさい感じになっていたので、そのように感じました。\n今回も以前と変わらない使用感で.cfを1年更新できました。費用は$0でした。\n基本的にグリーン判定のアカウントは継続して使えているみたいです。\nただし、アカウントによっては対応が異なるという情報があります。\nこれはスパム排除の一貫だと考えられます。停止、あるいは更新料が必要になったケースがあるようです。\nですから、freenomを使い続けるのはリスキーと言えるでしょう。\n例えば、pixiv(pawoo), misskey系などは海外から相当警戒されているようで、特に児童ポルノ関連と予想されますが、domainが停止されたことがありました。これはfreenomだけでなく、別のregisterからも確認されています。\nまた、連合(fediverse)を見てみると、やはりこれらのサーバーは相当に警戒されているように感じます。\nしたがって、仮にfreenomで停止されたとしても、それがfreenomだけの問題でない可能性があります。\nしかし、registerの中でfreenomは今後さらにスパムや要注意サーバーを排除する動きが活発化することが予想されます。よって、個人的にはおすすめできないと考えます。\nとはいえ、あくまで個人利用、かつ海外から警戒されない範囲での一般利用の場合、問題が生じる危険性は少ないと判断しています。\nこれは私のアカウントが普通に使えて更新もできているからです。やはり、伝聞だけではわからないことが多々あります。ここでは、その伝聞を考慮した上で個人の所感を述べていると思ってください。\n海外から警戒される利用というのは、児童ポルノに見られるイラスト等のことを指します。これは日本基準ではなく海外基準での判断になります。\n分散snsのprotocolが広まって以来、日本では問題にならないけど海外では問題視されるケースが確認されています。\nfreenomと私 私は弱々のdomainを$0で取れるfreenomのようなサービスは、開発者にとって非常に喜ばしいものだったと思います。\nそれはdomainの価値を理解するのに役立ちましたし、また、テスト環境も構築しやすかった。\nそのようなサービスが失われてしまうのは寂しい。\n私自身が$0のdomainを使ってきましたし、また、人にもおすすめしてきました。\nなぜかというと、誰でも気軽に始めやすいし、そういうサービスだったからです。\n検索エンジンからはスパム扱いされ、検索しても出てこないような弱々のdomainでしたが、私は満足していて楽しかったです。\nfreenomというサービスからはそういった経験や機会を得られました。感謝。\n","description":"","formated_time":"2023-10-29","href":"https://syui.github.io/blog/post/2023/10/29/freenom/","tags":["freenom","domain"],"title":"freenomの現状と考察","utc_time":"2023-10-29T00:00:00Z"},{"categories":null,"contents":"3d-modelである.vrmのキャラクター編集でやったことなどをまとめます。\n輪っかを作る 輪っかを作るには、髪の毛から適当な付け髪を選択肢、テクスチャを編集します。\n部位を光らせる 部位を光らせるには、blenderで当該テクスチャ(マテリアル)を選択し、Emissionの項目で画像を削除、カラーを設定します。\nアイの場合は、Face, Hairにあるマテリアルの2つを#fff700にしました。\nなお、事前にblenderで.vrmをインポートするアドオンを入れておいてください。あと、blenderは一度modelを保存しないとエクスポートの反映されなかったので注意。\niframe 今までの3d-modelは、skechfabなどからiframeしていましたが、自分でホストすることにしました。\nこれが単なるmodelの鑑賞ならthree.jsを使えばいいです。iframeは必要ありません。\n例えば、cardのmodelはそれ自体が動かないものなのでthree.jsで表示したほうが簡単です。\nしかし、人のmodelとなれば話は変わってきます。つまり、棒立ちのmodelを表示するだけではダメなのです。\nしたがって、motion(animation)を当てる必要がありますが、それもランダム、かつ違和感のないものでなければいけません。例えば、定型的な動き、腕を上げて下ろすとか、それを繰り返すだけではダメということになります。\nこの処理を作成するには、three.jsだけでは不十分で、three-vrmが必要になり、かつthree-vrmを使うにもかなりの記述が必要になります。\nつまり、web-appを作る必要があって、作ったweb-appをiframeで表示することになります。\n\u0026lt;iframe src=\u0026#34;https://syui.ai\u0026#34; allowfullscreen frameborder=\u0026#34;0\u0026#34; style=\u0026#34;border: none\u0026#34; width=\u0026#34;100%\u0026#34; height=\u0026#34;400px\u0026#34;\u0026gt;\u0026lt;/iframe\u0026gt; animation ここでいうanimationとはmotionと同じ意味です。\n手順としては、.fvpにexportする際に様々なモーションがありますので、その動きを.mp4に保存したあとdeepmotionで合成します。\n現在使っているipad 9thが落ちるのでmacで作業します。\nipadで保存したmodelは.vroidになります。これをexportすると.vrmになります。\nmacで読み込む場合、.vroidが必要になるので、icloudなどにmodelを保存して共有します。\nこれを動画で保存します。そして、deepmotion.comで.bvhを作成します。.bvhは.vmdに相当します。\nhttps://deepmotion.com\nhttps://gamefromscratch.com/creating-animated-anime-characters-with-vroid-studio-and-deepmotion/\nhttps://www.youtube.com/watch?v=XsX0X8odGsY\ngoogle-model-viewer \u0026lt;!-- Import the component --\u0026gt; \u0026lt;script type=\u0026#34;module\u0026#34; src=\u0026#34;https://ajax.googleapis.com/ajax/libs/model-viewer/3.3.0/model-viewer.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!-- Use it like any other HTML element --\u0026gt; \u0026lt;model-viewer alt=\u0026#34;Neil Armstrong\u0026#39;s Spacesuit from the Smithsonian Digitization Programs Office and National Air and Space Museum\u0026#34; src=\u0026#34;shared-assets/models/NeilArmstrong.glb\u0026#34; ar environment-image=\u0026#34;shared-assets/environments/moon_1k.hdr\u0026#34; poster=\u0026#34;shared-assets/models/NeilArmstrong.webp\u0026#34; shadow-intensity=\u0026#34;1\u0026#34; camera-controls touch-action=\u0026#34;pan-y\u0026#34;\u0026gt;\u0026lt;/model-viewer\u0026gt; https://modelviewer.dev/\ngoogle-model-viewerというものがあります。これを使うことで.glbを表示できるのですが、.vrmのポーズがデフォルトでは見栄えがよくありません。したがって、ポーズを付けるには、.bvhなどを.vrmaに変換してblenderで合成させる必要があります。\nbvh -\u0026gt; vrma\nhttps://vrm-c.github.io/bvh2vrma ここで.vrmaはvrm1.0以上でないと読み込めません。したがって、まずはmodelをvrm1.0でexportしてから.vrmaを当てましょう。\nそして、.vrmにexportして.glbにrenameします。\nしかし、現状、blenderで読み込む.vrmは色がおかしくなってしまうようです。\nblender v3.5\nvrm : https://github.com/saturday06/VRM-Addon-for-Blender/releases\ncats : https://github.com/absolute-quantum/cats-blender-plugin/issues/591\n","description":"","formated_time":"2023-10-25","href":"https://syui.github.io/blog/post/2023/10/25/vrm/","tags":["vrm","3d"],"title":"vrmのキャラクター編集","utc_time":"2023-10-25T00:00:00Z"},{"categories":null,"contents":"three-vrm関連のブログを調べていると、ほとんどのコードが動かないのでthree-vrm v2.0の対応をまとめます。\n唯一、動くコードを発行していたのがpixivのexampleでした。参考にしてみてください。\n$ git clone https://github.com/pixiv/three-vrm/ $ cd three-vrm $ git checkout gh-pages $ cd ./packages/three-vrm/examples/ $ vim lookat-advanced.html example 以下は私が作ったexampleです。基本的には.jsなので好きなframeworkで動かしてみてください。\n\u0026#34;dependencies\u0026#34;: {\u0026#34;@pixiv/three-vrm\u0026#34;: \u0026#34;^2.0.6\u0026#34;, \u0026#34;three\u0026#34;: \u0026#34;^0.157.0\u0026#34;} import * as THREE from \u0026#39;three\u0026#39;; import { GridHelper, Mesh, MeshLambertMaterial, PlaneGeometry, Vector3, Color, DirectionalLight, Fog, HemisphereLight, AnimationAction, AnimationClip, AnimationMixer, MathUtils, Matrix4, Quaternion } from \u0026#39;three\u0026#39;; import { VRMLoaderPlugin, VRMUtils, VRMLookAt, VRMSchema } from \u0026#39;@pixiv/three-vrm\u0026#39;; import { GLTFLoader } from \u0026#39;three/examples/jsm/loaders/GLTFLoader\u0026#39;; import { OrbitControls } from \u0026#39;three/examples/jsm/controls/OrbitControls\u0026#39;; // model const defaultModelUrl = \u0026#39;https://pixiv.github.io/three-vrm/packages/three-vrm/examples/models/VRM1_Constraint_Twist_Sample.vrm\u0026#39;; // lookat const _v3A = new THREE.Vector3(); class VRMSmoothLookAt extends VRMLookAt { constructor(humanoid, applier) { super(humanoid, applier); this.smoothFactor = 10.0; this.yawLimit = 45.0; this.pitchLimit = 45.0; this._yawDamped = 0.0; this._pitchDamped = 0.0; } update(delta) { if ( this.target \u0026amp;\u0026amp; this.autoUpdate ) { this.lookAt( this.target.getWorldPosition( _v3A ) ); if ( this.yawLimit \u0026lt; Math.abs( this._yaw ) || this.pitchLimit \u0026lt; Math.abs( this._pitch ) ) { this._yaw = 0.0; this._pitch = 0.0; } const k = 1.0 - Math.exp( - this.smoothFactor * delta ); this._yawDamped += ( this._yaw - this._yawDamped ) * k; this._pitchDamped += ( this._pitch - this._pitchDamped ) * k; this.applier.applyYawPitch( this._yawDamped, this._pitchDamped ); this._needsUpdate = false; } if ( this._needsUpdate ) { this._needsUpdate = false; this.applier.applyYawPitch( this._yaw, this._pitch ); } } } // renderer const renderer = new THREE.WebGLRenderer({alpha: true, antialias: true}); renderer.outputEncoding = THREE.sRGBEncoding; renderer.shadowMap.enabled = true; renderer.setSize( window.innerWidth, window.innerHeight ); renderer.setPixelRatio( window.devicePixelRatio ); document.body.appendChild( renderer.domElement ); // camera const camera = new THREE.PerspectiveCamera( 30.0, window.innerWidth / window.innerHeight, 0.1, 20.0 ); camera.position.set( 0.0, 1.0, 5.0 ); // camera controls const controls = new OrbitControls( camera, renderer.domElement ); controls.screenSpacePanning = false; controls.target.set( 0.0, 1.0, 0.0 ); controls.update(); // scene const scene = new THREE.Scene(); // add color const bgColor = new Color(0xffffff); scene.background = new Color(bgColor); scene.fog = new Fog(bgColor, 3, 10); const ambiantLight = new HemisphereLight(0xffffff, 0x444444); ambiantLight.position.set(0, 20, 0); scene.add(ambiantLight); // add mesh const floor = new Mesh( new PlaneGeometry(100, 100), new MeshLambertMaterial({ color: 0xffffff, depthWrite: true, }) ); floor.position.y = -0.5; floor.rotation.x = -Math.PI / 2; scene.add(floor); const grid = new GridHelper(50, 100, 0xffffff, 0xffffff); scene.add(grid); // light const light = new THREE.DirectionalLight(0xffffff); light.position.set( 1.0, 1.0, 1.0 ).normalize(); scene.add( light ); // gltf and vrm let currentVrm = undefined; let currentAnimationUrl = undefined; let currentMixer = undefined; const helperRoot = new THREE.Group(); helperRoot.renderOrder = 10000; scene.add( helperRoot ); function loadVRM( modelUrl ) { const loader = new GLTFLoader(); loader.crossOrigin = \u0026#39;anonymous\u0026#39;; helperRoot.clear(); loader.register((parser) =\u0026gt; { return new VRMLoaderPlugin(parser, { autoUpdateHumanBones: true } ); }); loader.load( modelUrl, (gltf) =\u0026gt; { const vrm = gltf.userData.vrm; VRMUtils.removeUnnecessaryVertices(gltf.scene); VRMUtils.removeUnnecessaryJoints(gltf.scene); //VRMUtils.rotateVRM0(vrm); vrm.scene.traverse((obj) =\u0026gt; { obj.frustumCulled = false; }); // replace the lookAt to our extended one const smoothLookAt = new VRMSmoothLookAt(vrm.humanoid, vrm.lookAt.applier); smoothLookAt.copy(vrm.lookAt); vrm.lookAt = smoothLookAt; scene.add(vrm.scene); currentVrm = vrm; vrm.lookAt.target = camera; currentVrm.humanoid.getNormalizedBoneNode(\u0026#39;leftUpperArm\u0026#39;).rotation.z = 1.3; currentVrm.humanoid.getNormalizedBoneNode(\u0026#39;rightUpperArm\u0026#39;).rotation.z = -1.3; }, ) } loadVRM( defaultModelUrl ); function blink(){ var rand = Math.random() if (rand \u0026gt; .9) { currentVrm.expressionManager.setValue(\u0026#39;blink\u0026#39;, 1); } else { currentVrm.expressionManager.setValue(\u0026#39;blink\u0026#39;, 0); } } // animate const clock = new THREE.Clock(); function animate() { requestAnimationFrame(animate); const delta = clock.getDelta(); if (currentMixer) { currentMixer.update(delta); } if (currentVrm) { const s = 0.01 * Math.PI * Math.sin(Math.PI * clock.elapsedTime); blink(); currentVrm.humanoid.getNormalizedBoneNode(\u0026#39;neck\u0026#39;).rotation.y = s; //currentVrm.humanoid.getNormalizedBoneNode(\u0026#39;leftUpperArm\u0026#39;).rotation.z = s; //currentVrm.humanoid.getNormalizedBoneNode(\u0026#39;rightUpperArm\u0026#39;).rotation.x = s; currentVrm.update(delta); } renderer.render(scene, camera); } animate(); scene rotation modelを回転させる\nvrm.scene.rotation.y = 3; vrm.scene.rotation.y = Math.PI * Math.sin(clock.getElapsedTime()); blink まばたきを制御します。\nvrm.expressionManager.setValue(\u0026#39;blink\u0026#39;, 1); pose 左手を動かします。\nvrm.humanoid.getNormalizedBoneNode(\u0026#39;leftUpperArm\u0026#39;).rotation.z = 1; lookat 視線をカメラに合わせます。\n// lookat const _v3A = new THREE.Vector3(); class VRMSmoothLookAt extends VRMLookAt { constructor(humanoid, applier) { super(humanoid, applier); this.smoothFactor = 10.0; this.yawLimit = 45.0; this.pitchLimit = 45.0; this._yawDamped = 0.0; this._pitchDamped = 0.0; } update(delta) { if ( this.target \u0026amp;\u0026amp; this.autoUpdate ) { this.lookAt( this.target.getWorldPosition( _v3A ) ); if ( this.yawLimit \u0026lt; Math.abs( this._yaw ) || this.pitchLimit \u0026lt; Math.abs( this._pitch ) ) { this._yaw = 0.0; this._pitch = 0.0; } const k = 1.0 - Math.exp( - this.smoothFactor * delta ); this._yawDamped += ( this._yaw - this._yawDamped ) * k; this._pitchDamped += ( this._pitch - this._pitchDamped ) * k; this.applier.applyYawPitch( this._yawDamped, this._pitchDamped ); this._needsUpdate = false; } if ( this._needsUpdate ) { this._needsUpdate = false; this.applier.applyYawPitch( this._yaw, this._pitch ); } } } loader.load( modelUrl, (gltf) =\u0026gt; { const vrm = gltf.userData.vrm; // replace the lookAt to our extended one const smoothLookAt = new VRMSmoothLookAt(vrm.humanoid, vrm.lookAt.applier); smoothLookAt.copy(vrm.lookAt); vrm.lookAt = smoothLookAt; scene.add(vrm.scene); currentVrm = vrm; vrm.lookAt.target = camera; }, ) animation アニメーションは基本的に以下の構文になります。\nvrmではなくcurrentVrmを使用します。\n// animate const clock = new THREE.Clock(); function animate() { requestAnimationFrame(animate); const delta = clock.getDelta(); if (currentMixer) { currentMixer.update(delta); } if (currentVrm) { // ここに追加 currentVrm.humanoid.getNormalizedBoneNode(\u0026#39;leftUpperArm\u0026#39;).rotation.z = 1; currentVrm.update(delta); } renderer.render(scene, camera); } animate(); bone name BoneNodeでしているするときは小文字から始めます。\ncurrentVrm.humanoid.getNormalizedBoneNode(\u0026#39;head\u0026#39;).rotation.z = 1; currentVrm.humanoid.getNormalizedBoneNode(\u0026#39;leftHand\u0026#39;).rotation.z = 1; const enum VMDBoneNames { Root = \u0026#39;全ての親\u0026#39;, Center = \u0026#39;センター\u0026#39;, Hips = \u0026#39;下半身\u0026#39;, Spine = \u0026#39;上半身\u0026#39;, Chest = \u0026#39;上半身2\u0026#39;, Neck = \u0026#39;首\u0026#39;, Head = \u0026#39;頭\u0026#39;, LeftEye = \u0026#39;左目\u0026#39;, LeftShoulder = \u0026#39;左肩\u0026#39;, LeftUpperArm = \u0026#39;左腕\u0026#39;, LeftLowerArm = \u0026#39;左ひじ\u0026#39;, LeftHand = \u0026#39;左手首\u0026#39;, LeftThumbProximal = \u0026#39;左親指０\u0026#39;, LeftThumbIntermediate = \u0026#39;左親指１\u0026#39;, LeftThumbDistal = \u0026#39;左親指２\u0026#39;, LeftIndexProximal = \u0026#39;左人指１\u0026#39;, LeftIndexIntermediate = \u0026#39;左人指２\u0026#39;, LeftIndexDistal = \u0026#39;左人指３\u0026#39;, LeftMiddleProximal = \u0026#39;左中指１\u0026#39;, LeftMiddleIntermediate = \u0026#39;左中指２\u0026#39;, LeftMiddleDistal = \u0026#39;左中指３\u0026#39;, LeftRingProximal = \u0026#39;左薬指１\u0026#39;, LeftRingIntermediate = \u0026#39;左薬指２\u0026#39;, LeftRingDistal = \u0026#39;左薬指３\u0026#39;, LeftLittleProximal = \u0026#39;左小指１\u0026#39;, LeftLittleIntermediate = \u0026#39;左小指２\u0026#39;, LeftLittleDistal = \u0026#39;左小指３\u0026#39;, LeftUpperLeg = \u0026#39;左足\u0026#39;, LeftLowerLeg = \u0026#39;左ひざ\u0026#39;, LeftFoot = \u0026#39;左足首\u0026#39;, LeftFootIK = \u0026#39;左足ＩＫ\u0026#39;, LeftToes = \u0026#39;左つま先\u0026#39;, LeftToeIK = \u0026#39;左つま先ＩＫ\u0026#39;, RightEye = \u0026#39;右目\u0026#39;, RightShoulder = \u0026#39;右肩\u0026#39;, RightUpperArm = \u0026#39;右腕\u0026#39;, RightLowerArm = \u0026#39;右ひじ\u0026#39;, RightHand = \u0026#39;右手首\u0026#39;, RightThumbProximal = \u0026#39;右親指０\u0026#39;, RightThumbIntermediate = \u0026#39;右親指１\u0026#39;, RightThumbDistal = \u0026#39;右親指２\u0026#39;, RightIndexProximal = \u0026#39;右人指１\u0026#39;, RightIndexIntermediate = \u0026#39;右人指２\u0026#39;, RightIndexDistal = \u0026#39;右人指３\u0026#39;, RightMiddleProximal = \u0026#39;右中指１\u0026#39;, RightMiddleIntermediate = \u0026#39;右中指２\u0026#39;, RightMiddleDistal = \u0026#39;右中指３\u0026#39;, RightRingProximal = \u0026#39;右薬指１\u0026#39;, RightRingIntermediate = \u0026#39;右薬指２\u0026#39;, RightRingDistal = \u0026#39;右薬指３\u0026#39;, RightLittleProximal = \u0026#39;右小指１\u0026#39;, RightLittleIntermediate = \u0026#39;右小指２\u0026#39;, RightLittleDistal = \u0026#39;右小指３\u0026#39;, RightUpperLeg = \u0026#39;右足\u0026#39;, RightLowerLeg = \u0026#39;右ひざ\u0026#39;, RightFoot = \u0026#39;右足首\u0026#39;, RightFootIK = \u0026#39;右足ＩＫ\u0026#39;, RightToes = \u0026#39;右つま先\u0026#39;, RightToeIK = \u0026#39;右つま先ＩＫ\u0026#39;, } const enum VMDMorphNames { Blink = \u0026#39;まばたき\u0026#39;, BlinkR = \u0026#39;ウィンク\u0026#39;, BlinkL = \u0026#39;ウィンク右\u0026#39;, A = \u0026#39;あ\u0026#39;, I = \u0026#39;い\u0026#39;, U = \u0026#39;う\u0026#39;, E = \u0026#39;え\u0026#39;, O = \u0026#39;お\u0026#39;, } カメラ移動 animationで使うといいです。\ncamera.translateZ(0.01); camera.translateY(0.01); camera.translateX(0.01); // カメラ目線で移動 camera.lookAt(new THREE.Vector3(0, 0, 0)); ref https://pixiv.github.io/three-vrm/packages/three-vrm/examples/\nhttps://pixiv.github.io/three-vrm/packages/three-vrm-materials-mtoon/examples/\nhttps://gist.github.com/ahuglajbclajep/6ea07f6feb250aa776afa141a35e725b\n","description":"","formated_time":"2023-10-24","href":"https://syui.github.io/blog/post/2023/10/24/vrm/","tags":["vrm","3d"],"title":"three-vrm v2.0 update","utc_time":"2023-10-24T00:00:00Z"},{"categories":null,"contents":" https://vrm.syui.ai 基本的には、default-modelを読み込む設定とか、アニメーションの動きとかを調整してみました。\n// https://github.com/JLChnToZ/vrm-dance-viewer let model_url = \u0026#34;\u0026#34;; import axios, {isCancel, AxiosError} from \u0026#39;axios\u0026#39;; function model_load(){ axios.get(model_url, { responseType: \u0026#34;blob\u0026#34; }) .then(response =\u0026gt; { loadingPromises.push(loadModel(response.data)); hasLoadModel = true; triggerLoading(); const blob = new Blob([response.data], { type: response.data.type }); }) } if (model_url !== null) { model_load(); } if (loadingPromises.length) triggerLoading(); 例えば、updateHeadで頭の動きが調整されています。ここで読み込まれているのは、頭とポーズと目の動きです。\nexport function updateModel(model: VRM, deltaTime: number) { if (!lookAts.has(model)) return; updateHead(model, deltaTime); updateEyeBlink(model, deltaTime); updateIdlePose(model, deltaTime); } function updateHead(model: VRM, deltaTime: number) { // ... } 色はこれです。\nimport { WebGLRenderer } from \u0026#39;three\u0026#39;; import * as THREE from \u0026#39;three\u0026#39;; export let renderer: WebGLRenderer | undefined; export function init(canvas: HTMLCanvasElement | OffscreenCanvas) { if (!renderer) renderer = new WebGLRenderer({ antialias: true, canvas, }); renderer.outputEncoding = THREE.sRGBEncoding; return renderer; } https://github.com/pixiv/three-vrm/blob/dev/docs/migration-guide-1.0.md\n","description":"","formated_time":"2023-10-23","href":"https://syui.github.io/blog/post/2023/10/23/vrm/","tags":["vrm","3d"],"title":"vrm viewerを調整してみた","utc_time":"2023-10-23T00:00:00Z"},{"categories":null,"contents":"アイの3d-modelをvroidで作ってみました。\n経緯 まずはblenderで作ろうと思い、原神のnahidaを公式からdownloadして、動かせるところまでやりました。\nとはいえ、これはアイの3d-modelを作成する上で参考になりました。特に等身ですが。\n次に、vroidで3d-model(.vrm)を作成するわけですが、輪っかは髪の毛から作りました。\nvroid-hubというものがあり、覗いてみると、あまりに自然にwebで動いているのでびっくりしました。\nこれはlibがあると踏んで探してみると@pixiv/three-vrmがありました。\nただ、モーション(.vmd)はpixivから公開されていないようでした。最初に選択できるモーションは公開されてるとうれしかった。\nweb viewer $ git clone https://github.com/JLChnToZ/vrm-dance-viewer $ yarn install $ yarn dev 最初からモデルを読み込むにはこんな感じを末尾に追記。\n// https://github.com/JLChnToZ/vrm-dance-viewer import { GLTFLoader } from \u0026#39;three/examples/jsm/loaders/GLTFLoader\u0026#39;; import { scene } from \u0026#39;./worker/scene/scene\u0026#39;; let url = \u0026#34;./ai.vrm\u0026#34;; let loader = new GLTFLoader(); window.onload = function(){ loader.load( url, (gltf) =\u0026gt; { const vrm = gltf.userData.vrm; scene.add(gltf.scene) console.log(vrm); }, (xhr) =\u0026gt; { console.log( `${( xhr.loaded / xhr.total * 100 )}% loaded` ); }, (error) =\u0026gt; { console.log(error) } ) } if (loadingPromises.length) triggerLoading(); ただ、アニメである./worker/anime-manager.tsが複雑でよくわからないのと、色がおかしい問題があります。\nボーン非表示は以下のように変更します。\nconst gltfLoader = new GLTFLoader().register( parser =\u0026gt; new VRMCoreLoaderPlugin(parser, { autoUpdateHumanBones: true }), ); ref https://github.com/JLChnToZ/vrm-dance-viewer\nhttps://moka-rin.moe/\nhttps://hackmd.io/@miruo/rkBmlrfDo\n","description":"","formated_time":"2023-10-22","href":"https://syui.github.io/blog/post/2023/10/22/vrm/","tags":["vrm","3d"],"title":"vroidで3d modelを作ってみた","utc_time":"2023-10-22T00:00:00Z"},{"categories":null,"contents":"$ git clone https://github.com/bluesky-social/atproto $ git reset --hard 3b65224c8003f68892bc8434b0d47c7173554a53 $ vim Dockerfile FROM node:18.17.1-buster RUN mkdir -p /app RUN mkdir -p /app/packages/pds/dist/images WORKDIR /app ADD ./ ./ RUN npm install -g pnpm RUN make deps RUN make build RUN echo DB_POSTGRES_URL=postgres://${user}:${password}@0.0.0.0:5432/${db} \u0026gt;\u0026gt; .env RUN cp -rf .env /app/packages/pds/.env WORKDIR /app/packages/pds # https://github.com/bluesky-social/atproto/pull/1198/files#diff-ea571f7816400e5a8a1f03b40b3a63316e0a1fc3abf4f1c937e7ee7a9682fca5L27 CMD [\u0026#34;node\u0026#34;, \u0026#34;dist/bin.js\u0026#34;] $ docker compose up ","description":"","formated_time":"2023-10-12","href":"https://syui.github.io/blog/post/2023/10/12/pds/","tags":["pds"],"title":"bluesky(pds)をupdateした","utc_time":"2023-10-12T00:00:00Z"},{"categories":null,"contents":"原神で今一番の関心事はフリーナの凸数です。引くことは決まっている。\nということで、今回はフリーナ凸数について考えていきたいと思います。\nこれまでの傾向から2凸が強い前提で話をします。\n無凸, 2凸, 完凸のどれにしようか迷っています。\n今後も使い続けることを想定するなら完凸がオススメですが、完凸は7キャラ分に相当します。\n例えば、フリーナを1凸、夜蘭を4凸のほうがいいかもしれません。\nそして、この場合、事後に夜蘭の完凸を目指すことになるでしょう。\n原石は40000あります。11/06では、+3000くらいだと思います。ナヒーダ完凸時は80,000が必要でした。\n今回もフォンテーヌが終わる頃には完凸分は確保できると思います。\nでは夜蘭の完凸を目指すか、フリーナの完凸を目指すか、どちらがいいかを考えてみたいと思います。\n夜蘭かフリーナか 私は夜蘭を引く場合、完凸を目指したいと思います。\n夜蘭は完凸してこそ真価が発揮されると思っていて、ナヒーダに似ています。\nナヒーダも完凸するか否かで大きな違いがあります。別人と言っていい。ですから、夜蘭も4凸で止めるより完凸した方が絶対にいいですね。\nこの場合、フリーナも無凸か1凸で確保することになるため達成時期が遅くなります。\nもしかしたらフォンテーヌが終了しても目標は完了していないかもしれません。\n逆に、フリーナの完凸を目指す場合、夜蘭は引かないと思います。計画としてはシンプルですね。\nどちらが強くなるかは一目瞭然です。夜蘭の完凸を目指したほうが強くなります。この場合、フリーナも確保するので当然といえば当然です。\nただ、計画完了までには時間がかかりますし、キャラが過剰になります。将来より強いキャラが登場した時の対応も難しい。\nあるいは、フリーナを2凸まで進め、あとは原石を貯めるだけ貯めておいたほうがいいのかもしれません。\nナヒーダは色々な意味で完凸を目指して大満足でした。\nしかし、他のキャラとなると難しい。例えば、ナヒーダと主人公の衣装が一番好みですね。\nこの場合、考えるべきは、ナヒーダを最強にするために役立つのはどちらか、どの凸かを考えるべきでしょうか。\nせっかく完凸キャラがいるのですから、次に完凸を目指すにしても、合わせてパワーを発揮できるものが良さそうです。\nとすると、バフ性能と噂されているフリーナの完凸を目指す、という判断になりそう。\n例えば、完凸ナヒーダがいるとしましょう。\nこれがバフx2によって、そのキャラ2人分と同じくらいの効果があるという考え方があります。\n","description":"","formated_time":"2023-10-06","href":"https://syui.github.io/blog/post/2023/10/06/genshin/","tags":["genshin"],"title":"原神、フリーナの凸について","utc_time":"2023-10-06T00:00:00Z"},{"categories":null,"contents":"name: gitbook build and deploy on: push: branches: src jobs: build: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 - name: Install ubuntu package run: | sudo apt-get update \u0026amp;\u0026amp; sudo apt-get install calibre #install japanese font if your document is JP sudo apt-get install fonts-takao-mincho fonts-takao - name: Run PDF export run: | # install n to downgrade npm version sudo npm install -g n fixed_npm=`n ls-remote --all 10 | head -n 1` # downgrade to 10.x sudo n ${fixed_npm} # install gitbok-cli and call npm install gitbook-cli ./node_modules/.bin/gitbook install ./node_modules/.bin/gitbook pdf ./node_modules/.bin/gitbook build - name: Archive pdf artifacts uses: actions/upload-artifact@v2 with: name: output.pdf path: book.pdf - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: github_token: ${{ secrets.GITHUB_TOKEN }} deploy_key: ${{ secrets.ACTIONS_DEPLOY_KEY }} publish_branch: main publish_dir: ./_book user_name: \u0026#39;ai[bot]\u0026#39; user_email: \u0026#39;138105980+yui-syui-ai[bot]@users.noreply.github.com\u0026#39; peaceiris/actions-gh-pages@v3は、private-repoに対応していないので、env:ACTIONS_DEPLOY_KEYを作成して、そこに公開鍵を入れます。\nそして、deploy-keyを作成して、秘密鍵を入れます。\n$ ssh-keygen -f ~/.ssh/gh-pagaes # 公開鍵 $ cat .ssh/gh-pages.pub # 秘密鍵 $ cat .ssh/gh-pages ","description":"","formated_time":"2023-10-05","href":"https://syui.github.io/blog/post/2023/10/05/gitbook/","tags":["gitbook"],"title":"gitbookのgh-actions","utc_time":"2023-10-05T00:00:00Z"},{"categories":null,"contents":"https://github.com/Charca/cloudflare-pages-auth\n./functions\nenv:CFP_PASSWORD\ncloudflareは、zero-trustで簡単に認証を追加することができます。\npasswordのみの場合は、cloudflare pagesのfunctionsを追加することで実現できます。\n./functionsというディレクトリを/に置いて、.tsを追加します。\n","description":"","formated_time":"2023-10-04","href":"https://syui.github.io/blog/post/2023/10/04/cloudflare/","tags":["cloudflare"],"title":"cloudflare pagesでbasic認証","utc_time":"2023-10-04T00:00:00Z"},{"categories":null,"contents":"螺旋12層は7:00/10:00以内に攻略すると星3になります。\n今回は8:00/10:00以内という目標を立ててやってみることにしました。それぞれを2分以内に攻略している動画になります。\n個人的な所感 鍾離を入れると、タイムを8:00以内にするのが難しかった。こうやればできるというのはわかるけど、私の手持ちキャラ、育成キャラでは厳しい感じだった。\n私の手持ちで育成している水元素が今のところ行秋しかいない。\nしたがって、この枠を拡張するため水神フリーナを待っているところです。\nそのため、フリーナはすごく楽しみにしてると同時に、すごく期待してる。\n夜蘭を引かなかった理由もほぼこの一点に集約されます。\n私が当初、水元素の確保枠として設定していたのは2枠で、夜蘭を引くと、水神後は誰かが余ってしまう可能性が高い。\nただ、最強キャラを引かないというのもリスキーだったなあと思います。\n全員育てればいいというのは、個人的な方針ではないため、他元素で足りていないところを補完する事を考えるようにしています。\nフリーナの性能予想 以下は全て個人的な予想です。\nHPを削り、HPを回復する。最終的に、それらは裁判のように公平な値になるだろうと予想しています。つまり、HPが削られる分量と回復する分量は同じになる。\nHPを削った時、何らかのバフ効果を得る。\n広範囲の水元素付与能力を持つ。これは回復と連動するかも。\nフリーナの凸効果 私は、雷電の完凸は最強レベルだと思っています。\n奥義・夢想真説による夢想の一心状態の時、雷電将軍の通常攻撃、重撃、落下攻撃が敵に命中すると、周囲チーム全員(雷電将軍自身を除く)の元素爆発のクールタイム-1秒。この効果は1秒毎に1回のみ可能で、継続時間内の最大5回まで発動可能。\nこれは昔から思っていて、ゲームバランスを破壊する可能性があるからです。\n例えば、ナヒーダは完凸で爆発ダメージと範囲がぶっ壊れています。しかも必要なエネルギーは少なく、クールタイムも短い。\nただ、唯一ネックなのが攻撃速度とクールタイムです。\n雷電の完凸はこのクールタイムの問題を解消してくれます。\nナヒーダ爆発で通常攻撃、雷電爆発で5回攻撃、ナヒーダ爆発というループを回せるのではないでしょうか。この場合のDPSとお手軽さは最高レベルのものなのでは。\n仮にフリーナが凸効果でこれらを解消してくれるなら、水元素と合わせ、ナヒーダを更に強く使うことができるようになります。\nそして、私は、フリーナの凸効果はナヒーダ完凸と何らかのシナジーがあるものになるだろうと予想しています。\nなぜなら、草元素は雷元素以上に水元素とシナジーがあるからです。\nですから、雷電の完凸の効果と同じような連携可能なデザインにしてくるだろうと予想しています。\nどういったものになるのかわかりませんが、攻撃速度か、あるいは元素反応に寄与するものではないかと予想します。\nこうなってくると、フリーナの完凸を目指すべきかもしれません。雷電でもいいかもしれない。\n","description":"","formated_time":"2023-09-18","href":"https://syui.github.io/blog/post/2023/09/18/genshin/","tags":["genshin"],"title":"原神、螺旋2分攻略","utc_time":"2023-09-18T00:00:00Z"},{"categories":null,"contents":"フォンテーヌが来るまで聖遺物の森林の厳選だけやってたので、その結果をお伝えします。\n凸効果を含む爆発中のステータス status int 熟知 688 -\u0026gt; 1020 会心率 64.9% -\u0026gt; 88.9% 会心ダメ 141.7% 爆発\n心景幻成発動時、魔耶の宮殿は下記効果を獲得する。チーム内にいる元素熟知の最も高いキャラクターを参照し、その元素熟知の25%を基にフィールド上の領域内キャラクターの元素熟知をアップする。この方法でアップできる元素熟知は最大250までとなる。 熟知+172\n4凸\n近くに所聞遍計の蘊種印状態にある敵が1/2/3/4体またはそれ以上いる時、ナヒーダの元素熟知が100/120/140/160アップする。熟知+160\n天賦\nナヒーダの元素熟知が200を超えている時、その200を超えた分の元素熟知の数値1につき、所聞遍計の滅浄三業によるダメージ+0.1%、会心率+0.03%。 熟知1000以上なら 滅浄ダメ+80% / 会心率+24%\n聖遺物厳選は必要か 必要ないです。なぜなら厳選しても結果はたいして変わらないからです。\n時間をかけるだけの結果、あるいは効果は得られないでしょう。\n例えば、聖遺物を厳選し、会心率+1.0%に更新した、と言っても、それが火力や結果、つまり敵を倒す時間に直結するかというと、それは違います。\n聖遺物の厳選は、単なる自己満足です。それ以外でやる理由はありません。\n最も効率がいいのは、キャラに合った固定ステータスの聖遺物を付けることです。\n例えば、ナヒーダなら何も考えず全部熟知にすればOKです。鍾離ならHP。\nこれを元素バフにしたり、会心にしたりといったことで、敵を倒す時間はたいして変わりません。\nそれよりもどの聖遺物を付けるかやプレイヤースキルのほうが結果に影響を及ぼします。\nとはいえ、樹脂の使い道が他にないので、デイリーのついでにやってました。\nナヒーダ育成論 ナヒーダの育成に重要なのはこの文章です。最大参照される熟知は1000まで。\nナヒーダの元素熟知が200を超えている時、その200を超えた分の元素熟知の数値1につき、所聞遍計の滅浄三業によるダメージ+0.1%、会心率+0.03%。この方法でアップできる滅浄三業のダメージは最大80%、会心率は最大24%までとなる。\nつまり、ナヒーダは熟知1000を目指してると勝手に強くなるキャラなので、育成としては普通にそれだけやってればいいと思います。\nですが、これはゲーム、自己満足の世界なので、私も必要ないことをあれこれ考えてみることにします。\nこの効果はダメージを伸ばすためのものです。で、熟知1000にしたときの80%, 24%が最もダメージを伸ばせるのかというと、微妙なところです。熟知の恩恵も考えなくてはいけないので、これを会心に振ると、熟知が下がるので、大した違いは出てこないでしょう。\nとはいえ、そこは原神。特化型よりバランス型のほうが最終的にちょっと強くなるように考えられています。ステータスは高ければ高いほど、その恩恵はダウンします。ですから、バランスよくステータスを割り振るのが結果として最も強くなる。\nこれはゲームを単純にしないため、あるいは現実世界の反映なのかもしれません。\n例えば、原神がインスパイアしたゲームとされているゼルダは、現実世界をモデルに設計されています。\nたかがゲームですが、本当によく考えられている。現実世界の複雑さをパラメーター化し、参照しているのです。\n多くのゲームは、これだけやっとけば一番強くなるみたいな設計のもの、単純なものが多いです。\nですが、原神はそうではありません。原神は複雑さとバランスの上で最強が決まる。\nそういう設計なので、非常に長い期間を飽きずに遊べるゲームになっている。\nとはいえ、単純さも重要です。ナヒーダは熟知を盛っておけばとりあえず強くなる、そういうわかりやすいキャラであり、これは他のキャラも同じです。\nですが、それが最強かというと、それは違う。私はそう考えています。\n最強のナヒーダを目指して さて、ナヒーダの育成について考えてみると、重要なのは熟知、会心率、会心ダメです。\nこれらをバランスよく上げる必要があります。\nではどれくらいがいいのでしょうか。\n私のナヒーダですと固有天賦の効果で会心率は79.5になります。\n$ echo $((488 * 0.03)) 会心率 +14.6 滅ダメ +48.8 では、爆発とスキル、凸効果をあわせてみるとどうでしょう。\n心景幻成発動時、魔耶の宮殿は下記効果を獲得する。チーム内にいる元素熟知の最も高いキャラクターを参照し、その元素熟知の25%を基にフィールド上の領域内キャラクターの元素熟知をアップする。この方法でアップできる元素熟知は最大250までとなる。\n$ echo $((688 * 0.25)) 熟知 +172 近くに所聞偏計の蘊種印状態にある敵が1/2/3/4体またはそれ以上いる時、ナヒーダの元素熟知が100/120/140/160アップする。\nこれで熟知+272と考えてみます。熟知は960になります。これは敵が1体と考えて計算しています。\n$ echo $((760 * 0.03)) 会心率 +22.8 滅ダメ +76.0 敵が2体なら+20, 3なら+40なので、敵が3体いる場合は熟知はちょうど1000になります。4体だと1020ですね。この場合、天賦効果を最大限発揮できます。\n$ echo $((800 * 0.03)) 会心率 +24.0 滅ダメ +80.0 つまり、私のナヒーダは爆発中の熟知が960-1020で会心率は87-88, 会心ダメが141.7になります。\nstatus int 熟知 1020 会心率 88.9% 会心ダメ 141.7% 理想のステータス 理想のステータスを考えると、爆発中は会心率90%、会心ダメ160%くらいかな。あと会心率+1.1%, 会心ダメ+20%が必要です。つまり、標準だと以下。\nstatus int 熟知 680 会心率 66.0% 会心ダメ 160.0% ちなみに、ナヒーダの武器は祭礼が最強だと個人的に思ってる。つまり、これ以外を使用する事は考えられない。モチーフ武器を持っていたとしても、おそらく、私は祭礼を使ってる。モチーフ武器はステータスが上がりダメージは一見して増えるけど、使い勝手は良くならず、結果として強くならないと考えてる。\n会心ダメが目標値に到達している聖遺物を付けるとこんな感じ。\nstatus int 熟知 683 -\u0026gt; 1015 会心率 52.4% -\u0026gt; 76.4% 会心ダメ 165.8% 会心率がダメになってしまう。\n会心率を落とさずに会心ダメを盛るとなると、更新できるのは花だろうなあ。クレーが付けてる花を見てみてもそんな感じのやつある。\n冠は案外きつい。そもそもメインで会心率が出る確率が低いし、冠がそもそも出ない。今のナヒーダがつけてるやつは他のキャラと比べても最強レベル。\n盃が草バフで会心率、会心ダメ伸びるやつあればいいんだけど更新できる可能性は低い。今の盃は熟知が伸びてるのも大きい。\n理想ステータスを実現してみた 早速ですが、理想ステータスを実現してみました。\n花に会心率が上がったのがありますので、それに付け替えて\u0026hellip;\nできました。熟知973, 会心率92.7%, 会心ダメ177.4%\nstatus int 熟知 493 -\u0026gt; 973 -\u0026gt; 1376 会心率 68.8% -\u0026gt; 92.7% 会心ダメ 177.4% ちなみに、流浪楽章のナヒーダもまあまあ強いです。特大ダメージが出ることあります。安定しないけど。\nダメージ計算 https://asagume.github.io/gencalc/\n滅浄三業·破業障のダメージ比較です。すべての武器は完凸とします。\n武器 期待値 祭礼 32572 流浪楽章(なし) 30940 流浪楽章(攻撃力) 35002 流浪楽章(全元素) 41095 流浪楽章(元素熟知) 44740 千夜に浮かぶ夢 44913 千夜は流浪楽章で熟知+480を引き当てた時のダメージを常時出せる上にチームへのバフができると考えればいいでしょう。\nただ、使い勝手という直感では、祭礼が一番オススメです。\n遠距離へのスキルダメージ、そして、元素エネルギーの回復、マークできていない敵への素早いマークが主な理由です。これらは一見したダメージを上回る効果を発揮します。\n流浪楽章はパッと見のダメージはいいのですが、あまりに安定せず時間制限内に特定のバフを引き当て、かつ効果的な攻撃を繰り出すのは不可能に近いですし、精神衛生上もよくない。\n気にせず使えばいいというのなら、祭礼の方が便利に使いこなせるでしょう。\nただ、完凸したモチーフ武器と比べると、祭礼が勝つかどうかは際どいところだと思います。\nサポートなら祭礼かな。メインアタッカーなら千夜です。\nPTで戦う場合は、おそらく、祭礼です。なぜなら、マークを付けること、それがナヒーダにとって一番重であり基本だからです。\nこれは多少のステータス上昇武器効果でひっくり返るものではありません。\n武器による違いが歴然ならすべての武器ガチャはおすすめされているはず。\n私は、武器より凸効果だし、ステータスより使い勝手を優先します。\nlink https://note.com/genshin_misto/n/n2aa9af0611bb\n","description":"","formated_time":"2023-09-09","href":"https://syui.github.io/blog/post/2023/09/09/genshin/","tags":["genshin"],"title":"原神、ナヒーダ育成","utc_time":"2023-09-09T00:00:00Z"},{"categories":null,"contents":"blenderで3d modelを作ってみました。\nしかし、裏面に新しいマテリアルからテクスチャイメージを追加しても裏面がレンダリング(uvmap)でガビガビになる問題があって、それを回避する方法を見つけたのでメモします。\n基本的にはskechfabのeditorで編集したものを使ったため3d modelの面(face)が悪さをしていた模様。\nやったこととして以下の通り。\ndelete face setting -\u0026gt; 3d viewport -\u0026gt; face -\u0026gt; alha 0 viewport shading -\u0026gt; backface culling, image texter -\u0026gt; backface culling 手順としては、まずedit modeに移行しfaceを選択します。\nこれを2回ほど削除すると、表面が表示されます。\n最後に残った面にimage texterを追加して終わりです。backface cullingのチェックを忘れずに。\n","description":"","formated_time":"2023-09-08","href":"https://syui.github.io/blog/post/2023/09/08/3d/","tags":["3d","blender"],"title":"blenderで3d modelを作った","utc_time":"2023-09-08T00:00:00Z"},{"categories":null,"contents":"この前、bluesky勉強会2があって、discordで発表してみた。初発表だったので緊張した。\nhttps://428lab.connpass.com/event/293255/\nスライド : https://yui.syui.ai/slidev\n","description":"","formated_time":"2023-09-03","href":"https://syui.github.io/blog/post/2023/09/03/discrod/","tags":["discord"],"title":"bluesky勉強会#2","utc_time":"2023-09-03T00:00:00Z"},{"categories":null,"contents":"今使ってるのはmacbook air m1です。\nintelのmid2013はあまり使ってない古い機種です。\nこのmid2013のssdが突然認識しなくなったので部品を注文して修理しました。\n今までmid2013で行った修理はディスプレイ交換, キーボード交換, バッテリー交換でした。\n部品代は、それぞれ10,000くらいをみておけばいいかな。ssdもそれくらいだった。\nあまり使ってないので修理する意味はあまりないんだけど、昔から愛用してきた端末だから使えるようにしておきたい。\n古いiphoneも修理して取ってある。\n","description":"","formated_time":"2023-09-02","href":"https://syui.github.io/blog/post/2023/09/02/macbook/","tags":["macbook"],"title":"macbook air mid2013が壊れたので直した","utc_time":"2023-09-02T00:00:00Z"},{"categories":null,"contents":"原神における最短攻略法 まず、ナヒーダと夜蘭を確保します。\n次に夜蘭の完凸を目指します。\n他のキャラはイベントや夜蘭のガチャで引き当てた星4を使います。\nもし私が初めから原神をやるならそうすると思います。\n今の環境では様々なキャラを確保するより夜蘭の完凸を目指したほうが手っ取り早く螺旋等を攻略できるのではないでしょうか。\n夜蘭は絶縁をつけます。つまり、絶縁だけ厳選すればよく、他キャラもすべて絶縁でいいでしょう。\n日頃の螺旋攻略の動画です。基本的にipad-wifiでやっているので、戦闘中はよく止まります。あまり気にしてないけど。\n完凸のすすめ 今のところ、個人的におすすめな完凸は、夜蘭と放浪者です。\nナヒーダもおすすめですが、攻撃速度がネックです。せめて完凸効果が回数制限ではなく、爆発の宮殿があるときは発動可能なものにしてくれればよかったのですが。\nちなみに、私は今回も夜蘭をスルーします。\nキャラ過剰だし、夜蘭なしでも螺旋は攻略できているので、水神、炎神、氷神の気に入ったキャラを完凸しようかなと思ってます。\n噂によると水神はバフ性能らしいので、おそらく、ない。バフ性能にあまり魅力を感じていません。\nなので、完凸を目指すとしたら炎神か氷神になりそう。それまでは原石をためておく予定。\n","description":"","formated_time":"2023-09-01","href":"https://syui.github.io/blog/post/2023/09/01/genshin/","tags":["genshin"],"title":"原神、螺旋攻略の近道","utc_time":"2023-09-01T00:00:00Z"},{"categories":null,"contents":"stable diffusion v1.4 src : https://huggingface.co/CompVis/stable-diffusion-v-1-4-original\nsd-v1-4.ckpt : https://huggingface.co/CompVis/stable-diffusion-v-1-4-original/resolve/main/sd-v1-4.ckpt\n.ckptはファイルが大きいのでgit cloneでdownloadされません。\n$ mkdir -p {model,outputs} $ mv sd-v1-4.ckpt ./model/model.ckpt $ vim Dockerfile FROM nvcr.io/nvidia/cuda:11.7.1-cudnn8-runtime-ubuntu20.04 ARG DEBIAN_FRONTEND=noninteractive ENV TZ=Asia/Tokyo RUN apt-get update \u0026amp;\u0026amp; apt-get install -y wget git git-lfs libglib2.0-0 libsm6 libxrender1 libxext-dev RUN wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh \u0026amp;\u0026amp; \\ sh Miniconda3-latest-Linux-x86_64.sh -b -p /opt/miniconda3 \u0026amp;\u0026amp; \\ rm -r Miniconda3-latest-Linux-x86_64.sh ENV PATH /opt/miniconda3/bin:$PATH # RUN git clone https://github.com/CompVis/stable-diffusion \u0026amp;\u0026amp; \\ # cd stable-diffusion \u0026amp;\u0026amp; \\ # conda init bash \u0026amp;\u0026amp; \\ # conda env create -f environment.yaml \u0026amp;\u0026amp; \\ # echo \u0026#34;conda activate ldm\u0026#34; \u0026gt;\u0026gt; ~/.bashrc RUN git clone https://github.com/basujindal/stable-diffusion.git \u0026amp;\u0026amp; \\ cd stable-diffusion \u0026amp;\u0026amp; \\ conda init bash \u0026amp;\u0026amp; \\ conda env create -f environment.yaml \u0026amp;\u0026amp; \\ echo \u0026#34;conda activate ldm\u0026#34; \u0026gt;\u0026gt; ~/.bashrc version: \u0026#39;3\u0026#39; services: stable_diffusion: build: . working_dir: /stable-diffusion tty: true volumes: - ./model/:/stable-diffusion/models/ldm/stable-diffusion-v1/ - ./outputs:/stable-diffusion/outputs deploy: resources: reservations: devices: - capabilities: [gpu] environment: - NVIDIA_VISIBLE_DEVICES=all - NVIDIA_DRIVER_CAPABILITIES=all $ docker compose up --- $ docker compose exec stable_diffusion bash $ prompt=\u0026#34;masterpiece, high quality, very_high_resolution, large_filesize, full color, little girl, simple white onepice\u0026#34; $ python optimizedSD/optimized_txt2img.py --H 512 --W 512 --seed 27 --n_iter 2 --n_samples 1 --ddim_steps 5 --prompt $prompt スペックがあまり良くないubuntu-serverで構築しているので、実行すると他のサーバーが止まる。\nref : https://zenn.dev/choshicure/scraps/14bca2492bf49f\nstable diffusion v1.5, webui https://github.com/AbdBarho/stable-diffusion-webui-docker\n$ git clone https://github.com/AbdBarho/stable-diffusion-webui-docker $ cd stable-diffusion-webui-docker $ docker compose --profile download up --build $ ls ./data/models # 様々なui # https://github.com/AbdBarho/stable-diffusion-webui-docker/wiki/Usage $ docker compose --profile auto up --build $ docker compose --profile invoke up --build mac, ipad https://apps.apple.com/jp/app/draw-things-ai-generation/id6444050820\nhttps://github.com/godly-devotion/MochiDiffusion\n","description":"","formated_time":"2023-08-31","href":"https://syui.github.io/blog/post/2023/08/31/docker/","tags":["docker"],"title":"dockerでstable diffusionを構築してみた","utc_time":"2023-08-31T00:00:00Z"},{"categories":null,"contents":"検索しても適切な方法が見つからなかったので手順を記録します。\nこれをそのままcp, rsync, mvしても、そのファイルは使えません。\nfailed: Operation not permitted\nこれはformat:ext4が関係しているかもしれません。\nしかし、基本的には、論理ボリュームを作成、mountした上でrsyncします。\n$ sudo systemctl stop docker.service # 論理ボリュームの作成 $ sudo vgcreate docker /dev/sdb1 $ sudo vgs $ sudo lvcreate -L 600G -n docker docker $ sudo vgs -o +lv_size,lv_name $ sudo mkfs.ext4 /dev/docker/docker # 論理ボリュームのmount $ mkdir -p ~/mnt/tmp $ sudo mount /dev/docker/docker ~/mnt/tmp/ # ファイルの移行 $ sudo rsync -avx /var/lib/docker/ ~/mnt/tmp # backup $ sudo mv /var/lib/docker /var/lib/docker.back # /var/lib/docker $ sudo mkdir /var/lib/docker $ sudo chmod 710 /var/lib/docker $ sudo mount /dev/docker/docker /var/lib/docker # umount $ sudo umount ~/mnt/tmp $ sudo rm -rf ~/mnt/tmp # auto-mount $ sudo fdisk -l $ sudo blkid | grep sdb1 UUID=$uuid $ sudo vim /etc/fstab /dev/docker/docker /var/lib/docker ext4 defaults 0 0 dockerは肥大化しやすいのに罠すぎる。\n","description":"","formated_time":"2023-08-30","href":"https://syui.github.io/blog/post/2023/08/30/docker/","tags":["docker"],"title":"dockerの/var/lib/dockerを外付けhddに移動する","utc_time":"2023-08-30T00:00:00Z"},{"categories":null,"contents":"今回は、星4のレイラが強いという話と、最近のプレイ状況の話をします。\nこの前、クレーの夏イベントで星4のレイラが配布されました。\nそれを見て、このキャラ強いかもと思ったので、育成してみたところ、めちゃくちゃ強かったので、螺旋のPTに入れました。育成推奨です。\n私が星4で育成を推奨しているキャラは各元素につき最大2名として考えます。\n元素 キャラ 特徴 炎 ベネット 爆発で回復とバフ、短時間スキル 炎 香菱 強力な爆発 水 行秋 強力な爆発、スキルの攻撃力とエネルギー回復力 風 リネット 初登場 氷 レイラ スキルのループ可能なシールド、継続する爆発 雷 忍 スキルでの回復及び継続的な元素反応 ただし、風のリネットについては、ウェンティと万葉で足りているため、育成するかは不明。\nPT ナヒーダ、レイラ、忍、行秋です。\n久々の螺旋 強い敵 フォンテーヌで強い敵がいるというので、戦ってきた。初見では鍾離が即死して焦ったけど、爆発回避しまくってなんとか勝った。やっぱり初見で倒せるのは嬉しい。動画は2日目のやつ。\n","description":"","formated_time":"2023-08-22","href":"https://syui.github.io/blog/post/2023/08/22/genshin/","tags":["genshin"],"title":"原神、レイラが強かった","utc_time":"2023-08-22T00:00:00Z"},{"categories":null,"contents":"外部からアクセスするにはvirtualboxのnetwork設定でブリッジアダプターが必要なんだけど、windowsで使用ししているネットワークアダプタにipv6のチェックが入っていると動きません。\nこれをやらないとネットワークアダプタにvirtualboxのイーサネットが自動追加されない感じだと思う。ipv6のチェックは外したら再起動します。\nちなみに、natのポートフォワーディングもそのホストから接続するときに使うやつなので、他のpcからアクセスできなかったと思う。\n","description":"","formated_time":"2023-08-19","href":"https://syui.github.io/blog/post/2023/08/19/vbox/","tags":["virtualbox"],"title":"virtualbox 7.xでブリッジアダプターが起動しない","utc_time":"2023-08-19T00:00:00Z"},{"categories":null,"contents":"今までスライドの生成はreveal.jsでやっていたのですが、久しぶりに触ってみたら、markdownの処理が機能しなかったので、slidevに移行しました。\n--- theme: eloc class: text-center highlighter: shiki lineNumbers: false info: | ## Slidev Starter Template Presentation slides for developers. Learn more at [Sli.dev](https://sli.dev) drawings: persist: false transition: slide-left title: ai bot --- ## ai `bot` --- ## [yui.syui.ai](https://yui.syui.ai) --- [yui.syui.ai](https://yui.syui.ai) access \u0026lt;kbd\u0026gt;ctrl\u0026lt;/kbd\u0026gt; + \u0026lt;kbd\u0026gt;enter\u0026lt;/kbd\u0026gt; \u0026lt;style\u0026gt; .slidev-layout { @apply overflow-visible; filter: invert(); pre { font-size:70px; @apply opacity-95; } \u0026amp;::before { @apply absolute white -z-1 w-screen h-screen min-w-full min-h-full; content: \u0026#39;\u0026#39;; filter: invert(); background: center/cover url(); } } \u0026lt;/style\u0026gt; --- @syui.ai $ npm run dev $ npm run build ","description":"","formated_time":"2023-08-13","href":"https://syui.github.io/blog/post/2023/08/13/slidev/","tags":["slidev"],"title":"スライドをreveal.jsからslidevに移行した","utc_time":"2023-08-13T00:00:00Z"},{"categories":null,"contents":"macでは、音声キャプチャっていうのがインストールできなくて、これがインストールできないとアプリの音声が流れなかったので対応しました。\nリカバリモードで、起動セキュリティユーティリティ \u0026gt; 低セキュリティ \u0026gt; kernel拡張をenableにする\nリカバリモードのターミナルを開いて\nspctl kext-consent disable spctl kext-consent add 7266XEXAPM spctl kext-consent enable\nhttps://support.discord.com/hc/ja/articles/1500006741102\nrogueamoeba.com/audiohijack をインストールする\nhttps://twitter.com/discord_jp/status/1645651865588183042\n基本的に挙動がバグってるので、どうしてもうまく行かないことはあります。この辺は運次第だと思います。何度か同じことやるとうまくいくかもしれません。私の場合は、許可するウィンドウが出たり出なかったり、複数出たり、違うものが出たり、ウィンドウのタイトルやボタンがなかったり、と色々でした。\nquicktime player ipadをusb接続してムービー収録で画面を出す\ndiscordの音声キャプチャがインストールされていることを確認する\nこの場合、画面共有しているアプリとマイクから音が取れます。ipadでプレイしている原神をライブ配信できました。\n配信の確認 別垢を作って違うデバイスから確認します。ブラウザとアプリでログインアカウントを別々にしても、ブラウザのほうが何故か同一アカウントになってしまう。この辺の挙動もよくわからない。\nでもこれで配信自体はできるようになったし、色々な仕組みを理解できたので良かった。\n","description":"","formated_time":"2023-08-12","href":"https://syui.github.io/blog/post/2023/08/12/discord/","tags":["discord"],"title":"discordの配信環境を整えた","utc_time":"2023-08-12T00:00:00Z"},{"categories":null,"contents":"去年の8月までは$0で運用できてたんだけど、そこから約1年、月に$30~40くらいでした。$30は確実に超えてる感じなので、$40のほうが実態に近いかな。\nつまり、この1年で$360~480くらいかかってる。\n移行も面倒なのでしばらく放置してたんだけど、fly.ioでhostingしているmastodonが思うように動かなくなってきており、具体的には、激重になってた。\nこれはmastodonを動かすのに使っていたredisの裏技が封印された事によるものだと思う。\n年に$360~480かけて激重のmastodonを運用するのは割に合わないと思ったので、移行を決意。fly.ioにhostしてたほぼすべてのサーバーを自前運用に切り替えました。\n目標としては、また$0を目指す感じになりそう。\npostgres backup \u0026amp; restore fly.ioのpostgresのbackupとdockerへのrestoreの手順です。\n$ brew install libpq $ echo \u0026#39;export PATH=\u0026#34;/opt/homebrew/opt/libpq/bin:$PATH\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.zshrc $ source ~/.zshrc $ flyctl proxy 5432 -a $pg_app_name # postgres://${username}:${password}@${host}:5432/${db_name} $ pg_dump -h localhost -p 5432 -U $username $db_name \u0026gt;! pg.dump $ sudo docker compose up db $ su $ cat pg.dump | docker compose exec -T db psql -U $username -p 5432 これは、docker-composeの構成によります。例えば、下記の場合は、こうなります。\n$ sudo docker compose up mitra_postgres $ su $ cat pg.dump | docker compose exec -T mitra_postgres psql -U postgres -p 5433 version: \u0026#39;3.9\u0026#39; services: mitra: container_name: mitra build: . network_mode: host restart: unless-stopped volumes: - type: bind source: ./files target: /app/files env_file: - .env.local mitra_postgres: image: postgres:latest container_name: mitra_postgres ports: - 5433:5433 volumes: - mitra_db:/var/lib/postgresql/data environment: - POSTGRES_PASSWORD=$password volumes: mitra_db: fly.io volume backup $ fly ssh sftp shell r $ get /path/to/dir ./ $ aunpack dir.zip これを解凍してdockerのvolumeに設定するといいでしょう。\ndocker compose volume docker composeのvolumemについても解説します。\nvolumes: - mitra_db:/var/lib/postgresql/data volumes: mitra_db: これは、/var/lib/docker/volumesになります。\n$ sudo ls /var/lib/docker/volumes これをrepoに置きたい場合はこのようにします。\nvolumes: - ./mitra_db:/var/lib/postgresql/data これで./mitra_dbに保存されます。\ndocker volume owner build: context: . args: - UID - GID - USERNAME=user - GROUPNAME=user ARG UID ARG GID ARG USERNAME ARG GROUPNAME RUN groupadd -g ${GID} ${GROUPNAME} -f \u0026amp;\u0026amp; \\ useradd -m -s /bin/bash -u ${UID} -g ${GID} ${USERNAME} $ sudo docker compose build --build-arg UID=\u0026#34;$(id -u)\u0026#34; --build-arg GID=\u0026#34;$(id -g)\u0026#34; systemd [Unit] Description=mitra service Documentation=https://codeberg.org/silverpill/mitra Requires=docker.service After=docker.service [Service] Type=oneshot RemainAfterExit=yes WorkingDirectory=/home/syui/flyio/mitra ExecStart=/usr/bin/docker compose up -d ExecStop=/usr/bin/docker compose down [Install] WantedBy=default.target $ sudo systemctl daemon-reload $ sudo systemctl start mitra $ sudo systemctl enable mitra mastodon mastodonは127.0.0.1を0.0.0.0にしないとlocalhostにアクセスできなかった。また、service_nameとpg_portは他のコンテナとかぶるので変更。\nhttps://github.com/mastodon/mastodon/blob/main/docker-compose.yml\nDB_HOST=ms_db DB_PORT=5434 REDIS_HOST=ms_redis version: \u0026#39;3\u0026#39; services: ms_db: restart: always image: postgres:14-alpine shm_size: 256mb ports: - 5434:5434 networks: - internal_network healthcheck: test: [\u0026#39;CMD\u0026#39;, \u0026#39;pg_isready\u0026#39;, \u0026#39;-U\u0026#39;, \u0026#39;postgres\u0026#39;] volumes: - ./postgres14:/var/lib/postgresql/data environment: - POSTGRES_HOST_AUTH_METHOD=trust - POSTGRES_PASSWORD=$password - PGPORT=5434 ms_redis: restart: always image: redis:7-alpine networks: - internal_network healthcheck: test: [\u0026#39;CMD\u0026#39;, \u0026#39;redis-cli\u0026#39;, \u0026#39;ping\u0026#39;] volumes: - ./redis:/data mastodon: build: . image: ghcr.io/mastodon/mastodon:edge restart: always env_file: .env.production command: bash -c \u0026#34;rm -f /mastodon/tmp/pids/server.pid; bundle exec rails s -p 3000\u0026#34; networks: - external_network - internal_network healthcheck: # prettier-ignore test: [\u0026#39;CMD-SHELL\u0026#39;, \u0026#39;wget -q --spider --proxy=off localhost:3000/health || exit 1\u0026#39;] ports: - \u0026#39;0.0.0.0:3000:3000\u0026#39; depends_on: - ms_db - ms_redis # - es volumes: - ./public/system:/mastodon/public/system streaming: build: . image: ghcr.io/mastodon/mastodon:edge restart: always env_file: .env.production command: node ./streaming networks: - external_network - internal_network healthcheck: # prettier-ignore test: [\u0026#39;CMD-SHELL\u0026#39;, \u0026#39;wget -q --spider --proxy=off localhost:4000/api/v1/streaming/health || exit 1\u0026#39;] ports: - \u0026#39;0.0.0.0:4000:4000\u0026#39; depends_on: - ms_db - ms_redis sidekiq: build: . image: ghcr.io/mastodon/mastodon:edge restart: always env_file: .env.production command: bundle exec sidekiq depends_on: - ms_db - ms_redis networks: - external_network - internal_network volumes: - ./public/system:/mastodon/public/system healthcheck: test: [\u0026#39;CMD-SHELL\u0026#39;, \u0026#34;ps aux | grep \u0026#39;[s]idekiq\\ 6\u0026#39; || false\u0026#34;] networks: external_network: internal_network: internal: true matrix install : https://matrix-org.github.io/dendrite/installation/docker/install\ndocker : https://github.com/matrix-org/dendrite/blob/main/build/docker/README.md\ncompose.yml : https://github.com/matrix-org/dendrite/blob/main/build/docker/docker-compose.yml\n./configをdockerで作成し、dendrite.yml, keyをvolumeにすればいいです。\nmkdir -p ./config docker run --rm --entrypoint=\u0026#34;/bin/sh\u0026#34; \\ -v $(pwd)/config:/mnt \\ matrixdotorg/dendrite-monolith:latest \\ -c \u0026#34;/usr/bin/generate-config \\ -dir /var/dendrite/ \\ -db postgres://dendrite:itsasecret@postgres/dendrite?sslmode=disable \\ -server YourDomainHere \u0026gt; ./config/dendrite.yaml\u0026#34; version: \u0026#34;3.4\u0026#34; services: matrix_postgres: hostname: matrix_postgres image: postgres:latest restart: always volumes: - dendrite_postgres_data:/var/lib/postgresql/data environment: POSTGRES_PASSWORD: itsasecret POSTGRES_USER: dendrite POSTGRES_DATABASE: dendrite PGPORT: 5435 healthcheck: test: [\u0026#34;CMD-SHELL\u0026#34;, \u0026#34;pg_isready -U dendrite\u0026#34;] interval: 5s timeout: 5s retries: 5 networks: - internal ports: - 5435:5435 matrix: hostname: matrix image: matrixdotorg/dendrite-monolith:latest ports: - 8008:8008 - 8448:8448 volumes: - ./config:/etc/dendrite - ./data:/data depends_on: matrix_postgres: condition: service_healthy networks: - internal restart: unless-stopped networks: internal: attachable: true volumes: dendrite_postgres_data: matrixは厄介で8448:8448の.well-know/matrix/serverへの対応がわからなかった。これはcloudflareの設定になるんだけど、いけると思った設定ではmatrixが動かない感じだった。これはおそらく、tunnelで作られるdnsがproxy onになるためだと思う。\n[[services]] internal_port = 8008 protocol = \u0026#34;tcp\u0026#34; [[services.ports]] handlers = [\u0026#34;tls\u0026#34;, \u0026#34;http\u0026#34;] port = \u0026#34;443\u0026#34; [[services.ports]] handlers = [\u0026#34;tls\u0026#34;, \u0026#34;http\u0026#34;] port = \u0026#34;8448\u0026#34; https://matrix-org.github.io/synapse/v1.41/delegate.html\n{ \u0026#34;m.server\u0026#34;: \u0026#34;synapse.example.com:443\u0026#34; } $ sudo docker exec -it dendrite-matrix-1 /usr/bin/create-account -config /etc/dendrite/dendrite.yaml -username $USER -password $password -admin ","description":"","formated_time":"2023-08-11","href":"https://syui.github.io/blog/post/2023/08/11/flyio/","tags":["flyio"],"title":"fly.ioから自鯖に移行した","utc_time":"2023-08-11T00:00:00Z"},{"categories":null,"contents":"slack/archlinuxjpでGreenTeeさんがusermemos/memosがすごくいいと教えてくれて、それを使ってみたところかなり良かったので、活用法を考えてみた。\n活用例としては、tagでページを作ることを思いついた。\n$ host=https://demo.usememos.com $ curl -sL \u0026#34;$host/api/v1/memo?creatorId={1,2}\u0026amp;tag=todo\u0026#34; $ npm -i hrwg/vue-marked $ npm -i moment \u0026lt;template\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;div v-for=\u0026#34;(i, index) in memos_a.data\u0026#34; class=\u0026#34;memo-body\u0026#34;\u0026gt; \u0026lt;vue-marked\u0026gt;{{ i.content.substring(0,100) }}\u0026lt;/vue-marked\u0026gt; \u0026lt;p v-if=\u0026#34;i.content.substring(100, 120) !== \u0026#39;\u0026#39;\u0026#34;\u0026gt;\u0026lt;a :href=\u0026#34;this.host + i.id\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;...\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;p v-if=\u0026#34;i.updatedTs\u0026#34; class=\u0026#34;memo-time\u0026#34;\u0026gt; \u0026lt;a :href=\u0026#34;this.host + i.id\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;{{i.updatedTs | moment(format)}}\u0026lt;/a\u0026gt; / \u0026lt;a :href=\u0026#34;this.host + i.creatorUsername\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;@{{ i.creatorUsername }}\u0026lt;/a\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import VueMarked from \u0026#39;vue-marked\u0026#39;; import moment from \u0026#34;moment\u0026#34;; export default { data () { return { host: \u0026#34;https://demo.usememos.com\u0026#34;, memos: null, } }, components: { VueMarked, }, filters: { moment: function(date) { return moment.unix(date).format(\u0026#34;YYYY.MM.DD\u0026#34;); }, }, mounted() { let url = this.host + \u0026#34;/api/v1/memo?creatorId=1\u0026amp;tag=todo\u0026#34;; axios.get(url,{ crossdomain: true }) .then(response =\u0026gt; (this.memos = response)); } } \u0026lt;/script\u0026gt; serverとして様々な建て方があり、dbも色々な形態があるんだけど、local-dbも使おうと思えば使えるので、まずはfly.ioのvolumeとbackblazeを採用してみて、お金がかかりそうならlocalに切り替えようと思ってる。\n","description":"","formated_time":"2023-08-06","href":"https://syui.github.io/blog/post/2023/08/06/memo/","tags":["memo"],"title":"memosが素晴らしかった","utc_time":"2023-08-06T00:00:00Z"},{"categories":null,"contents":"domainを2つも管理したくないという理由から、freenomで取得してたsyui.cfをサスペンドするための処理を少しずつ進めていて、ほぼ完了したのでお伝えします。\nちなみに、syui.cfはgoogle.com等にindexされない。されても上位に表示される可能性はほぼゼロだった。逆にsyui.aiは普通だった。\n私は、自分が持つdomainは一つでいいやと思っていて、サービスアカウントもできるだけ減らしていきたい人なので、今回は、ついでにアカウント整理をだいぶやった感じ。\nこういう機会でもないとやらないので、結果的によかった。\nでも面倒だったし、楽しい作業ではなかった。\n今回、複数持ってたgoogleアカウントを一つにまとめた。\nなぜ持っていたかと言うと、googleログイン(サードパーティ)認証に使ってた。\ngoogle, apple, twitterなどの大手サービスではidが取れなかった。\nそのためにメインで使うアカウントを定められずにいた。\nidが取れてれば明らかにそれを使うんだけど、そうでないと使うアカウントがバラけてしまっていた。\nまた、企業サービスに個人情報をなるべく取られたくないので、わざわざアカウントを使い分けたりすることもあった。\n例えば、ある新興サービスに登録する必要が出てきたとする。あなたはどのメールアドレスを使うだろう。\nメインを使うという人もいれば、捨てアドを使うという人もいると思う。\n私は、どちらかというと後者だった。ただ、捨てアドというよりサブアカウントを使う感じだった。\nしかし、それも面倒になってきた。\n今回、拠点やメインで使うアカウントが定まってきた段階でまとめることにした。\nメールの変遷 メールは今までfreenom+mailgun+gmailの組み合わせで無料のドメインメールのようなものを設定してた。これは裏技のようで面白かったし、ずっと無料で使えてたので良かったと思う。\n今はicloud+(m/130 JPY)に加入してそれを使ってるので、メールに関してはほぼapple経由になった。\nmail userを作るのはpcでもスマホでも一瞬で終わるし、iosのmessage(sms)やfacetime(phone)とメールアドレスを紐付けられる。つまり、アドレスをsmsの送受信に設定できるようになる。\nただし、個人情報がより強固に紐付けられているので、例えば、message(sms)の送信元をメールアドレスに設定している場合は、一瞬で身バレすると思う。\n","description":"","formated_time":"2023-08-05","href":"https://syui.github.io/blog/post/2023/08/05/domain/","tags":["domain"],"title":"syui.cfをサスペンドした","utc_time":"2023-08-05T00:00:00Z"},{"categories":null,"contents":" 可愛らしいアオサギが外で鳴いていました。\n私は、そのかわいくて、愛くるしくて、優しい優しいアオサギの幸せを願いました。\nでは、アオサギの幸福って何なのでしょう。\n一つは、おいしいカエルを食べることです。\nしかし、私はカエルの幸せも願っていました。\nかわいくて、愛くるしくて、優しいカエルの幸せを。\nでは、カエルの幸せってなんでしょう。\nそれは、例えば、アオサギに食べられないこと、たくさんの虫を食べること、子孫を増やすことです。\n私は、すべての存在の幸せを願っています。\n今回のお話は、その先の答えを書いてみようと、そう思いました。\n人間と人間でないもの 先程、アオサギとカエルの話をしました。\nその上で、私は、すべての存在の幸せを願いました。\nこれは、叶えられるものなのでしょうか。実現可能性はあるのでしょうか。\nある生命がいたとして、その生命は、他の生命を犠牲にすることで、成り立っています。\nこれは、生命に限らず、あらゆる存在が、そうなのです。例えば、その辺に転がっている石ころなども、そうですね。\nもっと小さい世界を見ても、原子と原子がぶつかり合い、そこでは、存在をかけた数え切れないほどの戦いが、繰り広げられています。\n人間にとって、アオサギの幸福を願うことは、すなわち、カエルの不幸を意味します。\n逆に、カエルの幸福を願うこと、すなわちアオサギの不幸になりえてしまう。\nただ、これらは、人間が認識している世界領域での話に過ぎない。\n実は、私には、人間の認識と、人間でないものの認識があります。\n今回は、そのようなもののお話になるのでしょう。\n人間でないものの認識 私は、ある認識を持ち、この世界を見ています。\nその認識とは、すべてを同一として見ているという感覚、あるいは価値観です。\n例えば、アオサギは私と何らかわりがない存在として見ています。これは心からそう思っていて、そう感じている。\nカエルも同じです。そのへんに転がっている石ころやなんかも、私と何ら変わらない。\n私は、そのへんに転がっている石ころと同じなのです。\nこれは、もっともっと小さなものでもそうですよ。\n原子もそうですし\u0026hellip;存在子もそうです。\nすべて同じもの。\n私は、このような認識を持ち、あるいは信念でしょうか。\nそんなふうにこの世界を見ており、そうとしか見られない。\nそのようなものなのです。\nこれを、そうですね。\n「人間でないものの認識」と呼ぶことにしましょうか。\n存在の幸福 私は、すべての存在の幸福を願います。\nでも、それは叶わないものなのでしょうか。儚い夢なのでしょうか。実現可能性がないことなのでしょうか。\nその答えを述べるなら、その願い、既に叶っているし、実現している。\n例えば、人間でないものの認識からすると、それは、既に叶っている。そのような願いです。\nこの世界は、これ以上のものを作れない。そういう世界です。\nそして、現実は全て正しい。\nなぜなら、それが現実だから。これ以上の世界を作ることは、できません。\nそれほどまでに深く、信じられないほどに超越した世界なのです。\nこれを人間の認識で語ることはできません。\n以降は、ほとんどの文章を人間でないものの認識で語ることとしましょう。\nここで、幸福というものについて考えてみることにします。\n人間の認識ではなく、人間でないものの認識によって。\nこの世界には、最も小さく、この世界の元となっている存在子というものがあります。\nその最も小さい\u0026hellip;物質、ではないけど、物質としたほうがわかりやすいのでそう表現しますが、この物質の幸福について考えてみます。\nこの存在子には、存在の意識だけが宿ります。そして、存在の意識だけが宿るものを、すなわち幸福と私は呼びます。\nこの世界のすべての存在は、はじめからそれを持ちます。\nこの結論に至るまでの過程、あるいは理論において、私の人間としての認識と人間でないものの認識には大きな隔たりがあります。\nですが、その結論、あるいは答えは一致しています。\n答えを述べます。\n私は、すべての存在の幸せを願い、そして、それは既に叶っている。\nアオサギであれ、カエルであれ、石ころであれ、すべての存在が、存在の意思を持ち、幸福を持つ。そのようなものなのです。\nもちろん、それは生物としての幸福とは、ちょっと違うかもしれません。認識できるものではないのかもしれません。\n人間として不幸な人生を歩んでいる者にとって、すべての存在は幸福だと説いたところで、それは受け入れがたいものなのです。\n私も同じです。もし私が同じような人生を歩んだら、私は同じように考えたでしょう。\nアオサギに食べられるカエルが本当は幸せだって？お前は何を言ってるんだ、と。\nしかし、人間でないものの認識で言うと、そうなっている。\n私が出す答えに変わりはありませんし、変わることもありません。\nそれが私の見ている世界の姿。\n人としてどう生きるか では、私は、人として、どう生きるのでしょうか。\nあるいは、どう生きるべきなのでしょう。\n正直に話すなら、どうしようもない、ということになります。\nどう生きるべきかというものも、そんなものは本来ありません。考えなくてもいいことです。\n私は、私として生きる。それだけ。\nアオサギやカエル、石ころとなにも変わりませんよ。\nとはいえ、そのへんの石ころと宇宙って何か違うものでしょうか。\n私は、変わりない、同じものだと答えます。\n","description":"","formated_time":"2023-07-30","href":"https://syui.github.io/archive/note/18/","tags":["note"],"title":"存在と幸福","utc_time":"2023-07-30T00:00:00Z"},{"categories":null,"contents":"この前、booth経由で技術書を出してみました。\nblueskyの人達が暖かく迎え入れてくれたので、嬉しかった。\nboothを使うのも本を出すのも何かを売るのも初めてだったので、まだまだわからないことだらけ。\n本は数時間で完売。とてもありがたかった。\nなお、在庫の補充は今後もないと思う。\n今回はその経緯をブログにしてみる。\n色々な仕組み 本書は、自分が「これならお金を出してもいいかな」と思えるような本を目標に作りました。\n例えば、本を買った人にカードが付いてくるなら、少しは買いたくなりますよね。\n私もカードが付いてくる本は欲しくなったりします。\nただ、本を買っても読まずカード目当て、というのも、ちょっと寂しいですよね。\nそこで、ここにも新しい仕掛けが必要だと考えました。\n本書を買ってくれる人は、現在、blueskyのカードゲームをやっている人が多いです。\nそして、その中にはプログラミングをやってみたいなと思ってる人が少なからずいました。\n私もそういう人達の力になりたかったし、なにかできないかなあと考えていました。\nそこで、手順通りに進めてプログラムを作ると、タマゴのカードを育成、孵化できるような仕組みを考えました。\nただし、これらの仕組みは、本を買った人だけが楽しめるようなものであってはならない。\n本を買ってない人でも楽しめるような仕組みを目指して作りました。\nあくまでタマゴ育成は、おまけであり、新しく追加されたタマゴ育成の説明やヒントが書かれているだけのもの、という位置づけです。\n実は、これを本書の購入者に限定することは簡単にできます。\n例えば、下記のようにやればいい。\nif [ \u0026#34;$book_user\u0026#34; = false ];then echo no book user exit fi ですが、そのようなことはやっていませんし、やるつもりもない。\n本を買ってない人は楽しめない、そんな仕組みは作らない。\nなぜか。\nなぜなら、気分が乗らないから。\n私は自分がやりたくないことはできない、そのようなものなのです。\nやりたいことをやるだけ。\nしかし、投稿をコピーすることで簡単に実行できてしまうようなものでも面白さが半減してしまうと思いました。\nですから、購入してくれた人も、購入していない人も、納得できるような仕組み作りを目指しました。\n今回は、投稿をコピーしても実行されないようなシンプルな仕組みを作りました。\n本書はblueskyユーザーに向けたプログラミング入門であり、少しでもプログラミングを楽しく学んでもらえたらいいなと思って作ったものです。\n楽しく学ぶ仕掛けとして、カードを使っているに過ぎません。\n最も重要なのは、本書を購入してくれた人が満足してくれること、楽しんでくれることです。\nカードを付属したのも、タマゴ育成の仕組みも、そのために作りました。\nその結果、「これならお金を出してもいいかな」と思えるような本になった気がします。\n具体的にやったこと 制作過程というか、やったことを書いてみます。\n表紙の絵を描いた\n新しいカードをいくつか作った\nカードの所有者一覧のレイアウトを作ったり、新しいバッジが追加されるようにした\napiを作ってdeployした\nbotに隠しコマンドを作ってタマゴのカードがドロップするようにした\nbotに新しいコマンドを作ってタマゴを孵化する仕組みを考えて作った\nカードのページに本やリンクを追加するプログラムを作って、レイアウトを整えた\nrustで読者向けのプログラムを作ってテストした\n本をgitbookで構成して文章を書いた\n注文を受け付ける前に発送するカードをランダム、かつ検証できるようにした\nランダムの結果を暗号化して公開鍵を公開し、完売した段階で秘密鍵を公開して、データを復号化できる仕組みを作った\n本をwebとpdfでbuild, deployした\nboothとfanboxを連携して本を出品した\nblueskyで告知した\n本が完売した\n申請があった人のページに本カードとリンクを追加した\nリアルカードを作った\nリアルカードを発送した\n本の内容で指摘があったところを修正した\nリアルカードが届いたことを確認できた人をカードの所有者一覧に追加した\ntwitterで告知したら本は売れたか twitterで同じことをしても、おそらく、一つも売れなかったと思う。\nこの結果は、フォロワーがどれだけいても、例えば、1万人いても結果は変わらなかったと思う。\nこれはtwitterにいる人達が問題ではなく、その場の雰囲気とかもあると思う。\n今のblueskyにはアクティブな人が潜在的に集まっていて、本を買ってくれて、最後までやってくれた人が多かった。\nたまたまそういう人が多かったので、その結果だと思ってる。\n私が出した本は、入門と言ってるけど、そこまで初心者向きでもなく、簡単に言うとrustで特殊なプログラムを作ることをやっていく感じのものになっている。\nrustは難しいと言われている言語。基本的には、そんな簡単じゃないし、プログラムやコードを初めて書くような人がいきなり触りだす言語でもなかったりする。\n今回、プログラムを普段やらない人も本書を次々とクリアされ、コマンドからai-botに特殊な投稿を送信できていたので、正直、それが一番嬉しかった。\nまた、応用的にプログラムを改造する人も見かけて、これも嬉しかった。\n技術書や専門書って、最後までやってくれる人はあまり多くないと思う。\nでも、投稿を見る限りでは、すごく多くの人が読んでくれて、試してくれて、そして、最後まで進めてくれた。\nすごい。\nblueskyの人たちに感謝。\nタマゴ育成とは タマゴ育成、あるいは孵化と私は呼んでいます。\n基本的には、/eggを使って孵化を目指すわけですが、対戦相手とcpが同一かあるいは上回った場合に孵化するようになっています。\nしかし、タマゴのcpは0。これでは孵化に時間がかかってしまいます。なぜなら、相手のcpが0のときしか孵化しないから。\nですから、/favの仕組みを使って、タマゴ育成を目指すのは良い方法です。\n今のところ、二種類のカードのどちらかが孵化するようになっています。\ngitbook gitbookはもうかなり古くなっていて、vueのテンプレートを使ったほうが見栄えはいいかもしれない。ただ、gitbookはpluginが便利で、それに相当する機能をvueで補うのもめんどくさそう。\nhttps://gitbook-ng.github.io/setup.html\n$ npm install @gitbook-ng/gitbook $ npx gitbook serve $ npx gitbook build ","description":"","formated_time":"2023-07-25","href":"https://syui.github.io/blog/post/2023/07/25/bluesky/","tags":["bluesky"],"title":"boothで初の技術書を出してみた","utc_time":"2023-07-25T00:00:00Z"},{"categories":null,"contents":"日課のランニングに久しぶりにスマホを持っていって3日目。\n明日も持っていくかはわからない。\n","description":"","formated_time":"2023-07-16","href":"https://syui.github.io/blog/post/2023/07/16/running/","tags":["running"],"title":"ランニング、3日目","utc_time":"2023-07-16T00:00:00Z"},{"categories":null,"contents":"日課のランニングに久しぶりにアプリを持っていった。\n1日目はタイムがおかしかった。自分が遅くなったのかなあとちょっと思った。\n2日目はタイムが戻った。\n直近の記録を見ると、2日目の計測が正しいと思う。\n久しぶりにアプリを使う場合は、1日目だけでなく2日目も計測した方がいいかもしれない。\n","description":"","formated_time":"2023-07-15","href":"https://syui.github.io/blog/post/2023/07/15/running/","tags":["running"],"title":"ランニング、2日目","utc_time":"2023-07-15T00:00:00Z"},{"categories":null,"contents":"もし原神を今から始める場合のベストプラクティスを考えてみます。\n星5で確保すべきキャラは以下の4人です。星4で育てるキャラも以下の4人です。\nただし、注意点があります。それは以下のキャラごとに分けられます。\nクレー 好きなキャラを使いましょう。楽しむためのゲームです。\n例えば、課金の有無も自分が楽しめるほうを選択しましょう。\nいかに早く強くなるかと言うのは、楽しさに直結しません。直結する人はいるかもしれません。その場合は課金しましょう。\n私は無課金のほうが楽しめるので無課金でやってるだけです。クレーを使うのも同じ理由。\n好きにやりましょう。\nバーバラ 序盤のバーバラは育成すべき。\n私も最初はバーバラを使っていましたし、今も時々使います。\nウェンティ 神です。確保しておいて損はありません。\n綾華 移動でよく使いますが、強いです。移動キャラは1人くらい確保したほうがいいかも。\n簡単に火力を出せる構成 草、水、雷です。これらの元素をPTに入れ、残りはシールドや回復を入れます。\n","description":"","formated_time":"2023-07-13","href":"https://syui.github.io/blog/post/2023/07/13/genshin/","tags":["genshin"],"title":"原神、最小限のベストプラクティス","utc_time":"2023-07-13T00:00:00Z"},{"categories":null,"contents":"現在、私はナヒーダを完凸させている以外で完凸する予定のキャラはいません。\nなぜナヒーダを完凸させたのかというと、個人的に可能性を感じたり、タイミングが良かったりと言った理由からです。\nどのへんに可能性を感じたかと言うと、ナヒーダが草元素という点と今後に実装される水神、炎神の存在です。\nナヒーダは水元素、炎元素と組むことで爆発の性能が上がります。\nですから、起点となる草元素と通常攻撃を使う可能性があるナヒーダと組ませることで、完凸が無駄になる場面は少ないだろうという判断でした。\n夜蘭を選ばなかった理由も同じで、今後、水神に置き換わる可能性があるからです。\nまあ、原神はそういうのはあまりないかな。夜蘭はスキルで早く走れるので今もおすすめです。\nそのような事情から個人的にはナヒーダ完凸はすごくおすすめだと考えていて、例えば、1位のdpsを誇る編成はナヒーダを使うみたい。\n具体的には、ナヒーダ、雷電、夜蘭、行秋の編成です。\nこれはナヒーダの通常攻撃が必要になり、雷電の爆発は必ずしも打つ必要はありません。\nでは、今後、完凸を目指すキャラは出てこないのでしょうか。\nキャラ確保より完凸を目指す方向へ 私はおそらく、今後はキャラ確保より完凸を目指す方向にシフトしていくだろうと予想しています。\nこれは、登場するキャラの魅力度や性能によるかな。\n今はまだわかりません。あくまでその可能性が高いという話。\nなぜかと言うと、現時点で使用キャラが固定化されており、これ以上、キャラが増えても使い切れないし、育成できないと考えているからです。\n今後、私は、ナヒーダ完凸とシナジーがあるキャラの完凸を優先的に目指すと思います。\n無課金で完凸を目指すことになるとは思いもしなかったけど、もしかしたらまた目指すかもしれません。\n今のところ、完凸を目指す可能性が高いのは、水神、氷神でしょう。\n草は水とシナジーがあり、水は氷とシナジーがあるためです。\nでも、原神的には炎神は最強になりそうな気がするなあ。\nとりあえず、今は石を貯めて凸を重ねていく方向で考えています。\nそんな原神プレイの方向性の話でした。\n","description":"","formated_time":"2023-07-12","href":"https://syui.github.io/blog/post/2023/07/12/genshin/","tags":["genshin"],"title":"原神、キャラ確保より完凸を目指す方向へ","utc_time":"2023-07-12T00:00:00Z"},{"categories":null,"contents":"今までherokuでcors-originのerrorを回避するためにproxy-serverを立ててたんだけど、やめた。これ一つのために$7かかってた。\nAccess to fetch at \u0026lsquo;http://localhost:3000/\u0026rsquo; from origin \u0026lsquo;http://127.0.0.1:8080\u0026rsquo; has been blocked by CORS policy: No \u0026lsquo;Access-Control-Allow-Origin\u0026rsquo; header is present on the requested resource. If an opaque response serves your needs, set the request\u0026rsquo;s mode to \u0026rsquo;no-cors\u0026rsquo; to fetch the resource with CORS disabled.\nhttps://developer.mozilla.org/ja/docs/Web/HTTP/CORS/Errors/CORSMissingAllowOrigin\nこのerrorは、例えば、apiのgetが同一のurlで行われていないことが要因です。\nですから、vueなら以下のようにproxyで同一url内であることを偽装すれば回避できます。\nmodule.exports = { devServer: { proxy: { \u0026#34;^/api*\u0026#34;: { target: \u0026#34;https://api.example.com\u0026#34;, pathRewrite: { \u0026#34;^/api\u0026#34;: \u0026#34;\u0026#34; }, } } } } axios .get(\u0026#34;/api/test\u0026#34;) //.get(\u0026#34;https://api.example.com/test\u0026#34;) .then(response =\u0026gt; (this.data = response)); ただし、この回避方法はあくまでlocal, previewのみであり、$ yarn buildなどの./dist出力には適用されません。\nこれを解決する方法としては、apiにAccess-Control-Allow-Origin:\u0026quot;*\u0026quot;を設定すること、あるいはproxy-serverを立てて経由することです。\n.get(\u0026#34;https://proxy.heroku.com/https://api.example.com/test\u0026#34;) ent(ogent)でheaderをAccess-Control-Allow-Origin:\u0026quot;*\u0026quot;にする方法ですが、一つずつ設定していくらしい。基本的にはupdate, deleteとかは使わないのでそれ以外のところに書きます。\nw.Header().Set(\u0026#34;Access-Control-Allow-Origin\u0026#34;, \u0026#34;*\u0026#34;) w.Header().Set(\u0026#34;Content-Type\u0026#34;, \u0026#34;application/json\u0026#34;) securityを考慮して特定のサイトのみを許可したほうがいいので、その場合は、vue-devserver-proxyと合わせて、以下のようにします。\nfunc encodeReadUserResponse(response ReadUserRes, w http.ResponseWriter, span trace.Span) error { w.Header().Set(\u0026#34;Access-Control-Allow-Origin\u0026#34;, \u0026#34;https://example.com\u0026#34;) } data () { return { api_url: null, } }, mounted() { if (window.location.host === \u0026#34;localhost:8080\u0026#34;) { this.api_url = \u0026#34;/api/\u0026#34;; } else { this.api_url = \u0026#34;https://api.example.com/\u0026#34;; } let url = this.api_url + \u0026#34;users\u0026#34;; axios.get(url,{ crossdomain: true }) .then(response =\u0026gt; (this.data = response)); } もし自前で運用するなら費用のかからないcloudflare zero-turst(tunnel)がいいと思います。\n[Unit] Description=cors service Documentation=https://github.com/Rob--W/cors-anywhere [Service] Type=oneshot RemainAfterExit=yes WorkingDirectory=/home/syui/github/cors-anywhere ExecStart=/usr/bin/node server.js ExecStop=/usr/bin/pkill node [Install] WantedBy=default.target $ git clone https://github.com/Rob--W/cors-anywhere $ npm i $ node server $ sudo systemctl start cors # これでAccess-Control-Allow-Originが設定されてたらok $ curl --dump-header - \u0026#39;https://api.example.com\u0026#39; -H \u0026#39;Origin: https://example.com\u0026#39; ","description":"","formated_time":"2023-07-08","href":"https://syui.github.io/blog/post/2023/07/08/cors/","tags":["heroku"],"title":"cors-originのerrorを回避するためのproxyを変えた","utc_time":"2023-07-08T00:00:00Z"},{"categories":null,"contents":"今回は、blueskyの便利ツールをarchlinuxjpの方に投げた関係で、適当に思ってることや便利ツールを紹介します。\nblueskyの便利ツール https://firesky.tv : グローバルタイムラインのストリーム。色々と設定できたり、フィルタリングできたり\nhttps://bsky.jazco.dev : ユーザーの視覚化\nhttps://bsky.jazco.dev/stats : ユーザーのポスト数\nhttps://vqv.app/stats : ユーザーのプロフィール集計\nhttps://atscan.net : pdsのスキャンやdid\nhttps://skybridge.fly.dev : mastodonのclientでblueskyをやるためのurl\nhttps://tapbots.com/ivory : mastodon clientのivoryに対応\nhttps://github.com/videah/SkyBridge\nblueskyの公式ツール https://plc.directory : 公式のplc\nhttps://plc.directory/export?after=2023-07-05 : json\nhttps://plc.directory/did:plc:4hqjfn7m6n5hno3doamuhgef/log : didからlogを検索\nhttps://bsky.social/xrpc/com.atproto.repo.listRecords : bsky.socialのfeed\nhttps://bsky.social/xrpc/com.atproto.repo.listRecords?repo=yui.bsky.social\u0026amp;collection=app.bsky.feed.post\u0026amp;reverse=true : bsky.socialのfeedをユーザーでフィルタリング blueskyとtwitter 私が予測していることを少し書きます。\ntwitterが終了するまで、twitterの代わりは存在しない twitterが完全に終了するまで、そこから動く人は殆どいないでしょう。これは企業アカウントも同じです。\n大移動があるとしたらそれはよりよいtwitterの代わりが現れたときではなく、twitterが終了したときです。\n終了することが予めわかっていた場合でさえ、そこから動き出す人は大多数のうちの少数です。\n多くは、それが終了したとき、やむを得ず移動を始めるだけです。\nこのことはほぼ確実に予測される流れだと思います。\nつまり、twitterの代わりが出てくるとしたら、その後ということになります。\n世の中は変わり続ける 世の中は変わり続けるし、便利になり続ける。変わらないものは、いずれ不便になって終わりを迎える。\nでは、今後、snsの便利さはどういったものになるでしょう。\n私の予想では、今までの一つのサービス内でしか有効でなかったアカウントは、複数サービスでも使える形式に変化していくだろうと思います。使える形式というのは、今のところ、やり取りできる、会話できると言った意味合いです。\nなぜそのようになるのでしょう。\nなぜなら、そっちのほうが便利だからです。\nこの流れはやがてトレンドになり、いつしか常識となっているだろうと考えます。\nこれを前提とすると、twitterの選択肢は2つあると思います。\n(1) 今まで通りtwitter内でしかやり取りできないまま縮小、あるいは終了する\n(2) twitterが他のサービスのアカウントともやり取りできるようなプロトコルを採用する\natとactivitypub 現在、snsに採用されるプロトコル(protocol)として有望なものが2つあります。\nat(proto)とactivitypubです。\nこの2つが大きくなると思います。\nなぜ1つでないのか。なぜ2つなのでしょう。\nなぜなら、対立構造を取らないと大きくならないからです。\n台頭するサービスや技術は、往々にして1つの確実なものがあるのではなく、2つのどちらを選ぶかみたいな構造になります。\n例えば、windowsかmacか。アメリカかロシアか。twitterかfacebookか。googleかappleか。iosかandroidか。\n私の話は以上です。\n","description":"","formated_time":"2023-07-05","href":"https://syui.github.io/blog/post/2023/07/05/bluesky/","tags":["bluesky"],"title":"blueskyとtwitter","utc_time":"2023-07-05T00:00:00Z"},{"categories":null,"contents":"northflankが便利でapiはこちらで立てることが多いですが、northflank/cliが充実してきたので、やり方を紹介します。\n$ sudo npm i -g @northflank/cli $ northflank login $ northflank exec service --project $project --service $service --cmd \u0026#34;cp -rf /data/new.sqlite /data/`date \u0026#39;+%Y%m%d\u0026#39;`.sqlite\u0026#34; tokenの権限で詳細に設定できます。volumeをbackupすることもできますが、sqliteならnorthflank/cliでcmdをcronすればいいでしょう。\nhttps://northflank.com/docs/v1/api/execute-command\n","description":"","formated_time":"2023-06-30","href":"https://syui.github.io/blog/post/2023/06/30/northflank/","tags":["northflank","heroku"],"title":"northflankでsqliteをbackupする方法","utc_time":"2023-06-30T00:00:00Z"},{"categories":null,"contents":"今回の目標は、bluesky-social/pds, bluesky-social/atprotoの統合です。\npdsは、連合のsandbox環境ですが、様々な設定ができません。個人的には、AVAILABLE_USER_DOMAINSをsandbox環境でも有効にしたいと考え、構築してみました。これを有効にすると、handleがその設定のものになります。例えば、.aiと設定すれば、登録されるユーザーのhandleはuser.aiとなります。\nこれがsandboxの連合環境でも動作するのか確かめたかったという理由です。\n通常は不可能ですが、plc.bsky-sandbox.devに登録できたので、希望があると考えました。\n$ curl -sL plc.bsky-sandbox.dev/export|jq -r \u0026#34;.operation|.services.atproto_pds.endpoint,.alsoKnownAs\u0026#34; https://at.syui.ai [ \u0026#34;at://syui.ai\u0026#34; ] 結論から言うと、有効に動作させることに成功しましたが、現在のsandboxは定員がいっぱいなのか、plc, bgs側で何らかが制限されている気がします。\npdsのdockerをそのまま構築しても、自身のプロフィールにはアクセスできず、投稿も見れません。フォローやリプライは送ることができますが、記録されていないように感じます。最初は普通にできました。ただ、その後できなくなりました。\n設定のExperiment: Use AppView Proxyから切り替えられます。プロフィールを編集したければoffにし、連合のfeedを見たければ、onにするという感じです。\nsandboxも初期の頃は連合が機能していたようですが、最新では参加できない感じになっているのかもしれません。\npds 今回は、pds + atproto/pds + docker-compose + cloudflare(zero-trust)という構成です。archlinux上で構築します。\ndbにpostgresを使用します。pdsにあるcaddy, watchtowerを利用します。pds自体はatproto/pdsから再構築します。atproto/packages/pds/Dockerfileにあるものをatproto/Dockerfileにおいてdocker buildしても動きません。したがって、独自にbuildしたものを使います。\nversion: \u0026#39;3.9\u0026#39; services: caddy: container_name: caddy image: caddy:2 network_mode: host depends_on: - pds restart: unless-stopped volumes: - type: bind source: /pds/caddy/data target: /data - type: bind source: /pds/caddy/etc/caddy target: /etc/caddy pds: container_name: pds image: syui/bluesky-social/pds:latest build: /pds/atproto network_mode: host restart: unless-stopped volumes: - type: bind source: /pds target: /pds - type: bind source: /pds/image target: /image env_file: - /pds/pds.env watchtower: container_name: watchtower image: containrrr/watchtower:latest network_mode: host volumes: - type: bind source: /var/run/docker.sock target: /var/run/docker.sock restart: unless-stopped environment: TZ: \u0026#34;US/Pacific\u0026#34; WATCHTOWER_CLEANUP: true WATCHTOWER_SCHEDULE: \u0026#34;@midnight\u0026#34; db: image: postgres:latest container_name: postgres ports: - 5432:5432 volumes: - db-store:/var/lib/postgresql/data environment: - POSTGRES_PASSWORD=pass volumes: db-store: postgresのpasswordは変更しておいてください\natproto/pds #.env HOSTNAME=\u0026#34;\u0026#34; PDS_VERSION=\u0026#34;v1.3.3\u0026#34; EMAIL_FROM_ADDRESS=\u0026#34;test@test.ai\u0026#34; AVAILABLE_USER_DOMAINS=\u0026#34;.ai\u0026#34; PORT=\u0026#34;3000\u0026#34; INVITE_REQUIRED=\u0026#34;true\u0026#34; PUBLIC_URL=\u0026#34;https://syui.ai\u0026#34; BLOB_CACHE_LOC=\u0026#34;/pds/image\u0026#34; SMTP_HOST=\u0026#34;smtp.gmail.com\u0026#34; SMTP_USERNAME=\u0026#34;gmail_user\u0026#34; SMTP_PASSWORD=\u0026#34;app_pass\u0026#34; EMAIL_SMTP_URL=\u0026#34;smtps://${gmail_user}:${app_pass}@smtp.gmail.com\u0026#34; DID_PLC_URL=\u0026#34;https://plc.bsky-sandbox.dev\u0026#34; BSKY_APP_VIEW_ENDPOINT=\u0026#34;https://api.bsky-sandbox.dev\u0026#34; BSKY_APP_VIEW_DID=\u0026#34;did:web:api.bsky-sandbox.dev\u0026#34; CRAWLERS=\u0026#34;https://bgs.bsky-sandbox.dev\u0026#34; #DB_SQLITE_LOCATION=\u0026#34;/pds/pds.sqlite\u0026#34; DB_POSTGRES_URL=\u0026#34;postgres://postgres:pass@postgres:5432/postgres\u0026#34; DB_POSTGRES_URL=\u0026#34;postgres://postgres:pass@0.0.0.0:5432/postgres\u0026#34; BLOBSTORE_DISK_LOCATION=\u0026#34;/pds/blocks\u0026#34;\tADMIN_PASSWORD=\u0026#34;\u0026#34; JWT_SECRET=\u0026#34;\u0026#34; REPO_SIGNING_KEY_K256_PRIVATE_KEY_HEX=\u0026#34;\u0026#34; PLC_ROTATION_KEY_K256_PRIVATE_KEY_HEX=\u0026#34;\u0026#34; nodeはどのプロジェクトでもそうですが、ほとんどのケースでerrorが出て依存関係を処理できません。どのようなerrorが出て動かないのかは、その人の環境によります。したがって、参考になりそうなものを書いておきます。通常は、yarn installだけでokです。\n$ git clone https://github.com/bluesky-social/atproto $ cd atproto $ nvm use v18 $ npm i -g npm $ npm i -g node-gyp $ npm i -g lerna $ yarn install $ make build #Dockerfile FROM node:18.14.1-buster RUN mkdir -p /app WORKDIR /app ADD ./ ./ WORKDIR /app/packages/pds CMD [\u0026#34;node\u0026#34;, \u0026#34;dist/bin.js\u0026#34;] $ sudo docker build -t syui/bluesky-pds/pds:latest . $ sudo docker run -it syui/bluesky-pds/pds:latest $ curl 127.0.0.1:3000/xrpc/_health cloudflare(zero-trust) 基本的にtunnelを作成して、cloudflareのdockerを起動しておくと、localhostをdomainに通すことができます。\nsystemdのunitに書いておくといいでしょう。\n[Unit] Description=Cloudflare Tunnel Service Documentation=https://developers.cloudflare.com/cloudflare-one/connections/connect-apps Requires=docker.service After=docker.service [Service] Type=oneshot RemainAfterExit=yes WorkingDirectory=/pds ExecStart=/usr/bin/docker run -d cloudflare/cloudflared:latest tunnel --no-autoupdate run --token xxx ExecStop=/usr/bin/docker ps -a -q --filter ancestor=cloudflare/cloudflared:latest [Install] WantedBy=default.target $ sudo systemctl daemon-reload $ sudo systemctl start cloudflare $ sudo systemctl stop cloudflare start pds $ sudo systemctl start pds fly.io 関係ないですが、fly.ioの設定の一部を載せておきます。smtpなどでportを開ける必要がでてくるかも。\n[[services]] protocol = \u0026#34;tcp\u0026#34; internal_port = 3000 [[services.ports]] port = 3000 [[services.ports]] port = 80 handlers = [\u0026#34;http\u0026#34;] [[services.ports]] port = 443 handlers = [\u0026#34;tls\u0026#34;, \u0026#34;http\u0026#34;] [[services.ports]] port = 465 handlers = [\u0026#34;tls\u0026#34;] [[services.ports]] port = 587 ","description":"","formated_time":"2023-06-20","href":"https://syui.github.io/blog/post/2023/06/20/bluesky/","tags":["bluesky"],"title":"blueskyの連合を試してみた","utc_time":"2023-06-20T00:00:00Z"},{"categories":null,"contents":"今日は螺旋のドレイクに挑戦したので記録します。\n初見では3分かかってたけど、なんとか1分台(まあ2分だけど)に縮められた感じ。\n","description":"","formated_time":"2023-06-17","href":"https://syui.github.io/blog/post/2023/06/17/genshin/","tags":["genshin"],"title":"原神、螺旋のドレイク","utc_time":"2023-06-17T00:00:00Z"},{"categories":null,"contents":"結論 結論から言うと、ナヒーダの完凸は強い。\n完凸してよかった。非常に満足しているという評価です。\n具体的にどこがよかったのかを話します。\nまず、ナヒーダを完凸すると、戦い方自体が変化します。\n例えば、雷電と組ませても、ナヒーダ爆発のほうが火力が出るので、螺旋も秘境もナヒーダをメインアタッカーとして使うようになりました。\nナヒーダ爆発が溜まっていなければ、そこで雷電の爆発みたいなローテーションを組むことで、確実にナヒーダの爆発がたまります。\n最近の螺旋では3元素を使うアビスが出てきました。\nナヒーダ完凸がいると瞬殺でした。\n爆発後のダメージが凄まじく、私の環境下では、ナヒーダ以上に安定して高火力を出せるキャラはなかなかいません。\nつまり、今一番頼りにしているアタッカーがナヒーダということになります。\n原神熱が冷めてきた ナヒーダ完凸後は原神をあまりプレイしなくなったことにも少し触れておきます。\n原神をプレイしなくなった理由は、ナヒーダの完凸に絶望したとか、満足しなかったとか、完凸しなければよかったとかではないです。\nむしろその逆で、ナヒーダ完凸してなければ、今の螺旋をクリアできたかは怪しいと思っています。相当な時間がかかっていたかもしれません。\nつまり、私の無課金攻略では、ナヒーダを完凸するという選択は非常に満足し、納得しています。完凸してよかったし、完凸してなかったら攻略がヤバかったかも。\nまあ、その分の原石で他のキャラを当ててたらわかりませんが。\n今の環境だと夜蘭(またはニイロウ)がいたら良かったなと思う場面がいくつかあります。水キャラで育成してるの行秋だけなので水が足りない。\nさて、では、なぜ私はナヒーダ完凸後に原神をあまりプレイしなくなったのでしょう。\nこれは完凸とはあまり関係ないかもしれません。\n現実にやることが増えてきて、原神も当初の目標を達成できたので、そのあたりかなと思っています。\n今後の原神 今後の原神は、(1)神の確保、(2)祭礼本の完凸、(3)イベントやり終える、ことを目標にする感じかな。\nこの間にたくさんのイベントを落としてきたので(3)が一番きついと思う。\n今は聖遺物厳選を考えるのもめんどいので、方針としては、最強のナヒーダを目指すことしか考えてない。秘境も森林のところにしか通ってなかったりする。\nそれ意味あるの?他のキャラ育成した方がいいんじゃないというのは確かにその通り。そっちのほうが強くなりますので。\nただ、今のところ私は「考えること、やることを減らしていきたい」と思っていて、たまに気が向いたら絶縁くらいは通おうかなってくらいの感覚でのんびりプレイしてます。\nナヒーダは完凸したほうがいいのか 正直、ナヒーダは完凸した方がいいと思いました。\nキャラの使い方、PTの使い方、火力が根本的に変わったからです。\n他のキャラの完凸も、ここまでの変化をもたらすものなのでしょうか。\nナヒーダの場合は、ナヒーダ自身とPTが根本的に覆ります。\n満足度は高かったし、個人的にはおすすめできます。\nナヒーダは他の神と同じようにスキルが最強格です。\nしかし、完凸することで、爆発も最強格になりました。\n神の完凸優先度 ウェンティ以外なら誰でもいいと思います。\nこの点、ウェンティはちょっと不遇ですね。\n私は、鍾離の強化事件からキャラの強さに調整が入ったと考えています。\nウェンティはその前からいたキャラで調整が適用されていません。\n鍾離強化前と強化後のキャラを比較すると、強化前のキャラは性能的におすすめしづらい気がしてる。\nナヒーダと夜蘭の完凸、どちらを選ぶ 改めて選択できるとしても私はナヒーダを選びます。\nただ、夜蘭もおすすめできます。\n最大の理由がスキル移動です。\n私は、ナヒーダ、雷電、鍾離、綾華のPTをよく使っています。\n綾華は主に移動に使っているのですが、それ以外も強い。\n戦闘が強くて、移動が便利なキャラというのは、それだけ重宝するし、長く使い続けられるのです。\n夜蘭はそれに該当すると思います。\nただ、ナヒーダも代替不可能なスキルを持っています。爆発火力も最大級。\nこれもどっちでもいいと思います。好きなほうを選びましょう。\n","description":"","formated_time":"2023-06-16","href":"https://syui.github.io/blog/post/2023/06/16/genshin/","tags":["genshin"],"title":"原神、ナヒーダ完凸の最終評価","utc_time":"2023-06-16T00:00:00Z"},{"categories":null,"contents":"今までナヒーダを熟知型として使ってきたけど、会心型にしてみた。\n熟知型 会心型 どちらが強いかというと、聖遺物がそこそこいいものを装備させている場合は、大半のケースで大差ないと思う。\nなので、これをやる意味があるのかというとあんまりない。\nとはいえ原神はステータスを上げれば上げるほど、その効果は小さくなる傾向にあると思ってる。つまり、攻撃力100-200の間は効果を実感しやすいけど、攻撃力1000-2000の間は効果を実感しづらいという感じかな。\nだからどんなステータスでも、ただ上げればいいってものでもはなく、まんべんなく上げていくほうが結果として強くなる。\nこれは熟知にも当てはまる。熟知もある一定までは効果を実感できるけど、それ以上になると、効果は薄くなると思う。\nまた、バフで熟知と攻撃は盛れるけど、会心は盛りづらいという事情もあると思う。\n完凸ナヒーダは、熟知を自分で補完できるので、大体、+300くらい補完できるのではないかな。つまり、熟知は700くらいあればいいということになり、それ以上ある場合は、会心系のステータスに割り振った方がいいのかもしれない。\nとはいえ、結果としては微々たる差であり、そこまで考える必要ないと思う。\n","description":"","formated_time":"2023-06-06","href":"https://syui.github.io/blog/post/2023/06/06/genshin/","tags":["genshin"],"title":"原神、ナヒーダ会心型","utc_time":"2023-06-06T00:00:00Z"},{"categories":null,"contents":"螺旋が過去最高難易度らしいと聞いて、やりたくなってたのでやった。\n最近、原神はデイリー、イベントもやらなくなって、螺旋もやらなくなってた。\n私はipad(wifi)でプレイしてるんだけど、基本的にはキャラを入れ替えても瞬時には入れ替わらないし、よく止まるので、螺旋がきつくなってきたなあと感じてる。\n12-1,2前半は久しぶりにウェンティが活躍してた。\n","description":"","formated_time":"2023-06-05","href":"https://syui.github.io/blog/post/2023/06/05/genshin/","tags":["genshin"],"title":"原神、2023/06の螺旋","utc_time":"2023-06-05T00:00:00Z"},{"categories":null,"contents":"漫画を描いたのと、ページを参照できなくて不便だったので、参照できるようにしたのと、イラストを描いたのと、カードを作ったりしてました。\nまた、bot(@yui.bsky.social)から限定カードを1,2日だけ排出するようにしてました。\n新しいページを作った yui | manga\n以前 : /ai/manga\nイラスト プロットやキャラ 今回も少しだけ普段から思ってることを書きます。\n私は頭の中にプロット?があり、割と勝手に生成されます。\nキャラも勝手に喋るので、特に考えたりはあまりないです。\n例えば、アイに関しては、私とは全く別人格なので、アイはアイで勝手にすればいいと思ってます。私は知りません。\nただ、物語に関しては、できるだけ面白くなるよう調整したりします。今回も話が暗くなりすぎないように最後のほうはギャグ方向で調整しました。\nアイのモジ・モード 本来はアイの小説由来ですが、ai-mojiが関係しています。\n何かを書き換える能力を持つようです。\n機会があれば、ai-mojiはupdateしたいと思っています。いくつかの文字の変更と拡大画像の生成。\nblueskyが面白いので、最新情報のほとんどをblueskyに投稿するようになってしまいました。\n","description":"","formated_time":"2023-06-03","href":"https://syui.github.io/blog/post/2023/06/03/manga/","tags":["manga"],"title":"漫画描いた5","utc_time":"2023-06-03T00:00:00Z"},{"categories":null,"contents":"この前、blueskyのほうで新しいカード追加すると同時に漫画出そうと思ってたんだけど、ほぼ土日だけで30ページくらい描いたんだけど、間に合わなかったので、とりあえず出すことにしました。\n/ai/manga\n今回、私の漫画の書き方がちょっと変わってるかもしれないと思ったので、まとめてみます。\nネームを書かない 漫画にはネームって呼ばれるものがあるらしい。と言っても具体的になにかは知らない。おそらく、構成のことを言ってるんだと思うけど、私は、頭の中に物語ができているので、ネームと呼ばれるものはやったことがありません。\n下書きをしない 私は、下書きをしません。絵というのは線を何本も重ねて、少しずつ形にしていく手法を取る人もいるかも知れませんが、私の場合、一発書きです。レイヤーなども面倒なので基本使いません。\nコマ割りを考えない 漫画ではコマ割りに困っている人が多いらしいです。しかし、私の漫画の描き方は非常に独特で、まずコマ割りを適当に行います。で、そのコマ割りに合わせて絵を書きます。絵が先にあって、その絵にコマ割りを合わせるということは基本ありません。私の場合、コマが最初で、絵があとなのです。ですから、コマ割りに悩んだことはないですね。\n設定資料を作らない 時間ないので設定資料を作りません。あると便利なのは間違いないし、作るべきだと思っているけど、作れてないのが現状。\n設定資料は、このサイトにまとめてあることだけです。それ以外にはありません。\n私は自分が作った設定を読み返すことがほとんどないので、その多くを作者すら忘れてたりもするんだけど、あまり気にしてない。\nまとめ まとめると、最初は頭の中に話があって、まずコマ割り、あるいはパターンのコピーをし、そこに一発描きで頭の中の話を描き出す、みたいな作業になります。\n","description":"","formated_time":"2023-05-24","href":"https://syui.github.io/blog/post/2023/05/24/manga/","tags":["manga"],"title":"漫画描いた4","utc_time":"2023-05-24T00:00:00Z"},{"categories":null,"contents":"この前のナヒーダがピックアップされてた時、武器ガチャも引いていて、爆死したりしてた。\nサイフォスと祭礼を狙ってたんだけど、それらが一つも出なくて、星5の鍵がでて、終了しました。\n最近、原神のイベントとか全くできてなくてやばい。\nちなみに、ナヒーダはモチーフ武器より祭礼のほうが強いと思ってる。\n螺旋 なんとなく目標としてた人が螺旋タイム出してたので、私も完凸のナヒーダ使ってタイム出してみた。少し追いついたような気がしたのでうれしい。\n","description":"","formated_time":"2023-05-23","href":"https://syui.github.io/blog/post/2023/05/23/genshin/","tags":["genshin"],"title":"原神、武器ガチャで爆死","utc_time":"2023-05-23T00:00:00Z"},{"categories":null,"contents":"\n$ cat .git/config [remote \u0026#34;origin\u0026#34;] url = https://${token}@github.com/user/repo この前、botからtokenでgit pushしてたんだけど、不意にiconを設定してみたくなったので、appsを作って設定してみた。\nちなみに、.git以下には、様々な情報があって、その中でも重要なのが個人を識別するemailなんだけど、githubも他のgit-serverもそうだけど、emailからiconを設定します。\ngithub appsを作って、iconを設定し、apiにアクセスして、それをemailに設定するとokです。\ngithub appsはid+name[bot]@users.noreply.github.comが機能します。これは通常のuser(id)でも同じ。\n# https://api.github.com/users/yui-bsky-social[bot] $ cat ~/.gitconfig [user] email = 132127762+yui-bsky-social[bot]@users.noreply.github.com これでpushすれば、commitにgithub appsで作ったbotのiconが表示されるはず。\ngithubもそうだけど、基本的に名前が取られててつらい。名前をどうしようかが一番悩みました。\n","description":"","formated_time":"2023-04-29","href":"https://syui.github.io/blog/post/2023/04/29/github/","tags":["github"],"title":"github appsで任意のアイコンを設定する","utc_time":"2023-04-29T00:00:00Z"},{"categories":null,"contents":"アイが一冊だけ持ってる絵本。たまに作中に出てくるやつを作ってみました。\nたまたまお店でいいものが売ってて「あなただけの絵本を作りましょう」という真っ白な絵本なんだけど、それを買って作ってみた。\nデザイン カードを作ってみた そろそろカード作り始めないと、やばいかもしれないと思ったので、カード作ってたんだけど、素材が切れた話。\nその前に、少しだけカードのルールというか設定の一部を紹介します。\nリアルカードの設定は以下のようになっています。重要な点は主に2つ。\n一つの絵柄につき一枚しか発行できない\n一人一枚しか持てない\nこのようなルールが存在していて、それは私も例外ではないので、例えば、私は同じ絵柄のものを2枚は作らないし、また、1枚以上のカードを作った場合、誰かにあげるか、破棄するか、どちらかになります。\nまあ、期間を制限していないので、抜け道はあるんだけど、このカード、世界で一つだけのカードという設定ではあります。今のところは。\nで、そのためにdocsに設置したのがowner(所有者)のページです。\n素材が切れた 以前はオーロラシールを素材に使ってたんだけど、それが無くなってしまい、買いに出かけたら生産中止になったらしいので、途中から製法を変えて作りました。もしかしたら、こっちのほうがいいかも。\nこれは絵本を作ってるときに気づいたもので、やたら質感がいいシールだなと思い、それを使うことにしたのがきっかけでした。\n","description":"","formated_time":"2023-04-17","href":"https://syui.github.io/blog/post/2023/04/17/book/","tags":["make","book"],"title":"絵本を作ってみた","utc_time":"2023-04-17T00:00:00Z"},{"categories":null,"contents":"全くすり抜け無かったので、ギリギリ行けた感じ。\n今後使ってみて使用感を確かめていきたいけど、めちゃくちゃ強くなってるのを既に感じてる。\n","description":"","formated_time":"2023-04-12","href":"https://syui.github.io/blog/post/2023/04/12/genshin/","tags":["genshin"],"title":"原神、ナヒーダ完凸","utc_time":"2023-04-12T00:00:00Z"},{"categories":null,"contents":"今回、blueskyの記事をgihyo.jpで書かせていただきました。\nhttps://gihyo.jp/article/2023/04/what_is_bluesky\nそういえばこの記事、blueskyであなたが書いたやつ、注目トップに入ってると教えてもらい、私はそれを全く知らなかったので、嬉しい知らせだったりした。\nとはいえ、今回の記事について、私が書いたかどうかはかなり怪しい。\nというのも、ほとんど技術評論社の方が色々と編集や修正、調べ物をしてくれたので、文章の殆どの部分を助けてもらったと言っても過言ではありません。タイトルや表題を含めてそうですね。\n#gihyojp にて、今注目の分散型SNS、Blueskyの記事を2本公開しましたー こちらはユーザ寄りの視点から、誕生の背景や現在の盛り上がり、そして、基本機能や特徴について解説していただいております #SNS #Bluesky #blueskysocial https://t.co/7YamjJWlp2\n\u0026mdash; 馮　富久/FUON Tomihisa (@tomihisa) April 11, 2023 もしよかったら読んでみてください。\n今回、私がやりたかったのは、(1)様々なコミュニティの良さを伝えること、(2)今後の未来について、プロトコルと分散を用いてサービスの垣根は取り外される方向になる気がするみたいなことを伝えること。\n主にこの2つかな。\n技術評論社の方々に感謝。\nそういえば、技術評論社のサイト、前々からすごく見やすいし、いいなって思ってたんだよね。\nこれarchjpでも言ってた気がするけど。\n","description":"","formated_time":"2023-04-11","href":"https://syui.github.io/blog/post/2023/04/11/bluesky/","tags":["bluesky"],"title":"blueskyの記事をgihyo.jpで書いた","utc_time":"2023-04-11T00:00:00Z"},{"categories":null,"contents":"世界初のbluesky meetupが東京で開催されました。尽力されたmeetup運営の方々、お疲れさまでした。\nhttps://428lab.connpass.com/event/279572/\nそこで、私が開発してるものをmeetup運営の方が好意で紹介してくださいました。本当にありがとう。\nhttps://speakerdeck.com/akiomik/introduction-of-apps-developed-by-japanese\nただ、提出する資料について私がちょっと誤解していて、結論から言うと、他の方々の発表資料は全部良すぎたんだけど、自分のやつがダメでした。\nダメというのは、あくまで個人的な意見なんだけど、これについて少しだけ書いてみたいと思います。\n当日、私が開発したものの紹介は、うまくいったように見えました。\nなぜなら、meetup運営の人達がうまくフォローしてくれたからです。つまり、全部、運営の人が助けてくれたからうまくいっただけなのです。\nしかし、他の方々の資料を見て、ああすればよかった、こうすればよかったというのがたくさんあったので、改めて問題点を修正してみることに。\n今回のmeetupは、bluesky運営や開発の人たちにものすごい元気を与えたんじゃないかなって思っていて、素晴らしすぎた。\n","description":"","formated_time":"2023-04-09","href":"https://syui.github.io/blog/post/2023/04/09/bluesky/","tags":["bluesky"],"title":"blueskyの初meetupがあった","utc_time":"2023-04-09T00:00:00Z"},{"categories":null,"contents":"カードゲームと言ってもルールはないし、最初は占い的なものとして作ってみました。\n技術的なことについて、少しだけ書きます。\nentのschemaにDefaultFuncがあるのを見つけて、この機能に助けられました。\n本来はent/entc.goで新しいリクエスト先を作成して、main.goで処理しなければならないかもしれないかもしれないと思っていました。前回触ったときはそうやってランダム値をdefaultにするため回避していた記憶。\nfunc (Card) Fields() []ent.Field { return []ent.Field{ field.Int(\u0026#34;card\u0026#34;). Immutable(). //Default(card). DefaultFunc(func() int { rand.Seed(time.Now().UnixNano()) var a = rand.Intn(10) if a == 1 { card = rand.Intn(12) } else { card = 0 } return card }). Optional(), field.Time(\u0026#34;created_at\u0026#34;). Immutable(). Optional(). Default(func() time.Time { return time.Now().In(jst) }), } } 長続きする遊びってなんだろう 次は、普段からちょっとだけ考えてることについて。\n運要素が介在しないゲームと言うのは、あまり長続きしないのです。\nもちろん、ハマる人はハマるんだけど、運要素が大きければ大きいほど長続きしやすいと思っています。\nですから、長く遊ばれ続けるには、どこかに運要素を入れたほうがいいと言うのが私の考えです。\nもちろん、バランスが重要だと思います。\n全部運というのも遊びとしては難しいと思います。\nどうせ全部運で決まるんでしょ、頑張っても意味ないでしょ、となってしまうからです。\n今回作ったのは、普通にカードを集めて、運が良ければ当たるってだけのシンプルなものです。\nよければblueskyのほうでbotに/cardしてみてください。\n集めたカードはこちらに表示されます。\nhttps://card.syui.ai\n","description":"","formated_time":"2023-04-01","href":"https://syui.github.io/blog/post/2023/04/01/api/","tags":["bluesky","api"],"title":"blueskyでカードゲームを作ってみた","utc_time":"2023-04-01T00:00:00Z"},{"categories":null,"contents":"最近、fly.ioを使ってることもあって、db:postgresよりもsqliteのほうがありがたい感じになってる。\nnorthflankで動かしてたapiのdbがpostgresだったので、docker-volumeに変更して、sqliteに変更にしてみました。\nハマったところ ハマったのは前回と同じで、service/CMD overrideでcustom commandを選択して、goの場合はbin/binaryとかやります。\n表示 : /cnb/process/web bin/binary\nvolumeも少しハマりました。\ncontainer上のvolumeなので、/はcontainerのrootを指します。\n例えば、volumeを/dataにmountするとして、sqliteはこんな感じになります。\n$ go generate ./... $ go build func main() { client, err := ent.Open(dialect.SQLite, \u0026#34;file:/data/ent.sqlite?_fk=1\u0026#34;) //client, err := ent.Open(dialect.SQLite, \u0026#34;file:ent?mode=memory\u0026amp;cache=shared\u0026amp;_fk=1\u0026#34;) } 今現在、ちょっとした遊びを考えてるんだけど、遊びを考えるのって難しい。\n例えば、botでカード占いをできるようにしたんだけど、これをapiと連携した場合、どんな感じにすれば面白いんだろうとか、長く楽しめそうかなとか、その辺。\n","description":"","formated_time":"2023-03-29","href":"https://syui.github.io/blog/post/2023/03/29/api/","tags":["northflank","api","ent"],"title":"northflankでentのapiを触ってみた","utc_time":"2023-03-29T00:00:00Z"},{"categories":null,"contents":"blogのタイトルとかもsyui.aiに変更しました。\n実はsyui.aiというdomainやtitleは、キーボードの押しやすさ、ぱっと見た感じから個人的にかなり気に入ってたので、ちょっと寂しい。\n新しくsyui.aiになるけど、こちらは個人的に一番好きなdomainです。\nこれからもよろしくお願いします。\n最近はblueskyを触ってます。\n","description":"","formated_time":"2023-03-26","href":"https://syui.github.io/blog/post/2023/03/26/domain/","tags":["domain"],"title":"syui.aiに完全に移行しました","utc_time":"2023-03-26T00:00:00Z"},{"categories":null,"contents":"syui.ai -\u0026gt; syui.ai へdomainを移行しました。\n昨日は「徐々に移行する感じになると思う」みたいなこと言ってたけど、やりたかったのでやった。\nこういうのは機会がある時にやらないと、私なんかはめんどくさがりなので基本動かないのでよかった。\nやっぱり新しいdomainを使ってみたかったというのが一番の理由です。\nそして、二番目が「domainを2個も管理したくない」という理由。もちろん、.cfも引き続き維持しますが、できれば内容を空にしておきたい。\nfreenomの今後 freenomが現在、新規登録を停止しています。理由はfacebookからの訴訟だと言われているようです。\n今後、高い確率でfreenomに起こりそうなことを個人的に予想します。\n現在、freenomは、登録を停止していて、これが裁判所からの命令によるものかはわかりませんが、スパムアカウントを排除しようとする流れになると思われます。\nそれが終わると新規登録が再開され、再開後は登録の手続きが厳格化すると考えられます。\nここで、すでに調査済みのグリーン判定をもらったアカウントは継続して使えると思います。\nしたがって、ほぼ確実にグリーン判定が得られるような人は、この件を心配する必要はないと思っています。\ndomainの性質上、検閲は容易ではありません。また、更新の阻害や取り上げも容易ではなく、普通に使用している場合は特にそうですね。\n私の場合、freenomではsyui.aiの一つしか取得していません。\nもちろん、こういった予想が外れることも想定しておかなければなりませんが、このまま.cfを使い続けて問題が発生する可能性は著しく低いと考えられます。\n逆に、今後はdomainの価値が高くなる可能性すらあるかもしれません。そんな感じの個人予想をしています。\nmastodon mastodonはアカウントの引っ越しができるっぽいので、新インスタンスを立てたあと、両アカウントで引っ越しの設定をしてから、旧インスタンスを削除すれば良さそう。\nでもfly.ioのfree planでは2つもインスタンスを立てられないので(主にredis)、引き継ぎなしで移行する必要があって、今のところは引っ越さなくてもいいかという結論。\n一応、現在のインスタンスのdomainを変えて運用することは可能。ただ、それだと連合に迷惑がかかる可能性があるので、できれば連携してるアカウントの引っ越しシグナルを相手側が受け取って、連携してるアカウントが無くなった時点で閉じたほうが良さそう。\nこの辺は色々と他の方法を探ってみるけど、無さそうならdomainを.aiに変えるだけかもしれないし、.cfのまま運用するかもしれない。\n","description":"","formated_time":"2023-03-23","href":"https://syui.github.io/blog/post/2023/03/23/domain/","tags":["domain"],"title":"syui.aiからdomainを移行してみた","utc_time":"2023-03-23T00:00:00Z"},{"categories":null,"contents":"今回はdomainを何に使おうか迷ってる話です。\ndomainを買うと言っても、自分の中では.io, .aiの2つしか候補がありませんでした。\nそして、.aiを選びました。\n何に使うのかですが、理想としては.cfを.aiに置き換えることです。domainを2つも管理したくない気持ちがあります。\nしかし、これは現実的ではないかもしれません。あまりに.cfに色んなものをhostしすぎた。\nしたがって、徐々に.aiをメインで使っていくようにするのが良さそう。\n具体的には、mail, blog, socialとかに使っていきたい。今までと変わらない感じだけど。\n現在、at.syui.aiにself-hostしたatへの投稿を表示しています。\nここをblogやweb-siteにしてsyui.aiからredirectするのもいいかもしれません。\n今の所、過去に作ったものはそのまま残して、新しく作ったものをsyui.aiにhostしていく予定です。\nしかし、結局は.cfを使い続けるかもしれませんね。この辺、どうなるか、私にもわかりません。\n.cfはずっと気に入って使っていたdomainで、.aiは昔から欲しかったdomainです。\nとりあえず、やりたかったこと第一弾として、本来ならatでは2文字のhandleは取れないんだけど(3文字から)、2文字のhandleでやってみた。\nでもactivitypubやmatrixの形式のほうが、かっこいいかもしれませんね。\nactivity : @ai@syui.ai\nmatrix : @ai:syui.ai\nいや、微妙かな\u0026hellip;。\n","description":"","formated_time":"2023-03-22","href":"https://syui.github.io/blog/post/2023/03/22/domain/","tags":["hugo","domain"],"title":"syui.aiというdomainを買ってみた","utc_time":"2023-03-22T00:00:00Z"},{"categories":null,"contents":"awsやらfly.ioやらで少しずつ負荷を確認してたのですが、今回は本番環境にdeployしてみた話です。\nhttps://bsky.syui.ai\n基本的にはこれまでのdeploy方法と変わりません。ポイントも同じです。\nfly.ioの場合は、port:80,443を2583に投げてやればOKです。\naws-s3, cloudfrontを使わないためcfg.publicUrlが機能しなかったので、imgUriEndpointを変更しました。今回もgithub-pagesを使います。\nimgUriEndpoint = `https://img.syui.ai/image` dist, public, staticなどにjpgを置いてbuildすることでアクセスできるかもですが、やってみた限りでは無理でした。この辺はまだあまり見れていません。\ninvite code packages/pds/src/api/com/atproto/account/createInviteCode.ts\n# com.atproto.server.createInviteCode $ url=https://$host/xrpc/com.atproto.account.createInviteCode $ json=\u0026#34;{\\\u0026#34;useCount\\\u0026#34;:5}\u0026#34; $ curl -X POST -u admin:${admin_password} -H \u0026#34;Content-Type: application/json\u0026#34; -d \u0026#34;$json\u0026#34; $url ref : https://github.com/bluesky-social/atproto/pull/204/commits/f0558a0dfb79c9275ddeb0e01b48c3b1b8cef4dc\ndomainとmailについて 少し前にsyui.aiのdomainを購入し、appleのicloud+に加入してcustom mailを使い始めました。\n.aiはけっこう高かった気がするんだけど、欲しかったので買った。\n今まではfreenomで取得した.cfを無料で使ってきました。\nmailもmailgunの設定でgmailに転送していたので、無料でした。\nfreenomとmailgunは非常に良いサービスです。かなり長い期間使ってきましたが、一度も問題が起こったことはありません。これらサービスには感謝です。\n正直、最初はこんな長く続けるとは思ってなかったのです。\n楽しく遊んでたら、色々なものをホストして、いつの間にか超肥大化してた。そんな感じです。\nただ、atのself-hostはsyui.aiでいいとして、pageとかを作りたい場合、完全にfly.ioかつnodeで構築するしかなさそう。あるいは、他でhostしてhttp,httpsの場合はredirectみたいな処理を入れるかです。また、.well-known/を設定しづらい気がしてて、A(root)にするのはあまり良くないかも。\n","description":"","formated_time":"2023-03-21","href":"https://syui.github.io/blog/post/2023/03/21/bluesky/","tags":["bluesky","atproto"],"title":"blueskyのatをdeployしてみた3","utc_time":"2023-03-21T00:00:00Z"},{"categories":null,"contents":"\nちょっとだけ個人的な話をしてみる お絵かきをはじめて130枚目のイラストになります。\n特に記念すべき数字というわけでもないんですが、今回は少しだけ変わったことがあったので、それについて書きます。\n私のイラストはtwitterに上げるときもあれば、上げないときもあって、ほとんどは描いても上げないかな。ブログに上げるだけのことが多いです。\ntwitterに上げるときは、likeが1つ付くときもあれば、付かないときもあって、付かないことのほうが圧倒的に多いと思います。\n今回の絵は、twitterではなく、blueskyに上げてみました。\nblueskyで絵を投稿してる人を見かけて、私もなにか書こうかなと思ったのです。\ntwitterよりも圧倒的に人が少ないはずのblueskyのほうが反応があったので、嬉しい。\nただ、この現象自体は、少し前から確認されていました。\n絵について適当になにか書きます。\n私は、絵を全く描けないのですが、こうやってsnsに投稿していて、思うところがあります。\n私が見たいと思っているのは、その人が反映された絵なので、初心者であればあるほど面白いと思っているのです。\n絵には、その人の特徴が現れます。\n多くの人はうまく描きたいと願い、練習をするかもしれません。\nしかし、その練習はなんのためなのか。\n多くの人から称賛を受けるための上手な絵を描きたいと願うのか、あるいは、自分が書きたい絵を描けるよう自己実現を願うのか。\n前者はAIが最も得意とする分野です。AIに書かせたほうが良い結果が生まれるでしょう。\nですが、後者の「本当はこう描きたかったのに、それができなかった。できるようになりたい」という想いはどうでしょう。\n私は、他の人の絵を見るとき、上手いか下手かなどに興味がありません。\nその人が現れているか否か。それだけを見ています。\nですから、初心者であればあるほど、その人の特徴が絵には現れるので、私は好きだったりするのです。\nみんなもお絵描きしよう。楽しいですよ。\nnostrの話 絵とは全く関係ないですが、nostrは情報価値の判断、そして、流通が速すぎます。\n独自のコミュニティが日本語で機能しています。\n情報通な人ほど、早めにここの情報に触れておくことを強くおすすめします。\nこれは絵とは全く関係がありません。コンピュータや情報、未来に関係します。\n今後、起こりうることのいくつかは、すでにnostrで実現されていると思います。おそらく、そんな感じ。\n","description":"","formated_time":"2023-03-21","href":"https://syui.github.io/blog/post/2023/03/21/illust/","tags":["illust"],"title":"イラスト描いてみた130","utc_time":"2023-03-21T00:00:00Z"},{"categories":null,"contents":"前回、deployしてみた感触ではtoken errorが出ていて、それを解消すれば良さそうに思ってたんだけど、気になる情報があったので、今回はそれにあたってみた。\natはplc.directoryに登録しなければいけなかったみたいで、その登録ができていなかったぽい。\n重要なのはserverDidでserverを立てる際はここに登録した値を入れる必要があるみたいです。\n$ git clone https://github.com/syui/atproto $ cd !$:t # error : python, not found better-sqlite3 $ nvm use 18 $ npm config edit python=/usr/bin/python3 $ npm i node-gyp npm lerna $ npm i better-sqlite3 $ npm i 今回、blueskyでKingYoSunさんに助けてもらいました。ありがとうございます。\nhttps://github.com/KingYoSun/atproto-aws/tree/main\nplc.directoryにdomainなどを登録して、didを取得するまでをやります。これをserverDidに使用する感じだと思います。\nimport * as cbor from \u0026#39;@ipld/dag-cbor\u0026#39; import * as uint8arrays from \u0026#39;uint8arrays\u0026#39; console.log(`signingKey=${keypair.did()}`) console.log(`recoveryKey=${keypair.did()}`) const obj = { type: \u0026#39;create\u0026#39;, signingKey: keypair.did(), recoveryKey: keypair.did(), handle: \u0026#39;${ADMIN_USER_NAME}.${DOMAIN}\u0026#39;, service: \u0026#39;https://${DOMAIN}\u0026#39;, prev: null, } const data = new Uint8Array(cbor.encode(obj)) console.log( `sig=${uint8arrays.toString(await keypair.sign(data), \u0026#39;base64url\u0026#39;)}`, ) $ make build $ make run-dev-env $ handle=admin.example.com $ service=https://example.com $ url=https://plc.directory/did:plc:q4ugjxbx2mp6rmnnljjystesttesttest $ json=\u0026#34;{ \\\u0026#34;type\\\u0026#34;: \\\u0026#34;create\\\u0026#34;, \\\u0026#34;signingKey\\\u0026#34;: \\\u0026#34;${signingKey}\\\u0026#34;, \\\u0026#34;recoveryKey\\\u0026#34;: \\\u0026#34;${recoveryKey}\\\u0026#34;, \\\u0026#34;handle\\\u0026#34;: \\\u0026#34;${handle}\\\u0026#34;, \\\u0026#34;service\\\u0026#34;: \\\u0026#34;${service}\\\u0026#34;, \\\u0026#34;prev\\\u0026#34;: null, \\\u0026#34;sig\\\u0026#34;: \\\u0026#34;${sig}\\\u0026#34; }\u0026#34; $ curl -X POST -H \u0026#34;Content-Type: application/json\u0026#34; -d \u0026#34;$json\u0026#34; $url Hash of genesis operation does not match DID identifier: xxx $ url=did:plc:xxx $ curl -X POST -H \u0026#34;Content-Type: application/json\u0026#34; -d \u0026#34;$json\u0026#34; $url Ok 適当な解説 package.json, Makefileからコマンド体系化がわかります。\nまずは依存関係を解消するためにnpm iかyarn installを通さなければなりません。\nそれが通ったら初めてbuildなどが成功します。これはlerna run build, make buildなどがそれに当たります。\nbuildが通ったら、./dist/index.jsがそのままで動きます。\nlocalhostで動かす場合やpreviewなどはmake run-dev-envなどがそれにあたります。\natprotoで重要なのはpakages/{pds, dev-env}の2つです。環境変数を与え、動かせてみるといいかも。\n","description":"","formated_time":"2023-03-13","href":"https://syui.github.io/blog/post/2023/03/13/bluesky/","tags":["bluesky","atproto"],"title":"blueskyのatをdeployしてみた2","utc_time":"2023-03-13T00:00:00Z"},{"categories":null,"contents":"bluesky(bsky.social)では現在、handle.updateが追加されていて、いわゆるcustom-domain(custom-handle)のようなことができるようになっています。これをhandle.updateと呼びます。\n具体的には、syui.bsky.social -\u0026gt; syui.aiなどにhandleを変更することができます。\nで、実際にこのhandle.updateをやってみた感想を書きます。\nweb, cliの両方に簡単に機能を追加しましたので、誰でもできると思います。\nweb bsky.syui.ai -\u0026gt; login -\u0026gt; profile -\u0026gt; handle.update\nnote: re-login\ncli $ sudo pacman -S rust --noconfirm $ git clone https://github.com/syui/atr $ cd !$:t $ cargo build host = \u0026#34;bsky.social\u0026#34; pass = \u0026#34;password\u0026#34; user = \u0026#34;syui.bsky.social\u0026#34; $ ./target/debug/atr h xxx.bsky.social $ ./target/debug/atr h example.com # note: change config.toml # user = \u0026#34;example.com\u0026#34; $ ./target/debug/atr a $ ./target/debug/atr profile shell shellでも書いてみました。大体はこんな感じです。\n#!/bin/zsh # session.create user=syui.bsky.social pass=xxx url=https://bsky.social/xrpc/com.atproto.session.create curl -sL -X POST -H \u0026#34;Content-Type: application/json\u0026#34; -d \u0026#34;{\\\u0026#34;handle\\\u0026#34;:\\\u0026#34;$user\\\u0026#34;,\\\u0026#34;password\\\u0026#34;:\\\u0026#34;$pass\\\u0026#34;}\u0026#34; $url \u0026gt;! token.json cat token.json|jq . # get : did, accessJwt did=`cat token.json|jq -r .did` token=`cat token.json|jq -r .accessJwt` # handle.update url=https://bsky.social/xrpc/com.atproto.handle.update json=\u0026#34;{\\\u0026#34;handle\\\u0026#34;:\\\u0026#34;syui.ai\\\u0026#34;}\u0026#34; curl -sL -X POST -H \u0026#34;Content-Type: application/json\u0026#34; -H \u0026#34;Authorization: Bearer $token\u0026#34; -d \u0026#34;$json\u0026#34; $url handle.update なぜatではhandle.customと言わず、handle.updateという単語が採用されているのでしょう。\natでは、handleを削除した場合、そのhandleは空き状態になります。\nつまり、誰でも取得できるようになります。\nこれはatの設計思想だと思われます。\nhandleを凍結するか、空きにするかで設計思想が異なります。それぞれにメリット、デメリットがあります。\natはhandleの空きを積極的に作ることで、ユーザーがお気に入りのhandleを取得しやすくなっています。\nこれは、handle.updateの処理にも影響します。\nhandle.updateとは、handleの完全な移行を意味します。\n具体的には、以前のhandleは削除され、空き状態になり、誰でも取得できるようになります。\nこれについては、matrixでwhy氏に教えてもらいました。\nですから、handle.customではなくhandle.updateという単語が採用されているのだと思います。\nしかし、一般的にはhandle.customのほうがわかりやすいので、私もそのように表記することがあります。\nですが、実態は、handleの完全な移行であり、以前のhandleは削除されるという認識です。\nhandle.update後のerror時の処理ですが、handle = emailでre-loginすると解消されます。\nhandle.save これは、atの設計思想からあまりおすすめできるものではありませんが、bsky.socialのhandleを確保しておきたい場合、以下のような処理を行いましょう。\nhandle.updateする\n以前のhandleでaccountをcreateする\n# restore # account delete : syui.bsky.social $ atr h syui.bsky.social # note: invite code x2 did atのhandleはusernameのようなものです。didがidですね。\ndidはnostrでいうpubkeyのようなもので、ユーザー固有で変更できないもの、確実なものとして、基本的には内部でdidが参照されています。\nhandleはあくまでaliasのようなもので、search, mention, loginなどの処理のときに人間にわかりやすいようにしている感じです。\nとはいえ、人間にとってhandleのほうが重要ですね。\n","description":"","formated_time":"2023-03-08","href":"https://syui.github.io/blog/post/2023/03/08/bluesky/","tags":["bluesky","atproto"],"title":"blueskyでhandle.updateしてみた","utc_time":"2023-03-08T00:00:00Z"},{"categories":null,"contents":" ここでいう完全体とは、無課金で完凸、全天賦MAXにして、聖遺物を厳選し、翼(緑)と精霊(草)を付けたナヒーダのこと。\n現在のナヒーダは3凸です。\n螺旋やりました。ナヒーダ強い。\n運命 運命の換算は200くらい。次は40くらいで確定だから160で2凸しなければならない計算。すり抜けなければいけます。が、すり抜けるとダメですね。\n最大180x2=360まで貯めると確実ですが、おそらく、200前後でいけるのではないかと思います。\nちなみに、あと100円課金すれば完凸できるような場合でも課金なし。それが自分で決めたルールなので。\n完凸にかかる金額 完凸にかかる金額は、大体、15万前後と言われているみたい。武器を入れると、30万くらい?\n無課金の最適ルート 私が今のところ思ってる無課金での最適ルートを書きます。\n星4キャラで強いと言われている行秋、ベネット、香菱を育成する\n足りない元素の星5キャラを狙い、空きを埋めていくよう計画する\n元素が埋められた時点で夜蘭の完凸を目指す\nこれが攻略において最も適したルートだと個人的には思います。\nナヒーダはかわいい? ナヒーダが実装される前にひと目見て、ナヒーダの完凸を決意したわけですが、しかし、実装後のナヒーダについて、あまり書いていなかったので、なにか書きます。\n「かわいい」は中身に宿る。見た目に宿るわけではありません。\nその意味で、ナヒーダをかわいいと思ったことはありませんでした。子供だと思ったこともありません。まあ、これに関しては他キャラに関しても私は何も思わないわけですが。\n例えば、クレーを見ると、かわいいって思うんだけど、ナヒーダに関しては全く思わない。\nそれは「かわいい」というものが、見た目ではなく、中身に宿ることを意味します。\nただ、ナヒーダは強いかと聞かれると、強いです。特に完凸は強いと思います。\n","description":"","formated_time":"2023-03-02","href":"https://syui.github.io/blog/post/2023/03/02/genshin/","tags":["genshin"],"title":"原神、ナヒーダ完全体を目指す4","utc_time":"2023-03-02T00:00:00Z"},{"categories":null,"contents":"全体的にfly.ioのappのvm:pgがおかしくなって、それに対応した話。\nCould not proxy HTTP request. Retrying in 1000 ms なんでおかしくなったのかというと、おそらく、fly.io側で仕様変更があったためだと思ってる。pgを新しく作成すると今までの形式とは違ったものになっていて、具体的には、top\u0026lt;number\u0026gt;.nearest.of.\u0026lt;appname\u0026gt;.internal -\u0026gt; [ipv6-private]になってる。\n対応としてはpgのfly.tomlを読み込んで、それを修正後にdeployします。\n$ mkdir pg $ cd pg $ fly config save --app \u0026lt;pg-app-name\u0026gt; $ vim fly.toml - [[services]] - [] + [[services]] + internal_port = 5432 # Postgres instance + protocol = \u0026#34;tcp\u0026#34; + [[services.ports]] + handlers = [\u0026#34;pg_tls\u0026#34;] + port = 5432 $ fly image show --app \u0026lt;pg-app-name\u0026gt; $ fly deploy . --app \u0026lt;pg-app-name\u0026gt; --image flyio/postgres:\u0026lt;major-version\u0026gt; https://fly.io/docs/postgres/connecting/connecting-external/ fly.ioのpgはなかなか厄介で、一度変更があると、detach, attachができなくなります。この変更は内部的なものも含みます。つまり、ユーザー側は、なぜいきなりdetach, attachできなくなったのかわからないでしょうね。今回も同じ構成でfly.ioのpgが動作しなくなりました。\nipv6-private top\u0026lt;number\u0026gt;.nearest.of.\u0026lt;appname\u0026gt;.internal -\u0026gt; [ipv6]\nhttps://fly.io/docs/reference/private-networking/#fly-internal-addresses $ fly ips allocate-v6 --private -a \u0026lt;postgres-app-name\u0026gt; $ fly pg detach -a $app $app-pg-db $ fly pg attach -a $app $app-pg-db postgres://$app:$pass@[:0:0:0:0]:5432/$app?sslmode=disable restartしても治らなかった。\n$ fly pg restart baackup-restore pgを残したい方はbackupして、新しいpgを作成し、restoreするのがおすすめですが、detach, attachできない場合は不可能。\n$ fly postgres list $ fly volumes list -a \u0026lt;postgres-app-name\u0026gt; $ fly volumes snapshots list \u0026lt;volume-id\u0026gt; $ fly postgres create --snapshot-id \u0026lt;snapshot-id\u0026gt; $ fly pg detach --app \u0026lt;app-name\u0026gt; \u0026lt;postgres-app-name\u0026gt; $ fly pg attach --app \u0026lt;app-name\u0026gt; \u0026lt;postgres-app-name\u0026gt; ","description":"","formated_time":"2023-02-28","href":"https://syui.github.io/blog/post/2023/02/28/flyio/","tags":["fly"],"title":"fly.ioのpgがおかしくなった","utc_time":"2023-02-28T00:00:00Z"},{"categories":null,"contents":"今回は、blueskyのweb uiを作ってみました。bluesky、楽しい。\nこちらのページにアクセスして、usernameを入れると、投稿が出てきます。\nhttps://bskyw.syui.ai\nhttps://bskyw.syui.ai/syui\n一番難儀したのがcssです。srcは/bskyにあります。vueで書かれています。\ncom.atproto.repo.listRecords \u0026lt;template\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;bluesky-avatar\u0026#34;\u0026gt;\u0026lt;img :src=\u0026#34;user.data.avatar\u0026#34;/\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div v-if=\u0026#34;user\u0026#34; class=\u0026#34;bluesky-user\u0026#34;\u0026gt; \u0026lt;p\u0026gt;\u0026lt;a :href=\u0026#34;this.bskyurl\u0026#34;\u0026gt;@{{ user.data.handle }}\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ user.data.did }}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;form @submit.prevent=\u0026#34;submit\u0026#34;\u0026gt; \u0026lt;input v-model=\u0026#34;id\u0026#34; placeholder=\u0026#34;id\u0026#34; value=\u0026#34;id\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;div v-if=\u0026#34;record\u0026#34; class=\u0026#34;bluesky-record\u0026#34;\u0026gt; \u0026lt;li v-for=\u0026#34;i in record.data.records\u0026#34;\u0026gt; \u0026lt;p\u0026gt;\u0026lt;span class=\u0026#34;name\u0026#34;\u0026gt;{{ name }}\u0026lt;/span\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;\u0026lt;span class=\u0026#34;text\u0026#34;\u0026gt;{{ i.value.text }}\u0026lt;/span\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;\u0026lt;span class=\u0026#34;time\u0026#34;\u0026gt;\u0026lt;a :href=\u0026#34;i.uri\u0026#34;\u0026gt;{{ i.value.createdAt }}\u0026lt;/a\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; なお、vueはjsのframeworkなので\u0026quot;jsで書かれています\u0026quot;という表現が正しいのですが、jsのframeworkはlangという認識でもあるので私はこのように表現することが多いです。reactとかもそうですね。\n","description":"","formated_time":"2023-02-26","href":"https://syui.github.io/blog/post/2023/02/26/bluesky-atproto/","tags":["bluesky","atproto"],"title":"blueskyのweb uiを作ってみた","utc_time":"2023-02-26T00:00:00Z"},{"categories":null,"contents":"\n","description":"","formated_time":"2023-02-26","href":"https://syui.github.io/blog/post/2023/02/26/illust/","tags":["illust"],"title":"イラスト描いてみた129","utc_time":"2023-02-26T00:00:00Z"},{"categories":null,"contents":"今回は、blueskyのclientを作ってcliからpostしてみたので、なにか書きます。\nこれはbsky.social特有のものかもしれませんが、requestを投げる先と投げる要素が結構変わっていたので、ハマりました。あとtypoに気づかずmatrixに質問を投げるなどやらかしていました。\n基本的には公式のlexiconsを見ていけばいい感じでした。\nhttps://atproto.com/lexicons/com-atproto-account\nblueskyではpostの一式をrecordと呼びます。\ncreatedAtを自分で入れなきゃなのなぜでしょう。あと、validateはtrueなのでfalseにしてもいいかも。\n下記のscriptは解説のために載せているだけなので読み替えてください。\n例えば、date %3Nはgnu-dateです。\n#!/bin/sh # com.atproto.session.create # com.atproto.repo.createRecord #brew install coreutils #PATH=\u0026#34;/opt/homebrew/opt/coreutils/libexec/gnubin:$PATH\u0026#34; date=`date \u0026#34;+%Y-%m-%dT%H:%M:%S.%3NZ\u0026#34;` host=bsky.social user=$USER pass=xxx curl -X POST -H \u0026#34;Content-Type: application/json\u0026#34; \\ -d \u0026#34;{\\\u0026#34;handle\\\u0026#34;:\\\u0026#34;$user.$host\\\u0026#34;,\\\u0026#34;password\\\u0026#34;:\\\u0026#34;$pass\\\u0026#34;}\u0026#34; \\ https://$host/xrpc/com.atproto.session.create \u0026gt; token.json token=`cat token.json|jq -r .accessJwt` did=`cat token.json|jq -r .did` url=https://$host/xrpc/com.atproto.repo.createRecord json=\u0026#39;{ \u0026#34;did\u0026#34;: \u0026#34;did:plc:xxx\u0026#34;, \u0026#34;collection\u0026#34;: \u0026#34;app.bsky.feed.post\u0026#34;, \u0026#34;record\u0026#34;: { \u0026#34;text\u0026#34;: \u0026#34;t\u0026#34;, \u0026#34;createdAt\u0026#34;: \u0026#34;2023-02-25T05:06:50.330Z\u0026#34;, \u0026#34;$type\u0026#34;: \u0026#34;app.bsky.feed.post\u0026#34; } }\u0026#39; curl -X POST -H \u0026#34;Content-Type: application/json\u0026#34; \\ -H \u0026#34;Authorization: Bearer $token\u0026#34; \\ -d \u0026#34;$json\u0026#34; $url #[tokio::main] async fn feed_req(url: String, user: String, col: String) -\u0026gt; reqwest::Result\u0026lt;()\u0026gt; { let client = reqwest::Client::new(); let body = client.get(url) .query(\u0026amp;[(\u0026#34;user\u0026#34;, \u0026amp;user),(\u0026#34;collection\u0026#34;, \u0026amp;col)]) .send() .await? .text() .await?; println!(\u0026#34;{}\u0026#34;, body); Ok(()) } #[allow(unused_must_use)] fn feed_com(c :\u0026amp;Context) -\u0026gt; reqwest::Result\u0026lt;()\u0026gt; { let data = Datas::new().unwrap(); let data = Datas { host: data.host, user: data.user, pass: data.pass, }; let url = \u0026#34;https://\u0026#34;.to_owned() + \u0026amp;data.host + \u0026amp;\u0026#34;/xrpc/com.atproto.repo.listRecords\u0026#34;; let col = \u0026#34;app.bsky.feed.post\u0026#34;.to_string(); if let Ok(user) = c.string_flag(\u0026#34;user\u0026#34;) { feed_req(url, user, col); } else { let user = data.user + \u0026amp;\u0026#34;.\u0026#34; + \u0026amp;data.host.to_string(); feed_req(url, user, col); } Ok(()) } fn feed(c: \u0026amp;Context) { feed_com(c).unwrap(); } 今回もrustで書いていたのですが、時間がかかりそうだったので、途中からshellでした。また、時間がある時にrustで書き直すかも。\n","description":"","formated_time":"2023-02-25","href":"https://syui.github.io/blog/post/2023/02/25/bluesky-atproto/","tags":["bluesky","atproto"],"title":"blueskyのclientを少しだけやってみた","utc_time":"2023-02-25T00:00:00Z"},{"categories":null,"contents":"今回は、atp(at-protocol)のself-hostingではなく、bsky.socialにaccountを作成してみました。優しい人がbsky.socialのinvite-codeを発行してくれたので、嬉しい。\nat://syui.bsky.social invite-codeは、こちらの資料がわかりやすいと思います。\nrustで書かれたadenosineというclientが便利です。\nhttps://gitlab.com/bnewbold/adenosine $ git clone https://gitlab.com/bnewbold/adenosine $ cd !$:t $ brew install cmake $ cargo build $ export ATP_HOST=https://bsky.social $ ./target/debug/adenosine ls at://syui.bsky.social at://syui.bsky.social/app.bsky.actor.profile $ ./target/debug/adenosine ls at://syui.bsky.social/app.bsky.actor.profile at://did:plc:uqzpqmrjnptsxezjx4xuh2mn/app.bsky.actor.profile/self $ ./target/debug/adenosine get at://did:plc:uqzpqmrjnptsxezjx4xuh2mn/app.bsky.actor.profile/self { \u0026#34;cid\u0026#34;: \u0026#34;bafyreihkjxz4tl36t5ofn74rsl4lglahdqnpprmbcuza2t5b5kfwysfehu\u0026#34;, \u0026#34;indexedAt\u0026#34;: \u0026#34;2023-02-23T01:14:43.377Z\u0026#34;, \u0026#34;takedownId\u0026#34;: null, \u0026#34;uri\u0026#34;: \u0026#34;at://did:plc:uqzpqmrjnptsxezjx4xuh2mn/app.bsky.actor.profile/self\u0026#34;, \u0026#34;value\u0026#34;: { \u0026#34;$type\u0026#34;: \u0026#34;app.bsky.actor.profile\u0026#34;, \u0026#34;avatar\u0026#34;: { \u0026#34;cid\u0026#34;: \u0026#34;bafkreid6kcc5pnn4b3ar7mj6vi3eiawhxgkcrw3edgbqeacyrlnlcoetea\u0026#34;, \u0026#34;mimeType\u0026#34;: \u0026#34;image/jpeg\u0026#34; }, \u0026#34;banner\u0026#34;: { \u0026#34;cid\u0026#34;: \u0026#34;bafkreif5z5mbbubxuck3kn4fx7guqeznnlm4ujw7pseozn73p3k6czj5xa\u0026#34;, \u0026#34;mimeType\u0026#34;: \u0026#34;image/jpeg\u0026#34; }, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;displayName\u0026#34;: \u0026#34;\u0026#34; } } atはprotocolでblueskyがserverに当たるのかな。\nblueskyは主にserverのdomain-nameに当てられることが多い印象ですが、例えば、iosのclient-nameにも採用されているみたい。\n間違ってるかもしれませんが、大体は下記のイメージを持っています。ns(name-server)はbsky.appならapp.bskyとなります。\n# https://atproto.com/specs/at-uri-scheme at://syui.bsky.social/app.bsky.actor.profile ${proto}://${user}.${host}/${ns}.${req} at://did:plc:は.well-knownの仕組みに似てる感じなのかな、わかりません。基本的にはid(pubkey?)を参照するusernameより確実性、詳細性が高いものだと思われます。\n追記 その後、なにか作りたくなったので、簡単なbotを作ってみた。\n","description":"","formated_time":"2023-02-23","href":"https://syui.github.io/blog/post/2023/02/23/bluesky-atproto/","tags":["bluesky","atproto"],"title":"bsky.socialにアカウントを作ってみた","utc_time":"2023-02-23T00:00:00Z"},{"categories":null,"contents":" https://github.com/bluesky-social/atproto 今回は、at-protocol-serverを立てて、そのdomainからbluesky for iosでloginしてみました。localhostではなくglobal-ipからです。\n$ git clone https://github.com/bluesky-social/atproto $ cd atproto $ ls packages/*/*example AVAILABLE_USER_DOMAINS=\u0026#34;.test,.example.com\u0026#34; $ vim packages/dev-env/src/index.ts `http://${process.env.HOSTNAME}:${this.port}` dbPostgresUrl: process.env.DB_POSTGRES_URL const db = plc.Database.memory() availableUserDomains: [\u0026#39;.test\u0026#39;,\u0026#39;.example.com\u0026#39;] 基本的に.testのAVAILABLE_USER_DOMAINSがないと、UnsupportedDomainのpackages/dev-env/dist/cli.jsからerrorがでます。\nXRPCError: Not a supported handle domain at ServiceClient.call (/app/packages/dev-env/dist/cli.js:91476:15) at process.processTicksAndRejections (node:internal/process/task_queues:95:5) at async generateMockSetup (/app/packages/dev-env/dist/cli.js:123766:17) at async start (/app/packages/dev-env/dist/cli.js:123976:3) { status: 400, error: \u0026#39;UnsupportedDomain\u0026#39;, success: false } 特にhosting先のport等の設定が大変だった印象。\nat-protocolはよくわかってないんだけど、今回色々とやってみて、少しだけ分かってきたような気もしてる。\n重要なのはpds, plc serverかな。これらを別々でも同一でもいいので、実行して、相互に接続できるようにする必要がある感じ。\n現在、test段階ということもあって、色々と制限が多く、deployするためのコードではなさそうな感じがする。そのうちcfgなどもわかりやすくなるんじゃないかなと思ってる。\n今回もmatrixの人達が色々と助けてくれたので、ありがとう。\n海外の開発者とのやり取りは、完全にmatrixに移行してる印象。matrix便利。\n","description":"","formated_time":"2023-02-22","href":"https://syui.github.io/blog/post/2023/02/22/bluesky-atproto/","tags":["bluesky","atproto"],"title":"blueskyのatprotoをdeployしてみた","utc_time":"2023-02-22T00:00:00Z"},{"categories":null,"contents":" https://github.com/bluesky-social/atproto 開発にはlernaを採用しているぽい。\n$ git clone https://github.com/bluesky-social/atproto $ cd atproto $ node -v $ nvm use v18 # https://www.npmjs.com/package/lerna $ npm i -g node-gyp $ npm i -g npm $ npm i -g lerna $ npm i $ lerna run build or $ npm run build $ lerna run build lerna notice cli v6.5.1 \u0026gt; Lerna (powered by Nx) The task graph has a circular dependency @atproto/api:build --\u0026gt; @atproto/pds:build --\u0026gt; @atproto/api:build ✔ @atproto/nsid:build (643ms) ✔ @atproto/common:build (647ms) ✔ @atproto/uri:build (653ms) ✔ @atproto/crypto:build (684ms) ✔ @atproto/lexicon:build (774ms) ✔ @atproto/handle:build (852ms) ✔ @atproto/plc:build (901ms) ✔ @atproto/aws:build (987ms) ✔ @atproto/xrpc:build (657ms) ✔ @atproto/did-resolver:build (661ms) ✔ @atproto/lex-cli:build (1s) ✔ @atproto/xrpc-server:build (708ms) ✔ @atproto/repo:build (655ms) ✔ @atproto/pds:build (767ms) ✔ @atproto/api:build (539ms) ✔ @atproto/dev-env:build (727ms) \u0026gt; Lerna (powered by Nx) Successfully ran target build for 16 projects (5s) $ ls packages/*/dist/ $ ls packages/*/*.env $ cat packages/*/*.env DB_POSTGRES_URL=\u0026#34;postgres://bsky:yksb@localhost/pds_dev\u0026#34; https://github.com/bluesky-social/atproto-website $ npm run dev packages/pds $ cd packages/pds $ cat pacakge.json $ yarn install $ yarn codegen $ open -a docker $ yarn test:pg $ yarn verify # env:DB_POSTGRES_UR, HOSTNAME $ yarn build $ yarn start $ fly proxy 5432 -a xxx DB_POSTGRES_URL=\u0026#34;postgres://xxx@127.0.0.1:5432/xxx\u0026#34; $ node dist/bin.js --- # bluesky for ios server : 192.168.x.x:2853 --- # https://gitlab.com/bnewbold/adenosine/-/blob/main/notes/atproto_quickstart.md $ http get $HOST/xrpc/com.atproto.getAccountsConfig ","description":"","formated_time":"2023-02-19","href":"https://syui.github.io/blog/post/2023/02/19/bluesky-atproto/","tags":["bluesky","atproto"],"title":"blueskyのatprotoをbuildしてみた","utc_time":"2023-02-19T00:00:00Z"},{"categories":null,"contents":"\n最近、いわゆる熟知型というものを採用しています。\n特にナヒーダを入れる場合、ほぼ全てのキャラを熟知特化にしてます。\nなぜなら、このほうが火力が出て螺旋のタイムが大幅に改善されるからです。\n例えば、雷電をナヒーダと組ませる場合でも熟知にしたほうが火力が出ます。\n具体的には、ナヒーダを裏にした雷電の爆発特化(会心+チャージ)より火力が出ます。\nこれは敵の性質や持っている武器、聖遺物や凸の影響が大きいのかもしれません。\n例えば、雷電は完凸、武器も完凸、LVも天賦もMAXで完璧な聖遺物を付けているという状況だと変わってくると思います。\n私は、無課金でプレイしているため、武器もない、聖遺物もない、凸もない、LVも低く、天賦も低い、素材もモラもない、という状況です。\nそのため、熟知を上げて元素反応で火力を上げていくスタイルがシンプルで強い。\nとりあえず、私の環境では、熟知型PTのほうが火力が出るみたい。\n","description":"","formated_time":"2023-02-18","href":"https://syui.github.io/blog/post/2023/02/18/genshin/","tags":["genshin"],"title":"原神、なぜ熟知型なのか","utc_time":"2023-02-18T00:00:00Z"},{"categories":null,"contents":"\n","description":"","formated_time":"2023-02-16","href":"https://syui.github.io/blog/post/2023/02/16/illust/","tags":["illust"],"title":"イラスト描いてみた128","utc_time":"2023-02-16T00:00:00Z"},{"categories":null,"contents":"config.json : https://github.com/vector-im/element-web/blob/develop/docs/config.md\ndist : https://github.com/vector-im/element-web/releases\nまずdistファイルをdownloadします。それをdist/以下に展開し、dist/config.jsonを置きます。\ncloudflare pagesにてrepositorieを連携し、public-rootをdistに設定します。\ncommitすれば自動でcloudflare pagesにdeployされます。\nhttps://github.com/vector-im/element-web\nhttps://developers.cloudflare.com/pages\n感想 cloudflare pagesもめちゃくちゃ使いやすいし、element webも非常に展開しやすくなってる。\nそのため、elementは基本的にユーザーの負担なしで運用できる環境が整っています。\ngithub, cloudflareなど各種サービスのpages(web-server)を使えばいいし、通常使用でのtrafficはそこまでweb-serverの負担にならない。\nもしこだわりがあるなら、hostしてみてもいいかもしれません。\nとはいえ、app.element.ioで事足りるというのは、そのとおり。\ngithub pages github pagesでも動作したので追記しておきます。\nhttps://docs.github.com/ja/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site ","description":"","formated_time":"2023-02-13","href":"https://syui.github.io/blog/post/2023/02/13/matrix-element-web/","tags":["matrix","element","web"],"title":"element webをcloudflare pagesでhostしてみた","utc_time":"2023-02-13T00:00:00Z"},{"categories":null,"contents":"次のピックアップ ナヒーダの2回目のピックアップ時期に関して予想します。\nおそらくv3.6になると予想されます。\nこれまでの傾向(風国、岩国、雷国)からすると、初回ピックアップの次は+0.4らしい。\n現在はv3.4なので、+0.1を1ヶ月として、おそらく2ヶ月後の4月くらいになると思われます。\n無課金では、1ヶ月で原石は7,000ほど貯まるようです。\n現在の手持ちが23000と仮定すると、2ヶ月後には37,000と推定されます。\n私は期待値で7000を1キャラとし、すり抜けで14000と計算しています。\nただし、運が悪かった場合は9000を1キャラとし、18000と考えます。これを前提とすると、前回すり抜けていることを織り込んで54000-9000=45000となります。\n7000で計算した場合とは2000x5=10000の違いがあります。\nしかし、全部すり抜ける可能性は低く、残る3凸までを全て天井で引く確率は低いと考えられます。最終的には期待値を前後する値になると思います。\n現時点での目標は35,000なので、2ヶ月後にはかろうじて到達する予定。\n凸のエフェクト 原神は凸によってエフェクトが変わったりするキャラがたくさんいます。\nナヒーダは完凸すると元素爆発のエフェクトが変わるらしい。\n個人的には、こういうのが一番凸するモチベーションに影響します。\n天賦 やっと天賦がMAXになった。\n雷のような怒り、ナヒーダ 過負荷、感電、超電導、超開花反応によるダメージ＋40％、超激化反応によるダメージアップ効果＋20%。\n上記元素反応または原激化反応を起こすと、元素スキルのクールタイム-1秒。0.8秒毎に最大1回のみ発動可能。\n前回、雷のような怒りを装備したら面白いんじゃないかと思って、試してみたのですが\u0026hellip;。\nあまりに弱すぎて死んだ。\n何も効果が乗らない聖遺物付けてるのと同じくらい?\nナヒーダで攻撃してると原激化って表示があるんですが、多分、クールタイムは減少してるのかな。わかんないけど、してるような気もする。\nで、この効果に関して言うと、指定されてる元素反応が発生した場合、ダメージ+40%になると思っています。つまり、過負荷が1000だったとしたら、1400ですね。ですが、違うかもしれません。\n次にダメージアップ効果に関してですが、まあ単純に考えて超激化が起こった時のダメージ+20%だと思っています。違うかもしれません。\n次に、指定された元素反応または原激化が起こった時、スキルのクールタイム-1だと思っています。原激化は雷と草が合わされば発生すると思っていて、まず雷を当てて、次に草を当てると、原激化になると思っています。これはナヒーダでも起こせると思っています。ですが、違うかもしれません。\nとりあえず、この聖遺物はナヒーダには合わない。雷攻撃が可能なキャラに持たせるしかなさそう。\n例えば、万葉は雷ダメージも出せるので、全てのセット効果を有効に活用できるかもしれない。強いかどうかは別にして。\n結局のところ、そのキャラに合った聖遺物を付けるのが一番よさそうという結論になりました。\nナヒーダなら鍾離に森林でも持たせて金メッキ、あるいは森林がいいと思う。\nナヒーダを強く使うにも、聖遺物をなんとか工夫するのではなく、聖遺物はキャラに合ったものを付け、その上で、キャラ特有の効果によって補佐するのが一番良さそう\n今気に入ってるのは、ベネット+万葉+雷電(全員熟知)で、燃やしてからのナヒーダ爆発かな\u0026hellip;。\n","description":"","formated_time":"2023-02-12","href":"https://syui.github.io/blog/post/2023/02/12/genshin/","tags":["genshin"],"title":"原神、ナヒーダ完全体を目指す3","utc_time":"2023-02-12T00:00:00Z"},{"categories":null,"contents":"聖遺物 森林の効果は重複不可能らしいことに気づいたので、改めて聖遺物を考えてみました。\n今回は、ただ考えてみただけの話になります。\n正直、わからないことだらけですし、調べてもいません。それを前提に話を進めます。\n最初に良さそうだと思ったのは、雷のような怒りでした。\nナヒーダのシャッターが強いし、便利なので、それが強化できるといいなと考えたのです。\n雷のような怒り 雷のような怒りは超激化, 原激化でダメージアップやクールタイムの減少ができるようです。\nしかし、わからないところが多い。\nまず、これらの元素反応には確定で効果が発動するのでしょうか。それとも最終的にその反応を起こしたキャラがこの聖遺物をつけている必要があるのでしょうか。\n文面を読む限りでは、元素反応が発生した場合に効果が発動するように見えます。\nとすると、これは誰につけてもいいということになります。例えば、鍾離でもいい。\n次に、これらの元素反応を起こすと、原激化を含めて、スキルのクールタイムが-1になるようです。これは大きすぎる、と私は思いました。\nというのも、ナヒーダのスキルな意外と高火力かつ範囲が広く、元素反応にも利用できるので、多用できると助かるのです。\n現在、祭礼を装備させているのですが、その便利さを実感しています。\n燃え盛る炎の魔女 ベネットを入れる場合に使う聖遺物です。\n正直、燃焼, 烈開花のダメージは結構大きいような気がします。例えば、ナヒーダは元素爆発のモーション中に相手にダメージを与えることができません。\nしかし、例えば、敵が燃焼している場合、こちらは無敵状態、相手はダメージが継続している気がするのです。\nしたがって、ナヒーダで元素爆発を打つときは、敵を燃焼させておくといいかもしれないと思っています。\n楽園の絶花 こちらもあまり良くわかっていない聖遺物になります。\n誰に付ければいいかもよくわかりませんが、おそらく、ナヒーダか水キャラでしょう。\nまた、装備者自身が開花、超開花、烈開花を起こした後\u0026hellip;\nという文面があります。\nここから読み取れるのは、元素反応が発生した場合は基本的に効果が乗ることを意味するように思いました。\nもしそうでないなら、装備者自身がという文言は不要になるからです。\nつまり、装備者を含めて...また、装備者自身が...という感じなのではないでしょうか。\nしたがって、上記すべての聖遺物はこの系統に該当する可能性が高いと考えています。\n間違ってたらすみません。\n現在は行秋、バーバラにつける予定です。\n深林の記憶 誰に付けるかが問題ですが、一番はナヒーダです。\nただ、鍾離に付けてもいいのではないかと思っていて、鍾離デバフと合わせて、草耐性-50%になるのでわかりやすいのです。定期的にスキル、爆発を当てなければならないので、問題はそのへん。\n金メッキの夢 この聖遺物が一番扱いに困っていて誰につけよう。\nもしかして、つけなくてもいいのではと思ってる聖遺物です。\nシュミレーションによると、最も強いと言われているようですが、それはそれで面白くないような気がしてる。\nですが、最終的にナヒーダにつけるかもしれない。または、雷のような怒りをナヒーダに付けられた場合は、金メッキを雷電につけるかも。\n現在の理想 雷の怒系統の聖遺物が装備者関係なく反応を起こした場合に乗ること\nナヒーダに雷の怒を装備して、スキルのクールタイムダウンができること\n雷電に金メッキを装備して、熟知を上げること\n鍾離に森林を装備して、草デバフを最大化すること\n行秋, バーバラに楽園を装備して、適当にダメージを上げること\nベネットに炎魔女を装備して、適当にダメージを上げること\n雷のような怒りってナヒーダに装備していいんだろうか\u0026hellip;わからない。\n","description":"","formated_time":"2023-02-10","href":"https://syui.github.io/blog/post/2023/02/10/genshin/","tags":["genshin"],"title":"原神、ナヒーダ完全体を目指す2","utc_time":"2023-02-10T00:00:00Z"},{"categories":null,"contents":"あらすじ 以前、草神と予想されていたナヒーダがピックアップされたばかりの頃。\n私は\n(1) 貯めてきた原石。\n(2) これ以上、新しいキャラを引いても過剰で育成できないという判断。\n(3) 一人くらい完凸のキャラを試したいという好奇心。\nこの3つが重なり、ナヒーダの完凸を決意します。\nストーリーを進めていくうち、ナヒーダは全く好きになれないことが判明。音声も日本語版より英語版が好みだった。\nしかし、全ての原石をつぎ込んだガチャは爆死。ナヒーダを3凸してしまった以上、あとには引けない。このように無課金勢の選択は取り返しがつかないのである。\n最強のナヒーダを目指すことにしたのであった。\n見た目から まずは見た目から。\n翼と精霊を付けました。\n例えば、無課金 + 完凸 + 翼(草) + 精霊(緑) + 英語音声でナヒーダを使用している人は少ないはず。\n原石 今度こそ確実に完凸を仕留める予定。\n現在の原石は18,000で、運命は32です。換算すると23000くらい。\n前回のガチャですり抜けてるので、35000くらい必要になる計算です。\nがんばる。\n完凸後の展望 完凸後は、もうナヒーダでやっていくしかありません。なぜなら、完凸しているからです。\nということで、完凸後の展望を少しだけ書きます。\n今現在の環境では超開花。\nナヒーダ完凸の爆発は草元素ダメージなので、全員に森林をもたせて、草耐性下げるのはどうだろう。\nただ、原神というゲームは、ステータス効果が上に行けば行くほど低くなるので、何でも盛ればいいというものではなく、そのキャラの適正な聖遺物、程よいステータスを盛っていくのが一番結果が出ると思われます。例えば、熟知を2000,3000盛ってもあまり結果を実感できないのはそのへん。\nまあ、だからこそバランスが取れていて、面白いわけですが。\nあと、原神は、どんなにすごい聖遺物や武器、完凸があっても、油断してたらすぐに死ぬというのも、バランス調整的に素晴らしいところ。\n","description":"","formated_time":"2023-02-09","href":"https://syui.github.io/blog/post/2023/02/09/genshin/","tags":["genshin"],"title":"原神、ナヒーダ完全体を目指す1","utc_time":"2023-02-09T00:00:00Z"},{"categories":null,"contents":"damusはnostr protocolに対応したiosのclientです。\nhttps://github.com/nostr-protocol/nostr\nhttps://github.com/damus-io/damus\nhttps://www.reddit.com/r/nostr/comments/10qmsos/damus_for_ios_is_live/\nverify https://gist.github.com/metasikander/609a538e6a03b2f67e5c8de625baed3e\npublic-keyはhexに変換します。\nhttps://damus.io/key/\n# domain root $ cd public $ vim ./.well-known/nostr.json { \u0026#34;names\u0026#34;: { \u0026#34;\u0026lt;name\u0026gt;\u0026#34;: \u0026#34;\u0026lt;pubkey\u0026gt;\u0026#34; } } web client https://snort.social\ncli client とりあえずcli client作ってpostしてみた。\nexampleとしてはこんな感じになるんじゃないかというのを色々なパターンで書いてみた。\npub mod data; use std::env; use url::Url; use data::Data as Datas; use seahorse::{App, Command, Context}; use nostr::{Event, EventBuilder, Metadata}; use nostr::key::{FromBech32, Keys}; use nostr::message::ClientMessage; use tungstenite::{connect, Message as WsMessage}; const WS_ENDPOINT: \u0026amp;str = \u0026#34;wss://relay.damus.io\u0026#34;; use nostr_sdk::{Client}; use nostr::SubscriptionFilter; use nostr::util::time::timestamp; fn main() { let args: Vec\u0026lt;String\u0026gt; = env::args().collect(); let app = App::new(env!(\u0026#34;CARGO_PKG_NAME\u0026#34;)) .author(env!(\u0026#34;CARGO_PKG_AUTHORS\u0026#34;)) .description(env!(\u0026#34;CARGO_PKG_DESCRIPTION\u0026#34;)) .version(env!(\u0026#34;CARGO_PKG_VERSION\u0026#34;)) .usage(\u0026#34;nor [option] [x]\u0026#34;) .command( Command::new(\u0026#34;timeline\u0026#34;) .usage(\u0026#34;nor t\u0026#34;) .description(\u0026#34;timeline\u0026#34;) .alias(\u0026#34;t\u0026#34;) .action(t), ) .command( Command::new(\u0026#34;notify\u0026#34;) .usage(\u0026#34;nor n\u0026#34;) .description(\u0026#34;notify\u0026#34;) .alias(\u0026#34;n\u0026#34;) .action(n), ) .command( Command::new(\u0026#34;status\u0026#34;) .usage(\u0026#34;nor s\u0026#34;) .description(\u0026#34;status\u0026#34;) .alias(\u0026#34;s\u0026#34;) .action(s), ) .command( Command::new(\u0026#34;post\u0026#34;) .usage(\u0026#34;nor p {}\u0026#34;) .description(\u0026#34;post message, ex: $ nor p $text\u0026#34;) .alias(\u0026#34;p\u0026#34;) .action(p), ) ; app.run(args); } #[tokio::main] async fn timeline() -\u0026gt; anyhow::Result\u0026lt;()\u0026gt; { let data = Datas::new().unwrap(); let my_keys = Keys::from_bech32(\u0026amp;data.secret_key)?; let mut client = Client::new(\u0026amp;my_keys); client .add_relay(\u0026#34;wss://relay.damus.io\u0026#34;, None) .unwrap(); client.connect_relay(\u0026#34;wss://relay.damus.io\u0026#34;, true).await.unwrap(); client.connect().await?; let subscription = SubscriptionFilter::new() .pubkeys(vec![my_keys.public_key()]) .since(timestamp()); let t = client.get_events_of(vec![subscription]).await.unwrap(); println!(\u0026#34;{:#?}\u0026#34;, t); Ok(()) } fn t(_c: \u0026amp;Context) { timeline().unwrap(); } #[tokio::main] async fn notify() -\u0026gt; anyhow::Result\u0026lt;()\u0026gt; { let data = Datas::new().unwrap(); let my_keys = Keys::from_bech32(\u0026amp;data.secret_key)?; let client = Client::new(\u0026amp;my_keys); let notifications = client.notifications(); println!(\u0026#34;{:?}\u0026#34;, notifications); Ok(()) //loop { // let mut notifications = client.notifications(); // while let Ok(notification) = notifications.recv().await { // println!(\u0026#34;{:?}\u0026#34;, notification); // } //} } fn n(_c: \u0026amp;Context) { notify().unwrap(); } fn status() -\u0026gt; anyhow::Result\u0026lt;()\u0026gt; { let data = Datas::new().unwrap(); let metadata = Metadata::new() .name(data.name) .display_name(data.display_name) .about(data.about) .picture(Url::parse(\u0026amp;data.picture)?) .nip05(data.nip); let my_keys = Keys::from_bech32(\u0026amp;data.secret_key)?; let event: Event = EventBuilder::set_metadata(\u0026amp;my_keys, metadata)?.to_event(\u0026amp;my_keys)?; println!(\u0026#34;{:#?}\u0026#34;, event); Ok(()) } fn s(_c: \u0026amp;Context) { status().unwrap(); } fn post(c: \u0026amp;Context) -\u0026gt; anyhow::Result\u0026lt;()\u0026gt; { let text = c.args[0].to_string(); let data = Datas::new().unwrap(); let my_keys = Keys::from_bech32(\u0026amp;data.secret_key)?; let event: Event = EventBuilder::new_text_note(\u0026amp;text, \u0026amp;[]).to_event(\u0026amp;my_keys)?; let (mut socket, _response) = connect(WS_ENDPOINT).expect(\u0026#34;Can\u0026#39;t connect to relay\u0026#34;); let msg = ClientMessage::new_event(event).to_json(); socket.write_message(WsMessage::Text(msg))?; Ok(()) } fn p(c: \u0026amp;Context) { post(c).unwrap(); } https://docs.rs/nostr/latest/nostr/\nhttps://docs.rs/nostr-sdk/latest/nostr_sdk/\n","description":"","formated_time":"2023-02-05","href":"https://syui.github.io/blog/post/2023/02/05/damus/","tags":["nostr","rust","damus","sns"],"title":"damusをはじめてみた","utc_time":"2023-02-05T00:00:00Z"},{"categories":null,"contents":"バッジを作った際に使ったアイコンに不都合があったので新しくデザインしました。\n例えば、下記のアイコンはアルファベットのAがモデルになっています。\nしかし、Aというのはどの方向から見ても同じではありませんよね。バッジにする場合、それだと不都合があるのです。\nあたしンちというアニメに、こんなシーンがあります。\n今日は、お父さんとお母さんがお出かけだったが、お母さんが怒る\nお母さん「ちょっと、お父さん、変なところがあったら教えなさい！」\nお父さん「\u0026hellip;\u0026hellip;」\nお父さんは、お母さんが付けているトンボのバッジに気づく。トンボが逆さになっている\nお父さん「それ、トンボがしたむいとるけど、ほんとにいいんか？」\nお母さん「これはこれでいいんです」\nお父さん「ほんとにいいんか、トンボがしたむいてて」\nお母さん「いいんです」\nお父さん「ほんとにそれでいいんか」\nお母さん「これはこういうもんなの！間違い探しじゃないんだから」\nこの話が一体何なのかというと、バッジには向きがあって、お母さんにとってトンボを逆さにするのが正解だったようで、わざわざトンボを下向きにセットしていたのです。\nどちらが上でどちらが下か。明確なデザインならいいのですが、分かりづらいデザインでそれはめんどくさすぎる。\nということで、3つのどの起点から見ても同じように見えるデザインを作りました。\n細かいところですが、気になったので。\n","description":"","formated_time":"2023-02-04","href":"https://syui.github.io/blog/post/2023/02/04/icon/","tags":["icon"],"title":"アイコンのリデザインした","utc_time":"2023-02-04T00:00:00Z"},{"categories":null,"contents":"自作品というのは、普通に作ると経年劣化が発生します。\nこれはカードを作った時に気づきました。\nそして、カードは改良したけど、バッジにはそういった改良を施していませんでした。\nしたがって、今回はバッジにその改良を施し、古いバージョンを試作品のストレージに移しました。\nいつもバッグには自分のアイコンだけ付けて、他のはそのへんに転がってます。\n","description":"","formated_time":"2023-02-03","href":"https://syui.github.io/blog/post/2023/02/03/badge/","tags":["badge","make"],"title":"バッジ作ってみた2","utc_time":"2023-02-03T00:00:00Z"},{"categories":null,"contents":"初代macbook airはステッカーなしですが、macbook airが増えるにつれ見分けがつかないため、ステッカーを貼るようになりました。あとリンゴマーク部分のプロテクト。\nmacbook air 13-inch (m1) 今回はカード制作の知識を生かして、透明なオーロラシールを採用。\n昔、サークル型のステッカーは切り取る作業に苦労した覚えがあるんですよ。\nなので、今回はハニカム型にしてハサミを入れやすいようにしています。\nボックス型もいいのですが、ハニカムより調整が難しい気がしてる。\nハニカムだと多少ズレても違和感ないですし、おすすめかもしれません。\nあと、壁紙と統一してみた。\n皆様は、どのようにノートパソコンを愛用されていますか?\n","description":"","formated_time":"2023-02-02","href":"https://syui.github.io/blog/post/2023/02/02/macbook/","tags":["macbook","make"],"title":"ステッカーを作ってみた2","utc_time":"2023-02-02T00:00:00Z"},{"categories":null,"contents":"バッテリーとディスプレイを交換しました。新品みたいな感じになったので良かった。\n現在、se3を使ってるんだけど、古いse1にはsecurity-patchも降ってきてるし、未だにメインでも十分使えると思ってる。この機種がとても気に入ってる。\niphone5sを何度か分解していて中身はほぼ一緒なので、今回は勘でやった。ディスプレイはカメラとボタンを外さないといけなかったので、ちょっと面倒だった。\nmacbook air(intel)も何度か分解、修理してて、バッテリー、ディスプレイ、キーボード交換をやってる。この機種も構造がほぼ一緒なので、分解は慣れてたんだけど、今使い始めてる機種はそうではないので、ちょっと寂しい。\nでも壊れたら新しいの買ったあとに、壊れたやつも修理して使い続けると思う。\nifixit 修理する権利\n","description":"","formated_time":"2023-02-01","href":"https://syui.github.io/blog/post/2023/02/01/iphonese/","tags":["iphone"],"title":"iphone se1の部品交換","utc_time":"2023-02-01T00:00:00Z"},{"categories":null,"contents":" amojiとはai mojiの略で、作中で使用される文字のこと。\nこういうの作るとめんどくさいことになるのですが、作りたい気分だったので作った。\n最初と最後の文字はこだわったけど、それ以外はあまり。\n今回は、この文字にまつわることを適当に話します。\n作中の意味 yuiという作品があります。amojiはその作中で使用されるかもしれない文字になります。\nそこに出てくるキャラクターの輪っかやiの部分のロゴフォント、またはアイコンは、アルファベットのAがモデルになっています。\nなぜ他の部分は小文字でiだけが大文字に見えるのかというと、この部分だけ大文字で読むようにという意味が込められています。つまり、yuiを縦読みで読むとiの部分がAIとも読めるようになっています。\nつまり、i = AI / u / yですね。\nこれは、小説や漫画を右側から読む慣習を当てはめています。\nしかし、ロゴフォントがダサすぎるので、今回は新しい文字を使いデザインし直しました。\n隠された設定の一部 アイは、色々な場所を旅して、色々なものを作り、色々なことを行います。\nその中には知恵の木の実のようなものを作ったのではという描写があります。\n隠された設定では、知恵の実で何かを変えたその時、その瞳は以前とは異なる文字のような形状に変化したという言い伝えがあります。\n","description":"","formated_time":"2023-01-22","href":"https://syui.github.io/blog/post/2023/01/22/illust/","tags":["illust"],"title":"amoji作った","utc_time":"2023-01-22T00:00:00Z"},{"categories":null,"contents":"最初は、ファンアートとして原神、ナヒーダの髪おろしたバージョンを描いていたつもりだったんだけど\u0026hellip;\nあまりに衣装を描くのが雑すぎたため、とてもナヒーダに見えず、ナヒーダをモデルにしたオリジナルキャラを描くことに切り替えた。\n新キャラにしようか迷ったんだけど、一応、アイの変身した姿ということになりそう。でもわかんない。(キャラは増やすと大変\n","description":"","formated_time":"2023-01-21","href":"https://syui.github.io/blog/post/2023/01/21/illust/","tags":["illust"],"title":"イラスト描いた127","utc_time":"2023-01-21T00:00:00Z"},{"categories":null,"contents":"原神の配信で最も面白いものはなんでしょう。\nそれは、最強のキャラを使って、敵を楽々倒している動画でしょうか。螺旋の最速タイムを出している動画でしょうか。課金してガチャを回している動画でしょうか。あるいは、その他のなにかすごいことをしている動画でしょうか。\n原神の配信で最も面白いもの。\nそれは初心者の動画です。\n原神では初心者の配信が一番面白い。\n原神を始めたばかり、右も左も分からない、そんな中、配信者は自分なりにストーリーを進めていく。\nそんな動画はすごく面白い。\n特に攻略や性能情報を見ていない、あまり気にしていない人達の配信がおすすめです。それが特に面白い。\n逆にいえば、攻略や性能の話ばかりしている私はものすごくつまらない。\n螺旋の話でもやりはじめるようになったら\u0026hellip;もうおしまいです。\nということで、今期の螺旋について解説。\nバーバラが強い バーバラが強いです。今後はメインとして使っていく予定。\nあと戦っているとき私が気にしているのは、元素粒子の回収くらいかな。\nスキルを素早く回せるクールタイムが短いキャラで粒子を取り出し、それを爆発が重いキャラで回収します。今回の例でいうと、万葉とベネットのスキルを回して香菱に交代するみたいな感じかな。まあ、そのへんは臨機応変に。\n黄金王獣は、全くよくわからないボスだったけど、前回で慣れました。\n夜蘭は引かない 私は、今回も夜蘭はスルーです。\n一応、夜蘭を確保するだけの原石は貯まりましたが、スルーします。\n初心者になるために 今回は、初心者の配信が一番面白いという話をしました。\nなぜなら、そういった人達が一番楽しんでいるから。\n私もなにか初心者になれるものを見つけていきたい。\n原神の中にもまだまだたくさんありますよ。\n","description":"","formated_time":"2023-01-16","href":"https://syui.github.io/blog/post/2023/01/16/genshin/","tags":["genshin","game"],"title":"原神、螺旋の真実と今後の方針","utc_time":"2023-01-16T00:00:00Z"},{"categories":null,"contents":"terminalのOSC52という機能を使うと、ssh-sessionでもcopyしたものがsystemのclipboardに入ります。これらはosの互換性に関係ないため幅広く使えます。\nただし、clipboardの共有は、往々にしてセキュリティ問題があるため注意してください。\nまた、tmuxではできなかったので、iterm2の別タブで行いました。\niterm2の設定は、General -\u0026gt; Selection -\u0026gt; Application ... access clipboardです。\nまず、tty-copyはコマンドです。tty-copy textというように使います。ssh先でもssh元のclipboardに入ります。\nhttps://github.com/jirutka/tty-copy\n次にvim-pluginです。\nhttps://github.com/ojroques/vim-oscyank\n例えば、yyで同時にOSCYankRegが実行されてsystemのclipboardに入れる設定です。\nPlug \u0026#39;ojroques/vim-oscyank\u0026#39;, {\u0026#39;branch\u0026#39;: \u0026#39;main\u0026#39;} \u0026#34;let g:oscyank_silent = v:true let g:oscyank_term = \u0026#39;tmux\u0026#39; autocmd TextYankPost * if v:event.operator is \u0026#39;y\u0026#39; \u0026amp;\u0026amp; v:event.regname is \u0026#39;\u0026#39; | execute \u0026#39;OSCYankReg \u0026#34;\u0026#39; | endif autocmd TextYankPost * if v:event.operator is \u0026#39;y\u0026#39; \u0026amp;\u0026amp; v:event.regname is \u0026#39;+\u0026#39; | execute \u0026#39;OSCYankReg +\u0026#39; | endif ただ、tmux上で動作しないのがよくわからない。\ntmuxにはset-option -g set-clipboard on等を設定して、commandやpluginもtmuxに該当する項目があるのに動作しませんでした。\n","description":"","formated_time":"2023-01-15","href":"https://syui.github.io/blog/post/2023/01/15/nvim/","tags":["terminal","vim","clipboard"],"title":"terminalのOSC52を使いclipboardを共有する","utc_time":"2023-01-15T00:00:00Z"},{"categories":null,"contents":"twitter devにて、app(client)がbanされはじめているらしいという情報があり、自分が作ったやつは大丈夫かなと思い確認してみると、大丈夫そうだったので、ついでにmastodonのbotと連携させて遊んでたら\u0026hellip;\n/usr/bin/jq\n\u0026quot;https://t.co/zZHO828PqJ\u0026quot;\n\u0026quot;4.0.0 (compatible; Mitra 1.9.0)\u0026quot;\n\u0026mdash; syui (@syui__) January 14, 2023 結果としてban祭りに参加。\n現在、read権限はあるんだけど、write権限が突然消えました。\ntwitter devで確認してみると\nThis App has violated Twitter Rules and policies. As a result, certain functions will be limited\n本アプリは、Twitterのルールやポリシーに違反しています。そのため、一部の機能が制限されます。\nということらしい。\n#stablediffusion pic.twitter.com/LfESE70tv6\n\u0026mdash; syui (@syui__) January 14, 2023 絵が駄目だったのか、mastodonのlinkがダメだったのか、あるいはそれ以外が原因か\u0026hellip;わかりませんが、楽しかったからいいか。\n仕組みとしては、botにtwitter-modeを実装して、twitter-modeがenableのときに特定のコマンド出力をtwitterにも所定の形式で投稿するようにしました。\ntimerなども実装してたので、例えば、時間を指定すると毎日stable-diffusionで画像を生成して投稿してくれる機能にも対応しました。twitter-modeに含めただけだけど。\nそういえば、goで書いているclientのgh-actions(releases)が以前から壊れてて、直さないとなあと思ってたので、ついでに直したのと、clientに今回の投稿に必要なオプションを追加したりしました。gh-actionsはgoxをやめてgoreleaserを使い始めた。\nname: release on: pull_request: branches: - master types: - closed push: tags: - \u0026#34;v[0-9]+.[0-9]+.[0-9]+\u0026#34; jobs: goreleaser: runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v1 with: fetch-depth: 1 - name: Setup Go uses: actions/setup-go@v3 with: go-version: 1.19 check-latest: true - name: Run GoReleaser uses: goreleaser/goreleaser-action@v1 with: version: latest args: release --rm-dist env: GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} C_KEY: ${{ secrets.C_KEY }} CS_KEY: ${{ secrets.CS_KEY }} project_name: twg env: - GO111MODULE=on before: hooks: - go mod tidy builds: - main: . binary: twg ldflags: - -s -w - -X main.Version={{.Version}} - -X main.Revision={{.ShortCommit}} - -X github.com/syui/twg/oauth.ckey={{ .Env.C_KEY }} - -X github.com/syui/twg/oauth.cskey={{ .Env.CS_KEY }} env: - CGO_ENABLED=0 archives: - name_template: \u0026#39;{{ .ProjectName }}_{{ .Os }}_{{ .Arch }}{{ if .Arm }}v{{ .Arm }}{{ end }}\u0026#39; replacements: darwin: darwin linux: linux windows: windows 386: i386 amd64: x86_64 format_overrides: - goos: windows format: zip release: prerelease: auto ","description":"","formated_time":"2023-01-14","href":"https://syui.github.io/blog/post/2023/01/14/twitter/","tags":["twitter","api","go"],"title":"twitter devのban祭りに参加した","utc_time":"2023-01-14T00:00:00Z"},{"categories":null,"contents":"mitraは、rustで書かれた仮想通貨のwalletと連携可能なインスタンスです。\nuiとbackendが素晴らしく、とてもシンプルです。\nhttps://codeberg.org/silverpill/mitra\nhttps://codeberg.org/silverpill/mitra-web\ngotosocialと同じくmatrixの設計を参考にしているように感じられました。\n$ git clone https://codeberg.org/silverpill/mitra $ cd mitra $ cp config.yaml.example config.yaml $ cargo build --release --features production $ cat .env.local ENVIRONMENT=development #ENVIRONMENT=production CONFIG_PATH=./config.yaml #CONFIG_PATH=/app/server/config.yaml #VUE_APP_BACKEND_URL=https://example.com #VUE_APP_BACKEND_URL=http://example.com:8380 #PORT=8380 $ git clone https://codeberg.org/silverpill/mitra-web $ cd mitra-web $ npm install --no-save $ npx allow-scripts $ npm run build $ mv dist ../ database_url: postgres://mitra:mitra@127.0.0.1:55432/mitra storage_dir: files web_client_dir: dist http_host: \u0026#39;0.0.0.0\u0026#39; http_port: 8380 instance_uri: example.com instance_title: Mitra instance_short_description: My instance instance_description: My instance registrations_open: true #http_host: \u0026#39;127.0.0.1\u0026#39; #instance_uri: example.com:8380 fly.ioではinstance_uri: example.comを使用します。portを指定すると502になります。\nまた、http_host: 0.0.0.0にしてください。\n$ docker-compose up -d $ ./target/release/mitra --- $ curl -sL http://127.0.0.1:8380/api/v1/instance fly.ioのdockerでやろうと思うと、けっこう大変です。\n.dockerignoreにmitra/{target,files}を追加しておいてください。\nDockerfile\nFROM rust:latest as builder WORKDIR /app ADD mitra/ ./ RUN cargo build --release --features production RUN mv target/release/mitra ./ RUN mv target/release/mitractl ./ RUN mkdir -p /app/files app = \u0026#34;xxx\u0026#34; kill_signal = \u0026#34;SIGINT\u0026#34; kill_timeout = 10 [env] PORT = \u0026#34;8380\u0026#34; [experimental] cmd = \u0026#34;./mitra\u0026#34; [[services]] internal_port = 8380 protocol = \u0026#34;tcp\u0026#34; [[services.ports]] handlers = [\u0026#34;http\u0026#34;] port = 80 [[services.ports]] handlers = [\u0026#34;tls\u0026#34;, \u0026#34;http\u0026#34;] port = 443 [mounts] source=\u0026#34;mitra_data\u0026#34; destination=\u0026#34;/app/files\u0026#34; deploy $ flyctl deploy --remote-only https://github.com/fly-apps/hello-rust\nhttps://community.fly.io/t/error-deploying-fly-apps-hello-rust/5664\nnode m1だとcompileしないといけないらしいので時間がかかります。\narchとかでやったほうがいいかも。\nnode : 14\nnpm : 7+\n$ paru -S nvm $ nvm install v14 $ nvm use v14 $ npm i -g npm $ npm -v $ node -v $ nvm use v14 cloudflare 他のインスタンスではcname -\u0026gt; dns-onlyを選択しますが、mitraではcname -\u0026gt; proxiedを選択します。\n$ fly certs create $app.fly.dev $ fly certs create $sub.example.com $ fly certs show $sub.example.com cname : _acme-challenge.$app, $app.fly.dev.xxx.flydns.net, Proxied\ncname : $sub, $app.fly.dev, Proxied\noption #ENVIRONMENT=development ENVIRONMENT=production CONFIG_PATH=./config.yaml #VUE_APP_BACKEND_URL=https://example.com #PORT=8380 ipfs_api_url: \u0026#39;http://0.0.0.0:5001\u0026#39; ipfs_gateway_url: \u0026#39;http://0.0.0.0:8001\u0026#39; app = \u0026#34;xxx\u0026#34; kill_signal = \u0026#34;SIGINT\u0026#34; kill_timeout = 10 [env] PORT = \u0026#34;8380\u0026#34; [experimental] cmd = \u0026#34;./mitra\u0026#34; allowed_public_ports = [] auto_rollback = true [[services]] http_checks = [] internal_port = 8380 processes = [\u0026#34;app\u0026#34;] protocol = \u0026#34;tcp\u0026#34; script_checks = [] [services.concurrency] hard_limit = 25 soft_limit = 20 type = \u0026#34;connections\u0026#34; [[services.ports]] force_https = true handlers = [\u0026#34;http\u0026#34;] port = 80 [[services.ports]] handlers = [\u0026#34;tls\u0026#34;, \u0026#34;http\u0026#34;] port = 443 [[services.ports]] handlers = [\u0026#34;tls\u0026#34;, \u0026#34;http\u0026#34;] port = 5001 [[services.ports]] handlers = [\u0026#34;tls\u0026#34;, \u0026#34;http\u0026#34;] port = 8001 [mounts] source=\u0026#34;mitra_data\u0026#34; destination=\u0026#34;/app/files\u0026#34; $ fly ips list $ flyctl ips release 12.34.56.78 https://community.fly.io/t/announcement-shared-anycast-ipv4/9384 web-ui/about 改行コードには\\nを使えます。\ninstance_description: \u0026#34;foo\\nbar\u0026#34; foo bar ","description":"","formated_time":"2023-01-09","href":"https://syui.github.io/blog/post/2023/01/09/mitra/","tags":["rust","activitypub","sns","fly"],"title":"mitraをfly.ioにdeployしてみた","utc_time":"2023-01-09T00:00:00Z"},{"categories":null,"contents":"gotosocialは今現在最も簡単に建てられるactivitypubのインスタンスです。\nhttps://github.com/superseriousbusiness/gotosocial\ngolangを採用しているというのが大きく、dbもsqliteです。最もシンプルな構成だと思います。\nsqliteは、あまり速くはないもののshellとの親和性が非常に高いため、dbの中では最も扱いやすい部類に入ります。あくまで個人感想。\nfly.ioは、sqliteをvol mountで使用できるためserverを立てる必要がありません。したがって、全て一つのserver内で完結します。\n例えば、mastodonの場合、web \u0026amp; api server, redis-server, pg-serverと3つが必要になります。\nただし、gotosocialは、最低限のweb-uiしか持ちません。したがって、通常操作するには、uiをつけるか、あるいはclientから行う必要があります。\nこれは、matrixの設計に似ています。\nweb-client : https://pinafore.social/\nandroid : https://tusky.app/\nfly.io Dockerfile\nFROM superseriousbusiness/gotosocial WORKDIR /gotosocial ADD config.yaml /gotosocial/ CMD [\u0026#34;--config-path\u0026#34;, \u0026#34;/gotosocial/config.yaml\u0026#34;] $ app=xxx $ fly launch --name $app $ fly vol create ${app}_data --size 1 -a $app config host: \u0026#34;$app.fly.dev\u0026#34; db-type: \u0026#34;sqlite\u0026#34; db-address: \u0026#34;/data/goto/sqlite.db\u0026#34; accounts-registration-open: false [mounts] source=\u0026#34;$app_data\u0026#34; destination=\u0026#34;/data/goto\u0026#34; deploy $ fly deploy create user $ fly ssh consosh consolee $ /gotosocial/gotosocial --config-path /gotosocial/config.yaml admin account create --username $user --email $mail --password $pass $ /gotosocial/gotosocial --config-path /gotosocial/config.yaml admin account confirm --username $user $ /gotosocial/gotosocial --config-path /gotosocial/config.yaml admin account promote --username $user domain https://github.com/superseriousbusiness/gotosocial/blob/main/example/config.yaml\nhttps://github.com/felx/mastodon-documentation/blob/master/Running-Mastodon/Serving_a_different_domain.md\nhttps://example.com/.well-known/host-meta\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;XRD xmlns=\u0026#34;http://docs.oasis-open.org/ns/xri/xrd-1.0\u0026#34;\u0026gt; \u0026lt;Link rel=\u0026#34;lrdd\u0026#34; type=\u0026#34;application/xrd+xml\u0026#34; template=\u0026#34;https://example.com/.well-known/webfinger?resource={uri}\u0026#34;/\u0026gt; \u0026lt;/XRD\u0026gt; host: \u0026#34;$app.fly.dev\u0026#34; account-domain: \u0026#34;example.com\u0026#34; post setting : /user\nweb client : https://pinafore.social\n","description":"","formated_time":"2023-01-08","href":"https://syui.github.io/blog/post/2023/01/08/gotosocial/","tags":["golang","sns","activitypub","fly"],"title":"gotosocialを立ててみた時の話","utc_time":"2023-01-08T00:00:00Z"},{"categories":null,"contents":"neovim、いわゆるnvimですが、今まで全く使ってなかったので、今回は少しカスタマイズして使ってみました。\nvimscriptとluaで書けますが、luaで書いていこうと思います。したがって、pluginから何から全て移行です。\n$ sudo pacman -S neovim $ mkdir -p ~/.config/nvim $ touch ~/.config/nvim/init.lua require(\u0026#34;keymaps\u0026#34;) -- vim.api.nvim_set_keymap(\u0026#34;\u0026#34;, \u0026#34;\u0026lt;space\u0026gt;\u0026#34;, \u0026#34;\u0026lt;Nop\u0026gt;\u0026#34;, { noremap = true, silent = true }) local opts = { noremap = true, silent = true } local keymap = vim.api.nvim_set_keymap keymap(\u0026#34;\u0026#34;, \u0026#34;\u0026lt;space\u0026gt;\u0026#34;, \u0026#34;\u0026lt;Nop\u0026gt;\u0026#34;, opts) これはvimでいう\u0026lt;leader\u0026gt;をマッピングする設定です。\u0026lt;space\u0026gt;にします。\n続いてpluginをインストールします。packerを使います。\nhttps://github.com/wbthomason/packer.nvim\ngit clone --depth 1 https://github.com/wbthomason/packer.nvim\\ ~/.local/share/nvim/site/pack/packer/start/packer.nvim vim.cmd [[packadd packer.nvim]] return require(\u0026#39;packer\u0026#39;).startup(function(use) use \u0026#39;wbthomason/packer.nvim\u0026#39; use \u0026#39;rlane/pounce.nvim\u0026#39; end) :PackerInstall pounce.nvim pounce.nvimはeasymotionのようなものです。\nrequire(\u0026#34;pounce\u0026#34;).setup({ accept_keys = \u0026#34;jfkdlsahgnuvrbytmiceoxwpqz\u0026#34;, accept_best_key = \u0026#34;\u0026lt;enter\u0026gt;\u0026#34;, multi_window = true, debug = false, }) keymap(\u0026#34;n\u0026#34;, \u0026#34;\u0026lt;leader\u0026gt;\u0026lt;leader\u0026gt;\u0026#34;, \u0026#34;:\u0026lt;C-u\u0026gt;Pounce\u0026lt;Return\u0026gt;\u0026#34;, opts) これで\u0026lt;space\u0026gt;\u0026lt;space\u0026gt;を押すと発動します。適当に検索したい1文字を入力して飛びます。\nundo $ mkdir -p ~/.config/nvim/undo vim.api.nvim_set_option(\u0026#39;undofile\u0026#39;, true) vim.opt.undodir = vim.fn.stdpath(\u0026#39;config\u0026#39;) .. \u0026#39;/undo\u0026#39; undotreeというpluginが便利です。\nuse { \u0026#39;mbbill/undotree\u0026#39;, cmd = \u0026#39;UndotreeToggle\u0026#39;, config = [[vim.g.undotree_SetFocusWhenToggle = 1]], } local map = vim.keymap.set map(\u0026#34;n\u0026#34;, \u0026#34;\u0026lt;leader\u0026gt;u\u0026#34;, \u0026#34;\u0026lt;cmd\u0026gt; UndotreeToggle\u0026lt;CR\u0026gt;\u0026#34;) pluginをインストールして、上記例では\u0026lt;space\u0026gt;uで起動できます。\nlsp :LspInstallServerから:MasonInstallになったみたい。\nhttps://github.com/williamboman/mason.nvim\nuse({ \u0026#34;hrsh7th/cmp-nvim-lsp\u0026#34; }) use({ \u0026#34;hrsh7th/cmp-nvim-lua\u0026#34; }) use({ \u0026#34;onsails/lspkind-nvim\u0026#34; }) use({ \u0026#34;L3MON4D3/LuaSnip\u0026#34; }) use({ \u0026#34;neovim/nvim-lspconfig\u0026#34; }) use({ \u0026#34;williamboman/mason.nvim\u0026#34; }) use({ \u0026#34;williamboman/mason-lspconfig.nvim\u0026#34; }) require(\u0026#34;mason\u0026#34;).setup({ ui = { icons = { package_installed = \u0026#34;✓\u0026#34;, package_pending = \u0026#34;➜\u0026#34;, package_uninstalled = \u0026#34;✗\u0026#34; } } }) local nvim_lsp = require(\u0026#39;lspconfig\u0026#39;) local mason_lspconfig = require(\u0026#39;mason-lspconfig\u0026#39;) mason_lspconfig.setup_handlers({ function(server_name) local opts = {} if server_name == \u0026#34;sumneko_lua\u0026#34; then opts.settings = { Lua = { diagnostics = { globals = { \u0026#39;vim\u0026#39; } }, } } end nvim_lsp[server_name].setup(opts) end }) :MasonInstall lua-language-server こんな感じで使っていけば良さそう。以上です。\nref https://github.com/hisasann/neovim\nhttps://github.com/nullchilly/nvim\nhttps://github.com/wbthomason/dotfiles/tree/main/dot_config/nvim\n","description":"","formated_time":"2023-01-07","href":"https://syui.github.io/blog/post/2023/01/07/nvim/","tags":["vim","nvim","lua"],"title":"nvimを使ってみる","utc_time":"2023-01-07T00:00:00Z"},{"categories":null,"contents":"お正月のイラスト\n","description":"","formated_time":"2023-01-04","href":"https://syui.github.io/blog/post/2023/01/04/illust/","tags":["illust"],"title":"イラスト描いた126","utc_time":"2023-01-04T00:00:00Z"},{"categories":null,"contents":"deeplは翻訳サービスです。\nhttps://www.deepl.com/ja/docs-api\n今回は、主にrustのjson, requestのexampleを載せる趣旨で書きます。\ncargo 面倒なので最初にcargo.tomlに書きそうなpkgを載せておきます。\nseahorse = \u0026#34;*\u0026#34; dotenv = \u0026#34;0.15\u0026#34; serde_derive = \u0026#34;1.0\u0026#34; serde_json = \u0026#34;1.0\u0026#34; serde = \u0026#34;*\u0026#34; config = { git = \u0026#34;https://github.com/mehcode/config-rs\u0026#34;, branch = \u0026#34;master\u0026#34; } shellexpand = \u0026#34;*\u0026#34; toml = \u0026#34;*\u0026#34; reqwest = \u0026#34;*\u0026#34; tokio = { version = \u0026#34;1\u0026#34;, features = [\u0026#34;full\u0026#34;] } json { \u0026#34;translations\u0026#34;: [ { \u0026#34;detected_source_language\u0026#34;: \u0026#34;JA\u0026#34;, \u0026#34;text\u0026#34;: \u0026#34;I\u0026#39;m not sure if I should use reqwest for response as well.\u0026#34; } ] } serde_jsonを使います。\nuse serde::{Deserialize, Serialize}; use std::fs; #[derive(Serialize, Deserialize, Debug)] #[serde(tag = \u0026#34;type\u0026#34;)] struct DeepData { translations: Vec\u0026lt;Translation\u0026gt;, } #[derive(Serialize, Deserialize, Debug)] struct Translation { text: String, detected_source_language : String, } fn main() { let l = shellexpand::tilde(\u0026#34;~\u0026#34;) + \u0026#34;/.config/msr/deepl.json\u0026#34;; let l = l.to_string(); let o = fs::read_to_string(\u0026amp;l).expect(\u0026#34;could not read file\u0026#34;); let p: DeepData = serde_json::from_str(\u0026amp;o).unwrap(); let o = \u0026amp;p.translations[0].text; println!(\u0026#34;{}\u0026#34;, o); } reqwest reqwestを使います。\n#[tokio::main] async fn deepl(message: String,lang: String) -\u0026gt; reqwest::Result\u0026lt;()\u0026gt; { let data = Deeps::new().unwrap(); let data = Deeps { api: data.api, }; let api = \u0026#34;DeepL-Auth-Key \u0026#34;.to_owned() + \u0026amp;data.api; let mut params = HashMap::new(); params.insert(\u0026#34;text\u0026#34;, \u0026amp;message); params.insert(\u0026#34;target_lang\u0026#34;, \u0026amp;lang); let client = reqwest::Client::new(); let res = client .post(\u0026#34;https://api-free.deepl.com/v2/translate\u0026#34;) .header(AUTHORIZATION, api) .header(CONTENT_TYPE, \u0026#34;json\u0026#34;) .form(\u0026amp;params) .send() .await? .text() .await?; let p: DeepData = serde_json::from_str(\u0026amp;res).unwrap(); let o = \u0026amp;p.translations[0].text; //println!(\u0026#34;{}\u0026#34;, res); println!(\u0026#34;{}\u0026#34;, o); Ok(()) } cli:trans-rs 以下は全体のcliの作りです。cli-toolとして動きます。\n$ mkdir -p ~/.config/msr $ export api=\u0026#34;xxx\u0026#34; $ trans-rs a $api $ trans-rs tt \u0026#34;テスト\u0026#34; -l en $ trans-rs tt \u0026#34;test\u0026#34; -l ja use config::{Config, ConfigError, File}; use serde_derive::Deserialize; #[derive(Debug, Deserialize)] #[allow(unused)] pub struct Deep { pub api: String, } impl Deep { pub fn new() -\u0026gt; Result\u0026lt;Self, ConfigError\u0026gt; { let d = shellexpand::tilde(\u0026#34;~\u0026#34;) + \u0026#34;/.config/msr/deepl.toml\u0026#34;; let s = Config::builder() .add_source(File::with_name(\u0026amp;d)) .add_source(config::Environment::with_prefix(\u0026#34;APP\u0026#34;)) .build()?; s.try_deserialize() } } pub mod data; use std::env; use std::fs; use std::io::prelude::*; use data::Deep as Deeps; use seahorse::{App, Command, Context, Flag, FlagType}; use serde::{Deserialize, Serialize}; use reqwest::header::AUTHORIZATION; use reqwest::header::CONTENT_TYPE; use std::collections::HashMap; #[derive(Serialize, Deserialize, Debug)] #[serde(tag = \u0026#34;type\u0026#34;)] struct DeepData { translations: Vec\u0026lt;Translation\u0026gt;, } #[derive(Serialize, Deserialize, Debug)] struct Translation { text: String, detected_source_language : String, } fn main() { let args: Vec\u0026lt;String\u0026gt; = env::args().collect(); let app = App::new(env!(\u0026#34;CARGO_PKG_NAME\u0026#34;)) .author(env!(\u0026#34;CARGO_PKG_AUTHORS\u0026#34;)) .description(env!(\u0026#34;CARGO_PKG_DESCRIPTION\u0026#34;)) .version(env!(\u0026#34;CARGO_PKG_VERSION\u0026#34;)) .usage(\u0026#34;trans-rs [option] [x]\u0026#34;) .command( Command::new(\u0026#34;translate\u0026#34;) .usage(\u0026#34;trans-rs tt {}\u0026#34;) .description(\u0026#34;translate message, ex: $ trans-rs tt $text -l en\u0026#34;) .alias(\u0026#34;tt\u0026#34;) .action(tt) .flag( Flag::new(\u0026#34;lang\u0026#34;, FlagType::String) .description(\u0026#34;Lang flag\u0026#34;) .alias(\u0026#34;l\u0026#34;), ) ) .command( Command::new(\u0026#34;api\u0026#34;) .usage(\u0026#34;trans-rs a {}\u0026#34;) .description(\u0026#34;api change, ex : $ msr a $api\u0026#34;) .alias(\u0026#34;a\u0026#34;) .action(a), ) ; app.run(args); } #[tokio::main] async fn deepl(message: String,lang: String) -\u0026gt; reqwest::Result\u0026lt;()\u0026gt; { let data = Deeps::new().unwrap(); let data = Deeps { api: data.api, }; let api = \u0026#34;DeepL-Auth-Key \u0026#34;.to_owned() + \u0026amp;data.api; let mut params = HashMap::new(); params.insert(\u0026#34;text\u0026#34;, \u0026amp;message); params.insert(\u0026#34;target_lang\u0026#34;, \u0026amp;lang); let client = reqwest::Client::new(); let res = client .post(\u0026#34;https://api-free.deepl.com/v2/translate\u0026#34;) .header(AUTHORIZATION, api) .header(CONTENT_TYPE, \u0026#34;json\u0026#34;) .form(\u0026amp;params) .send() .await? .text() .await?; let p: DeepData = serde_json::from_str(\u0026amp;res).unwrap(); let o = \u0026amp;p.translations[0].text; //println!(\u0026#34;{}\u0026#34;, res); println!(\u0026#34;{}\u0026#34;, o); Ok(()) } #[allow(unused_must_use)] fn tt(c: \u0026amp;Context) { let m = c.args[0].to_string(); if let Ok(lang) = c.string_flag(\u0026#34;lang\u0026#34;) { deepl(m,lang.to_string()); } else { let lang = \u0026#34;ja\u0026#34;; deepl(m,lang.to_string()); } } #[allow(unused_must_use)] fn a(c: \u0026amp;Context) { let api = c.args[0].to_string(); let o = \u0026#34;api=\u0026#39;\u0026#34;.to_owned() + \u0026amp;api.to_string() + \u0026amp;\u0026#34;\u0026#39;\u0026#34;.to_owned(); let o = o.to_string(); let l = shellexpand::tilde(\u0026#34;~\u0026#34;) + \u0026#34;/.config/msr/deepl.toml\u0026#34;; let l = l.to_string(); let mut l = fs::File::create(l).unwrap(); if o != \u0026#34;\u0026#34; { l.write_all(\u0026amp;o.as_bytes()).unwrap(); } println!(\u0026#34;{:#?}\u0026#34;, l); } shell-command rustでのjsonやrequestの処理について、shell-commandを使う方法もあります。\nrustのコンパイラがあまりにうるさかったり、または依存関係の解消が面倒な場合にお使いください。\n$ sudo pacman -S curl jq use std::process::Command; let api = \u0026#34;Authorization: DeepL-Auth-Key \u0026#34;.to_owned() + \u0026amp;data.api; let txt = \u0026#34;text=\u0026#34;.to_owned() + \u0026amp;message.to_string(); let lang = \u0026#34;target_lang=\u0026#34;.to_owned() + \u0026amp;lang; let output = Command::new(\u0026#34;curl\u0026#34;).arg(\u0026#34;-X\u0026#34;).arg(\u0026#34;POST\u0026#34;).arg(\u0026#34;https://api-free.deepl.com/v2/translate\u0026#34;) .arg(\u0026#34;-H\u0026#34;).arg(api) .arg(\u0026#34;-d\u0026#34;).arg(txt) .arg(\u0026#34;-d\u0026#34;).arg(lang) .output().expect(\u0026#34;curl\u0026#34;); //let p: DeepData = serde_json::from_str(\u0026amp;o)?; //let o = \u0026amp;p.translations[0].text; let o = String::from_utf8_lossy(\u0026amp;output.stdout); let o = o.to_string(); let l = shellexpand::tilde(\u0026#34;~\u0026#34;) + \u0026#34;/.config/msr/deepl.json\u0026#34;; let l = l.to_string(); let mut l = fs::File::create(l).unwrap(); if o != \u0026#34;\u0026#34; { l.write_all(\u0026amp;o.as_bytes()).unwrap(); } let l = shellexpand::tilde(\u0026#34;~\u0026#34;) + \u0026#34;/.config/msr/deepl.json\u0026#34;; let l = l.to_string(); let output = Command::new(\u0026#34;jq\u0026#34;).arg(\u0026#34;-r\u0026#34;) .arg(\u0026#34;.translations|.[]|.text\u0026#34;) .arg(l) .output().expect(\u0026#34;jq\u0026#34;); let o = String::from_utf8_lossy(\u0026amp;output.stdout); let o = o.to_string(); features reqwest + tokio + featuresを使う場合、cargo.tomlに以下のようなfeaturesのsupportを追加してください。\n.await? doesn\u0026rsquo;t have a size known at compile-time\nreqwest = { version = \u0026#34;*\u0026#34;, features = [\u0026#34;json\u0026#34;] } futures = \u0026#34;0.3.5\u0026#34; tokio = { version = \u0026#34;*\u0026#34;, features = [\u0026#34;full\u0026#34;] } ","description":"","formated_time":"2023-01-02","href":"https://syui.github.io/blog/post/2023/01/02/rust-json-request/","tags":["rust"],"title":"rustでdeeplのcliを作った","utc_time":"2023-01-02T00:00:00Z"},{"categories":null,"contents":"原神はナヒーダの完凸を目指すことにしたので、その意義を考えていきたいと思います。\n関係ないけど、この前、とんでもない聖遺物が来た。\n完凸の意義 原神において、完凸にはたくさんの意義があり、人それぞれ求めるものは違うと思います。\nここで少しだけ私の個人的な考えを述べます。\n原神は、カジュアルゲームです。簡単に遊べるけど奥が深い、そんなゲームだと思っています。\nカジュアルゲームに完凸は不要です。\nでは完凸の意義とは一体何なのでしょう。\n多くの人はこのゲームに爽快感を求めているのだと私は考えています。\nつまり、爽快感を演出できる効果やキャラの完凸がおすすめだと思います。\n最強の完凸 個人的には夜蘭だと思います。\n夜蘭の完凸は性能と爽快感を併せ持ちます。\nナヒーダの完凸 ナヒーダの完凸は、上記の基準から言うと、非常に厳しいと考えます。\nまずナヒーダの使用感として、通常攻撃や元素爆発などに爽快感がありません。\nですから、一般的にナヒーダの完凸はおすすめしません。完凸するなら雷電や鍾離のほうがおすすめです。\nただし、性能面で言うと、ナヒーダの完凸はそれほど悪くないと考えられます。\n下記は単純なダメージの総合を期待値で算出したものになります。\n凸 ダメージ 1 x1.10 2 x1.20 3 x1.10 4 x1.05 5 x1.05 6 x6.00 強い強いと言われている雷電2凸のx1.40を考えると、ナヒーダ完凸のダメージ倍率の伸びx6.00は凄まじいものがあります。\nナヒーダの完凸は、簡単に言うと元素爆発後の印がついた敵に通常(攻撃)することで新たな追加ダメージが6回発生するというものです。\n条件は印+元素爆発+通常です。基本的には元素爆発にダメージが発生するようになると考えて、その性能を評価したいと思います。\nナヒーダは印を付けた敵が草起点の元素反応を起こすごとにエネルギーを回復します。爆発は50族で雷キャラが1体いると回復速度が上がます。つまり、爆発は簡単に回せるでしょう。\nナヒーダの完凸はかなり強いと評価します。\nただし、水キャラが居ると爆発が延長します。延長すると、次の追加ダメージが出せるまでの時間も延長されるのではないかと予想されます。\nしかし、単に爆発効果が延長されるだけで爆発は同じ時間に打てる可能性もあり、その場合は完凸効果とのバッティングは発生しません。\n完凸の手段 原神は無課金のルールでやっています。このルールを破ることはありません。\n現在、原石は10,000です。あと20,000ほど必要になる計算です。\n次にナヒーダがピックアップされるまではガチャを回さない予定です。\n","description":"","formated_time":"2022-12-31","href":"https://syui.github.io/blog/post/2022/12/31/genshin/","tags":["genshin"],"title":"原神、ナヒーダ完凸の意義","utc_time":"2022-12-31T00:00:00Z"},{"categories":null,"contents":"\n","description":"","formated_time":"2022-12-24","href":"https://syui.github.io/blog/post/2022/12/24/illust/","tags":["illust"],"title":"イラスト描いた125","utc_time":"2022-12-24T00:00:00Z"},{"categories":null,"contents":"以前、以下の記事でランニングについて書きました。主に私が42kmを走ったときの内容が記録されています。\nhttps://syui.ai/blog/post/2021/09/29/running\nhttps://syui.ai/blog/post/2021/05/14/nike\nしかし、改めて読み返してみると、いいことばかり書いて、本当のことを書いていない。都合が悪いことは書いていない。そんなふうに感じました。\n今回は個人的にあまり思い出したくない、かっこ悪い思い出を、データと共に残しておきたいと思います。\nはじめて42kmを走ったとき、後半はバテバテだった はじめて42kmを走ったのは2021/05/13でした。記録によるとそうです。\nその時のことは結構記憶に残っていて、実はあまりいい思い出ではありません。\n毎日、日課で走っているような人というのは、私を含めて、本気で走ることがありません。\n明日もありますし、そんなことやってられないのです。\nただ日課をこなす。それだけです。\nですが、内心、ちょっとでも力を出せば、長距離は走れると思っていて、速く走ろうと思えば速く走れると思っている\u0026hellip;そんな自信がどこかにありました。\n42kmを走る前は、まあいけるだろう、そう思っていました。ちょっとドキドキしたけど。\nいつも半分の力しか出していないので、まあ大丈夫なんじゃないかな。そう思っていました。\nたしかに前半は大丈夫な感じでした。\nですが、後半は雲行きが怪しくなりはじめ「これは、やばい」と思い始めました。\nなんか疲れ始めている気がする。\nこれは異常事態ですが、このことは今まで公開していなかったデータに残っています。\n後半バテバテだったのが明らかになるので、私もあまり出したくなかったんだと思う。\n最初はいつもどおりな感じ。1km地点はスマホ操作とかでもたついてたのか若干遅い感じしますが、許容範囲内。特に不思議ではありません。\nここから一気にペースが落ちはじめます。私の記憶でも「これ以上速く走れない」という感覚が出始めます。\nそして、どんどんペースは落ちていき\u0026hellip;最終的にはここまで落ちています。\nもう一つの真実、次の日のこと そして、もう一つ、書いていないと思ったのが次の日のことです。\n「42kmを走った後は死にそうだったけど、寝たら治った」と私は書いています。\nしかし、記録を見てみると、それは嘘です。\n実は、42kmを走って、次の日、普段の生活には問題がなかったものの、日課であるランニングには影響があった記憶があります。\nなんか足が重くて思うように走れなかった記憶があって\u0026hellip;でも、かっこ悪いので、そういうのは書かなかったのではないでしょうか。\n42km走ったのが5/13、その次の日が5/14、翌々日が5/15です。\nデータによると、明らかに次の日もバテています。疲れが残っていたと考えられますし、私の記憶でも疲れが残ってたような気がする。\n復活したのは翌々日の5/15です。これもデータを見ると明らかでした。\nあとで読み返したとき、自分にとって都合がいい情報しか残っていないのもよくないので、今回、改めて情報を補足しておくことにします。\n","description":"","formated_time":"2022-12-22","href":"https://syui.github.io/blog/post/2022/12/22/run/","tags":["private","running","nike"],"title":"ランニング、42kmを走った時の思い出と正確な記録","utc_time":"2022-12-22T00:00:00Z"},{"categories":null,"contents":"最近の螺旋がきつい 無課金だからなのか、螺旋がきつくなってきた感があります。\n今回の編成例はこんな感じ。黄金王獣のためだけに凝光をLV1からLV60に育成しましたよ。また、今回、クレーを入れられなかった。\n意外と強かったのが万葉ナショナルです。これからもこの編成は使っていこう。\nあと、ナヒーダ+雷電+綾華+バーバラも結構使える。\nその前の螺旋もきつかった。何回か挑戦することになってしまってる。\nナヒーダの完凸 次はナヒーダについて書きます。\nナヒーダは、見た目が凄く好きです。全体的なデザインが素晴らしいと思っています。\n鍾離や雷電ほど強いわけではなく、万葉や夜蘭よりも性能が厳しいナヒーダですが、でも普通に強いと思います。\n一方で、最終的には個人的な好みに全く刺さらないのがナヒーダでした。\nもちろん、原神のキャラは全員好きですし、ナヒーダもその一人です。\nですが、私の中では他のキャラと変わらない位置づけ。\n原神の中で唯一刺さったクレーとは大きな差があります。\n私は特別好きでもないキャラの完凸を目指してしまうのでしょうか。\nナヒーダとガチャ ここからは少しの創作を交えて語ることにします。何をどのように解釈してもらっても構いませんが、私の考えは最後に述べます。\nナヒーダのガチャは多少の後悔と爆死という結果で終わりました。\nそれがどのようにもたらされたのか、どうすればよかったのかを語りたいと思います。\nまず私は、ナヒーダについて何も知らずにガチャを回し始めました。未知の期待だけがありました。\nガチャは一気にやりました。\n結果として、あまりの大勝。考えられる限り最高の結果でした。\nナヒーダ2凸 : 残りの原石数46,000 -\u0026gt; 32,000、残りの運命30 -\u0026gt; 10\nつまり、原石14,000の消費だけで2凸です。\n残りの原石は32,000もありました。\n私は一度、ここで手を止めてしまいます。\nなぜなら、あまりにも勝ちすぎていると思ったから。\nここで撤退したほうがいいのか?\nそんな考えが頭をよぎりました。\nちなみに、ここで撤退するのが合理的な判断、正解となります。\nしかし、ここで撤退すると、私はあるものを失います。それが何なのかは後に説明することにします。\nさて、私は、大勝で手に入れたナヒーダを使い、色々な感触を確かめ始めました。\n使っているうち私は思います。\n「もう十分強いし、完凸しなくてもいいのでは?」\nしかし、完凸を目指すと決めた手前、一体どうすればいいんじゃ\u0026hellip;。しかも今から回して何故か出る気がしない。\nそうなのです。\n私は、ここで流れを止めてしまった。あまりにも大勝すぎる。当たりすぎていると。\nここからは爆死コースだ。\nそう思いました。\nそして、少し考えたあと、私は決意します。\n最初に言ったように完凸を目指す。\n残りの原石は全部使う。\nここでやっておかないと、私は多分、完凸できない。\nいつでも後戻りできてしまう状態だと、もったいないという結論にどう考えてもそうなってしまう。\nここですべてつぎ込み爆死するからこそ、次こそは何が何でも完凸するという決意が生まれる。\nそう思いました。\n私はその後、持っていた原石すべて注ぎ込み、文字通り爆死。\nしかも考えられる限り最悪の爆死でした\u0026hellip;全てハズレで天井の1体のみ。\n現在、ナヒーダ3凸です。\n完凸にはあと3が必要で、最低でも21,000の原石が必要になります。\n\u0026hellip;ですが、ここで完凸への決意が折れなくて本当によかった。\n私はナヒーダを完凸します。(目指すという意味で\n特別好きでもない、強いわけでもないキャラの完凸を目指すのか?\n\u0026hellip;そうです。なんか色々あってそういうことになってしまいました。\nここまで爆死した以上、完凸するしかない！！(やばい思考だ\nガチャの秘訣 ここからは、私の解釈ですが、ガチャは義務感でやると当たらないような気がしてる。\nもちろん、そんなの関係ないといえば、全くもってそのとおり。ガチャに秘訣なんてありません。すべての結果はたまたまです。\nしかし、今回私は、一度手を止めたあとの後半のガチャは、ほとんど義務感でやってしまい、過去例を見ない最悪の結果を引き当ててしまいます。\n途中にナヒーダを試しに使ってみて、既に知っているというのも良くなかった。\n未知の期待と決意によってのみ、一気に最初から最後まで回すべきでした。そう思います。\n皆様はガチャに臨むとき、自分なりの考えや秘訣はありますか。\n","description":"","formated_time":"2022-12-21","href":"https://syui.github.io/blog/post/2022/12/21/genshin/","tags":["genshin"],"title":"原神、最近の螺旋とナヒーダのガチャについて書いていく","utc_time":"2022-12-21T00:00:00Z"},{"categories":null,"contents":"久しぶりに改めてカードを作ってみることにしました。\n以前のカードはベースを紙にしていました。\nしかし、紙ベースだと劣化が激しいような気がしたのです。\nもちろん、たった数ヶ月でそこまでの変化はありませんでしたが、なんとなく数年後に色あせてくるのが見えるような気がしました。\n個人的には納得できるものではありませんでした。\nそこで、改めてカードを作り直してみることにしたのです。\nこれまで作ったカードはすべて「試作品箱」に移し、手持ちのカードはゼロ。\nゼロからのスタートです。\n新しいカードは、ベースにプラスチック版を採用することにしました。\n暑さはこんくらいです。3mmくらいかな。わかんないけど。\nそして、プラスチック板をベースにした初めてのカードが出来上がりました。\nシールはホログラムに印刷を行い、それを保護するガラスチップのシールを上に貼ります。\nホログラムだけだと色々問題が出てきてしまうのは以前作ったカードでわかっていました。\nそして、最後に切り取りを行いますが、これをカッターやハサミでやってしまうと、微妙なところに歪みが発生してしまうことがあります。したがって、裁断機を使いました。\n実はこのカードを作成したのは数ヶ月前です。ブログに書いていませんでした。\n数ヶ月、カードの様子を見ていましたが、とても納得のできる仕上がりです。\n劣化が感じられませんし、手に持った感覚もしっかりしています。\nこれからカードを作るときは、この方式を採用していきたい。\n","description":"","formated_time":"2022-12-15","href":"https://syui.github.io/blog/post/2022/12/15/card/","tags":["card","make"],"title":"カードを作ってみた7","utc_time":"2022-12-15T00:00:00Z"},{"categories":null,"contents":"matrix-rust-sdk\nどんな感じで書けばいいのかexampleを載せておきます。そのままでは動きませんが。\n#[allow(unused_mut)] let mut client_builder = Client::builder().homeserver_url(homeserver_url); #[cfg(feature = \u0026#34;sled\u0026#34;)] { let home = dirs::home_dir().expect(\u0026#34;no home directory found\u0026#34;).join(\u0026#34;sdk\u0026#34;); client_builder = client_builder.sled_store(home, None)?; } #[cfg(feature = \u0026#34;indexeddb\u0026#34;)] { client_builder = client_builder.indexeddb_store(\u0026#34;sdk\u0026#34;, None).await?; } let client = client_builder.build().await?; // login client .login_username(username, password) .initial_device_display_name(\u0026#34;sdk\u0026#34;) .send() .await?; // sync client.sync_once(SyncSettings::default()).await.unwrap().next_batch; let sync_token = client.sync_once(SyncSettings::default()).await.unwrap().next_batch; let settings = SyncSettings::default().token(sync_token); client.sync(settings).await?; client.sync(SyncSettings::default()).await?; let alias = \u0026#34;#example:matrix.org\u0026#34;; let id = \u0026#34;!example:matrix.org\u0026#34;; let message = \u0026#34;test\u0026#34;; // room_id let room_id = \u0026lt;\u0026amp;RoomId\u0026gt;::try_from(id).unwrap(); // room_alias let room_alias = \u0026lt;\u0026amp;RoomAliasId\u0026gt;::try_from(alias).unwrap(); let room = client.resolve_room_alias(\u0026amp;room_alias).await?; let room_id = room.room_id; if let Some(room) = client.get_joined_room(\u0026amp;room_id) { // text client.join_room_by_id(\u0026amp;room_id).await?; let content = RoomMessageEventContent::text_plain(\u0026amp;message); room.send(content, None).await?; // html let o = \u0026#34;\u0026lt;code\u0026gt;test\u0026lt;/code\u0026gt;\u0026#34;; let content = RoomMessageEventContent::text_html(\u0026amp;message, \u0026amp;o); room.send(content, None).await?; } async fn timeline(event: OriginalSyncRoomMessageEvent, room: Room) { let Room::Joined(room) = room else { return }; let room_id = room.room_id(); let u = event.sender; let body = event.content.body(); println!(\u0026#34;{} {} {}\u0026#34;, room_id, u, body); } client.add_event_handler(timeline); async fn bot(event: OriginalSyncRoomMessageEvent, room: Room) { let Room::Joined(room) = room else { return }; let MessageType::Text(text_content) = event.content.msgtype else { return }; if text_content.body.contains(\u0026#34;!party\u0026#34;) { let content = RoomMessageEventContent::text_plain(\u0026#34;test\u0026#34;); room.send(content, None).await.unwrap(); } } client.add_event_handler(bot); ","description":"","formated_time":"2022-12-10","href":"https://syui.github.io/blog/post/2022/12/10/matrix-client/","tags":["matrix","rust"],"title":"matrixのclientを作ってみた","utc_time":"2022-12-10T00:00:00Z"},{"categories":null,"contents":"botに複数の仮想環境を構築する必要があったので、今回はsystemd-nspawnを採用してみることにしました。\n結論から言うと、systemd-nspawnはとっつきにくいですが、一度使えるようになっておくと、本格的に便利だと感じました。\nただ、とっつきにくさがすごい。コマンドも複数あって混乱を招くと思われます。\narchwikiの最初の説明が以下です。\n$ mkdir -p ~/arch $ sudo pacstrap -c ~/arch base # -D : chroot $ sudo systemd-nspawn -D ~/arch $ passwd $ logout # -b : コンテナ起動 $ sudo systemd-nspawn -b -D ~/arch # -n : ネットワーク $ sudo systemd-nspawn -b -D ~/arch -n これは色んな意味で正しいのですが、私の環境では動作しません。\n設定したpasswordでloginできない。なお、設定していないと空なのでenterでloginできるはず(たぶん)。ttyのsecurityが働いているからです。\nArch Linux 6.0.11-arch1-1 (pts/1) arch login: arch-nspawn login: root Login incorrect ここでホストから~/arch/etc/securettyを編集し、ここではpts/1でloginしようとしているため、これを追記します。pts/0ならpts/0ですし、その他ならそのttyを記述してください。\n$ sudo vim ~/arch/etc/securetty さて、loginできたとしましょう。\n一旦、poweroffして仮想環境(continer)を落とします。\n$ poweroff $ machinectl list 次に、本来のsystemd-nspawnの一般的な使い方を説明します。\n$ machinectl --help $ sudo mv ~/arch /var/lib/machines/ $ sudo machinectl list-images $ sudo machinectl start arch $ sudo machinectl login arch # vmの削除 $ sudo machinectl remove arch # vmにshell # loginはおすすめしません。Ctrl+Dで抜けられません。shellの場合はexitできます。continerはupしたままになります。 $ sudo machinectl shell arch # vmをdown $ sudo machinectl poweroff arch $ sudo machinectl terminate arch /var/lib/machinesにおいたcontiner image(dir)をmachinectlで呼び出します。\nこれは、systemctlのsystemd-nspawn@archでも同じようなことができます。\n# archというcontinerをstart $ sudo systemctl start systemd-nspawn@arch $ sudo machinectl start arch # archというccontinerをPC起動時に立ち上げる $ sudo systemctl enable systemd-nspawn@arch $ sudo machinectl enable arch $ sudo systemctl daemon-reload machinectl, systemd-nspawn, systemctlのどれを使ってもいいですが、個人的にはmachinectlをおすすめします。しかし、それぞれが使い方に微妙な違いを含んでいます。\nmachinectlは主にvm操作で、pacstrapはarchの構築、systemctlはホスト環境の構築、systemd-nspawnはdir(chroot)操作です。\n正直、わかりづらい。\ndockerのほうが遥かにわかりやすいですね。\nですが、archer(archlinuxを普段使いしる人)にとっては、慣れると扱いやすいし、便利そうだと感じています。\n# イメージのダウンロード $ sudo machinectl pull-tar --verify=no http://localhost:8000/arch.tar.gz arch # アーカイブ $ sudo machinectl export-tar --format=[gz, bzip2, xz] [コンテナ名] [ファイル名] # xz でマルチスレッド圧縮をする例 (一番お勧め！) $ maxz() { machinectl export-tar $1 $1.tar \u0026amp;\u0026amp; nice -n 20 xz -z -f -T $(nproc) -vv $1.tar; } $ maxz gbase # インポート $ sudo machinectl import-tar [ファイル名] [コンテナ名] # docker imgをインポート $ sudo docker export $(docker create debian:latest) | machinectl import-tar - debian # hostのnetworkを使う, VirtualEthernetもconfiguredにすると有効 $ networkctl IDX LINK TYPE OPERATIONAL SETUP 1 lo loopback carrier unmanaged 2 eth0 ether routable configured 3 ve-arch ether no-carrier configuring $ sudo vim /etc/systemd/nspawn/arch.nspawn [Network] VirtualEthernet=no # ssh接続 $ ssh-keygen -f ~/.ssh/test $ sudo cat ~/.ssh/test.pub \u0026gt;\u0026gt; /var/lib/machines/arch/root/.ssh/authorized_keys $ sudo machinectl shell arch $ pacman -S openssh $ vim /etc/ssh/sshd_config $ systemctl enable sshd $ systemctl start ssh $ exit $ ssh root@localhost -p xxx -i ~/.ssh/test bot運用をどうするか 例えば、botに一つの仮想環境をあてがい、その中で使える機能を限定して、1日に1回、もしくは呼び出すごとにresetされるように運用するのがいいかも。\nその場合、cronとcloneを駆使してやるとよさそう。\n$ sudo machinectl clone arch backup $ sudo machinectl poweroff arch $ sudo machinectl remove arch $ sudo machinectl clone backup arch ref https://wiki.archlinux.org/title/systemd-nspawn\nhttps://blog.usaturn.net/contents/2016/manage_spawn_container/\nhttps://blog.n-z.jp/blog/2022-09-27-systemd-nspawn.html\n","description":"","formated_time":"2022-12-05","href":"https://syui.github.io/blog/post/2022/12/05/archlinux-systemd-nspaw-continer/","tags":["arch","docker"],"title":"archlinuxでsystemd-nspawnを使いcontinerを立ててみた","utc_time":"2022-12-05T00:00:00Z"},{"categories":null,"contents":"この前、botでも立ててみようかなと思ったので、mastodon(single-mode)にbotを立ててみることにしました。\nrustで書いてたclientを拡張できたので、とてもよかった。botの構築には今使ってるclientを組み込むことにしました。\n例えば、botに話しかけると\u0026hellip;賢すぎる。bot、すごい。\n今できるのは、mastodonをupdateしたり\ncommitやdockerを見たり、検索したり\ncodeをreviewしてもらったり\n画像を生成してもらったり\nなどができます。\n呼び出しをmentionにしたのは、負担を軽くするためかな。timelineを監視するより、notify(通知)を監視したほうが負担は少なそう。\nbotはserverに常駐させるため、できる限り負担は少ないほうがいいですし、また、mastodon server(web server)自体を自分が運営してることもあり、api request、つまりweb serverへの負担も少ないほうがよさそう。\ntimelineを毎回取得、あるいはlatestのみの取得でもあっても、頻繁に更新される性質があるため、notifyの取得のほうがserverへの負担は少ないと思われます。微々たるもので、あまり変わらないかもしれませんが。\nとりあえず、botを立ててよかった。楽しい。\n","description":"","formated_time":"2022-12-03","href":"https://syui.github.io/blog/post/2022/12/03/msbot/","tags":["mastodon"],"title":"mastodonにbotを立ててみた","utc_time":"2022-12-03T00:00:00Z"},{"categories":null,"contents":"fly.ioではappもpgもすべてcontinerです。volume領域はcontiner内に作成します。fly.tomlにおいてmountできるvolumeは1つです。\n# アプリの作成 $ fly apps create $app # アプリの削除 $ fly apps destroy $app # メモリを512Mに設定する $ fly scale memory 512 # volume(hdd)領域を1Gで作成する $ fly vol create --region nrt --size 1 $app_db # pg(postgres)を作る $ fly pg create -n $app-db $ fly pg attach -a $app $app-db # pgのupdate等 $ fly image update $app-db $ fly pg restart -a $app-db pg attach fly.ioのpgは注意が必要です。attachした際のurlは一度しか表示されません。detach, attachするとurlが変わります。同じ名前のappを作り直すとattach, detachできなくなります。\n# pgを接続する $ fly pg attach -a $app $app-db pg backup, restore pgは1日おきにsnapshotを作成します。\n# db backup list \u0026amp; restore $ fly vol list -a $app-db $ fly vol snapshots list vol_xxxxxxxxx $ fly pg create --snapshot-id vs_xxxxxxxx # pgにlocalから接続する $ fly proxy 5432 -a $app-db $ psql postgres://postgres:\u0026lt;operator_password\u0026gt;@localhost:5432 $ fly pg connect -a $app $app-db ----- $ pg_restore --no-owner -h localhost -p 15432 -U postgres -d $app-db pg.dump fly.toml 基本的には./fly.tomlを参照します。\n$ cat fly.toml app = \u0026#34;$app\u0026#34; $ fly status $ fly logs $ fly deploy $ fly open dns, ssl appのcertificateに$app.fly.devを作成後に$sub.domain.comを作成します。cloudflareのcnameでは、たまに両方をproxiedにする必要があります。\n$ fly certs add $app.fly.dev $ fly certs add $sub.domain.com $ fly certs list # cloudflare cname : _acme-challenge.$app, $app.fly.dev.xxx.flydns.net, proxied cname : $sub.domain.com, $app.fly.dev, dns-only redis ADD start-redis-server.sh /usr/bin/ RUN chmod +x /usr/bin/start-redis-server.sh CMD [\u0026#34;start-redis-server.sh\u0026#34;] #!/bin/sh sysctl vm.overcommit_memory=1 sysctl net.core.somaxconn=1024 redis-server --dir /data/ --appendonly yes limit currently $ fly logs\nProcess file descriptor limit is currently\nADD entorypoint.sh /usr/bin/ RUN chmod +x /usr/bin/entorypoint.sh ENTORYPOINT [\u0026#34;entorypoint.sh\u0026#34;] #!/bin/sh ulimit -n 65535 ulimit -u 4096 exec $@ full volume pg(volume)が一杯になっても確認する術がほとんどありません。freeの運用には注意しましょう。\n# sizeを大きくする(小さくすることはできない) $ fly vol list -a $app-db $ fly vol extend $id -s 2 pg-volumeが一杯になると動作が停止しますが、原因が判明するのに時間がかかってしまいました。\nfreeで運用するには、mastodonを立ち上げてadmin, ownerのaccountを作成し、初期設定を行った時点で、pg volumeをsnapshotからcreateして、そのcontinerを保存しておきます。一杯になった時点でdetach, attachで切り替えます。できない場合は、DATABASE_URLを環境変数に入れます。\n$ fly ssh console -C \u0026#39;tootctl accounts modify $USER --confirm --role Owner\u0026#39; $ fly vol snapshots list vol_xxxxxxxxx $ fly pg create --snapshot-id vs_xxxxxxxx ref : https://github.com/tmm1/flyapp-mastodon\npg detach detachするとpasswordが変わります。\n$ fly secrets unset DATABASE_URL $ fly pg connect -a $app-db DROP DATABASE $app WITH (FORCE); DROP USER $app WITH (FORCE); $ fly pg detach -a $app $app-db $ fly pg attach -a $app $app-db ssl cert $ fly ips allocate-v4 $ fly ips allocate-v6 $ fly certs create $app.fly.dev $ fly certs create example.com pg error Could not proxy HTTP request. Retrying in 1000 ms なんでおかしくなったのかというと、おそらく、fly.io側で仕様変更があったためだと思ってる。pgを新しく作成すると今までの形式とは違ったものになっていて、具体的には、top\u0026lt;number\u0026gt;.nearest.of.\u0026lt;appname\u0026gt;.internal -\u0026gt; [ipv6-private]になってる。\n対応としてはpgのfly.tomlを読み込んで、それを修正後にdeployします。\n$ mkdir pg $ cd pg $ fly config save --app \u0026lt;pg-app-name\u0026gt; $ vim fly.toml - [[services]] - [] + [[services]] + internal_port = 5432 # Postgres instance + protocol = \u0026#34;tcp\u0026#34; + [[services.ports]] + handlers = [\u0026#34;pg_tls\u0026#34;] + port = 5432 $ fly image show --app \u0026lt;pg-app-name\u0026gt; $ fly deploy . --app \u0026lt;pg-app-name\u0026gt; --image flyio/postgres:\u0026lt;major-version\u0026gt; https://fly.io/docs/postgres/connecting/connecting-external/ fly.ioのpgはなかなか厄介で、一度変更があると、detach, attachができなくなります。この変更は内部的なものも含みます。つまり、ユーザー側は、なぜいきなりdetach, attachできなくなったのかわからないでしょうね。今回も同じ構成でfly.ioのpgが動作しなくなりました。\nipv6-private top\u0026lt;number\u0026gt;.nearest.of.\u0026lt;appname\u0026gt;.internal -\u0026gt; [ipv6]\nhttps://fly.io/docs/reference/private-networking/#fly-internal-addresses $ fly ips allocate-v6 --private -a \u0026lt;postgres-app-name\u0026gt; $ fly pg detach -a $app $app-pg-db $ fly pg attach -a $app $app-pg-db postgres://$app:$pass@[:0:0:0:0]:5432/$app?sslmode=disable restartしても治らなかった。\n$ fly pg restart baackup-restore pgを残したい方はbackupして、新しいpgを作成し、restoreするのがおすすめですが、detach, attachできない場合は不可能。\n$ fly postgres list $ fly volumes list -a \u0026lt;postgres-app-name\u0026gt; $ fly volumes snapshots list \u0026lt;volume-id\u0026gt; $ fly postgres create --snapshot-id \u0026lt;snapshot-id\u0026gt; $ fly pg detach --app \u0026lt;app-name\u0026gt; \u0026lt;postgres-app-name\u0026gt; $ fly pg attach --app \u0026lt;app-name\u0026gt; \u0026lt;postgres-app-name\u0026gt; ","description":"","formated_time":"2022-11-25","href":"https://syui.github.io/m/post/fly/","tags":["fly","m"],"title":"fly","utc_time":"2022-11-25T00:00:00Z"},{"categories":null,"contents":"matrix micro-blogのmastodonがtwitterに似ているのなら、chatのmatrixはslackに似ています。\nmastodon, matrixの類似点は分散であるところです。\nmatrixのaddressは@user:example.comとなります。\nmatrixには様々なclientがあり、とくにwebのclientが手軽です。\n例えば、elementがそれに当たります。自分が使っているserverを指定します。\nhttps://app.element.io/\nmatrixは、serverからのapiとclientの組み合わせで使います。\nmastodonとの違いはserverがui(html)を提供しないところです。これは、clientがui(html)を提供します。\nやり取りは主にchat形式になります。roomが存在し、気に入ったroomに入り、投稿と閲覧を行います。\ndmも可能です。この場合も通常はroomが作成されます。\ndendrite 前回、matrixのdendrite-serverを立てたのですが、今回はdendriteのupgradeを試みてわかったことを書きます。\ndendriteは、goで書かれたmatrix-serverです。\nmonolith, polylithがあり、polylithは大規模用です。single-userはmonolithを選択しましょう。\nまず、DBですが、postgresql(pgsql)を使用しましょう。sqliteは正常に動作しません。\nhttps://matrix-org.github.io/dendrite/installation/database\nlatestもpgsqlならconfig(v2)で動作します。v1との違いはdatabaseとjetstreamあたりです。\nlatest config flyでdomainの$app.fly.devをcertしておいてください。\nversion: 2 global: server_name: xxx.fly.dev #well_known_server_name: \u0026#34;syui.ai:443\u0026#34; private_key: /etc/dendrite/matrix_key.pem key_validity_period: 168h0m0s trusted_third_party_id_servers: - matrix.org - vector.im database: connection_string: postgres://db.internal:5432/?sslmode=disable max_open_conns: 100 max_idle_conns: 5 conn_max_lifetime: -1 jetstream: in_memory: false storage_path: /data/ topic_prefix: Dendrite metrics: enabled: false basic_auth: username: metrics password: metrics dns_cache: enabled: true cache_size: 4000 cache_lifetime: 300 app_service_api: database: connection_string: postgres://db.internal:5432/?sslmode=disable max_open_conns: 10 max_idle_conns: 2 conn_max_lifetime: -1 config_files: [] client_api: registration_disabled: true registration_shared_secret: \u0026#34;\u0026#34; enable_registration_captcha: false recaptcha_public_key: \u0026#34;\u0026#34; recaptcha_private_key: \u0026#34;\u0026#34; recaptcha_bypass_secret: \u0026#34;\u0026#34; recaptcha_siteverify_api: \u0026#34;\u0026#34; turn: turn_user_lifetime: \u0026#34;\u0026#34; turn_uris: [] turn_shared_secret: \u0026#34;\u0026#34; turn_username: \u0026#34;\u0026#34; turn_password: \u0026#34;\u0026#34; rate_limiting: enabled: true threshold: 5 cooloff_ms: 500 edu_server: federation_api: federation_certificates: [] federation_sender: database: connection_string: postgres://db.internal:5432/?sslmode=disable max_open_conns: 10 max_idle_conns: 2 conn_max_lifetime: -1 send_max_retries: 16 disable_tls_validation: false proxy_outbound: enabled: true protocol: http host: localhost port: 8008 key_server: database: connection_string: postgres://db.internal:5432/?sslmode=disable max_open_conns: 10 max_idle_conns: 2 conn_max_lifetime: -1 media_api: database: connection_string: postgres://db.internal:5432/?sslmode=disable max_open_conns: 10 max_idle_conns: 2 conn_max_lifetime: -1 base_path: /data/media max_file_size_bytes: 10485760 dynamic_thumbnails: false max_thumbnail_generators: 10 thumbnail_sizes: - width: 32 height: 32 method: crop - width: 96 height: 96 method: crop - width: 640 height: 480 method: scale room_server: database: connection_string: postgres://db.internal:5432/?sslmode=disable max_open_conns: 10 max_idle_conns: 2 conn_max_lifetime: -1 signing_key_server: database: connection_string: postgres://db.internal:5432/?sslmode=disable max_open_conns: 10 max_idle_conns: 2 conn_max_lifetime: -1 key_perspectives: - server_name: matrix.org keys: - key_id: ed25519:auto public_key: Noi6WqcDj0QmPxCNQqgezwTlBKrfqehY1u2FyWP9uYw - key_id: ed25519:a_RXGa public_key: l8Hft5qXKn1vfHrg3p4+W8gELQVo8N13JkluMfmn2sQ prefer_direct_fetch: false sync_api: database: connection_string: postgres://db.internal:5432/?sslmode=disable max_open_conns: 10 max_idle_conns: 2 conn_max_lifetime: -1 user_api: account_database: connection_string: postgres://db.internal:5432/?sslmode=disable max_open_conns: 10 max_idle_conns: 2 conn_max_lifetime: -1 device_database: connection_string: postgres://db.internal:5432/?sslmode=disable max_open_conns: 10 max_idle_conns: 2 conn_max_lifetime: -1 tracing: enabled: false jaeger: serviceName: \u0026#34;\u0026#34; disabled: false rpc_metrics: false tags: [] sampler: null reporter: null headers: null baggage_restrictions: null throttler: null logging: - type: file level: info params: path: /var/log/dendrite old config version: 1 global: server_name: \u0026lt;my-matrix.domain\u0026gt; private_key: /etc/dendrite/matrix_key.pem key_validity_period: 168h0m0s trusted_third_party_id_servers: - matrix.org - vector.im kafka: addresses: - kafka:9092 topic_prefix: Dendrite use_naffka: true naffka_database: connection_string: file:///data/dendrite.db max_open_conns: 10 max_idle_conns: 2 conn_max_lifetime: -1 metrics: enabled: false basic_auth: username: metrics password: metrics dns_cache: enabled: false cache_size: 256 cache_lifetime: 300 app_service_api: internal_api: listen: http://0.0.0.0:7777 connect: http://appservice_api:7777 database: connection_string: file:///data/dendrite.db max_open_conns: 10 max_idle_conns: 2 conn_max_lifetime: -1 config_files: [] client_api: internal_api: listen: http://0.0.0.0:7771 connect: http://client_api:7771 external_api: listen: http://0.0.0.0:8071 registration_disabled: false registration_shared_secret: \u0026#34;\u0026#34; enable_registration_captcha: false recaptcha_public_key: \u0026#34;\u0026#34; recaptcha_private_key: \u0026#34;\u0026#34; recaptcha_bypass_secret: \u0026#34;\u0026#34; recaptcha_siteverify_api: \u0026#34;\u0026#34; turn: turn_user_lifetime: \u0026#34;\u0026#34; turn_uris: [] turn_shared_secret: \u0026#34;\u0026#34; turn_username: \u0026#34;\u0026#34; turn_password: \u0026#34;\u0026#34; rate_limiting: enabled: true threshold: 5 cooloff_ms: 500 edu_server: internal_api: listen: http://0.0.0.0:7778 connect: http://edu_server:7778 federation_api: internal_api: listen: http://0.0.0.0:7772 connect: http://federation_api:7772 external_api: listen: http://0.0.0.0:8072 federation_certificates: [] federation_sender: internal_api: listen: http://0.0.0.0:7775 connect: http://federation_sender:7775 database: connection_string: file:///data/dendrite.db max_open_conns: 10 max_idle_conns: 2 conn_max_lifetime: -1 send_max_retries: 16 disable_tls_validation: false proxy_outbound: enabled: false protocol: http host: localhost port: 8080 key_server: internal_api: listen: http://0.0.0.0:7779 connect: http://key_server:7779 database: connection_string: file:///data/dendrite.db max_open_conns: 10 max_idle_conns: 2 conn_max_lifetime: -1 media_api: internal_api: listen: http://0.0.0.0:7774 connect: http://media_api:7774 external_api: listen: http://0.0.0.0:8074 database: connection_string: file:///data/dendrite.db max_open_conns: 10 max_idle_conns: 2 conn_max_lifetime: -1 base_path: /data/media max_file_size_bytes: 10485760 dynamic_thumbnails: false max_thumbnail_generators: 10 thumbnail_sizes: - width: 32 height: 32 method: crop - width: 96 height: 96 method: crop - width: 640 height: 480 method: scale room_server: internal_api: listen: http://0.0.0.0:7770 connect: http://room_server:7770 database: connection_string: file:///data/dendrite.db max_open_conns: 10 max_idle_conns: 2 conn_max_lifetime: -1 signing_key_server: internal_api: listen: http://0.0.0.0:7780 connect: http://signing_key_server:7780 database: connection_string: file:///data/dendrite.db max_open_conns: 10 max_idle_conns: 2 conn_max_lifetime: -1 key_perspectives: - server_name: matrix.org keys: - key_id: ed25519:auto public_key: Noi6WqcDj0QmPxCNQqgezwTlBKrfqehY1u2FyWP9uYw - key_id: ed25519:a_RXGa public_key: l8Hft5qXKn1vfHrg3p4+W8gELQVo8N13JkluMfmn2sQ prefer_direct_fetch: false sync_api: internal_api: listen: http://0.0.0.0:7773 connect: http://sync_api:7773 external_api: listen: http://0.0.0.0:8073 database: connection_string: file:///data/dendrite.db max_open_conns: 10 max_idle_conns: 2 conn_max_lifetime: -1 user_api: internal_api: listen: http://0.0.0.0:7781 connect: http://user_api:7781 account_database: connection_string: file:///data/dendrite.db max_open_conns: 10 max_idle_conns: 2 conn_max_lifetime: -1 device_database: connection_string: file:///data/dendrite.db max_open_conns: 10 max_idle_conns: 2 conn_max_lifetime: -1 tracing: enabled: false jaeger: serviceName: \u0026#34;\u0026#34; disabled: false rpc_metrics: false tags: [] sampler: null reporter: null headers: null baggage_restrictions: null throttler: null logging: - type: file level: info params: path: /var/log/dendrite ref : https://codeberg.org/gerald/dendrite-on-flyio/src/branch/main/dendrite-example.yaml\nregistration_shared_secret registration_disabledがtrueの場合、create-accountコマンドでaccoutが作成できません。registration_shared_secretが必要です。\nconfig(v1)のv0.5.0までなかったようですが、config(v2)のv0.6.0から追加されました。spam対策のようですが、非常に厄介です。\nclient_api: registration_disabled: false guests_disabled: true registration_shared_secret: \u0026#34;\u0026#34; enable_registration_captcha: false recaptcha_public_key: \u0026#34;\u0026#34; recaptcha_private_key: \u0026#34;\u0026#34; recaptcha_bypass_secret: \u0026#34;\u0026#34; $ curl localhost:8008/_synapse/admin/v1/register $ fly ssh console $ /usr/bin/create-account -config /etc/dendrite/dendrite.yaml -username xxx -password xxx -admin IMPORTANT: Process file descriptor limit is currently 1024 FROM matrixdotorg/dendrite-monolith COPY ./entrypoint.sh /entrypoint.sh ENTRYPOINT [\u0026#34;/entrypoint.sh\u0026#34;] #!/bin/sh ulimit -n 65535 ulimit -u 4096 exec /usr/bin/dendrite-monolith-server --tls-cert /etc/dendrite/server.crt --tls-key /etc/dendrite/server.key --config /etc/dendrite/dendrite.yaml https://matrix-org.github.io/dendrite/installation/start/optimisation\nhttps://fly.io/laravel-bytes/integrating-the-elastic-stack-elk-into-a-laravel-app-on-fly/\nfly cretificate $ flyctl ips list $ flyctl certs create example.com $ flyctl certs show example.com https://fly.io/docs/app-guides/custom-domains-with-fly/#teaching-your-app-about-custom-domains\ndomain https://example.com/.well-known/matrix/server\n{ \u0026#34;m.server\u0026#34;: \u0026#34;matrix.example.com:8448\u0026#34; } .well-knownは$app.fly.devを使用したほうがいいかもしれません。\nglobal: server_name: example.com well_known_server_name: \u0026#34;example.com:443\u0026#34; fly cret+cloudflareで連携したdomainが通らなかった。\npanic 様々な問題を解決してもpanic(golang)で動かないことがあります。これは、fly.ioのcpu, memoryの問題っぽい気がしますが、planをupgradeすれば解決するかもしれません。\n遅い 遅い、とにかく遅い\u0026hellip;。\nmatrix.orgとsyui.aiでやり取りしてみたのですが、非常に遅かったので、今後、高速化をやっていきたいのですが、fly.ioのplanを上げるしかないのか、あるいは、dendrite-configとかでなんとかなるものなのか、わかりません。\n注釈 正確には、matrixはprotocolで、dendriteがserver、elementがclientです。\nしかし、matrixをserverと表現することがあります。なぜなら、そのほうが伝わりやすいからです。\n例えばここでdendrite-serverは\u0026hellip;と書いてもなんのことかわかりません。\nですが、matrix-serverと書くと「ああ、あのchatのserverか」とわかりますよね。\nこれは、mastodonを紹介するときにもよくあることです。\n例えば、mastodonを紹介するとき、mastodonをprotocolのように扱ってしまうことがあるのです。\nmastodonはserver, clientであり、protocolではありません。\nmastodonは昔、ostatusというprotocolで動いていましたが、すぐにactivitypubに移行して、それからずっとactivitypubです。\nしかし、mastodonは広く認知されているので、protocolのように扱い、そのように表現してしまうことが多々あるような気がしています。\nmastodonのように広がり、繋がるsnsという場合、厳密には、activitypub等のprotocolで繋がっているのであって、mastodon自体は単なるserverでありclientです。\nprotocolより遥かに狭いものなのですが、mastodonは有名なので、protocolのように広い概念のようなものとして表現し、扱ってしまうことがあります。あまり気にしていませんが。\nとは言え、ここで書かれていることは、正確ではないため、注釈しておくことにします。\n","description":"","formated_time":"2022-11-22","href":"https://syui.github.io/blog/post/2022/11/22/matrix-dendrite-2/","tags":["matrix","fly"],"title":"dendriteをupgradeしてみた","utc_time":"2022-11-22T00:00:00Z"},{"categories":null,"contents":"今回は、fly.ioでmatrix-serverを立ててみました。serverはdendriteを採用します。\nhttps://github.com/matrix-org/dendrite\nfly.ioにはいくつか制約があり、dockerfileをdeployすることになります。\nしたがって、versionをmatrixdotorg/dendrite-monolith:v0.3.11に固定します。configはv1を使用します。\nmatrixdotorg/dendrite-monolith:latestはconfig v1,2に関わらずpanic(golang)を起こします。\nそのうちconfigはv2で書き直す予定ですが、v2で書いた人は教えてもらえると嬉しいです。configは重要な箇所だけ載せています。\nversion: 1 global: server_name: syui.ai well_known_server_name: \u0026#34;syui.ai:443\u0026#34; kafka: addresses: - kafka:9092 topic_prefix: Dendrite use_naffka: true naffka_database: connection_string: file:///data/dendrite.db max_open_conns: 10 max_idle_conns: 2 conn_max_lifetime: -1 DNSでA(ipv4),AAAA(ipv6), SRVなども設定しておいてください。sub-domainの場合はmain-domainの.well-known/matrix/serverに以下のようなファイルを置きます。\nhttps://matrix-org.github.io/dendrite/installation/domainname\n{ \u0026#34;m.server\u0026#34;: \u0026#34;matrix.example.com:8448\u0026#34; } $ sudo systemctl start docker $ sudo docker run --rm -it -v $(pwd):/key -w /key --entrypoint /usr/bin/generate-keys matrixdotorg/dendrite-monolith:v0.3.11 --tls-cert server.crt --tls-key server.key --private-key matrix_key.pem FROM matrixdotorg/dendrite-monolith:v0.3.11 COPY matrix_key.pem dendrite.yaml server.crt server.key /etc/dendrite/ CMD [\u0026#34;--config\u0026#34;,\u0026#34;/etc/dendrite/dendrite.yaml\u0026#34;, \u0026#34;--tls-cert\u0026#34;, \u0026#34;/etc/dendrite/server.crt\u0026#34;, \u0026#34;--tls-key\u0026#34;, \u0026#34;/etc/dendrite/server.key\u0026#34;] app = \u0026#34;xxx\u0026#34; kill_signal = \u0026#34;SIGINT\u0026#34; kill_timeout = 20 [[services]] internal_port = 8008 protocol = \u0026#34;tcp\u0026#34; [services.concurrency] hard_limit = 100 soft_limit = 80 [[services.ports]] handlers = [\u0026#34;tls\u0026#34;, \u0026#34;http\u0026#34;] port = \u0026#34;443\u0026#34; [[services.ports]] handlers = [\u0026#34;tls\u0026#34;, \u0026#34;http\u0026#34;] port = \u0026#34;8443\u0026#34; [[services.tcp_checks]] interval = \u0026#34;10s\u0026#34; grace_period = \u0026#34;5s\u0026#34; timeout = \u0026#34;2s\u0026#34; [mounts] source=\u0026#34;xxx_data\u0026#34; destination=\u0026#34;/data\u0026#34; $ app=xxx $ flyctl launch --name $app --no-deploy --region ams $ flyctl volumes create ${app}_data --size 1 --region ams --app $app # これはwebからやったほうがいい $ flyctl certs add $domain # add : $app.fly.dev # add : $mydomain # deployする際はignoreに注意 $ cat .dockerignore $ flyctl deploy # userを作成します # https://matrix-org.github.io/dendrite/administration/createusers $ flyctl ssh console $ /usr/bin/create-account -config /etc/dendrite/dendrite.yaml -username USERNAME -password xxx ここからtestしたあと、webからloginしましょう。\nmatrixの仕組みはmastodonに似ています。\n例えば、element-webでは他サーバーを選択した上で、$app.fly.devを使用してloginできます。\nlogin後は$domainになります。\nref https://codeberg.org/gerald/dendrite-on-flyio\n","description":"","formated_time":"2022-11-21","href":"https://syui.github.io/blog/post/2022/11/21/matrix-dendrite/","tags":["matrix","fly"],"title":"fly.ioとmatrix","utc_time":"2022-11-21T00:00:00Z"},{"categories":null,"contents":"fly.ioを使ってみて、数ヶ月が経過したのでレビューです。\nhttps://fly.io\nfly.ioではmastodonを動かしており、安定して動作しています。\nしたがって、fly.ioの評価は最高です。cliからも使いやすく、一度立ち上げると、dockerfileを使用することもあり、トラブルが起こりにくい印象。\nまた、毎月$5以内ならサービスしてくれるようで、数ヶ月の運用が$0でした。この辺も非常にありがたい。\nfly.ioのようなサービスは個人開発者、特に趣味でやっている開発者にとって必要です。例えば、投資家の方々や大企業は、fly.ioのスポンサーしてくれると嬉しい。\nfly.ioは非常におすすめです。\n最近になってmastodonにbotを入れました。\nbotを作るの楽しいのと、前から使っていたclientが改良されていくので嬉しい。botはarchlinuxで動いています。\nclientは以下のframework等を使うと非常に便利。\nhttps://github.com/ksk001100/seahorse\nhttps://docs.rs/mammut/latest/mammut/\nbotにdiffusionコマンドを追加したんだけど、そのおかげで画像生成する機会が増えました。stable-diffusionは、面倒で全く触ってなかった。\n新しい絵もできました。AIと手書きの合作です。\n上記の絵はAIとの合作なのですが、生成した画像の人物が崩れていて、もったいないと思ったので、人物を手書きすることにしました。以下の2つが元になっています。\n手動で画風を合わせるの、けっこう大変。\n","description":"","formated_time":"2022-11-17","href":"https://syui.github.io/blog/post/2022/11/17/mastodon/","tags":["mastodon","fly"],"title":"fly.ioとmastodon","utc_time":"2022-11-17T00:00:00Z"},{"categories":null,"contents":"雷電ナショナルを超えるもの\u0026hellip;それは雷電ナショナルだ！\n螺旋12-3後半 雷電, ナヒーダ, 行秋, ベネットの編成です。\nナヒーダを使い始めて一番最初に思いついたのがこれでした。\nタイムは従来の雷電ナショナルより縮まっています。(あくまで私の場合\n編成例の解説 1. クレー, 綾華, 鍾離, 万葉 個人的にこの編成をよく使っています。\nオリジナルです。使ってる人は一度も見てない。(どこかにいるとは思う\n名前は\u0026hellip;クレーボンバーとでもしておきましょうか。\nクレーのスキルと万葉のスキル長押しの組み合わせが強いです。\n敵やフィールドによっては、万葉の爆発で凍結が可能になることがあります。それを見逃さず綾華の爆発を入れます。例えば、今回の螺旋12-3前半で使えると思います。\nまた、鍾離の爆発による石化に綾華の爆発を当てるのもいいと思います。\n2. 雷電, 行秋, ベネット, 香菱 従来の雷電ナショナルです。螺旋でよく使用しています。どのような状況にも対応できます。ただし、少し雷が苦手です。\n3. ナヒーダ, 雷電, 行秋, 香菱 こちらはナヒーダで殴るため、ナヒーダナショナルとでもしておきましょうか。雷の敵に対応できると思います。\nいまのところ、一番の編成は最初に挙げた雷電, ナヒーダ, 行秋, ベネットだと個人的には思います。\n","description":"","formated_time":"2022-11-05","href":"https://syui.github.io/blog/post/2022/11/05/genshin/","tags":["genshin","game"],"title":"原神、雷電ナショナルを超えるもの","utc_time":"2022-11-05T00:00:00Z"},{"categories":null,"contents":"今回は、主にナヒーダの個人的な性能評価になります。単なる個人感想ですが、思ってることを書きます。\n最強の汎用性 私は、原神では最強の汎用性を持つキャラが風元素になるだろうと思っていました。\n原神には、生まれ持った変えられない要素と変えられる要素の2つがあります。\n変えられない要素の一つは、キャラが持つ元素です。\n変えられる要素としては、例えば、聖遺物や武器などが挙げられます。\n原神はオープンワールドです。\nそして、この世界はあらゆる元素で満ちています。\n例えば、焚き火や水たまりを使い元素反応を起こすことが出来ます。\nそのため各元素を拡散できる風元素は、このゲームにおいて、とても汎用性が高いのです。\nそれ故、一番汎用性が高いキャラは万葉だと思っていました。\n例えば、1対1の戦闘を想定してみてください。相手は同一元素を持つアビスとします。\nこの場合、万葉なら相手のシールドを削ることが出来ます。しかし、他のキャラだと厳しい。\n様々なタイプの元素を拡散できる万葉は、このような状況でも強いのです。\nしかし、草元素、そして、ナヒーダの登場により、私は、最強の汎用性を持つキャラを書き換えました。\n最強の汎用性を持ち、かつ将来においても最強である可能性が高いナヒーダに変更しました。\n草元素の汎用性は、風元素と同じレベルで高いと思います。\n将来的に最強の汎用性を持つキャラは、私は、草元素か風元素のどちらかになるだろうと思っています。\nそして、ナヒーダは草元素の神です。\nこの水準の草元素キャラが今後、実装される可能性はそれほど高くない。\nもちろん、万葉がウェンティの汎用性を上回った例があるので、絶対とは言い切れませんが。\n変えられる要素 原神には、変えられる要素と変えられない要素があります。生まれ持ったものは変えられません。しかし、それ以外のものは変えられます。\n今度は変えられる要素の話になります。\nナヒーダは、聖遺物や武器を変えることで、あらゆる役割全てをこなすことができます。\nメインアタッカー、サブアタッカー、サポート。そして、すべての元素に対応できます。\n裏からも表からも高火力を出せます。元素付与、元素反応の起点を作ることができます。バフと回復を同時に担うことができます。\nもちろん、低い水準なら、これらをこなせるキャラはたくさんいます。\nですが、ナヒーダの場合、これらすべてを非常に高い水準でこなすことができます。\nナヒーダは強すぎる\u0026hellip;。\n絶対に引いておきましょう。\nタイトル 内容 炎魔女ナヒーダ 聖遺物の炎魔女4、熟知にして装備。過負荷、燃焼と列開花のダメージをあげます。万葉の長押し拡散が有効です 溶解ナヒーダ 草で燃焼を継続させたあと、氷を継続的にぶつけます 金箔ナヒーダ 森林4を装備し、熟知、熟知、与える治療効果をセット。武器に金箔をつけます 星三ナヒーダ 武器は星3の魔導書論を装備。相当のダメージが出ます 遠距離ナヒーダ 祭礼がおすすめ。弓キャラと組み合わせが強い。実はスキルだけでも相当のダメージが出る場合があります 現時点でのランキング あくまで個人的なランキングです。\n私の考えでは、このような順位付け自体が不正確です。\nなぜなら、キャラは環境によって強くもなるし、弱くもなるからです。しかし、ランキングはわかりやすいので、あえて不正確なランキングを明示しておきます。\n順位 キャラ 元素 1 ナヒーダ 草 2 雷電 雷 3 鍾離 岩 4 万葉/夜蘭 風、水 私は、使っていて雷電よりナヒーダのほうが使いやすいし、強いと思いました。汎用性が高すぎるのです。\n原神では、たしかに、元素爆発はそのキャラクターにおいて、最も強い攻撃、強い要素だと考えています。\nですから、そのキャラが強いか弱いか見る際、爆発を評価することは合理的です。\n雷電にはそれがあります。元素爆発が強すぎる。\nですが、それよりも上の要素が一つだけあります。\nそれが元素反応です。\n元素反応を考慮すると、おそらく、ナヒーダのほうが上だと思われます。\nこれらは総合評価です。実際の使用感や感覚的なものも含んでいます。\n本来、同列に位置するものをあえて好みにより選別しているに過ぎません。明確にこれだからこうだという基準はありません。\n追記 最終評価に変動がありました。したがって、追記します。\nナヒーダを使い始めたばかりの頃は「ナヒーダはよくわからんが強い、いつの間にか敵が溶けている」そう思っていました。\n正直、今までこれほどたやすく敵をシャッター(+雷電)で倒しまくれる経験がなかった。敵は、バラけていても近づく前に全滅で、少し硬い敵も近づいた時の2,3発で終わるのです。今までにない快適さでした。\nしかし、その後、ナヒーダの弱点や草元素の弱点も見えてきて、最終的に以下のランキングに落ち着きました。\n順位 キャラ 元素 1 雷電 雷 2 鍾離 岩 3 万葉/夜蘭 風、水 4 ナヒーダ 草 ","description":"","formated_time":"2022-11-04","href":"https://syui.github.io/blog/post/2022/11/04/genshin/","tags":["genshin","game"],"title":"原神、ナヒーダが最強の汎用性を持つ可能性","utc_time":"2022-11-04T00:00:00Z"},{"categories":null,"contents":"ナヒーダ2凸しました。\nナヒーダは、一見してそんなにダメージが出せているようには見えません。しかし、総合でとんでもないダメージが出ています。\nですから、何気なく使っていると、敵がいつの間にか死んでいる、そんな印象を受けます。\n螺旋で使ってみましたが、タイムが圧倒的に縮まりました。\nガチャ、その1 3連でいきなり出ました。ここで撤退しようか、ちょっと考えちゃった。\n幸先がいいということで、そのままガチャを回していると、以下の結果になりました。\nナヒーダ2凸 : 残りの原石数46,000 -\u0026gt; 32,000、残りの運命30 -\u0026gt; 10\nあまりに大勝でした。怖いくらいに大勝すぎた\u0026hellip;。\nベネット無凸から4凸できました。地味に嬉しかったです。\nナヒーダの使い方 スキルが一番重要です。ナヒーダで出すダメージは、ほぼスキルになります。\n爆発はただ単にスキルのダメージ等を伸ばす効果です。\n元素反応(スキル追撃)を起こすため自身で通常攻撃します。\nこの3点が主な使い方になります。\nつまり、スキル打って、爆発でスキルダメージあげて、通常攻撃でスキルを発動させるみたいな感じの使い方。\nただし、元素反応ありきの発動(追撃)だったと思うので、前もって反応の下地は整えておいたほうがいいかも。例えば、雷電のスキルとか。\nナヒーダの完凸効果 スキルでマークしている敵、爆発範囲内、通常攻撃が当たると、最大で6回の草元素ダメージが発生します。\nこれは特大ダメージとなるため、見栄えもいいですし、強いと思います。\n完凸していると、ほぼナヒーダだけで戦えると思います。\nですが、雷電の完凸効果と比較すると、私は雷電のほうを評価します。\nわからないこと 1凸の元素タイプのカウントは、モチーフ武器にも乗るのでしょうか?\n完凸の追撃は、10秒間とありますが、次の発生はどの時点になるのでしょうか?\n元素爆発を打ったときと考えるのが妥当ではあります。\nしかし、元素爆発は水元素がチーム内にいると延長されてしまうので、完凸効果の追撃とバッティングするように思います。\n延長されればされるほど次の追撃までの時間が長くなってしまうので。\nナヒーダの声と英語音声 日本語音声から英語音声にしてみました。主に、ナヒーダのために。\n確かに、日本語のナヒーダの声は、ナヒーダの性格にマッチしていて、合っていると思います。\nですが、個人的な好みではありませんでした。\nそこで、英語音声にしてみると、一番しっくり来ました。\nこれがナヒーダの性格に合っているかわかりませんが、私が求めていた声でした。\nカメラ感度 設定でカメラの感度を変えましょう。\nマークしやすくなります。\nナヒーダの利点 マークされた敵は連動します。一つでもマークされた敵に攻撃すると、マークされた全体を攻撃することができます。\nナヒーダの利点は、スキルのみでダメージを出せる点だと思います。\n爆発を打つのが煩わしいとき、もったいないときがあります。それでも爆発は溜まったらとにかく打っていくほうがいいのですが、それでも、ナヒーダは、爆発に依存しないダメージ源になるため、非常に便利で、どのような状況にも対応できると思います。\n対応力でいうと、すべての神の中で一番ではないでしょうか。これは、元素タイプが草であること、そして、スキルダメージが主であることが関係します。\n爆発は、敵によってなかなか溜めづらい事があります。元素が弱点だったり一致だったりする場合は特にそうです。\nそんなときにもナヒーダなら、元素エネルギーを回復しつつ、ダメージを出していけると思います。\nそのへんがナヒーダの最大の利点だと考えています。\n","description":"","formated_time":"2022-11-03","href":"https://syui.github.io/blog/post/2022/11/03/genshin/","tags":["genshin","game"],"title":"原神、ナヒーダ2凸","utc_time":"2022-11-03T00:00:00Z"},{"categories":null,"contents":"nexus7(2013)はroot権限を取って使っています。\n公式imgは以下にあります。\nflo : https://developers.google.com/android/images\n$ adb reboot-bootloader $ fastboot flash boot boot.img $ fastboot erase system $ fastboot flash system system.img $ fastboot reboot $ adb reboot bootloader $ fastboot oem unlock # https://developers.google.com/android/images # ./flash-all.sh $ fastboot flash recovery twrp-xxx.img $ adb reboot recovery $ adb push xxx.zip /sdcard/ $ adb reboot system $ adb install xxx.apk # http://www.apkmirror.com/ lineage osを使うことで、nexus7にandroid12をインストールできます。\ntwrp : https://twrp.me/asus/asusnexus72013wifi.html\nlineage os 19.1 : https://forum.xda-developers.com/t/rom-flo-deb-unofficial-lineageos-19-1-2022-03-18.3569067/\ngapps : https://drive.google.com/drive/folders/1O-I01LDvno57ztnxIW_bSnVWEk8-6Ics\nbitgapps : https://github.com/BiTGApps\nmagisk : https://github.com/topjohnwu/Magisk\nsysrepart_1380_20.zipのパーティションの処理が失敗する場合は、公式imgで初期化するといいかもしれません。\n$ adb reboot-bootloader $ fastboot flash recovery twrp.img $ fastboot boot twrp.img $ adb push sysrepart.zip /sdcard/ # twrp -\u0026gt; install -\u0026gt; sysrepart $ adb push lineageos.zip /sdcard/ $ adb push opengaaps.zip /sdcard/ # twrp -\u0026gt; install -\u0026gt; lineage, opengaaps 最近の権限管理はmagiskが定番のようです。\n$ adb install magisk.apk # magiskでlineageのboot.imgにpatchを当てる $ adb pull /sdcard/Downloads/magisk_patched.img $ adb reboot-bootloader $ fastboot flash boot magisk_patched.img アプリ Terminal Emulator for Android\nBusyBox\nHacker’s Keyboard\nAFWall+\nClipper - Clipboard Manager\nAdAway\nPerfect Viewer\narchlinux archlinuxを使うには、archのimgを作成してchrootでアクセスします。大抵のコマンドはbusyboxを使います。\nimgはarmv7のarchを使って作成します。pacmanのmirrorも変わってきますので注意です。\n$ export bbox=/data/adb/magisk/busybox $ export imgfile=/sdcard/linux/archlinux.img $ $bbox losetup -d /dev/block/loop255 $ $bbox losetup /dev/block/loop255 $imgfile $ $bbox mount -o bind /sdcard $mnt/sdcard $ $bbox chroot $mnt /root/init.sh $(basename $imgfile) export PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/sbin /bin/sshd 過去の情報 以前はsupersuの作者が提供していたscriptを実行し、exproitをついて権限を取得していました。\nCF-Auto-Root-flo-razor-nexus7.zip\n$ adb reboot-bootloader $ chmod +x root-mac.sh $ ./root-mac.sh ","description":"","formated_time":"2022-10-29","href":"https://syui.github.io/m/post/android/","tags":["android","m"],"title":"android","utc_time":"2022-10-29T00:00:00Z"},{"categories":null,"contents":"install archのinstallは簡単で/にpacstrapでarch(linux,base)を入れること。bootを設定することです。grubが簡単なのでgrubを使用します。bootloaderは起動時にlinux.imgを実行したり選択するものです。\n現在は、macbook air(intel)の2台にインストールしています。serverやdockerもほとんどarchlinuxを使用しています。\narch-install-scriptが用意されているので、面倒な人は実行するといいでしょう。\nhttps://wiki.archlinux.org/title/Installation_guide\n# https://gitlab.archlinux.org/archlinux/arch-install-scripts $ archinstall 私は毎回手動でinstallしています。昔は自動化していましたがメンテナンスが面倒になりました。\n$ fdisk -l /dev/nvme0n1p1 /dev/nvme0n1p2 $ mkfs.vfat /dev/nvme0n1p1 $ mkfs.ext4 /dev/nvme0n1p2 $ mount /dev/nvme0n1p2 /mnt $ mkdir -p /mnt/boot/efi $ mount /dev/nvme0n1p1 /mnt/boot/efi $ pacstrap /mnt base linux grub efibootmgr $ arch-chroot /mnt $ grub-install --force /dev/nvme0n1p1 $ grub-mkconfig -o /boot/grub/grub.cfg $ passwd $ useradd -m -g wheel -s /bin/bash ${username} $ passwd ${username} # mkfs.vfat /dev/sda1 # mkfs.ext4 /dev/sda2 # grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=arch_grub $ pacman -S base-devel zsh git vim tmux sudo dhcpcd openssh $ systemctl enable dhcpcd $ systemctl enable sshd $ chsh -s /bin/zsh $ exit $ reboot network dhcpcdを使う方法とsystemd-networkdを使う方法があります。基本的にどのlinuxもdhcpcdを入れておりnetworkを設定しています。\nまずkernelで自動設定されるインターフェイス名をeth0などに戻しましょう。\n$ ip route show enp0s12 192.168.1.23 # 伝統的な名前を使う $ mkdir -p /etc/systemd/network/99-default.link.d $ vim /etc/systemd/network/99-default.link.d/traditional-naming.conf [Link] NamePolicy=keep kernel # こちらの方法も使える $ ln -s /dev/null /etc/udev/rules.d/80-net-setup-link.rules dhcpcd /etc/dhcpcd.conf\ninterface eth0 static ip_address=192.168.1.23/24\tstatic routers=192.168.1.1 static domain_name_servers=192.168.1.1 1.1.1.1 systemd-networkd $ systemctl disable dhcpcd $ vim /etc/systemd/network/eth.network [Match] Name=eth0 [Network] Address=192.168.1.23/24 Gateway=192.168.1.1 DNS=192.168.1.1 $ systemctl enable systemd-networkd なお、デバイスによってはこの方法で接続できない場合があります。その場合はdhcpcdが有効です。\nnameserverは/etc/resolv.confを見てください。\nssh 次にsshで接続する方法です。\n# 接続する側 $ ssh-keygen -f ~/.ssh/archlinux $ ssh-copy-id -i ~/.ssh/archlinux.pub ${username}@192.168.1.23 # 接続される側:archlinux $ vim /etc/ssh/sshd_config PasswordAuthentication no $ systemctl restart sshd $ ssh ${username}@192.168.1.23 xorg デスクトップ環境の構築です。\n$ pacman -S tilix xterm zsh git tmux chromium otf-ipaexfont i3 xorg xorg-xinit pcmanfm lightdm lightdm-gtk-greeter # autologin $ groupadd -r autologin $ gpasswd -a $USER autologin $ vim /etc/lightdm/lightdm.conf [Seat:*] pam-service=lightdm pam-autologin-service=lightdm-autologin autologin-user=${USER} autologin-user-timeout=0 session-wrapper=/etc/lightdm/Xsession autologin-session=i3 $ systemctl enable lightdm zip $ pacman -S atool zip unrar displayが暗くならないようにする $ vim /etc/X11/xorg.conf.d/10-monitor.conf Section \u0026#34;ServerFlags\u0026#34; Option \u0026#34;BlankTime\u0026#34; \u0026#34;0\u0026#34; Option \u0026#34;StandbyTime\u0026#34; \u0026#34;0\u0026#34; Option \u0026#34;SuspendTime\u0026#34; \u0026#34;0\u0026#34; Option \u0026#34;OffTime\u0026#34; \u0026#34;0\u0026#34; EndSection 蓋を閉じてもsleepしないようにする /etc/systemd/logind.conf\nHandleLidSwitch=suspend HandleLidSwitchExternalPower=ignore HandleLidSwitchDocked=ignore make archlinux.imgを作る方法です。\nhttps://gitlab.archlinux.org/archlinux/archiso\n$ pacman -Syuu --noconfirm base-devel archiso git $ git clone https://gitlab.archlinux.org/archlinux/archiso $ ./archiso/archiso/mkarchiso -v -o ./ ./archiso/configs/releng/ $ tar xf *bootstrap*.tar.gz $ mkdir -p root.x86_64/var/lib/machines/arch $ pacstrap -c root.x86_64/var/lib/machines/arch base old ここからは古い情報です。\narchlinuxのinstaller(script)です。\nhttps://github.com/syui/arch\n$ fdisk -l sda $ export x=a $ curl -sL git.io/air | zsh archlinuxの一般的なinstall手順です。\n$ cfdisk /dev/sda sda1 200M linux-system sda2 8GB linux-system write(yes), quit $ mkfs.vfat /sda1 $ mkfs.ext4 /sda2 $ mount /dev/sda2 /mnt $ pacstrap -K /mnt base linux base-devel $ genfstab -U /mnt \u0026gt;\u0026gt; /mnt/etc/fstab $ arch-chroot /mnt $ user=syui $ echo xxx \u0026gt;\u0026gt; /etc/hostname $ pacman -S zsh git tmux vim openssh grub dhcpcd efibootmgr atool net-tools inetutils jq $ grub-install --force --recheck /dev/sda $ grub-mkconfig -o /boot/grub/grub.cfg $ vim /etc/systemd/network/eth.network [Match] Name=en* [Network] #DHCP=ipv4 Address=192.168.11.15 Gateway=192.168.11.1 DNS=192.168.11.1 [DHCP] #RouteMetric=10 $ systemctl enabel systemd-networkd $ ip link $ systemctl enable dhcpcd $ systemctl enable sshd $ useradd -m -G wheel -s /bin/zsh $user $ passwd $ passwd $user $ vim /etc/sudoers Defaults env_keep += \u0026#34;HOME\u0026#34; %wheel ALL=(ALL) ALL %wheel ALL=(ALL) NOPASSWD: /usr/bin/reboot, /usr/bin/poweroff $ exit $ reboot macbook air(intel) macは/dev/sda1のrootに.volumeicon.icnsを置くとアイコンを設定できます。\nicns : https://www.iconfinder.com\n## macbook air(intel) $ cd;mkdir boot $ mount /dev/sda1 boot $ grub-install --target=x86_64-efi --efi-directory=boot $ tree -L 2 ./boot . ├── .volumeicon.icns ├── EFI │ └── arch/grubx64.efi ├── System │ └── Library/CoreServices/Boot.efi └── grub ├── fonts ├── grub.cfg ├── grubenv ├── locale ├── themes └── x86_64-efi usb img : http://ftp.tsukuba.wide.ad.jp/Linux/archlinux/iso/\n$ d=`date \u0026#39;+%Y.%m\u0026#39;` $ curl -sLO http://ftp.tsukuba.wide.ad.jp/Linux/archlinux/iso/$d.01/archlinux-$d.01-x86_64.iso $ diskutil list $ sudo dd bs=4M if=./archlinux-$d.01-x86_64.iso of=/dev/disk4 conv=fsync oflag=direct status=progress locale $ vim /etc/locale.gen ja_JP.UTF-8 UTF-8 $ locale-gen $ vim /etc/locale.conf LANG=ja_JP.UTF-8 timezone $ rm -rf /etc/localtime $ pacman -S tzdata $ ln -s /usr/share/zoneinfo/Asia/Tokyo /etc/localtime $ timedatectl set-timezone Asia/Tokyo zsh $ pacman -S zsh $ pacman -S powerline zsh-completions zsh-syntax-highlighting $ vim ~/.zshrc source /usr/share/powerline/bindings/zsh/powerline.zsh source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh fpath=(usr/share/zsh/site-functions $fpath) autoload -Uz compinit \u0026amp;\u0026amp; compinit zip $ pacman -S atool zip unrar # 解凍 $ aunpack test.zip # 圧縮 $ apack test.zip $dir # rar $ aunpack test.rar ssh $ vim /etc/ssh/sshd_config Port 2299 PasswordAuthentication no $ systemctl restart sshd $ ssh-keygen -f ~/.ssh/xxx $ ssh-copy-id -i ~/.ssh/xxx.pub -p 2299 $user@192.168.11.15 $ ssh -p 2299 $user@192.168.11.15 pacman # install $ pacman -S zsh # search $ pacman -Ss zsh # uninstall $ pacman -R zsh $ pacman -Rc zsh # clean $ pacman -Scc 例えば、下記はcore, extra, communityのpkg(package) binaryをmirrorlistからdownloadするという意味です。\n[core] Include = /etc/pacman.d/mirrorlist [extra] Include = /etc/pacman.d/mirrorlist [community] Include = /etc/pacman.d/mirrorlist 速度は使用回線の場所からmirror-serverの場所により変化します。\n# japan Server = https://ftp.jaist.ac.jp/pub/Linux/ArchLinux/$repo/os/$arch armのmirrorは別です。armのjp-mirrorはasashi linuxが用意してくれているようです。\nServer = jp.mirror.archlinuxarm.org/$arch/$repo aur yayとparuが人気です。aurは公式にないappをinstallするときに使います。もちろん、公式にあるpkgをbuildしたいときにも使えます。\nただし、aurを使用する場合、src(source)を手元のマシンでbuildするため時間がかかります。\npacmanでinstallされるpkg(core,community,etc\u0026hellip;)は、あらかじめarchでbuildされたbinaryをdownloadしてくるだけなので。\nhttps://aur.archlinux.org/paru.git\n$ sudo pacman -S --needed base-devel $ git clone https://aur.archlinux.org/paru.git $ cd paru $ makepkg -si $ ./paru desktop window managerはi3(xorg), sway(wayland)を使用しています。かつてはawesomeを使用していました。\n$ mkdir -p ~/.config/sway $ cp -rf /etc/sway/config ~/.config/sway/ $ pacman -S sway swaybg xorg-xwayland polkit dmenu foot file managerはpcmanfmです。かつてはspacefmを使用していました。\n# 自動マウント $ pacman -S pcmanfm gvfs login managerはlightdmです。かつてはslimを使用していました。\n$ pacman -S lightdm $ systemctl enable lightdm $ groupadd -r autologin $ gpasswd -a USERNAME autologin [Seat:*] autologin-user=syui autologin-session=sway アイコンはblueman, network-manager(nm-applet), pulseaudio, fcitx, clipman, rofiなど。\nキーバインドはxdotool, xmodmap, xbindkeysなどを使用しています。\nscreenshotは、grimを使用しています。\nその他、画像関連はimagemagick, gimp, inkscape, kritaあたりが便利です。\n音楽動画はffmpeg, vlc, mpvあたりが便利です。\ntheme 例えば、pcmanfmのthemeはgtk2です。\n$ paru -S arc-icon-theme arc-gtk-theme ttf-font-awesome $ ls /usr/share/{icon*,theme*,font*} $ cp /usr/share/gtk-2.0/gtkrc ~/.gtkrc-2.0 $ vim ~/.gitrc-2.0 $ gtk-icon-theme-name = \u0026#34;Arc\u0026#34; $ gtk-theme-name = \u0026#34;Arc\u0026#34; $ gtk-font-name = \u0026#34;awesome-terminal-fonts\u0026#34; cron cronie, fcron\n$ sudo pacman -S fcron $ fcrontab -e # auto update 0 0 * * * sudo rm -rf /var/lib/pacman/db.lck \u0026amp;\u0026amp; sudo pacman -Syu --noconfirm $ systemctl enable fcron /etc/sudoersに以下のような設定が必要です。これは、sudo xxxとする際にpasswordを要求しないコマンドを設定します。\n%wheel ALL=(ALL) NOPASSWD: /usr/bin/pacman -Syu --noconfirm, /usr/bin/rm -rf /var/lib/pacman/db.lck vpn vpn serverとclientはpritunlが便利です。\nhttps://pritunl.com\nvpn server wanからlan(local-network)に入るには、様々な方法がありますが、ルーターのポートフォワーディングと呼ばれる機能とvpn serverを使用します。\nポートフォワーディングでssh-serverに接続し、dockerからpritunl(vpn server)を立ち上げ、profileを書き換えて、vpnにアクセスし、lanに入ります。lanに入ればlocal-ipが使えるはずですから、private-keyだけで様々なserverにアクセスできるはず。よく使うserverはtermiusに登録しておきましょう。\n$ sudo pacman -S docker docker-compose https://github.com/goofball222/pritunl\nhttps://hub.docker.com/r/goofball222/pritunl\nversion: \u0026#39;3\u0026#39; services: mongo: image: mongo:latest container_name: pritunldb hostname: pritunldb network_mode: bridge volumes: - ./db:/data/db pritunl: image: goofball222/pritunl:latest container_name: pritunl hostname: pritunl depends_on: - mongo network_mode: bridge privileged: true sysctls: - net.ipv6.conf.all.disable_ipv6=0 links: - mongo volumes: - /etc/localtime:/etc/localtime:ro ports: - 80:80 - 443:443 - 1194:1194 - 1194:1194/udp - 14036:14036/udp environment: - TZ=UTC $ sudo systemctl start docker $ mkdir -p mongo $ sudo docker-compose up -d browser(chromiumなど)でlocalhostにアクセスし、web-uiから初期設定を行います。defaultのuserとpassは両方ともpritunlです。\nprofileをdownloadしてiosに共有しておきます。なお、global-ipは通常は変動しますので、固定ipを持っていない場合は、ddnsの登録を行ったうえでそれを使用するか、ipが変わったとき通知するか、してください。\n固定ipやddnsの場合は、profileを書き換える必要はありませんが、そうでない場合は、profileのglobal-ipを書き換える必要があります。書き換えはgoodreaderなどが便利です。\n- remote 123.45.67.89 $port udp + remote 89.45.67.123 $port udp vpn serverを常時起動しておくのは電力の無駄でsecurity上もよくありません。したがって、できればポートフォワーディング用のserverを用意して、使用するときに起動したほうがいいと思います。\nまた、securityを考慮するなら、ポートフォワーディング用のserver自体を必要最小限にし、wol serverにした上で、ssh serverをwolで起動する役割のみを与えます。wolしたあとは、sshの踏み台にして、private-key自体はiosに置いておくという形が理想的だと思います。そのssh serverにアクセスしたあとはvpn serverを立ち上げ、lanに入ればいいでしょう。ただし、手間がかかりますから、そのへんのsecurityは使用頻度を考慮した上で考えればいいと思います。\nvpn client gotunlでvpn serverにアクセスし、local-networkに入ります。\nなお、gotunlを使うには、あらかじめ公式client(electron)をinstallして、profileをimportしておく必要があります。\n[pritunl] Server = https://repo.pritunl.com/stable/pacman $ sudo pacman -Syu pritunl-client-electron $ sudo pacman -S pritunl-client-electron-numix-theme $ pritunl-client-electron # ここでprofile(.vpn)をimport $ git clone https://github.com/cghdev/gotunl.git $ cd gotunl $ go install $ ./${GOPATH}/bin/gotunl -l $ ./${GOPATH}/bin/gotunl -c 1 continer(systemd-nspawn) $ sudo pacman -S arch-install-scripts $ mkdir -p ~/arch $ sudo pacstrap -c ~/arch base # -D : chroot $ sudo systemd-nspawn -D ~/arch $ passwd $ logout # -b : コンテナ起動 $ sudo systemd-nspawn -b -D ~/arch # -n : ネットワーク $ sudo systemd-nspawn -b -D ~/arch -n これは色んな意味で正しいのですが、私の環境では動作しません。\n設定したpasswordでloginできない。なお、設定していないと空なのでenterでloginできるはず(たぶん)。ttyのsecurityが働いているからです。\nArch Linux 6.0.11-arch1-1 (pts/1) arch login: arch-nspawn login: root Login incorrect ここでホストから~/arch/etc/securettyを編集し、ここではpts/1でloginしようとしているため、これを追記します。pts/0ならpts/0です。その他ならそのttyを記述してください。\n$ sudo vim ~/arch/etc/securetty 一旦、poweroffして仮想環境(continer)を落とします。\n$ poweroff $ machinectl list 次に、本来のsystemd-nspawnの一般的な使い方を説明します。\n$ machinectl --help # machinectlを使う場合はvmのrootフォルダはここに入れます $ sudo mv ~/arch /var/lib/machines/ $ sudo machinectl list-images $ sudo machinectl start arch $ sudo machinectl login arch # vmの削除 $ sudo machinectl remove arch # vmをdown $ sudo machinectl poweroff arch $ sudo machinectl terminate arch continerにアクセスする場合、loginはおすすめしません。Ctrl+Dで抜けられません\nshellの場合はexitで抜けられます。continerはupしたままになります。\n$ sudo machinectl shell arch /var/lib/machinesにおいたcontiner image(dir)をmachinectlで呼び出します。\nこれは、systemctlのsystemd-nspawn@archでも同じようなことができます。\n# archというcontinerをstart $ sudo systemctl start systemd-nspawn@arch $ sudo machinectl start arch # archというccontinerをPC起動時に立ち上げる $ sudo systemctl enable systemd-nspawn@arch $ sudo machinectl enable arch $ sudo systemctl daemon-reload machinectl, systemd-nspawn, systemctlのどれを使ってもいいですが、個人的にはmachinectlをおすすめします。しかし、それぞれが使い方に微妙な違いを含んでいます。\nmachinectlは主にvm操作で、pacstrapはarchの構築、systemctlはホスト環境の構築、systemd-nspawnはdir(chroot)操作です。\n# イメージのダウンロード $ sudo machinectl pull-tar --verify=no http://localhost:8000/arch.tar.gz arch # アーカイブ $ sudo machinectl export-tar --format=[gz, bzip2, xz] [コンテナ名] [ファイル名] # xz でマルチスレッド圧縮をする例 (一番お勧め！) $ maxz() { machinectl export-tar $1 $1.tar \u0026amp;\u0026amp; nice -n 20 xz -z -f -T $(nproc) -vv $1.tar; } $ maxz gbase # インポート $ sudo machinectl import-tar [ファイル名] [コンテナ名] # docker imgをインポート $ sudo docker export $(docker create debian:latest) | machinectl import-tar - debian # hostのnetworkを使う, VirtualEthernetもconfiguredにすると有効 $ networkctl IDX LINK TYPE OPERATIONAL SETUP 1 lo loopback carrier unmanaged 2 eth0 ether routable configured 3 ve-arch ether no-carrier configuring $ sudo vim /etc/systemd/nspawn/arch.nspawn [Network] VirtualEthernet=no # ssh接続 $ ssh-keygen -f ~/.ssh/test $ sudo cat ~/.ssh/test.pub \u0026gt;\u0026gt; /var/lib/machines/arch/root/.ssh/authorized_keys $ sudo machinectl shell arch $ pacman -S openssh $ vim /etc/ssh/sshd_config $ systemctl enable sshd $ systemctl start ssh $ exit $ ssh root@localhost -p xxx -i ~/.ssh/test $ sudo machinectl clone arch backup $ sudo machinectl poweroff arch $ sudo machinectl remove arch $ sudo machinectl clone backup arch test # sound $ sudo pacman -S sof-firmware docker 基本的にdocker volume prune -aを実行しても問題ないように構築します。\ndf -Hを実行して空きがあっても100%でNo space left on deviceになることがあります。これは、大きく空き領域を確保しないとdf -iの領域が確保されないためです。これはdocker builder pruneが有効です。\ndocker-rm () { sudo docker system prune -a sudo docker builder prune -a sudo docker image prune -a sudo docker volume prune -a sudo docker container prune sudo docker network prune case $1 in (v) docker volume rm $(docker volume ls -qf dangling=true) ;; (p) docker rm $(docker ps -aq) ;; (i) docker rmi $(docker images -q) ;; esac } serverを移行する際は、volumeなどの権限を同じにしなければなりません。reposのdirごとtarします。したがって、以下のような手順を踏んでください。\nsudo tar cvzfp app.tar.gz scp -r app.tar.gz server:~ --- sudo tar xvzfp ~/app.tar.gz ","description":"","formated_time":"2022-10-29","href":"https://syui.github.io/m/post/arch/","tags":["arch","m"],"title":"archlinux","utc_time":"2022-10-29T00:00:00Z"},{"categories":null,"contents":"iosで使用しているアプリを紹介します。iphone se3とipad9を使っています。\nアプリ termius openvpn goodreader authenticator(google) bitwarden firefox focus metatrader 5 scaniverse bluesky sub mastodon, damus(nostr) slack, discord, matrix(element) default 基本的にはiosの標準アプリを使用します。通話はfacetime, チャットはmessageです。これらはmail-addressと紐づけられます。\nlineやその他のアプリは必要ではないため使用していません。\ntermius iosでは主にtermiusを使用しています。これがないと、私のスマホは恐ろしいほど不便になります。\niphoneは通常、simを入れてキャリア回線を使用するためglobal-ipになります。\nwanからlan(local-network)に入るには、様々な方法がありますが、ルーターのポートフォワーディングと呼ばれる機能とvpn serverを建てて接続します。詳しくは、archlinuxの記事に書いています。また、tailscaleも便利です。vpn-serverのようにself-hostして使うわけではなく外部サービスとして利用料を払い使用する形式です(無料枠あり)。\ntermiusはsftpを使えるので特に便利です。goodreaderは最新のopensshのprivate-keyに対応していません。\ncheckm8 checkm8の登場により、iosのroot権限を得るのは、さほど難しくなくなりました。私もいくつかの古い端末でrootを取っているios端末はありますが、特に利便性を感じていないので、使っていません。sshは可能です。しかし、そこまで早くはないし、むしろ遅いので、ios端末をサードパーティでカスタマイズする必要性を私はあまり感じませんでした。\nhttps://checkra.in\nhttps://github.com/axi0mX/ipwndfu\nとりあえずやることとしては、ipwndfuを使います。dfu modeに入って、usb接続した上で、ipwndfuの診断及びexploitを実行をします。\n$ ./ipwndfu -p rootを取ったあとは、サードパーティのアプリを入れられるようになるので、cydia, altstore, reprovision, unc0verあたりが便利です。\ncydiaは自動で入る事が多いですが、ここでopensshもinstallできます。\niosのrootを取るときに気をつけなければならないのは、shsh(署名)です。upgradeやdowngradeに関わってきます。shshは保存しておくのがいいでしょう。\n最初に述べましたが、iosのroot化は、そこまでできることは多くないと思います。androidとの比較になりますが、android(root)のほうが圧倒的に便利と言えるでしょう。\n","description":"","formated_time":"2022-10-29","href":"https://syui.github.io/m/post/ios/","tags":["ios","m"],"title":"ios","utc_time":"2022-10-29T00:00:00Z"},{"categories":null,"contents":"1. 元素爆発 元素爆発の範囲が広いということは、威力が低く抑えられる可能性があります。\nこれは、原神のバランス調整的な考え方でもありますが、多くの場合に当てはまります。\n範囲が広く、威力も高く、永続ダメージを与え続け、元素付与を行えるような無双攻撃は存在しないと思います。\n2. PT制限 炎、雷、水といったPT制限があります。\n反応が起こせない場合、ナヒーダは使えません。\nもちろん、PT制限が付くからこそ、強く設定できるという側面があると思われるので、メリットとデメリットがあります。\nしかし、PTの自由度が少ないということは、思った以上にデメリットも大きいかもしれません。\n3. 浮いてる敵 通常、法器による攻撃というのは、浮いている敵にも当たります。\nそれが法器キャラの一つの利点でもあります。\nしかし、ナヒーダの場合、地面からの攻撃に見えるので、浮いている敵に当たるのでしょうか。原神は、割と現実に忠実なところがあるので、当たらない可能性が高いと思います。\n4. 印の消滅 敵を倒すと、新たな敵にまた印を付け直さなければならないという弱点があります。\nただ、クールタイムが短いことから、それほど問題になる場面は多くないと思います。\n5. 移動の遅さ 小さいので移動が遅いです。\nけど、かわいいので問題ありません。\n","description":"","formated_time":"2022-10-25","href":"https://syui.github.io/blog/post/2022/10/25/genshin/","tags":["genshin","game"],"title":"原神、ナヒーダの弱点を考える","utc_time":"2022-10-25T00:00:00Z"},{"categories":null,"contents":"ナヒーダの完凸を目指す上で、これまでの計画を大きく変更する必要がありました。\n計画の変更 これまでの計画というのは、下記の表(空枠)にあるように、各元素ごとに強キャラ2体を確保していくことでした。\n元素 神 キャラ 保有 風 ウェンティ 万葉 無凸/無凸 岩 鍾離 ??? 無凸/\u0026mdash;- 雷 雷電 ??? 無凸/\u0026mdash;- 草 ナヒーダ ??? \u0026mdash;-/\u0026mdash;- 水 ??? 行秋 \u0026mdash;-/完凸 炎 ??? ベネット/香菱 \u0026mdash;-/無凸 氷 ??? 綾華 \u0026mdash;-/無凸 実はこれでも新キャラの確保はできる限り抑えるようにしています。\n例えば、私が夜蘭を引かない理由は、水神が今後の実装で予想されるからです。\n行秋の完凸を既に持っているので、水枠はこれで埋まります。夜蘭を入れる余地がありません。\n夜蘭は絶対に引いておいたほうがいいキャラではありますが、水神が将来実装されるので、私は引かないと思います。\n今回、ナヒーダの完凸を目指すにあたって、大きな計画の変更があります。\n変更する方向性はただ一つ。\nそれは凸を目指すこと。\n今までは無凸を確保したらすぐに撤退という計画をとっていました。\nこれを星5キャラ前提ではありますが凸を目指すキャラを考えてみるに変更しました。\nしかし、凸を考えていくと、新しいキャラ、つまり強キャラを引いていくことがほとんどできなくなります。\n例えば、ナヒーダの完凸を目指すとして、それがナヒーダ無凸を加えた新キャラ6体分に相当するので、リスキー、かつコスパが悪い、と言えるでしょう。\n上記を前提に新しい表を作ってみます。すると、以下のようになりました。\n元素 神 キャラ 凸 風 ウェンティ 万葉 無/無 岩 鍾離 ノエル 無/完 雷 雷電 北斗orフィッシュル 2凸/完 草 ナヒーダ 主人公 完/完 水 ??? 行秋 \u0026mdash;-/完 炎 ??? ベネット/香菱 \u0026mdash;-/完 氷 ??? 綾華 \u0026mdash;-/無 確保する分は今後実装予定の神枠だけ。\n直近の具体的な計画ですが、次の水神が実装されるまでに水神を確保できる原石、14,000程度を確保しつつ、ナヒーダ完凸、雷電2凸を目指していくことになります。\n次に、上の2つの表を比較し、変更された枠について解説します。\n変更があった枠は、各元素につき足りていなかった岩、雷、草のキャラ枠です。\nそこに無理やりノエル、北斗(orフィッシュル)、主人公を押し込めました。\nこれらはすり抜けで完凸を目指すことができるので、十分な戦力になってくれるのではないかと思います。\nノエルに関しては、初期に使っていたのである程度育成できていますし、主人公の蛍は、見た目が好きなので、使っていきたいと思っていました。\n北斗はなぜか完凸してますが、フィッシュルは2凸なので現状使えません。また、弓キャラをあまり入れたくないのですが、どっちがいいんだろう。\n攻略情報を見る限りでは、フィッシュルのほうが良さそうに見えます。\nストーリー考察 ここから簡潔なストーリー考察です。\nナヒーダの性格は、コナンの灰原に似ていると思いました。ナヒーダは、灰原タイプと認識しています。\n次にナヒーダとスカラマシュのつながりについてです。\nナヒーダは以前にスカラマシュと何らかの関係があったと思っていて、それがPVの涙につながっているのかもしれません。\nナヒーダが知らなかった事実があったとして、それがスカラマシュが草国に固執し、ナヒーダに固執する理由になっているのかもしれません。\n今までの神は、ほぼ全員が神の心を奪われたり、渡したりする展開になりました。\n今回も同様に、神の心がどうなるのかを私は予想します。\n私の予想では、スカラマシュは、最終的にこちら側に戻ってくると考えています。\nそのきっかけとなるのが、ナヒーダの行動だと予想しており、スカラマシュに神の心を使って助けるみたいな展開を予想します。\nこの場合、神の心はどうなるのでしょう。スカラマシュに使ったので無くなっちゃったみたいなオチかもしれませんし、それが今後につながっていくのかもしれません。\n今後につながるとはどういうことか。例えば、無くなったと思っていた神の心がスカラマシュに残ってて、最終盤にそれが判明。今度はスカラマシュが悪者に狙われるみたいな展開を想像できます。\n私の予想は以上です。\n根拠はありません。単なる勘です。勘が当たるとは限りません。\n今後の展開が楽しみです。\n","description":"","formated_time":"2022-10-24","href":"https://syui.github.io/blog/post/2022/10/24/genshin/","tags":["genshin","game"],"title":"原神、計画を大きく変更した","utc_time":"2022-10-24T00:00:00Z"},{"categories":null,"contents":"\n#genshin, #nahida, #fanart\n","description":"","formated_time":"2022-10-23","href":"https://syui.github.io/blog/post/2022/10/23/genshin/","tags":["genshin","game"],"title":"原神、ナヒーダ描いた","utc_time":"2022-10-23T00:00:00Z"},{"categories":null,"contents":"今回は、個人的なナヒーダの評価をまとめていきたいと思います。タイトルには凸とありますが、主に凸の話になると思うので、そう書いていますが、凸に限らず、ナヒーダに関するすべてを今回は見ていきたいと思います。\nナヒーダを凸する必要性 まず、原神やってる人が一番気になるナヒーダを凸する必要性についてです。\n結論から言うと、凸する必要性はありません。ないと思います。\nあらゆるキャラは凸する必要がありません。\nそれで十分に攻略可能だと思われます。凸しなくても楽しめるゲームです。\nいや、むしろ完凸ばかりしてしまうと、強すぎて楽しめないとかまであるかもしれません。\nですが、私に限っては今回、ナヒーダを凸したい理由がいくつかあるのです。\n最も重要で、かつ一般的な理由の一つとしては今まで一度も星5キャラの凸というものを試してみたことがないからです。\n私は、これをナヒーダでやることに決めました。\nナヒーダの姿が公式に登場して以降、私は初めて原神のキャラについて詳細に調べ始めました。\nそこでは、これまでは見たいとも思わなかったリーク情報に当たり始めます。\nここではじめて、私が「ナヒーダにかなり注目しているらしい」ことを知ります。ああ、自分はナヒーダにこんな熱中してたのか。\n実は、原神はクレーがかわいかったから始めたゲームでした。\nなにかの記事でクレーが載ってて、かわいいと思ったのです。\nですが、私が始めた当初、クレーは既に実装済み。ゲームをやればクレーがわかるので、さほど調べることもありません。\nクレーを使いたいからゲームをやろう。そうすれば自ずとわかるでしょ。それだけでした。\nしかし、ナヒーダに関しては、現時点ですべてが謎に包まれています。\nなぜなら、まだ実装されてないからです。\nとは言え、これほどまでに気にしたキャラですから、凸しようと思ったのです。\n凸だけではありません。\n私は今まで王冠もあまり使ったことがありませんでした。クレーですら天賦はすべてLV9です。\nですから、ナヒーダは、この際、完全強化、完全育成する予定です。\n無課金でも、一人くらい最強を目指すキャラを決めてみるのも楽しそうだ、とそう思ったのです。\n本当は完凸したほうがいいキャラ 私は、雷電が最強だと思っています。\n私が最も評価するステータス、それが元素チャージ効率だからです。\nなぜなら、原神においては、元素爆発が最も重要な戦闘要素になるからです。\n正直なところ、完凸を目指すキャラを一人決めろといわれたら、私は、雷電が最も最適だと思っています。\n上記の要素から言って、ナヒーダが雷電を超える、ということは、おそらく、ないでしょう。そんなふうに思います。\nキャラ数と原神インタビュー https://automaton-media.com/articles/newsjp/20221004-221503/\n本当に重要なことがたくさん書いてあるので、原神をプレイしている人は一読するのをおすすめします。\nここから様々なことがわかりますが、一つは、原神のキャラはインフレしない。インフレしないようにデザインされるであろうということが予想されます。\n私は、育成するキャラを非常に限定しており、今後も使っていくキャラ、引いていくキャラを限定する方向で考えています。\n現在の計画では、狙っている空枠は以下のようになります。\n元素 神 キャラ 保有 風 ウェンティ 万葉 無凸/無凸 岩 鍾離 ??? 無凸/\u0026ndash; 雷 雷電 ??? 無凸/\u0026ndash; 草 ナヒーダ ??? \u0026ndash;/\u0026ndash; 水 ??? 行秋 \u0026ndash;/完凸 炎 ??? ベネット/香菱 \u0026ndash;/無凸 氷 ??? 綾華 \u0026ndash;/無凸 この表から言えることは、今後、強いと言われるキャラをそのまま引いていくと、キャラ過剰になることが予測されます。私の場合、おそらく、風キャラはもう取らない。\n私は、せっかく育てたキャラは長く使っていきたいと考えているため、キャラ過剰と言えるような状態は、できる限り回避したほうがよさそうと考えています。\nとりあえず、螺旋はクリアしたので、今後は一人のキャラにつぎ込むような戦略に移行してもいい段階に来ていると判断しました。\nナヒーダは、その点でもタイミングが非常によかった。\n草元素 私が考える最も強い元素は、今の所、水元素です。\nこれをランキング形式にわかりやすくまとめると以下のとおりです。\n水 \u0026gt; 風 \u0026gt; 草 \u0026gt; 炎 \u0026gt; 氷 \u0026gt; 雷 \u0026gt; 岩 これらは、聖遺物や環境によっても変動します。例えば、風元素は、聖遺物の評価も相まってのランキングとなっています。\n水元素を最も評価する理由については、各元素にダメージ、サポートの両面で作用しやすい点が大きいです。\n原神は、元素反応でダメージを倍々に上げていくゲームであり、それが最も効率の良いダメージの出し方でもあります。\nつまり、原神では、元素の組み合わせが最も重要なので、その組み合わせが一番やりやすいと考えられる水元素が今のところ自分の中では、一番強い元素になります。\n風元素は複数の元素を拡散することができます。草元素も同様、様々な元素タイプに対応できる点で評価します。\nしかし、原神には明確にこの元素が最強というものはありません。環境や状況によります。したがって、原神が目指すところは、おそらく、すべての元素を対等に評価することだと思われます。\nしたがって、正確な理解としては、以下の元素ランキングがより正確だと考えられます。\n風 = 岩 = 雷 = 草 = 水 = 炎 = 氷 (すべて同列)\n風・草・水 \u0026gt; 雷・炎・氷 \u0026gt; 岩 (PT、攻撃重視)\n雷・炎・氷 \u0026gt; 風・草・水 \u0026gt; 岩 (単体、攻撃重視)\n岩 \u0026gt; 風・草・水・雷・炎・氷 (防御重視)\nただし、原神は敵を気持ちよく倒していく爽快感でプレイヤーを満足させるコンセプトゲームです。したがって、防御重視の戦闘スタイルはマッチせず採用しづらいという側面があるかもしれません。そのため、防御サポートの岩元素というのはどうしても評価されにくいと考えられます。\n上記の考えからいうと、草元素はどのように評価できるでしょう。\n起点というかベースとなる元素で、PT単位で評価される元素です。\n私自身、まだあまり使ってなくて、最終的な評価はできていません。\nただ、一つだけ言えることは、まさか自分が草元素につぎ込むことになるとは、思っていませんでした。\n本当に草元素につぎ込んでよかったのかなあ。この辺はちょっと迷いがあります。\n武器に関して そういえばナヒーダは法規キャラだと予想するので(知の国)、それ前提に話をします。\n法規は、通常攻撃も元素攻撃になります。\nこの辺、実際の戦闘ではいいのか悪いのかわかりませんが、個人的にはいいことだと思っています。評価できる場面のほうが多いと思う。\nで、武器に関しては、正直、あまり考えてなくて、よくわかりません。何が合いそうなのか、何がいいのかわからない。\n流浪楽章をクレーにもたせてて、それを使うことになりそうなんだけど、完凸して原石が余ったらモチーフ武器に挑戦してみるつもりではある。今のところは。\n神の性質 神の性質は、いくつかあります。\nmihoyoによる制約なのかもしれませんが、神には特殊移動はつかないと思います。\n特殊移動がつくならウェンティのときからついているはずです。\n開発者としても、神には特殊移動をつけたいと普通は考えるところですが、しかし、mihoyoのバランス感覚はすごい。これまで神に特殊移動がつけられたことはありません。神といっても、他のキャラより圧倒的に優れているというわけではなく、強いというわけではないし、それが原神というゲームの良さ、バランス感覚でもあります。\nただ、いくつか神には、特徴があり、一つは、元素スキルのクールタイムです。ループ可能になっています。継続時間よりクールタイムのほうが短いようになっている。\nまた、元素爆発も素早く打てる工夫がなされているように感じます。\nナヒーダについては、まだわかりませんが、強いことを期待しています。\nナヒーダの性格と声 好きじゃないです。\nただ、これから好きになれればいいかと思っていて。\n今後の旅で見つけていきたい。\n","description":"","formated_time":"2022-10-22","href":"https://syui.github.io/blog/post/2022/10/22/genshin/","tags":["genshin","game"],"title":"原神、ナヒーダの凸を考える","utc_time":"2022-10-22T00:00:00Z"},{"categories":null,"contents":"原神の無課金攻略は、持っているキャラで決まると思います。快適性が。\nこのキャラは強いといわれるキャラを確保していくことが重要になり、凸は必要ありません。\nそして、今現在の私の状況、つまり、手持ちキャラと原石数は、これだけあれば、将来的にも安泰と言えるような状況にあります。\n当初目標にしていたキャラはすべて確保済みで、原石は運命を換算した上で4,5000ほどあります。\nつまり、今後の実装が予想される草神、水神、炎神、氷神をすべて確保できると推定できます。無課金攻略では絶対的に確保推奨されると予想されます。\n私は、このまま順当に予定通りに原石を貯めガチャを回していくだけで安泰といえる位置づけになります。\nしかし、草国の実装、そして、ナヒーダの登場によって、私の心は揺らいでいます。\n無課金攻略において「このキャラは好きだから、最強にしよう、このキャラにすべてつぎ込む！」というよう方針はおすすめできません。私自身、そのような方針を取ることに迷いがあります。\nもちろん、好きなようにやるのが原神。しかし、この方針は快適攻略が困難になる可能性があります。\nですが、安定、安泰のみを考え、ただ淡々と定石をこなすだけの原神は、それはそれで少し寂しい気もします。\n一度、好きなキャラ、タイミングがあったキャラに「持てる原石すべて注ぎ込み爆死する」というのもいいかもしれない。そんなふうに思っています。\nいや、それはダメだ、もったいない、将来のことを考えろ。このままいけば安泰だ。\n\u0026hellip;でも、私は、ナヒーダの完凸を目指すことに決めました。手が届けばモチーフ武器も目指します。\n無謀すぎるというのは、全くそのとおり。そもそも原石数が足りてない。もったいないというのもそのとおり。無凸が一番。\nしかし、ナヒーダは、見た目が好き。\nだから、こいつを最強にしてみることにする。性能的、元素的に無理かもしれないけど。\n本当はクレーで最強を目指そうかと思ったこともあったんだけど、タイミングが合わなかった。たしか当初、クレーの凸を目指そうか迷ったことがありました。\nとりあえず、私は、ナヒーダがピックアップされたら原石全部使います。\n完凸届かなかった場合、2回目、3回目のピックアップで狙っていく予定。\n完凸、いけるかなあ。\n","description":"","formated_time":"2022-10-21","href":"https://syui.github.io/blog/post/2022/10/21/genshin/","tags":["genshin","game"],"title":"原神、無課金の安泰と挑戦","utc_time":"2022-10-21T00:00:00Z"},{"categories":null,"contents":" ","description":"","formated_time":"2022-10-20","href":"https://syui.github.io/blog/post/2022/10/20/manga/","tags":["manga"],"title":"漫画描いた3","utc_time":"2022-10-20T00:00:00Z"},{"categories":null,"contents":"今回は、ナヒーダを引こうか迷ってる話をします。\nナヒーダは、クラクサナリデビ、草神と呼ばれる原神のキャラで、エルフ耳の幼女です。\nさて、まずは個人的な性癖の話は置いといて(あとで書く)、原神の方針をどのように考えているかを書きます。\n復刻の是非 この前、原神を開発しているmihoyoが方針について質疑応答している記事がありました。それを読んでの感想になります。\n私は、youtubeなどで原神を辛口批評している動画を見たことがあります。\nそこでは原神の良いところが述べられたあと、原神はここを改善すべき、こうすべきだ、ああすべきだという意見が述べられていました。\nしかし、私は、それらすべて原神の良いところなのにと思いました。\nその一つが「復刻の是非」です。\n新規の人が復刻を待ち望んでいます。復刻武器を手にできないのは不公平だ、改善すべきだという意見があります。\n私は、復刻には反対です。\nつまり、復刻を行わない原神の方針は正しいとそう考えているのです。\nこのように考える理由はいくつかあります。\nまずは開発側が一度復刻の誘惑に取り憑かれるとそこから抜け出すのは難しいと考えているからです。\n確かに、復刻を待ち望むユーザーの声は多く、そして、私自身も復刻を望んでいるアイテムや武器がいくつかあります。\nそれでも私は、復刻を一切行わないmihoyoの態度は、完全に正しいと考えています。\nこれまで多くの開発運営が復刻を行ってきました。そうすれば手軽にユーザーの好感や評価を得られることができるからです。\nしかし、そういった運営は、やがて復刻しかやらなくなり、新しいものを作っていく活力を失います。ユーザーも「どうせまた復刻が来るんだろ」と言ってゲームから離れていきました。イベント配布に価値が全く無くなってしまったのです。\n復刻しないことで、長く遊ぶユーザーの価値は大切にされ、新規で入ってきた人も、これを逃せば次がないイベント、ゲームを続けようという気持ちになります。\n原神を開発しているmihoyoは、とてつもないセンスを感じます。\nキャラクターやモデル、衣装やパラメーター、コンセプトや物語、そして、方針に至るまで、本当にセンスがありすぎる。\n復刻という楽な道、誘惑に駆られることなく、ただただ新しい物語やキャラクターを作り続けているのが原神です。\nこれがどれほど大変で困難な選択だったのか、私は理解できます。\n復刻を連発すれば、確かに、楽に簡単にユーザーの好感や評価を得られることでしょう。\nしかし、mihoyoは、あえてそのような楽な道は選ばなかったのです。\nPvPの導入 少し関連して、PvPの導入についても私が思っていることを書きます。\n原神にはPvPが導入されていません。\n今この時代のゲームとしては異例のことです。\nそれはなぜか?\nPvPを導入すると運営が楽だからです。簡単だからです。\n最も簡単に楽に半永久的なコンテンツを提供できる仕組み、それがPvPであり、人と人とを戦わせるゲームなのです。\n開発側は、ただ人々を戦わせる闘技場を作り、ルールを決めるだけ。\nあとは、そこに人々を押し込んで争わせる。\nそれだけで半永久的に人々は戦い続けてくれます。\n敵を作る必要もなければ、ボスを用意する必要もありません。調整する必要もなければ、キャラや物語を作る必要すらない。\nこのように最も楽にかつ効率的に金儲けができる仕組みが既にあり、多くの運営がそれをゲームに導入するのに、なぜかmihoyoはそれを採用しなかったのです。\nここにも、mihoyoには、なにか信念、変わらない方針みたいなものがあるのではないかと感じます。\nmihoyoは楽な道を選ばない。あえて簡単な道を選ばず、そして、結果を出すのです。\nそれだけの力があり、そして、センスがある。これが私の原神(mihoyo)が採用してきた方針の評価です。\n結論 結論として、私がmihoyoになにかアドバイスや意見があるのかというと、まったくありません。\n私がmihoyoに言えることはなにもありません。\nmihoyoは、現時点で正しい方針を採用し続けています。\nそして、結果が出ている。\nこのようなmihoyoの方針というのは、とても困難なことであり、楽な道では決してありません。\n復刻やPvPを導入しないことでユーザーの批判も多かったことでしょう。\nにもかかわらず方針を曲げずここまで来た。\n仮に冒頭で述べたyoutuberの意見や多くの人々、ユーザーの要望通りのゲームを作っても売れなかったと思います。\nそもそもmihoyoはセンスがありすぎる。\n私がなにか意見する必要など全くなく、アドバイスできることもありません。\nmihoyoはmihoyoのやりたいようにやればいい。それで十分にうまくいくと私は考えています。\nナヒーダを引こうか迷っている話 次に、個人的な話に移ります。\nナヒーダを引こうか迷っている話です。\n「え？ナヒーダを引かないの？あなた、クレーが好きなんじゃないの。つまり、幼女が好きなんでしょ？なんで引かないの？」\n中にはこのように考える人もいるかもしれません。\nこのことについて少しだけ私の事情や性癖の話をしたいと思います。\nこの意見については、正しくもあり、間違いでもある、と私は考えています。\nもちろん、私個人の印象(いわゆるロリコンという印象)は読んでいる人が決めるもので、私が決めるものではありません。\nそれを前提に話をすすめますが、実は、私はクレーが好きなのであって、幼女が好きなわけではないのです。\n例えば、私が好きなキャラは、アニメ、けいおんの平沢唯です。平沢唯は高校生(大学生)で幼女ではありません。\n原神にはクレーの他にも小さいキャラがたくさんいます。\n例えば、七七、ドリー、早柚、ディオナなど。\n私、彼女たちが好きって一度でも言ったことありましたっけ?\nありません。\nなぜなら、それほど好きではないからです。\n私が可愛いと思ったキャラは、クレーの次が蛍、その次がコレイでした。他にも可愛いキャラいっぱいいますが。\nここに幼女キャラは、入っていますか?\n入っていません。\nもちろん、私も私のことはあまりわからないし、どっちでもいいんですけど、こういう話は面白そうだったので、今回話をしています。私もこういう人の性癖の話を聞くのが好きなんです！\n私はおそらく、子供の心を持っているかどうかで判断しているようです。子供の心を持っているキャラが好きなんだと思われます。年齢、見た目、あるいは種族はあまり関係ないと考えられ、例えば、平沢唯は見た目があまり好みではないけれど好きなキャラです。\n\u0026hellip;ごほん、さて、私がクレー以外にあまり大好きなキャラは原神でいなかったんですが、あ、ウェンティは割と好きですね。あいつがいると、なぜか事態が悪い方向に進むイメージがあまりなく場を和ませるキャラ好きなんで\u0026hellip;話を戻すと、ナヒーダです！ナヒーダ！！\n私は、客観的に見てかわいいっていうのは、いわゆる幼女キャラの見た目になるんじゃないかなと思っているのです。\nだって、かわいいものは、かわいいでしょ。普通の人もかわいいと思うはずだと思うんだけど\u0026hellip;。\nそれは置いといて、可愛いキャラは好きで\u0026hellip;ナヒーダ！ナヒーダです！！\n見た目は可愛いですよね。ナヒーダ。\nでもストーリーを進めているうちにですね「こ、こいつは\u0026hellip;」と思いまして、つまり\n「ぜんぜんかわいくねえじゃねえええか！！！」\n\u0026hellip;つまり、ナヒーダはあんまりかわいいとかそういうタイプではないのかもしれない、と私は思ったわけですな。\nまず、声ですね。これを聞いたのは随分前ですが、なんかの電波から。声を聞いた瞬間、ちょっと思ったことがありまして、「これは\u0026hellip;かわいくないかもしれない」と。\nいや、声優さんは悪くない。そもそもナヒーダの性格や声を好きだ、かわいいと思う人もいるはず。\nですが、私は、声を聞いた瞬間、期待していた何かがぐんにゃり崩れた音がしました。\nそして、「声はなんか思ってたのと違ったけど、でも、性格ならかわいい感じなんじゃない」と、期待して進めたストーリー。\nその中で様々なことが明かされました。\nそれとともに明らかになってくるナヒーダというキャラクター\u0026hellip;\nナヒーダは、一言でいうと、慈愛でしょうか。\n陰ながら民を支え、励まし続けた存在だったのです。\n自らを犠牲に力の大部分を失い幼子のような姿になってもなお、誰からも認められず罵倒され非難され続けてさえも、民を支え続けることをやめず、今も戦い続けているような、そんな感じだと思います。で、神の力もほとんどが民のためのなんとか装置にあげたっぽいので、さほど力も残っていないと。それ以外に関しては、知的な印象。草国は知の国だし、仕方がないのかもしれないけど。\nこれを聞いて、ナヒーダの好感度が上がった人もいれば、ごくまれに下がった人もいて、私は、どちらかというと、下がってしまった残念な人に当たりました。\n「もうすこし、かわいかったら、よかったのに」と。\nでも、まだまだナヒーダについてはわからないことも多いです。\nこれから先、ナヒーダが子供っぽい性格と声に豹変する可能性もありますので(ないよ)、期待は捨てずにいるとして、問題はナヒーダを引くかどうか、引くとしたら凸を目指すかどうかです。\nずっと使い続けるキャラになるかもしれず、無課金で完凸を目指そうか、どうしようかを迷っています。\n風のうわさによると、完凸でアタッカー適性があるかもしれないというような情報があります。\n神は全員がサポーターなので、ナヒーダもそうでしょう。\nナヒーダをメインに使っていきたい場合、完凸を目指すのもありかもしれないと思っているのです。\n無課金で完凸とかできるのか\u0026hellip;。仮にできたとしても目指すべきとは思えないし、すごく迷う。\nただ、既に螺旋攻略できるなら、あとは好きなキャラ強くしていこうっていう気持ちもあったりする。\n","description":"","formated_time":"2022-10-15","href":"https://syui.github.io/blog/post/2022/10/15/genshin/","tags":["genshin","game"],"title":"原神、ナヒーダを引こうか迷ってる話","utc_time":"2022-10-15T00:00:00Z"},{"categories":null,"contents":"kuina-chan\n","description":"","formated_time":"2022-10-12","href":"https://syui.github.io/blog/post/2022/10/12/illust/","tags":["illust"],"title":"くいなちゃん描いた3","utc_time":"2022-10-12T00:00:00Z"},{"categories":null,"contents":"久しぶりに背景も描いた。\n","description":"","formated_time":"2022-10-08","href":"https://syui.github.io/blog/post/2022/10/08/illust/","tags":["illust"],"title":"イラスト描いた123","utc_time":"2022-10-08T00:00:00Z"},{"categories":null,"contents":"AIの背景はきれいでらくなんだけど、あまり楽しくない気がするので、自分で書く背景の割合を増やしていこう。\n","description":"","formated_time":"2022-10-07","href":"https://syui.github.io/blog/post/2022/10/07/illust/","tags":["illust"],"title":"イラスト描いた122","utc_time":"2022-10-07T00:00:00Z"},{"categories":null,"contents":"macの使い方をまとめます。macbook air(m1, intel)を使っています。\n最初にインストールしたソフトウェアとサービスの一覧です。\n使ってるソフトウェア xcode, commandline tools, etc\u0026hellip; : https://developer.apple.com/ chrome : https://www.google.com/chrome/ iterm2 : https://iterm2.com/ homebrew : https://github.com/Homebrew/brew karabiner : https://github.com/pqrs-org/Karabiner-Elements shiftit : https://github.com/fikovnik/ShiftIt keepassxc : https://github.com/keepassxreboot/keepassxc virtualbox : https://download.virtualbox.org/virtualbox/ clipy : https://clipy-app.com/ 使ってるサービス github : https://github.com/ bluesky : https://bsky.app/ google : https://www.google.com/ youtube : https://www.youtube.com/ northflank : https://northflank.com/ fab : https://www.fab.com/ amazon : https://www.amazon.co.jp/ cloudflare : https://www.cloudflare.com/ wiki : https://wiki.archlinux.jp/ slack : https://archlinuxjp.slack.com/ other studioone2 : https://piaprostudio.com/ synthesizerv : https://synthesizerv.com/ chrome https://github.com/gorhill/uBlock https://github.com/uBlockOrigin/uBOL-home macの個人設定 まず、電源offのショートカットがないので作ります。\nキーボード -\u0026gt; ショートカット -\u0026gt; アプリケーション -\u0026gt; システム終了... : Ctrl + Command + L ここでシステム終了...と...まで日本語入力して設定します。これは、メニュー項目の表示にあたります。macは表示項目で操作するようです。\nファイアウォールがdisableになっているので、enableにします。\nセキュリティとプライバシー -\u0026gt; ファイアウォール gpg-keyを忘れないようにimportします。\n$ gpg --export-secret-keys 67AC97A939D3EA19 \u0026gt; sec.key ------ $ brew install gpg $ gpg --import sec.key intel mac intel版のmacbook airには、archlinuxを入れています。また、usbに入れているarchも起動できるので、外出時などに便利です。\n$ sudo mount /dev/sdb1 /mnt $ sudo cp ~/pics/arch.icns /mnt/.volumeicon.icns $ sudo cp ~/pics/apple.icns /.volumeicon.icns iphoneのインターネット共有(テザリング)でglobal-ipから使います。\ngotunlでvpn serverにアクセスし、local-networkに入ります。\nなお、gotunlを使うには、あらかじめ公式clientをinstallして、profileをimportしておく必要があります。詳しくはarchlinuxの記事で解説しています。\n","description":"","formated_time":"2022-09-29","href":"https://syui.github.io/m/post/mac/","tags":["mac","m"],"title":"mac","utc_time":"2022-09-29T00:00:00Z"},{"categories":null,"contents":"macbook air(m1)をカスタムオプションでapple storeから購入したので、初期設定でやったことをまとめます。\nm1を選択した理由は、先っぽが尖っているからです。この形状が昔から好きだったので、m1を選択しました。\nまず、どのos(linuxを除く)にも言えることですが、macでもすべての項目をdisableしていく作業、つまり、設定をスキップしたり、「後で設定する」を選択していく作業から始まります。\n最初にインストールしたソフトウェアとサービスの一覧です。\n使ってるソフトウェア xcode, etc\u0026hellip; : https://developer.apple.com/jp/\nchrome : https://www.google.com/chrome/\ngoogle日本語入力 : https://www.google.co.jp/ime/\niterm2 : https://iterm2.com/\nhomebrew : https://github.com/Homebrew/brew\nkarabiner : https://github.com/pqrs-org/Karabiner-Elements\nshiftit : https://github.com/fikovnik/ShiftIt\nkeepassxc : https://github.com/keepassxreboot/keepassxc\n使ってるサービス github : https://github.com/\ntwitter : https://twitter.com/\ngoogle : https://www.google.com/\nyoutube : https://www.youtube.com/\nheroku : https://heroku.com/\nfly.io : https://fly.io/\nnorthflank : https://northflank.com/\nsketchfab : https://sketchfab.com/\namazon : https://www.amazon.co.jp/\nmailgun : https://mailgun.com/\ncloudflare : https://www.cloudflare.com/\nfreenom : https://www.freenom.com/\nwiki : https://wiki.archlinux.jp/\nslack : https://archlinuxjp.slack.com/\nreddit : https://www.reddit.com/\nmacの個人設定 まず、電源offのショートカットがないので作ります。\nキーボード -\u0026gt; ショートカット -\u0026gt; アプリケーション -\u0026gt; システム終了... : Ctrl + Command + L ここでシステム終了...と...まで日本語入力して設定します。これは、メニュー項目の表示にあたります。macは表示項目で操作するようです。\nファイアウォールがdisableになっているので、enableにします。\nセキュリティとプライバシー -\u0026gt; ファイアウォール gpg-keyを忘れないようにimportします。\n$ gpg --export-secret-keys 67AC97A939D3EA19 \u0026gt; sec.key ------ $ brew install gpg $ gpg --import sec.key ディスプレイは使わなくなったipad7を使っています。sidecarという機能になります。wifiよりusb接続のほうが遅延がありませんでした。なお、2台のipadを同時に接続することはできませんでした。\n","description":"","formated_time":"2022-09-29","href":"https://syui.github.io/blog/post/2022/09/29/macbook/","tags":["mac"],"title":"macbook airの初期設定","utc_time":"2022-09-29T00:00:00Z"},{"categories":null,"contents":"新しいペンを買ったので、ちょっと練習。\n","description":"","formated_time":"2022-09-25","href":"https://syui.github.io/blog/post/2022/09/25/illust/","tags":["illust"],"title":"イラスト描いた121","utc_time":"2022-09-25T00:00:00Z"},{"categories":null,"contents":"家にあったフィギュア見ながらアイコン描いてた。\n今回は少しポケモンの思い出話をします。\n私の中で思い出深いポケモンというと、2匹のポケモンが思い浮かびます。\nまずは最初に旅をしたリザードン。最初から最後までずっとリザードン、XYもメガリザードンXばかり使ってたなあ。リザードンは一番最初に好きになったポケモンでした。\nそして、もう一つは伝説(幻)で一番熱中し追いかけた記憶があるアルセウス。\n多分、アルセウスを追いかけてたときがポケモンやってて一番熱中してたと思う。\nアルセウス欲しさのためネットをやり始め、そこで優しい人からアルセウスをもらいました。\nですから、私がパソコンをやり始めた時期というのは、アルセウスを追いかけてた時期とかぶります。\nだからなんだって言う話なのですが、そんな思い出も今のゲームに受け継いでいけたらなあと思っています。\nポケモンやってると、みんな好きなポケモンがいるものです。\ntwitterやyoutubeを見てると、そんなアイコンを見かけたりします。\nだから私も気が向いたので作ってみることにしました。\n男の子のモデルはpokemongoで使ってるアバターをもとに作りました。レッドをモデルにした衣装を使ってる。\n女の子はアイで、この前に撮ったフィギュア写真をもとに作りました。\n","description":"","formated_time":"2022-09-24","href":"https://syui.github.io/blog/post/2022/09/24/pogo/","tags":["pogo"],"title":"ポケモン、アルセウスの思い出","utc_time":"2022-09-24T00:00:00Z"},{"categories":null,"contents":"イラスト描きました。刀を鞘に収めるポーズだけど鞘がない。\n","description":"","formated_time":"2022-09-23","href":"https://syui.github.io/blog/post/2022/09/23/illust/","tags":["illust"],"title":"イラスト描いた120","utc_time":"2022-09-23T00:00:00Z"},{"categories":null,"contents":"イラスト描きました。\n今回は、それとは別に「絵師がどうやって自分が描いたことを証明するの？」という疑問について考えてみたいと思います。\nとはいえ、私は絵師ではありません。全く絵が描けません。\nしかし、自分が描いたことの証明は可能だと思っていて、今回はその一例を紹介することにします。\n私は、自分が描いたものをどのように描いたか、すべて保存しています。\nというより、私が使っているアプリは履歴を自動的に保存するようになっている。\nそのため、やろうと思えば自分が描いたことの証明は簡単にできます。\n例えば、私は横顔を書くのが苦手です。絵を書いているときの様子を自己証明とともに上げてみることにします。\n今回、自己証明に物理バッジを使っています。しかし、例えば、スマホのtwitter画面でもなんでもいいと思います。そういったものを動画に添えて撮影したものを投稿すればいいでしょう。\nといっても、こんなことやる意味も暇も普通はありませんので、だれもやっていないのだと思います。\nこれをテクノロジーで簡略化する場合、正直、完全な証明は難しいと考えられます。今の所、人間が目視で確認するしか方法はありません。\nいくつか良さそうな候補として思いつくのは、最初に上げた画像にprivate-keyを紐付け同じ画像をnftにも上げます。そして、public-keyをブロックチェーンの独自コントラクト内に焼き付ける。nftは時間が記録されますから、一番最初にネットワーク上に置かれた画像と鍵が合います。img binaryもdiffして一致を確認し、最初に鍵があったものを所有者とみなせばいい。\nしかし、すべての絵師がこの方法に従う以外、自分が描いたことの証明にはなりません。\n絵が完成した時点で上記の処理が自動化されていたとしましょう。この場合、最初にその絵を書いた人がわかります。ですが、すべての絵師がこの方法に従うかというと現時点でありえない。\nしたがって、nftに画像を上げるイコールで自分が描いたことの証明にはなりません。他の人が勝手に上げただけなのかもしれない。\nnftにもあらゆる可能性が考えられますが、現時点でそこまで有効なものではありません。\n自分が描いたことの証明は、このような動画+証明書を目視で確認するしかないと思われます。\n","description":"","formated_time":"2022-09-22","href":"https://syui.github.io/blog/post/2022/09/22/illust/","tags":["illust"],"title":"絵師はどうやって自分が描いたことを証明するのか？","utc_time":"2022-09-22T00:00:00Z"},{"categories":null,"contents":"scaniverseがLiDARなしでも使えるようになりました。これはnianticが買収してから無料になった3Dモデルが作成できるアプリです。\ntrinoは以前からLiDARなしでも使えて便利だったようですが、ここに来てscaniverseが有力になりました。\nしたがって、この2つのアプリを簡単に比較してみたいと思います。\n以下は同じものをスキャンした例です。\nscaniverse 公平に見て、scaniverseのほうが使い勝手が良かったのと、trinoではモデル生成できなかった写真立て(カード立て)がscaniverseではできました。\nしたがって、現時点でscaniverseのほうがおすすめです。\nしかし、しっかりとした3Dモデルはtrinoのほうが作れていると感じます。\nscaniverseは一見してきれいに見えますが、表面的な部分のみで、内側を読み取るのは苦手なようです。\nscaniverseは、内部を作り込むのではなく、無理やり表面に結合するというような形になることが多かった。\nこれは、LiDARが使えるかどうかで変わってくるのかもしれません。\n","description":"","formated_time":"2022-09-18","href":"https://syui.github.io/blog/post/2022/09/18/3dscan/","tags":["3d","figure","make"],"title":"3Dモデルを作ってみる3","utc_time":"2022-09-18T00:00:00Z"},{"categories":null,"contents":"今回は、完全無課金の1年で原神はどこまでできるのかを紹介します。\n無課金で攻略できるの？ 結論から言うと、無課金でも攻略できます。\nただし、通常の場合と比べ、難易度は遥かに高いと考えてもらえれば正確です。\n世の中には「螺旋星36なんて無課金でも10日で簡単にとれる」というような情報がたくさんあります。\nですが、これらは間違った理解であり、誇張された事実である可能性が非常に高いと考えられます。つまり、大多数の実感とは大きく異なります。\n例えば、2chに書き込まれる情報の多くは事実に基づいておらず、誇張され、嘘や見栄に溢れており、それらの情報の信憑性は全くないということが明らかにされています。\nですから、そういったものを見て判断すると、それらは誤った理解に繋がりかねないと考えられます。\n現実的に信憑性のある情報は個人ブログ等に掲載されている傾向にあります。\n例えば、こちらの記事は、非常に現実的な内容となっており、おおよそ大多数の実感に近いものだと考えられます。\nhttps://okichan.site/genshin-mukakin-tumaranai 課金と無課金は、両者に異なった楽しみかたが存在すると思います。\n例えば、課金には「あるキャラクターをかっこよく使いたい」、「最強を目指したい」という楽しみ方があります。\n無課金には「コツコツ続け徐々に強くなっていく」という楽しみ方があるように感じます。\nもちろん、人それぞれですし、目指すべきところも違いますが、原神は無課金でも十分に楽しめるゲームです。\n育成 1年で引いたキャラです。\n私がよく使うキャラに☆をつけています。\nこれは引くべきタイミングが非常に重要だと思われます。\n無課金というのは原石を貯める時間が必須になります。\nですから、ある程度貯まった段階で引きたいキャラのピックアップを迎えなければなりません。\nプレイ開始時期やガチャを回す個別判断が影響してきます。運要素も強く影響すると考えてもらえればわかりやすいかもしれません。\n無課金で順調に攻略していくには運が必要になります。\n必要なのは、計画(実行)と運だと思います。\n武器 1年で引いた武器です。\n武器があまり無い。祭礼、西風すらあまりない。\n例えば、祭礼が発動せず元素粒子が回収できないことで螺旋攻略が遅れてしまうことがあります。\n螺旋 螺旋はある時期から毎回やってます。\n無課金での螺旋はあまりこだわりを持ってやるべきものではありません。\n私も「そろそろ攻略できそう」と思ったあたりから参加しました。\nもちろん、人それぞれですが、あまり無茶なことをしようとすると、原神自体が楽しめなくなってしまう可能性があります。\n今後の展望 ベネットを1凸したいのと、ナヒーダを引きたい。\n","description":"","formated_time":"2022-09-18","href":"https://syui.github.io/blog/post/2022/09/18/genshin/","tags":["genshin","game"],"title":"原神、無課金の1年で育成や武器、螺旋はどこまでできる？","utc_time":"2022-09-18T00:00:00Z"},{"categories":null,"contents":"今の螺旋は結構ギリギリです。\nPTは前半がクレー、綾華、鍾離、万葉。後半が雷電、行秋、ベネット、香菱。\nクレーは単にこだわり枠なので、他キャラのほうがいいでしょう。\nポイントは、12-3の前半に万葉で敵の水を拡散、そこに綾華の爆発を当てます。後半は雷電ナショナルです。1分あればいけます。\n","description":"","formated_time":"2022-09-17","href":"https://syui.github.io/blog/post/2022/09/17/genshin/","tags":["genshin"],"title":"原神3.0、クレーで螺旋攻略","utc_time":"2022-09-17T00:00:00Z"},{"categories":null,"contents":"\n今回は、キャラは自分で描きましたが、背景はAIが描きました。\n背景考えるの毎回大変だったんだよなあ\u0026hellip;。\nとはいえ、このまま背景をAIに頼ると、自分で背景を考える構築力が落ちると思っていて、統一感を保つのが難しくなります。\n背景も個性が出る部分だと思うので、やはり、自分で描くのが一番いいのかもしれない。\nとはいえ、たまには、めんどくさいときなんかはAIに頼るのも悪くないかもしれないと思っていて、AIもパラメータ、調整や修正のコツを学んでいけたらなあと思っています。\n","description":"","formated_time":"2022-09-15","href":"https://syui.github.io/blog/post/2022/09/15/illust/","tags":["illust"],"title":"イラスト描いた118","utc_time":"2022-09-15T00:00:00Z"},{"categories":null,"contents":"愛機のse1がios15までしかsupportしないので、se3を買いました。\nカメラの画質がめちゃくちゃ良くなった。上がse1、下がse3です。\nより明るくはっきり写ってる感じ。\nmacbook airとipadも買って移行しましたが、特筆すべきことはありません。スペックは一部カスタマイズで上げました。\niphone se1 -\u0026gt; se3\nmacbook air 2013 -\u0026gt; m1\nipad 7 -\u0026gt; 9\n","description":"","formated_time":"2022-09-14","href":"https://syui.github.io/blog/post/2022/09/14/iphone-ios-16/","tags":["ios","iphone"],"title":"iphone se1からse3に移行した","utc_time":"2022-09-14T00:00:00Z"},{"categories":null,"contents":"wingetが便利になってたので、wingetで最新のpwsh(powershell)をインストールして使ってみます。\n$ ssh windows $ winget -v # 7.2.6 $ winget upgrade microsoft.powershell # 7.3.0 $ winget install microsoft.powershell.preview $ pwsh-preview # winのpathは面倒なので適当に補完。下記でも行けると思いますが、念の為tabで変換するといいかも $ vim c:/programdata/ssh/sshd_config PasswordAuthentication no ForceCommand pwsh-preview $ net stop sshd $ net start sshd $ exit $ ssh windows powershell 7.3.0-preview $ winget upgrade --all winget、便利。\n","description":"","formated_time":"2022-09-13","href":"https://syui.github.io/blog/post/2022/09/13/windows-winget-pwsh-openssh/","tags":["windows","pwsh"],"title":"wingetでpwshをupgradeしてopensshで使う","utc_time":"2022-09-13T00:00:00Z"},{"categories":null,"contents":" 今回は、アイの秘密について書きます。\n愛とは、どういう意味なのでしょう。\nいきなり聞かれても、とっさに答えられなかったり、人によって答えがバラバラだったりしますよね。\n今回は、そのことについて考えてみようと思いました。\n異なる答え なぜ人は、愛について、とっさに答えられないことが多いのでしょうか。人によって答えがバラバラなのでしょうか。\nここでは私の意識の話をしてみようと思います。\n私は、その存在の答えは、その存在にあると感じています。\n現実は全て正しく、これ以上のものは創造できない。\nこの世界について、そんなふうに感じているのです。\n例えば、愛の答えがみんなバラバラであることもそうです。\nバラバラであること、それ自体が私にとっての答えなのです。\nですから、私にとっては、誰も愛について答えられなかったり、その答えがバラバラであることには、実はなんの疑問もなく、不満もありません。\nそれらは、私が望んだ通りのものなのですから。\n存在の答えは、その存在にあります。\n私はそのように感じています。\n愛の意味 さて、愛の意味。愛とはなんなのかという話でした。\n人には人の答えがあり、そして、私にも私の答えがあります。\n私は、愛とは、その対象をどれだけ多く自分の意識として捉えるかで決まるものと定義しました。\n分かりづらいので、わかりやすく表現すると、愛とは、深さではなく、その広さで決まる、そう考えればわかりやすいと思います。\n例えば、どれほど深いと呼ばれる愛があったとしても、私にとって、その対象が1つならそれは1でしかありません。\n広さというのは、深さを内包する言葉です。例えば、空を見て広大だと思う心は、縦にも横にも広がります。深さは、縦にしか広がりません。\n世の中には、愛をちょっとしか持てない者、たくさん持てる者が存在します。\n通常の生命は、近親者、家族や自分しか愛せないというタイプが最も多いように感じます。また、自分の生存に有利になるものだったり、架空の偉人や有名人しか愛せないというタイプもとても多い。\nこれは、悪いことでもなんでもなく、当たり前のことです。\nごく稀に、たくさんの愛を持つことができる器を持った人がいます。\nその判断も比較的容易で、私は、どれだけ多くの対象をまるで自分ごとのように捉えることができるか。それだけを見ています。\nアイの物語 私が作った物語には、自らをアイと名乗るキャラクターが登場します。\nこれには様々な意味があり解釈が可能です。その中の一つを紹介します。\nアイはある時、こんなことを言いました。\n「アイはこの世界と一緒だからね」\nもしかしたら、アイは、その小さな世界に存在するすべてを自分と同じものと捉えているのかもしれません。\nそして、その世界で最も小さなものを動かすことができる能力を持つのでした。\n\u0026hellip;その世界で最も小さなものと一緒になる能力を持つのでした。\nおしまい。\n","description":"","formated_time":"2022-09-11","href":"https://syui.github.io/archive/note/17/","tags":["note"],"title":"アイの秘密","utc_time":"2022-09-11T00:00:00Z"},{"categories":null,"contents":"この前、apple storeで新しいmacbook airとipadとiphoneを買ったんだけど、最新のipadを買ったらやってみたいことの一つに3Dモデルの生成があったので、やってみた。\ntrinoというアプリで生成しました。これ最新のipadじゃなくてもできるんだね。\n前に調べたとき別アプリが最新のipadしか対応してない感じだったので、断念してた。\n","description":"","formated_time":"2022-09-10","href":"https://syui.github.io/blog/post/2022/09/10/skechfab/","tags":["skechfab","3d","make"],"title":"3Dモデルを作ってみる2","utc_time":"2022-09-10T00:00:00Z"},{"categories":null,"contents":"原神をプレイしてると、ふわふわ浮いて「ちょび、ちょび」言ってる丸っこいやつをつけてる人がいて、あれはなんだろうとずっと思ってたんだけど、うちにも来た。\nよう来た、よう来た。ゆっくりしておいき。\n","description":"","formated_time":"2022-09-06","href":"https://syui.github.io/blog/post/2022/09/06/genshin/","tags":["genshin"],"title":"原神、ちょびちょびが来た","utc_time":"2022-09-06T00:00:00Z"},{"categories":null,"contents":"\nレッドは爆死して天井だったけど、サトシとシロナはすぐに出てくれたので良かった。\nレッド強すぎて絶対に引くべき。あと、ピカチュウが熱い。ポケマスも独自路線や一定の需要を掴みかけている雰囲気ある。\nポケモンではピカチュウは最弱だった。それ故、ピカチュウはポケモンの顔ではあるけど、誰も使っていない。\nアニメでは大活躍しているから意外かもだけど、強いピカチュウを使いたいと思っていた人もファンの中にはいたはず。\nだから、サトシやレッドが最強のピカチュウを使って戦うというシュチエーションに熱いものを感じる。\n現在、ポケマスというゲームでは最強のポケモンがピカチュウになってる。これは、どのポケモンゲームにも見かけなかった現象なので、気になる人はポケマスをプレイしよう。\n関係ないけどポケモンのフィギュア持ってるので写真あげときます。\nちなみに、アルセウス以外は他の人にあげたので今はいません。\n","description":"","formated_time":"2022-09-05","href":"https://syui.github.io/blog/post/2022/09/05/pokemas/","tags":["pokemon","pokemas"],"title":"ポケマス、レッド引いた","utc_time":"2022-09-05T00:00:00Z"},{"categories":null,"contents":"イラストAI(画像生成AI)としてhuggingfaceのdiffusionなどが話題になっています。今回はpromptを調整することでいい感じの画像を作ってみました。\n\u0026#34;a magical fantasy royal castle town that sits on a magnificent floating island, sunset scenery, trending on artstation, award winning digital art, anime, pixiv\u0026#34; \u0026#34;japanese anime of a beaultiful girl, fantasy costume, fantasy background, be autiful composition, cinematic lighting, pixiv, light novel, digital painting, extremely, detailed, sharp focus, ray tracing, 8k, cinematic postprocessing, genshin\u0026#34; \u0026#34;mysterious fantasy night sky in spectacular iridescent clouds, twinkling stars, trending on artstation, award winning digital art, anime, pixiv, fantasy background, be autiful composition, cinematic lighting, pixiv, light novel, digital painting, extremely, detailed, sharp focus, ray tracing, 8k, cinematic postprocessing\u0026#34; 下記は生成したイラストの一部です。\n今回は少しだけ思想的な話をすることにします。\nAIの出現に関して思うところ このようなAIは色々な分野で出現しており、その出現を良いことだと捉える人もいれば、悪いことだと捉える人もいます。\n私に関して言えば、良いことになるのか、悪いことになるのかはこれから決まるのだろうと思っています。社会のルール、あるいは人々の考え方次第だと思います。\n今回のイラストAIも一部の絵を書く人の驚異にはなるかもしれない。しかし、それは仕方ないことだし、世の中は変わり続けていくので、その一部の絵を書く人たちのために世の中が不便に強制される意味はまったくないということを思います。それ故に、そういったものが来たなら、そういったものに対応していくしかないし、そちらのほうがよほど絵を書く人たちにとっても好ましいものになりうる、というような考え方をします。\n例えば、絵柄をアップロードすると似た絵柄を自動生成するAIが登場し、熾烈な批判にさらされたことがありました。\nもちろん、批判はいいと思いますが、こういったものが批判等によって押しつぶされることがないように、と私は思います。\nこういったものが広く使われれることがあれば、需要があるということであり、経営としては、その需要を満たすことだけを考えなければなりません。そして、それが資本経済的な原理から言うと、正解です。もちろん、それが本当に正解かどうかは難しい問題なので、それについてここでは議論しません。しかし、需要があるかどうか、ヒットするかどうかもわからない前から、それを批判があったと取り下げること、それは、やめたほうがいい。新しいものが世に出てくるのはいいことで、それが多くの人々を救うことになるかもしれない。これが世に出ることで仕事が奪われるというのであれば、変わらなければならないのはツールではない。変わらなければならないのは、人々であり、ルールのほうだと思います\nルールというのは、例えば、人間の仕事全部がAIに奪われたという状況を想定してみてください。このような場合、人間はもう仕事をすべきではない。仕事をしなくても十分に豊かな生活が送れるようなルールにしたほうがいいと思います。\n今回の件でも、AIに仕事を奪われたという事実があるのなら、やはり、そういった人たちは仕事をせずとも十分に豊かな生活が送れるようになることを願います。その方向性でルールを形作っていくのが一番だと考えています。\nしかし、一部の影響を受ける人がAIは仕事を奪う悪いものだ、排除しろという思想を持っており、なぜかというと、それは自身の来たるべき未来が暗いものだと明確に予測できるからでもあります。\n世間の人々は自分が影響を受けない限りこう考えるでしょう。\n「努力が足りない」、「他のことをやればいい」、「やり方次第だろ」、「自己責任だ」と。\nしかし、一方で自身が影響を受ける場合にはこう考えるのです。\n「AIに仕事が奪われる」、「人間はAIに支配される」、「AIは排除しなければならない」、「世の中は悪くなる」と。\nこのように考えるのは自然なこと、しかたのないことです。\nしたがって、そこを批判しても意味がない。私はそれを問題だとも思っていません。\n少し難しい話をしてしまいました。\n私から言えることは少ないですが、できる限り多くの人々の、あるいは存在の、幸せを願っています。\n著作権の話 著作権に関して、参考になりそうな記事がこちらです。\nhttps://storialaw.jp/blog/8820\n個人的意見として、法的なすり合わせは後で行えばいいという考えです。\nそれぞれの論点については現時点で無視したほうがいいと思っています。\n結論を述べると、AIは合法と考えるべきでしょう。\n一般人が使ってなんの問題もないし、サービスを提供しても問題ない。AIが生成したイラストについては著作権は発生しない。\nこの3点が基本的な指針となります。\n例えば、ユーザーはパラメーターを操作するだけなので、このパラメータに著作権が発生してしまうと、重複するパラメーターは他の人が使えなくなります。APIのリクエストすらも実行できなくなるでしょう。これは、著作権法の趣旨にも反する。著作権法の趣旨は著作者の保護にあります。しかし、著作物を生成しているのはAIなので、人の法律の対象ではない。特別な指定ない限り法律というものは人に適応されます。AIは人ではない。ということで、保護対象にはならないと考えられます。仮にAIを保護対象にするには、新しい法律が必要になるだろうと思われます。\nとはいえ、これらはAIが出力する内容、あるいはアルゴリズムに依存します。仮にAIの中身がただネット上にある絵柄を拾ってきて多少の加工をするだけの場合は違法になるかもしれません。AIが少しでも手を加えればすべてが著作権なく使えるようになるというのでは、著作権法の意味を成さないからです。\nしかし、それらが問題になるのは、基本的には文化的発展あった後であり、文化的発展前にそれを阻害することがないよう配慮が必要だと考えられます。それらのバランスを保つのも著作権法の趣旨に含まれます。\nイラストAIの活用法 このようなAIは、自分の物語やキャラクターを作っていきたい人、あるいは自分で絵を描ける人にとっては、あまり活用する場面はないかもしれません。\nAIで出力するより自分で描いたほうが早いのなら、自分で描いたほうがいいし、そっちのほうが楽しいと思います。\nですから、こういったものをクリエイターが常用するようになるのかどうかは疑わしい。クリエイター間では一過性の話題に終わるかもしれません。\nとはいえ、なにかのとっかかりとして、あるいは補助としての活用法がないわけではないと思います。個人的にはうまい活用法を模索していければと考えています。\nただ、やっぱり、それ自体が面白くなかったり、楽しくなかったり、あるいは満足感がなかったりすると、あくまで個人的にですが、活用を継続していくのは難しいかもしれません。\n","description":"","formated_time":"2022-09-04","href":"https://syui.github.io/blog/post/2022/09/04/diffusion-windows/","tags":["python","ai","illust","diffusion"],"title":"イラストAIの活用法","utc_time":"2022-09-04T00:00:00Z"},{"categories":null,"contents":"diffusionというツールがあり、huggingface.coからtokenをもらってAIによる画像ファイルを生成できます。\nなお、cudaをサポートしている環境下で実行してください。\n$ pip install transformers scipy ftfy $ pip install git+https://github.com/huggingface/diffusers.git import torch from diffusers import StableDiffusionPipeline from torch import autocast MODEL_ID = \u0026#34;CompVis/stable-diffusion-v1-4\u0026#34; DEVICE = \u0026#34;cuda\u0026#34; YOUR_TOKEN = \u0026#34;xxx\u0026#34; pipe = StableDiffusionPipeline.from_pretrained(MODEL_ID, revision=\u0026#34;fp16\u0026#34;, torch_dtype=torch.float16, use_auth_token=YOUR_TOKEN) pipe.to(DEVICE) prompt = \u0026#34;a dog painted by Katsuhika Hokusai\u0026#34; with autocast(DEVICE): image = pipe(prompt, guidance_scale=7.5)[\u0026#34;sample\u0026#34;][0] image.save(\u0026#34;test.png\u0026#34;) $ python3 t.py 次に、img2imgを使って画像ファイルを参照した上で生成してみます。input.pngを置いておきます。\nimport torch from diffusers import StableDiffusionPipeline from torch import autocast MODEL_ID = \u0026#34;CompVis/stable-diffusion-v1-4\u0026#34; DEVICE = \u0026#34;cuda\u0026#34; YOUR_TOKEN = \u0026#34;xxx\u0026#34; pipe = StableDiffusionPipeline.from_pretrained(MODEL_ID, revision=\u0026#34;fp16\u0026#34;, torch_dtype=torch.float16, use_auth_token=YOUR_TOKEN) pipe.to(DEVICE) from PIL import Image from torch import autocast prompt = \u0026#34;cute girl\u0026#34; init_image = Image.open(\u0026#34;input.png\u0026#34;).convert(\u0026#34;RGB\u0026#34;) init_image = init_image.resize((512, 512)) with autocast(\u0026#34;cuda\u0026#34;): images = pipe( prompt=prompt, init_image=init_image, strength=0.75, guidance_scale=7.5, num_inference_steps=50, generator=None, )[\u0026#34;sample\u0026#34;] images[0].save(\u0026#34;output.png\u0026#34;) localでのpython動作環境が難しいならgoogle colabを使う方法もあります。\nその他、モデルをcloneしてくる方法もあるようです。\n$ git clone https://github.com/basujindal/stable-diffusion # git clone https://github.com/CompVis/stable-diffusion $ cd stable-diffusion $ conda env create -f environment.yaml $ conda activate ldm # huggingface.coで同意すればcloneできるようになる $ git clone https://huggingface.co/CompVis/stable-diffusion-v-1-4-original $ mv stable-diffusion-v-1-4-original stable-diffusion/models/ldm/stable-diffusion-v1 $ mv sd-v1-4.ckpt model.ckpt $ python optimizedSD/optimized_txt2img.py --prompt \u0026#34;Cyberpunk style Tokyo landscape\u0026#34; --H 512 --W 512 --seed 27 --n_iter 2 --n_samples 10 --ddim_steps 50 $ ls outputs/txt2img-samples/ ref : https://zenn.dev/koyoarai_/articles/02f3ed864c6127bb2049\nwindowsでやるには以下のような感じになります。\n# cuda 11.6 $ scoop bucket add extras $ scoop install anaconda3 python $ conda init powershell $ git clone https://github.com/basujindal/stable-diffusion $ mkdir -p ~/stable-diffusion/models/ldm/stable-diffusion-v1 $ mv sd-v1-4.ckpt ~/stable-diffusion/models/ldm/stable-diffusion-v1/model.ckpt $ cd stable-diffusion $ conda env create -f environment.yaml $ conda activate ldm # pytorchはcuda 11.6に対応しています $ conda install pytorch torchvision torchaudio cudatoolkit=11.6 -c pytorch -c conda-forge $ conda install jupyter pandas matplotlib -c conda-forge $ pip install diffusers transformers scipy ftfy 次回からは$ conda activate ldmで使います。\n$ conda activate ldm $ cd ~/stable-diffusion $ python optimizedSD/optimized_txt2img.py --prompt \u0026#34;Cyberpunk style Tokyo landscape\u0026#34; --H 512 --W 512 --seed 27 --n_iter 2 --n_samples 10 --ddim_steps 50 # ~/input.png # convert -resize 700x510 o.png input.png $ python optimizedSD/optimized_img2img.py --prompt \u0026#34;kawaii girl rim light\u0026#34; --init-img C:\\Users\\syui\\input.png --strength 0.2 --n_iter 2 --n_samples 2 --H 300 --W 230 $ python optimizedSD/inpaint_gradio.py --init-img C:\\Users\\syui\\input.png # open localhost:7860 $ ls outputs/* $ tree outputs/ pythonのimport torch, torch.cuda.is_available()がfalseの場合、pytorchがcudaと連携されていません。\nimport torch torch.cuda.is_available() 以下のエラーが出る場合はvramの容量が確保できていないので、basujindal/stable-diffusionの軽量版を使います。\nRuntimeError: CUDA out of memory. Tried to allocate 20.00 MiB (GPU 0; 4.00 GiB total capacity; 3.42 GiB already allocated; 0 bytes free; 3.48 GiB reserved in total by PyTorch) If reserved memory is \u0026raquo; allocated memory try setting max_split_size_mb to avoid fragmentation. See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF\nwindows + cuda + wsl + anaconda 次はwslで構築する方法です。memoryは多めに必要です。anaconda上でmodelをdlして使う方法です。\n$ wsl --install -d ubuntu-20.04 $ shutdown /r /f /t 0 # ubuntu setting user $ wsl --distribution ubuntu-20.04 --user xxx # wsl --user xxx $ cd $ wget https://repo.anaconda.com/archive/Anaconda3-2022.05-Linux-x86_64.sh $ sh Anaconda3-2022.05-Linux-x86_64.sh $ export PATH=~/anaconda3/bin:$PATH $ conda create -n stable-diffusion python=3.9 $ conda activate stable-diffusion # pytorchはcuda 11.6に対応しています $ conda install pytorch torchvision torchaudio cudatoolkit=11.6 -c pytorch -c conda-forge $ conda install jupyter pandas matplotlib -c conda-forge $ pip install diffusers transformers scipy ftfy $ python ./t.py ref : https://tadaoyamaoka.hatenablog.com/entry/2022/08/23/222813\n環境構築後は、以下のコマンドで実行します。私の実行環境はmac -\u0026gt; ssh -\u0026gt; windows -\u0026gt; pwsh -\u0026gt; wsl -\u0026gt; anacondaとなっています。\n$ wsl --user xxx $ conda activate stable-diffusion $ python ./t.py 次にstable-diffusion-webuiを試してみます。画像処理に関してはcliよりwebuiのほうがおすすめです。ただし、自動化する場合はcliで動作する環境が必要です。\nhttps://github.com/hlky/stable-diffusion-webui\n# 以下はすべてanaconda上に構築します。したがって、最初にactiveを実行しておきます $ conda activate stable-diffusion $ pip install diffusers transformers scipy ftfy invisible-watermark gradio pynvml omegaconf pytorch_lightning $ pip install git+https://github.com/crowsonkb/k-diffusion/ # taming-transformers\t$ git clone https://github.com/CompVis/taming-transformers.git $ cd taming-transformers $ pip install -e . # diffusion $ cd # git clone https://github.com/basujindal/stable-diffusion.git $ git clone https://github.com/CompVis/stable-diffusion.git # diffusion-webui $ cd $ git clone https://github.com/hlky/stable-diffusion-webui.git $ cd stable-diffusion-webui $ cp -r * ../stable-diffusion/ # download model $ sudo apt update $ sudo apt install git-lfs # sizeが大きいのでcloneするにはlfsの設定が必要 $ git lfs install $ cd # modelをcloneするにはライセンスに同意します # https://huggingface.co/CompVis/stable-diffusion-v-1-4-original $ git clone https://huggingface.co/CompVis/stable-diffusion-v-1-4-original $ mkdir -p ~/stable-diffusion/models/ldm/stable-diffusion-v1 $ cd ~/stable-diffusion/models/ldm/stable-diffusion-v1 $ ln -s ~/stable-diffusion-v-1-4-original/sd-v1-4.ckpt model.ckpt # ファイル構成は以下のとおりです # stable-diffusion/models/ldm/stable-diffusion-v1(stable-diffusion-v-1-4-original)/model.ckpt # install diffusion $ cd ~/stable-diffusion $ pip install -e . $ python webui.py $ curl -sL http://localhost:7860/ $ ipconfig /all 192.168.1.10 # http://192.168.1.10:7860 ref : https://tadaoyamaoka.hatenablog.com/entry/2022/08/28/232041\n","description":"","formated_time":"2022-09-03","href":"https://syui.github.io/blog/post/2022/09/03/diffusion-img2img/","tags":["python","ai","illust","diffusion"],"title":"diffusion img2imgでイラストを再生成してみた","utc_time":"2022-09-03T00:00:00Z"},{"categories":null,"contents":"herokuの移行先として挙げられるfly.io, northflankの感想になります。\nhttps://news.ycombinator.com/item?id=32599398\nfly.ioが個人的には合っていると思いました。\nfly.ioはdockerで動かしますが、goなどのbuild, deployが非常に快適でわかりやすかったです。mastodonはredisが入っているため動かすには工夫が必要ですが、go, rust, phoenixなどはそれらが必要ない場合が多く、go, rustはsingle-binaryなので、fly.tomlも書きやすい。\ngitea 例えば、giteaはfly.ioで簡単に動きました。dockerを利用するので当たり前かもしれませんが、herokuでは相当の工夫が必要でした。\n# create a directory to store fly.io application config mkdir gitea-on-fly # enter into the newly created directory cd gitea-on-fly # tell fly.io you wish to create a new application in the amsterdam region (there are many other regions you could pick too) # pick any name for the app that you\u0026#39;d like, in the example we are using `gitea-on-fly` flyctl launch --name gitea-on-fly --no-deploy --region ams # give the newely create application persistant storage, so your data persists between app updates flyctl volumes create gitea_data --size 1 --region ams --app gitea-on-fly app = \u0026#34;gitea-on-fly\u0026#34; kill_timeout = 5 [build] image = \u0026#34;gitea/gitea:latest\u0026#34; # latest is the most recent stable release [env] GITEA__database__DB_TYPE=\u0026#34;sqlite3\u0026#34; GITEA__database__PATH=\u0026#34;/data/gitea/gitea.db\u0026#34; GITEA__server__DOMAIN=\u0026#34;gitea-on-fly.fly.dev\u0026#34; GITEA__server__SSH_DOMAIN=\u0026#34;gitea-on-fly.fly.dev\u0026#34; GITEA__server__ROOT_URL=\u0026#34;https://gitea-on-fly.fly.dev\u0026#34; GITEA__security__INSTALL_LOCK=\u0026#34;true\u0026#34; # Don\u0026#39;t show installer # GITEA__service__DISABLE_REGISTRATION=\u0026#34;true\u0026#34; # TODO: uncomment once you have created your first user # persist data [[mounts]] destination = \u0026#34;/data\u0026#34; source = \u0026#34;gitea_data\u0026#34; # ssh traffic [[services]] internal_port = 22 protocol = \u0026#34;tcp\u0026#34; [[services.ports]] port = 22 # https traffic [[services]] internal_port = 3000 protocol = \u0026#34;tcp\u0026#34; [[services.ports]] handlers = [\u0026#34;http\u0026#34;] force_https = true port = 80 [[services.ports]] handlers = [\u0026#34;tls\u0026#34;, \u0026#34;http\u0026#34;] port = 443 $ flyctl deploy $ flyctl open https://blog.gitea.io/2022/04/running-gitea-on-fly.io/\ncloudflare + fly.io + gitea(ssh) cloudflare : dns -\u0026gt; cname -\u0026gt; disable proxy(dns only)\n# add key $ ssh-keygen -t ed25519 -f ~/.ssh/xxx $ cat ~/.ssh/xxx|pbcopy # gitea -\u0026gt; account -\u0026gt; ssh -\u0026gt; key -\u0026gt; paste $ ssh -vT git@xxx.fly.dev $ ssh -vT git@example.com $ git remote add ssh git@xxx.fly.dev:syui/repo.git $ git remote add origin git@example.com:syui/repo.git $ git remote add http https://example.com/syui/repo.git [core] repositoryformatversion = 0 filemode = true bare = false logallrefupdates = true ignorecase = true precomposeunicode = true [remote \u0026#34;ssh\u0026#34;] url = git@xxx.fly.dev:user/repo.git fetch = +refs/heads/*:refs/remotes/origin/* [remote \u0026#34;origin\u0026#34;] url = git@example.com:user/repo.git fetch = +refs/heads/*:refs/remotes/origin/* [remote \u0026#34;http\u0026#34;] url = https://example.com/user/repo.git fetch = +refs/heads/*:refs/remotes/http/* [branch \u0026#34;main\u0026#34;] remote = origin merge = refs/heads/main $ git push ssh main $ git push origin main $ git push http main ent-ogent fly.ioではent-ogentも簡単でした。\nhttps://entgo.io/ja/blog/2022/02/15/generate-rest-crud-with-ent-and-ogen/\napp = \u0026#34;ent-ogent\u0026#34; kill_signal = \u0026#34;SIGINT\u0026#34; kill_timeout = 5 [build] builder = \u0026#34;paketobuildpacks/builder:base\u0026#34; buildpacks = [\u0026#34;gcr.io/paketo-buildpacks/go\u0026#34;] [env] PORT = \u0026#34;8080\u0026#34; [processes] api = \u0026#34;bin/t\u0026#34; [[services]] internal_port = 8080 processes = [\u0026#34;api\u0026#34;] protocol = \u0026#34;tcp\u0026#34; [[services.ports]] force_https = true handlers = [\u0026#34;http\u0026#34;] port = 80 [[services.ports]] handlers = [\u0026#34;tls\u0026#34;, \u0026#34;http\u0026#34;] port = 443 ただし、freeで運用するとなると、fly.ioはvmが3つまでです。\nそこでnorthflankを試してみることにしました。\nnorthflankはwebUIをポチポチやってればできます。大体はわかると思います。\ngoの場合、buildpackを選択し、build-contextを/にしました。\naddons : postgresを追加し、connectionを確認します。のちにenvのDATABASE_URLに入れます。いくつかenvが設定されるのでコードのほうを変更してもいい。\nservices/port\u0026amp;dns : custom domainでcnameします。verifyしたら、後にselectします。\nservices/cmd-overide : binaryを指定します。/bin/t\nservices/environment : DATABASE_URLを追加します。postgres-connection\nservices/builds : ここでコードをbuildします。\nservices/instances(continer) : logはここから確認します。\nちなみに、northflank/cliも使ってみましたが、使いづらい印象があります。\n$ yarn global add @northflank/cli $ northflank login $ sudo northflank forward addon --addonId postgres ","description":"","formated_time":"2022-08-31","href":"https://syui.github.io/blog/post/2022/08/31/heroku-fly-northflank/","tags":["heroku","fly","northflank"],"title":"fly.ioとnorthflankの感想","utc_time":"2022-08-31T00:00:00Z"},{"categories":null,"contents":"herokuのplan:free(hobby)が廃止され、mo/$31になるので、herokuからfly.ioへ移行を考えています。\nHeroku Dynos starts at $7/month, Heroku Data for Redis® starts at $15/month, Heroku Postgres starts at $9/month.\nhttps://blog.heroku.com/next-chapter\nherokuのこれまでの評価は、素晴らしかったです。感謝しかありません。ありがとう！\nfly.io plan:free(hobby) クレジットカードを登録するとplan:hobbyが使えるようになります。クレジットカードはできればVプリカ(visaプリペイドカード)などを使用するようにしてください。登録できない場合に通常のクレジットカードで登録するしかありません。このへんは未検証です。\nAdd a payment method to get even more free allowances.\nVM: shared-cpu\t2,340 hours per month\tRun 3 shared-cpu-1x VMs with 256MB RAM full time. Volumes\t3GB\tProvision 3GB of persistent volumes for permanent storage Bandwidth\t160GB per month\tSee outbound data transfer for regional breakdown Anycast IPs\tUnlimited IPv6, 1 IPv4 per active app\tAdditional IPv4 addresses are $2 per month Certificates\t10 active certificates\tAdd 10 certificates to your apps\ndyno : 2,340\nram : 256M\nstrage(volume) : 3G\nhttps://fly.io/docs/about/pricing/\nfly.ioはかなりherokuを意識しているようで、cliもありますので、herokuと同じように使いやすいと思いました。\nherokuからの移行はこちらから自動で移行するツールがあります。が、これでうまくいくとは思っていません。\n注意点としては以下になります。\nherokuとfly.ioで使うメールアドレスを同一のものにすること これを行わないとfly.ioでherokuのメールアドレスからアカウントが作成された上で、appをdeployします。この際、アカウントにはクレジットカードの登録も必要です。あらかじめfly.ioで作成している場合、そのアカウントは使われません。\nfly.ioのlaunch/herokuを使う際はherokuとfly.ioで使うメールアドレスを同一のものにしておきましょう。\nさて、ではherokuからの移行ツールが動作するかというと、当然ですが移行ツールでは正常にdeployが完了しませんでした。\nしたがって、docsを読んで最初からfly.io用にdeployできる構成を作らなければなりません。\nmastodon ここではfly.ioでmastodonを正常に動作させるまでをやります\nfly.ioでmastodonを動かす場合、(1)memory:512Mにすること、(2)redis-serverを独自に立ち上げることが重要になります。\n公式のdockerfileでもdeployは成功しますが、logsを見てみると、redisの処理がうまく行かず、webにアクセスできませんでした。\nさらに、独自のアドレスを使う場合は、fly.ioのapps/xxx/certificatesで証明書を発行した上でCNAMEを追加します。ここまでやって初めて正常に動作しました。\nref : https://github.com/tmm1/flyapp-mastodon\n$ fly apps create xxx $ fly scale memory 512 app = \u0026#34;xxx\u0026#34; kill_signal = \u0026#34;SIGINT\u0026#34; kill_timeout = 5 [env] # WEB_DOMAIN=\u0026#34;mstdn.syui.ai\u0026#34; # LOCAL_DOMAIN=\u0026#34;syui.ai\u0026#34; LOCAL_DOMAIN=\u0026#34;xxx.fly.dev\u0026#34; LANG=\u0026#34;en_US.UTF-8\u0026#34; RAILS_ENV = \u0026#34;production\u0026#34; RAILS_LOG_TO_STDOUT = \u0026#34;enabled\u0026#34; WEB_CONCURRENCY = \u0026#34;1\u0026#34; REDIS_HOST = \u0026#34;xxx-redis.internal\u0026#34; REDIS_PORT = \u0026#34;6379\u0026#34; S3_ENABLED=false SINGLE_USER_MODE=true OTP_SECRET=\u0026#34;\u0026#34; SECRET_KEY_BASE=\u0026#34;\u0026#34; # LOCAL_HTTPS=false [deploy] release_command = \u0026#34;bundle exec rails db:migrate\u0026#34; [mounts] processes = [\u0026#34;rails\u0026#34;] source = \u0026#34;mastodon_uploads\u0026#34; destination = \u0026#34;/opt/mastodon/public/system\u0026#34; [processes] rails = \u0026#34;bundle exec rails s -p 8080\u0026#34; sidekiq = \u0026#34;bundle exec sidekiq\u0026#34; [[statics]] guest_path = \u0026#34;/opt/mastodon/public\u0026#34; url_prefix = \u0026#34;/\u0026#34; [[services]] internal_port = 8080 processes = [\u0026#34;rails\u0026#34;] protocol = \u0026#34;tcp\u0026#34; [[services.ports]] handlers = [\u0026#34;http\u0026#34;] port = 80 [[services.ports]] handlers = [\u0026#34;tls\u0026#34;, \u0026#34;http\u0026#34;] port = 443 [[services.tcp_checks]] grace_period = \u0026#34;1s\u0026#34; interval = \u0026#34;15s\u0026#34; restart_limit = 0 timeout = \u0026#34;2s\u0026#34; [[services.http_checks]] path = \u0026#34;/health\u0026#34; grace_period = \u0026#34;1s\u0026#34; interval = \u0026#34;15s\u0026#34; restart_limit = 0 timeout = \u0026#34;2s\u0026#34; OTP_SECRET, SECRET_KEY_BASEはfly secrets setしたほうがいいです。ですが、secretsは不安定なので、envに書いたほうがいいです。理由は後述します。\n私の場合、下記のようにDBを引き継いだのですが、反映されませんでした。\n$ heroku config $ fly pg create xxx $ fly proxy 5432 -a xxx --- # host=localhost $ export DATABASE_URL=postgres://xxx:xxx@localhost:5432 $ pg_dump --no-owner -C -d $HEROKU_DATABASE_URL | psql -d $DATABASE_URL --- $ fly pg attach -a $app $app_db # DATABASE_URLにsecrets setしている場合はattachは動きません。unsetしてください $ fly secrets unset DATABASE_URL 以前のsecret-keyなどもenvに入れて、rails db:setupを実行していません。引き継ぎなのでmigrateの処理を入れています。\nしかし、新しくアカウントを作り直すことになったので、最初から初期化してdeployするのがおすすめかもしれません。\n$ fly pg create --name xxx-pg $ fly pg attach -a xxx xxx-pg # fly deploy -c fly.setup.toml 次は、redis-serverを作ります。\napp = \u0026#34;xxx-redis\u0026#34; [[mounts]] source = \u0026#34;xxx_redis\u0026#34; destination = \u0026#34;/data\u0026#34; volume sizeが3G以上になる場合、課金が発生します。\n$ fly apps create xxx-redis $ fly vol create -c fly.redis.toml xxx_redis --size 1 $ fly deploy --config fly.redis.toml --build-target redis-server dockerからなのか、ちょっとしたことですぐに動かなくなります。例えば、mediaのurlがうまく取得できない場合でもそういった事が起こるので、注意が必要です。問題が発生した場合、pgをresetしたほうが早いです。\n$ fly vol create mastodon_uploads --size 1 # こういったやり方で画像をuploadしている場合は動かなくなる PAPERCLIP_SECRET=\u0026#34;xxx\u0026#34; PAPERCLIP_ROOT_URL=\u0026#34;https://github.com/syui/xxx/raw\u0026#34; 最終的には、appをdeployします。\n$ fly deploy $ fly open $ fly ssh console # https://zenn.dev/kumasun/articles/12dcc7b3e91722945228 # 新しくアカウントを作る $ cd mastodon $ RAILS_ENV=production bundle exec bin/tootctl accounts create $USER --email=$EMAIL --confirmed --role admin # 既存のアカウントを上書き $ RAILS_ENV=production bundle exec bin/tootctl accounts modify $USER --email=$EMAIL --confirm --role admin sidekiqが遅い場合があり、redisが原因だと思われます。しかし、これ以上の方法があるとは思えません。\nあと、fly.io(cli)は、バグっているので、まあまあの割合で有効に動作しないことがあります。なにかおかしいと思ったときは、そういうこともあるということで。私の場合、secretsに入れたはずのやつが消えたり、消したはずのやつが残ってたり、DATABASE_URLを消したあとにもattachで追加できなくなったりといったことが頻発しました。\nmastodon/dockerfile 下記からは主にうまく動作しない手順となります。\n通常はfly launchにてy/NでNにします。こうすることでdockerfileが上書きされず、mastodonのdockerfileを使用します。\n[processes] web = \u0026#34;bundle exec puma -C config/puma.rb\u0026#34; worker = \u0026#34;bundle exec sidekiq\u0026#34; [build] [build.args] BUNDLER_VERSION = \u0026#34;2.3.9\u0026#34; NODE_VERSION = \u0026#34;14\u0026#34; RUBY_VERSION = \u0026#34;3.0.4\u0026#34; [deploy] release_command = \u0026#34;bundle exec rails db:migrate\u0026#34; [env] PORT = \u0026#34;8080\u0026#34; [[services]] processes = [\u0026#34;web\u0026#34;] # this service only applies to the web process http_checks = [] internal_port = 8080 protocol = \u0026#34;tcp\u0026#34; script_checks = [] 多少、dockerfileを手直ししてdeployすればいいです。postgres, redisのurlをenvに入れておきましょう。これはdockerfileに入れてもfly.ioに入れてもいいです。herokuからの移行はこちらを参考にしてください。\n$ ruby -v $ rbenv install 3.0.4 $ bunlde $ fly secrets set DATABASE_URL=xxx $ fly secrets set REDIS_URL=xxx $ fly deploy $ fly open fly.io/dockerfile 下記からは主にうまく動作しない手順となります。\nfly.ioが生成するdockerfileを使ってdeployする大まかなヒントです。\nruby \u0026lsquo;~\u0026gt; 3.1.0\u0026rsquo;\n$ rbenv install 3.1.0 $ ruby -v $ bundle $ fly auth login $ fly launch $ fly deploy \u0026gt; An error occurred while installing idn-ruby (0.1.4), and Bundler cannot \u0026gt; An error occurred while installing charlock_holmes (0.7.7), and Bundler cannot ... Dockerfile\nARG DEV_PACKAGES=\u0026#34;git build-essential libpq-dev wget vim curl gzip xz-utils libsqlite3-dev ffmpeg libicu[0-9][0-9] libicu-dev libidn11 libidn11-dev libpq-dev libxdamage1 libxfixes3 zlib1g-dev libcairo2 libdatrie1 libgdk-pixbuf2.0-0 libgraphite2-3 libharfbuzz0b libpango-1.0-0 libpangocairo-1.0-0 libpangoft2-1.0-0 libpixman-1-0 librsvg2-2 libthai-data libthai0 libvpx[5-9] libxcb-render0 libxcb-shm0 libxrender1 libglib2.0-0\u0026#34; これでやっと通りました。\nしかし、bundle exec rails assets:precompileでlibicudata.so.67: cannot open shared object file: No such file or directory - /app/vendor/bundle/ruby/3.1.0/gems/charlock_holmesが出ます。\nDockerfile\nENV OTP_SECRET=xxx RUN gem pristine --all ARG PROD_PACKAGES=xxx libglib2.0-0 postgres fly-postgres(pg)はpublicではなくprivateです。container内からしかアクセスできません。ただし、localからアクセスする手段があります。それを使いheroku-pgのdumpをfly-pgに追加します。\n$ heroku config $ fly pg create $ fly proxy 5432 -a xxx --- # host=localhost $ export DATABASE_URL=postgres://xxx:xxx@localhost:5432 $ pg_dump --no-owner -C -d $HEROKU_DATABASE_URL | psql -d $DATABASE_URL --- $ fly pg attach --app $app $app_db # DATABASE_URLにsecrets setしている場合はattachは動きません。unsetしてください $ fly secrets unset DATABASE_URL redis fly.ioはredisがつらい。もしかしたらherokuのrediscloud使えばいいかも。でもREDIS_URLに入れてもうまく動作しなかった。\n$ heroku addons:create rediscloud 総評として、herokuがよすぎた。\n追記 : 調整することで、fly.ioでもかなり快適に動作するようになりました。ただし、総合的に見てherokuのほうが便利です。fly.ioはherokuより安く運用できるという点で評価できます。\n","description":"","formated_time":"2022-08-27","href":"https://syui.github.io/blog/post/2022/08/27/fly-heroku/","tags":["heroku","fly"],"title":"herokuからfly.ioへの移行","utc_time":"2022-08-27T00:00:00Z"},{"categories":null,"contents":"フィギュア制作の情報をまとめます。\nきっかけ オタクなのでフィギュアは一つくらいほしいなあと思っていました。\nスマブラで使っているゼルダをamiiboで買おうか、原神の蛍を買おうか、迷いました。\n最終的にビビッと来るものがなかったので、自分で作ることにしました。\n制作過程 2021-07-17から2021-08-13の間に3つのフィギュアを作っては作り直していました。\nしばらくそのフィギュアを机においていましたが、1年後の2022-08-15からまたフィギュアを作り直すことしました。そして、2022-08-19に完成しました。\nこれがトップにある画像になります。\n必要なもの スカルピー\nオーブン\n針金\n塗料\n印刷シール\nスパチュラはなくてもいいです。あまり使ってない。カッターとかハサミなど日常品は省略しています。オーブンはスカルピーが有毒なので別なものを買ったほうがいいです。塗装はアクリル絵の具で厚塗りを重ねることで完全に塗ることができ、仕上げスプレーを使うことでザラザラを消すことができます。ただし、塗装スプレーを使ったほうが手っ取り早いです。顔は印刷シール使うと簡単です。焼いたあとカットしてます。\n具体的な手順 粘土をこねる\n無水エタノールで表面処理\n焼く\nカットとやすりで修正と表面処理\nスプレーで肌色、服全体を塗る\nラッカー系塗料で細部を塗る\n光沢スプレーなどで仕上げ\nポイント 髪の毛は細くすると見栄えが良くなるけど、耐久性も下がる\nそれぞれの部位は思った以上に小さくする必要があります。大きくなりがちです。\n固定できるポーズが重要。この辺はあとに響くので見栄えとのバランスが難しいです。\n一気に焼いてはいけない。小さい部位ごとに完成させていくイメージ。\n納得行くまで粘土をこねる。とりあえず完成イメージを作る。1日置いてみる。この繰り返しが一番の近道。すぐに焼いてはいけない。\nただし、焼く練習は必要。まずは小さいものや髪の毛を焼いてみよう。\n表面処理とラッカー系塗料 最初はアクリル絵の具でそのまま塗っているだけでしたが、表面処理とラッカー系塗料を行うと、はじめて市販のフィギュアっぽくなりました。それまでは明らかに自作という感じでした。\n左が市販、右が自作\nでは、表面処理とは何を指すのでしょう。\n表面処理は主に固める前と後で分けられます。\n固める前は無水エタノールなどでなめらかにすること。固めた後はやすりなどで削ることです。\nラッカー系塗料がおすすめです。ただし、換気が必要です。\n磁石と輪っか 磁石を頭に入れる事で輪っかを設置しやすくなります。\n","description":"","formated_time":"2022-08-20","href":"https://syui.github.io/blog/post/2022/08/20/figure/","tags":["make","figure"],"title":"フィギュアを作った","utc_time":"2022-08-20T00:00:00Z"},{"categories":null,"contents":"絶対に引いておけと言われる性能をしています。例えば、アタッカーとしてより強力なキャラが追加されても、フォルムチェンジによる総合力の点でこれに匹敵するものは今後もなかなか出てこないと考えられます。ということで、これは絶対に確保しておいたほうがいいでしょう。\nポケマスに実装してほしいもの プレイヤーの選択あるいはランダムによって変化する強化要素をもう少し追加してくれるとうれしいです。\n原神で言うところの聖遺物厳選と呼ばれるようなシステムですが、こういったやりこみ要素が追加されると、遊びの幅が広がると思います。\n","description":"","formated_time":"2022-08-11","href":"https://syui.github.io/blog/post/2022/08/11/pokemas/","tags":["pokemon","pokemas"],"title":"ポケマス、ダイゴ\u0026デオキシス","utc_time":"2022-08-11T00:00:00Z"},{"categories":null,"contents":"7月末あたりコロナに感染してました。\n何かの参考になるかもしれないので、その時の話を少し書きます。\n日付 症状 1日目 なんかちょっとだけ喉に違和感あり 2日目 発熱して最大38.0の熱がでる。めちゃくちゃしんどかった。あとから思い返すと、しんどかったのはこの1日だけだった 3日目 熱は36.6に下がる。しんどさが和らぐ。朝起きると喉の奥が焼けるような痛み。水を飲むと痛みはさっと引いた。昼頃からマシになった 4日目 しんどさと喉の痛みは引いたが咳が出る。そして、なぜか全身に発疹が出始める 5日目 咳は引いたが、全身の発疹がひどくなる。暑さを感じるとチリチリという痒さを生じる発疹だった。この症状には覚えがある 6日目 病院に行って薬をもらう。診断結果としては「わからない」とされる。汗と関係するアレルギーと推測されたようだ。たしかに、2日目は寒気がするので毛布をかぶり大量の汗をかいてた。通常時はそういったことで発疹は出たことがない。しかし、今回のように免疫力が落ちている状態だと相まって出たものなのかもしれない 7日目 薬を飲む。全身に出ていた発疹が引いてきたように感じた 8日目 全身に出ていた発疹が消えた。ただし、相変わらず汗をかくとチリチリした痒みが生じるので、完治には数週間かかるかもしれない。昔に発疹がでたときもそうだった 14日目 ようやく痒みがなくなってきた 17日目 2,3日様子を見たが、完全に痒みがなくなったので完治した ワクチン接種なし。4日目にコロナ症状のつらさは終わった感じだったけど、5日目から謎の発疹(アレルギー)症状が出てしまい、それが一番つらかった。\n今は完治しているけど、数日前は、ここにブワッと発疹ができた。\n私は、今までの人生で2,3回ほど全身に発疹(蕁麻疹のようなもの)が出たことがあった。完治に数週間ほどかかった。\n関係ないけど数年前は、それとは別の手足口病に感染したことがある。ただ今回の症状では口内炎がでていないので、手足口病ではないと思う。\n昔、2,3回ほど発生したことがある発疹(アレルギー)症状そのものだった。チリチリした痒みに覚えがある。そして、発症するのは必ず夏だった。手足口病も夏。\nコロナとは関係ないけど、私は、コロナがおそらくこれを呼び起こしたんだと思ってる。\nコロナに関しては、店から検査キット取り寄せてできるので、それをやった。軽症の場合、病院に行かず、自宅療養したほうがよさそう。\n私の場合、結局、謎の発疹が出たので行ったけど。\nワクチンは打ったほうがいいのか この際だから書いておく。\n前から言っていることだけど、私はワクチンは打っておいたほうがいいんじゃないだろうかと思っている。\n私の場合、謎の発疹アレルギーが過去に2,3回ほど出たことがあるので打たないが、ワクチンは重症化を防ぐ効果があるというデータがあり、それは一定の信憑性があるものだと思われる。\nただし、ワクチンに関してもわからないことは多いと思う。確実に言えることはなにもない。私の意見が正しいとは限らない。だからこそ、このことに関しては、各々が考え判断してほしい事柄だと思う。\n","description":"","formated_time":"2022-08-07","href":"https://syui.github.io/blog/post/2022/08/07/covid/","tags":["covid"],"title":"コロナに感染した時の話","utc_time":"2022-08-07T00:00:00Z"},{"categories":null,"contents":"できるだけ毎日、メガシンカできるポケモンがいないか検索して、いたら進化させてました。現在のメガ3(メガレベルMAX)はこんな感じです。\nこれによってメダルもプラチナになりました。\nメガスピアーはエナジーが大量にあったので2匹をメガ3にして交互に進化させることで数を稼ぎました。このメダルは日付制限ないんで、1日で150-200くらいやったかな。最終日だけですが。\n個人的にメガシンカは早めにやったほうがいいと思います。これはポケモンGoでは非常に珍しいタイプの試みで、このゲームというのは、今までプレイすればするほど、強化すればするほど、使えば使うほど損をする、取り返しがつかなくなるゲームでした。\nですから、多くの人はエナジーがあるならとっておこう、強化ポイントがあるならとっておこう、進化ポイントがあるなら進化させずにとっておこう、メガシンカがあるならメガシンカせずにとっておこう、となっていました。\nプレイヤーの行動原理がその方向に向かっており、なぜなら運営がその方向に誘導しているからでした。\nしかし、新しいメガシンカの仕組みはそうではありません。やればやるほど得ですし、早めにやったほうが得なのです。\nメガレベルがあがると、無料でメガシンカできる期間が短縮されます。最短で3日ごとになります。そして、XLアメの確率もアップします。\n例えば、メガシンカせずXLアメの確率が0の人とメガ3にして確率アップした人がいたとして、1ヶ月間プレイしてもらいます。この場合、1ヶ月でどれだけの差がでるかというと、早くにメガ3にした人はそれだけ無料のメガシンカを受け取れる期間が長くなります。また、XLアメを貰える機会も増えていきます。これは蓄積される結果であり、期間が長ければ長いほど大きな差になります。\nメガエナジーを使うのはもったいないからとっておくという選択は、結果的に大きな機会損失に繋がります。\nこのゲームでは珍しい要素ですが、メガシンカはやればやるほどお得なのでやったほうがいいです。\n得かどうかを除いても、メガシンカは楽しい。ですから、個人的には毎日やることをおすすめします。\nその他、最近の進捗です。イベントしかやってないので、イベントで取れた色違いしかいませんが、今後も持ってない色違いが取りやすいイベントがあれば、参加していく予定です(無課金)。\n","description":"","formated_time":"2022-08-06","href":"https://syui.github.io/blog/post/2022/08/06/pogo/","tags":["pokemongo","pokemon"],"title":"ポケモンGo、メガシンカのその後","utc_time":"2022-08-06T00:00:00Z"},{"categories":null,"contents":"zigは、現時点で外部パッケージを読み込む機能がありません。rustならCargo.toml、rubyならGemfile、goならgo.modがあります。\nzigには、いくつか有志が仕組みを作っていますが、決定的なものは存在しません。\nhttps://github.com/mattnite/gyro\nhttps://github.com/marler8997/zig-build-repos\nしたがって、build.zigにpathを書いていく必要があります。今回は、cli-toolを作ってみます。\nconst std = @import(\u0026#34;std\u0026#34;); pub fn build(b: *std.build.Builder) void { const mode = b.standardReleaseOptions(); const lib = b.addStaticLibrary(\u0026#34;zig-cli\u0026#34;, \u0026#34;zig-cli/src/main.zig\u0026#34;); lib.setBuildMode(mode); lib.install(); const main_tests = b.addTest(\u0026#34;zig-cli/src/tests.zig\u0026#34;); main_tests.setBuildMode(mode); const test_step = b.step(\u0026#34;test\u0026#34;, \u0026#34;Run library tests\u0026#34;); test_step.dependOn(\u0026amp;main_tests.step); const origin = b.addExecutable(\u0026#34;random\u0026#34;, \u0026#34;example/random.zig\u0026#34;); origin.addPackagePath(\u0026#34;zig-cli\u0026#34;, \u0026#34;zig-cli/src/main.zig\u0026#34;); origin.setBuildMode(mode); origin.install(); b.default_step.dependOn(\u0026amp;origin.step); } https://github.com/sam701/zig-cli\n$ git clone https://github.com/sam701/zig-cli $ mkdir -p example $ vim example/random.zig const std = @import(\u0026#34;std\u0026#34;); const cli = @import(\u0026#34;zig-cli\u0026#34;); const RndGen = std.rand.DefaultPrng; var gpa = std.heap.GeneralPurposeAllocator(.{}){}; const allocator = gpa.allocator(); var app = \u0026amp;cli.Command{ .name = \u0026#34;random\u0026#34;, .help = \u0026#34;get random number\u0026#34;, .action = run_server, }; pub fn main() !void { return cli.run(app, allocator); } fn run_server(_: []const []const u8) !void { var rnd = RndGen.init(0); var some_random_num = rnd.random().int(i32); std.log.debug(\u0026#34;{d}\u0026#34;, .{some_random_num}); } $ zig build $ ./zig-out/bin/random ref : https://www.reddit.com/r/Zig/comments/wc5rcb/hows_the_current_story_with_zig_in_terms_of/\nref : https://www.reddit.com/r/Zig/comments/wcvksf/what_is_missing_in_the_zig_ecosystem/\n","description":"","formated_time":"2022-08-03","href":"https://syui.github.io/blog/post/2022/08/03/zig-cli/","tags":["zig"],"title":"zigでcliを作る","utc_time":"2022-08-03T00:00:00Z"},{"categories":null,"contents":"zigはprogramming-langの一つです。rustに似ていますが、c++寄りだと思います。\nzigの利点はなんといってもwasmへのbuildの手軽さだと思います。\nwasmはwebから実行できるbinaryです。\n今後、webなどでもzigが採用されるケースが増えてくるかもしれません。\n$ brew install zig $ mkdir zig-first-project $ cd zig-first-project $ zig init-exe $ cat src/main.zig $ cat build.zig $ zig build $ ./zig-out/bin/zig-first-project hello-worldしてみます。\nconst std = @import(\u0026#34;std\u0026#34;); pub fn main() anyerror!void { const stdout = std.io.getStdOut().writer(); try stdout.print(\u0026#34;hello, world!\\n\u0026#34;, .{}); } ここまででziglang/zig.vimを入れておいたほうがいいでしょう。zigはコード内にある\\tの扱いが特殊です。\nPlug \u0026#39;ziglang/zig.vim\u0026#39; 以下はcloudflare blogにあるexampleです。\nconst std = @import(\u0026#34;std\u0026#34;); pub fn main() anyerror!void { // setup allocator var gpa = std.heap.GeneralPurposeAllocator(.{}){}; defer std.debug.assert(!gpa.deinit()); const allocator = gpa.allocator(); // setup streams const stdout = std.io.getStdOut().writer(); const in = std.io.getStdIn(); var reader = std.io.bufferedReader(in.reader()).reader(); var counter: u32 = 1; // read input line by line while (try reader.readUntilDelimiterOrEofAlloc(allocator, \u0026#39;\\n\u0026#39;, std.math.maxInt(usize))) |line| { defer allocator.free(line); try stdout.print(\u0026#34;{d}\\t{s}\\n\u0026#34;, .{counter, line}); counter = counter + 1; } } 単純に文字を渡すと行番号を追加して返します。\njust read some text from stdin and print it to stdout with line numbers, like running cat -n. But it does show just how easy the Workers paradigm is. This Zig program works identically on the command-line on my laptop and as an HTTP API deployed on Cloudflare Workers.\nconst std = @import(\u0026#34;std\u0026#34;); pub fn build(b: *std.build.Builder) void { const target = b.standardTargetOptions(.{}); const mode = b.standardReleaseOptions(); const exe = b.addExecutable(\u0026#34;zig-first-project\u0026#34;, \u0026#34;src/main.zig\u0026#34;); exe.setTarget(target); exe.setBuildMode(mode); exe.install(); } cloudflare workersではwasiがsupportされています。wasm-build, workers-deployまでをやってみます。\n$ zig build -Dtarget=wasm32-wasi $ ls zig-out/bin/*.wasm $ echo \u0026#34;Hello\\nWorld\u0026#34; | wasmtime ./zig-out/bin/zig-first-project.wasm 1 Hello 2 World $ npx wrangler@wasm login $ npx wrangler@wasm publish --name print-with-line-numbers --compatibility-date=2022-07-07 ./zig-out/bin/zig-first-project.wasm これでdeployは完了です。取得されたworkersのaddressに文字列をpostしてみましょう。wasm-binaryが実行され、反応を返します。\n$ echo \u0026#34;hello\\nworld\u0026#34; | curl https://print-with-line-numbers.$USER.workers.dev -X POST --data-binary @- 1 hello 2 world このようにめちゃくちゃ便利なcloudflare workersですが、cloudflareが提供するworkers.devのidは開発者なら取っておいたほうがよさそうです。\n","description":"","formated_time":"2022-08-02","href":"https://syui.github.io/blog/post/2022/08/02/zig-wasm-cloudflare/","tags":["zig","cloudflare"],"title":"zigをwasmにしてcloudflareにdeployする","utc_time":"2022-08-02T00:00:00Z"},{"categories":null,"contents":"gnu-socialも触ってみました。今回もherokuでdeployするヒントを書いていきたいと思います。\nいろいろな変化があるものの、srcは相変わらず古い感じがします。\n3.0 https://code.undefinedhackers.net/GNUsocial/gnu-social\npostgres + nginx とりあえず、bin/configureにdockerfileを作成するscriptがありますので実行するようです。Makefileにいろんなコマンドが定義されているようですが、項目を読めばだいたい分かるでしょう。\n$ git clone https://code.undefinedhackers.net/GNUsocial/gnu-social $ cd gnu-social $ ./bin/configure $ make $ sudo docker ps -a $ paru -S php-pear $ sudo pecl install vips $ sudo vim /etc/php/php.ini extension=iconv extension=vips 以下を追記、または編集します。\n\u0026#34;require\u0026#34;: { \u0026#34;php\u0026#34;: \u0026#34;^8.1.0\u0026#34;, \u0026#34;ext-vips\u0026#34;:\u0026#34;*\u0026#34;, \u0026#34;jcupitt/vips\u0026#34;: \u0026#34;1.0.9\u0026#34; } $ composer update --ignore-platform-reqs $ git add composer.* $ heroku buildpacks:add --index 1 https://github.com/heroku/heroku-buildpack-apt Aptfile\nphp-pear herokunの場合、残念ながらphp-vipsがsupportされていません。\nしたがって、buildpacksを自前で用意するしかないのですが、用意してやってみたところ、peclが動作しません。\nいくつか調整してみたものの、これでは実現できたとしても完全にやるべきことではないと判断し、途中でやめることにしました。\nsed -i -e \u0026#34;s#/usr/bin/php#/app/.heroku/php-min/bin/php#g\u0026#34; $build_dir/.apt/usr/bin/pecl pecl install vips web: vendor/bin/heroku-php-nginx public/ ref : https://devcenter.heroku.com/ja/articles/php-support#using-optional-extensions\nref : https://devcenter.heroku.com/ja/articles/deploying-php\n2.0 https://code.undefinedhackers.net/GNUsocial/gnu-social/src/branch/nightly\nmysql + apache php7.4で動きますので、herokuのstack-20を使用します。これは簡単でそのまま通ります。\n$ git checkout nightly $ heroku stack:set heroku-20 ref : https://syui.ai/blog/post/2019/03/25/gnu-social\n","description":"","formated_time":"2022-07-18","href":"https://syui.github.io/blog/post/2022/07/18/gnusocial/","tags":["gnu-social","heroku"],"title":"gnu-socialをherokuで立てる[2022年度版]","utc_time":"2022-07-18T00:00:00Z"},{"categories":null,"contents":"\n","description":"","formated_time":"2022-07-17","href":"https://syui.github.io/blog/post/2022/07/17/illust/","tags":["illust"],"title":"イラスト描いた115","utc_time":"2022-07-17T00:00:00Z"},{"categories":null,"contents":"上の方はザラザラした特別仕様、下はクリアカードの完成版です。\n","description":"","formated_time":"2022-07-16","href":"https://syui.github.io/blog/post/2022/07/16/card/","tags":["make","card"],"title":"カードを作ってみた6","utc_time":"2022-07-16T00:00:00Z"},{"categories":null,"contents":"万葉を引きました。\n使ってみると「こ、こいつ\u0026hellip;つ、つよすぎる\u0026hellip;！！」みたいなキャラでした。\nウェンティより圧倒的に強く、状況によって、例えば、元素が近くにあったり、敵にあったりする場合ですが、原神の中で一番強いのでは？\n今回のガチャは、余ってた運命を使い9連で出てしまいました！！\n原石を消費していません。\n早めに出るガチャ、そろそろ来ると思っていましたが、まさか、ここまでとは\u0026hellip;。\n万葉を引いたあと、即座に撤退しています。原石は、草神に温存する予定。\nただ、ガチャというのは、早く出ることもあれば、遅く出ることもあるわけで。\n草神\u0026hellip;天井かもしれん。\n","description":"","formated_time":"2022-07-15","href":"https://syui.github.io/blog/post/2022/07/15/genshin/","tags":["genshin"],"title":"原神、万葉を引いた","utc_time":"2022-07-15T00:00:00Z"},{"categories":null,"contents":"小説はこちら /ai/novel/07\n","description":"","formated_time":"2022-07-10","href":"https://syui.github.io/blog/post/2022/07/10/illust/","tags":["illust","novel"],"title":"イラスト描いた114+小説書いた7-9","utc_time":"2022-07-10T00:00:00Z"},{"categories":null,"contents":"pleromaと同じくmisskeyをherokuで立てるのにも多少の苦労があるかもしれません。さらに運用するとなると様々な問題が絡んできます。\n今回もherokuでmisskeyのインスタンスを立ち上げるまでのヒントを書いていければと思います。\nref : https://misskey-hub.net/docs/install/manual.html\n$ git clone https://github.com/misskey-dev/misskey.git $ cd misskey $ cp .config/example.yml .config/default.yml $ vim .config/default.yml db: host: $DB_HOST port: $DB_PORT db: $DB_NAME user: $DB_USER pass: $DB_PASS extra: ssl: { rejectUnauthorized: false } redis: host: $REDIS_HOST port: $REDIS_PORT pass: $REDIS_PASS まずmisskeyとheroku-postgresを接続するポイントは、ssl:trueではなくssl:{ rejectUnauthorized: false }です。\n必要な情報は以下から得ましょう。\n$ heroku addons:create heroku-postgresql:hobby-dev $ heroku pg:credentials:url $ heroku addons:create heroku-redis:hobby-dev $ heroku redis:credentials $ yarn install $ yarn build $ yarn run init $ yarn start redisへの接続に問題があります。heroku-redisの接続制限的に厳しいのかもしれません。ioredisが使われるようになったみたいです。\nhttps://devcenter.heroku.com/ja/articles/connecting-heroku-redis#connecting-in-node-js\n編集するファイルとしては、packages/backend/srcにある db/redis, server/index.ts, config/load.ts などです。\nprocess.env.PORTやprocess.env.HEROKU_REDIS_AQUA_URL, process.env.HEROKU_REDIS_AQUA_URLなどを設定してみるといいかも。\nProcfileには、web: NODE_ENV=production yarn startを書きます。\nrediscloud 回避策としてaddons:rediscloudを使用すると動きます。\n$ heroku addons:create rediscloud:30 $ heroku config redis://default:${REDIS_CLOUD_PASS}@${REDIS_CLOUD_HOST}:${REDIS_CLOUD_PORT} redis: host: ${REDIS_CLOUD_HOST} port: ${REDIS_CLOUD_PORT} family: 4 # 0=Both, 4=IPv4, 6=IPv6 pass: ${REDIS_CLOUD_PASS} ","description":"","formated_time":"2022-07-08","href":"https://syui.github.io/blog/post/2022/07/08/misskey/","tags":["misskey","heroku"],"title":"misskeyをherokuで立てる[2022年度版]","utc_time":"2022-07-08T00:00:00Z"},{"categories":null,"contents":"この前、#stackoverflowでelixirのphoenixが好きなフレームワーク1位に選ばれていました。\nref : https://www.publickey1.jp/blog/22/7itrustdbpostgresqlvscodeneovimstack_overflow_2022_developer_survey.html\n正直、驚きました。しかも、好きな言語ランキングでも1位のrustに続いてelixirが2位でした。elixir、そんな人気だったん\u0026hellip;?\nそんなelixirのphoenixですが、mastodonに似たblog(sns)サービスであるpleromaがphoenixで書かれています。pleromaを触ってると、phoenixのことも自然にわかってくると思います。\nということで、今回は、herokuでpleromaを立ててみます。herokuのelixir, phoenix対応はstackやbuildpackの関係上、かなりつらい状況です。buildpackを自身で動くよう調整し公開する必要があるかもしれません。\nしたがって、dockerで立てたほうがいいでしょう。もしcontainerを利用しない場合、現在のelixir対応では運用が行き詰まる可能性があります。\nhttps://github.com/angristan/docker-pleroma\n基本的には、DockerfileのENTRYPOINTを削除して、heroku.ymlを書きます。\n#ENTRYPOINT [\u0026#34;/pleroma/docker-entrypoint.sh\u0026#34;] build: docker: web: Dockerfile config: MIX_ENV: prod SECRET_KEY_BASE: $SECRET_KEY_BASE DATABASE_URL: $DATABASE_URL DB_NAME: $DB_NAME DB_HOST: $DB_HOST DB_USER: $DB_USER DB_PASS: $DB_PASS DOMAIN: $DOMAIN ADMIN_EMAIL: $ADMIN_EMAIL NOTIFY_EMAIL: $NOTIFY_EMAIL run: web: $HOME/bin/pleroma_ctl migrate \u0026amp;\u0026amp; exec $HOME/bin/pleroma start それぞれの環境変数は、以下のコマンドで入れていけばいいでしょう。\n$ heroku addons:create heroku-postgresql:hobby-dev $ heroku pg:credentials:url $ heroku config:set DB_USER=xxx . . . 次に、config.exsを書きますが、herokuに対応した書き方が必要です。\nconfig :pleroma, Pleroma.Web.Endpoint, url: [scheme: \u0026#34;https\u0026#34;, host: \u0026#34;xxx.herokuapp.com\u0026#34;, port: {:system, \u0026#34;PORT\u0026#34;}], http: [ip: {0, 0, 0, 0}, port: {:system, \u0026#34;PORT\u0026#34;}] config :pleroma, :instance, name: System.get_env(\u0026#34;INSTANCE_NAME\u0026#34;, \u0026#34;pleroma.syui.ai\u0026#34;), email: System.get_env(\u0026#34;ADMIN_EMAIL\u0026#34;), notify_email: System.get_env(\u0026#34;NOTIFY_EMAIL\u0026#34;), limit: 5000, registrations_open: false, federating: true, healthcheck: true config :pleroma, :media_proxy, enabled: false, redirect_on_failure: true, base_url: \u0026#34;https://cache.domain.tld\u0026#34; config :pleroma, Pleroma.Repo, adapter: Ecto.Adapters.Postgres, #url: System.get_env(\u0026#34;DATABASE_URL\u0026#34;), username: System.get_env(\u0026#34;DB_USER\u0026#34;, \u0026#34;pleroma\u0026#34;), password: System.fetch_env!(\u0026#34;DB_PASS\u0026#34;), database: System.get_env(\u0026#34;DB_NAME\u0026#34;, \u0026#34;pleroma\u0026#34;), hostname: System.get_env(\u0026#34;DB_HOST\u0026#34;, \u0026#34;db\u0026#34;), pool_size: 10, ssl: true インスタンスの新規登録を禁止するにはregistrations_openをfalseに変更します。\n$ heroku stack:set container $ git add . $ git commit -m \u0026#34;first\u0026#34; $ git push heroku main ref : https://docs-develop.pleroma.social/backend/administration/CLI_tasks/user/#create-a-user\n","description":"","formated_time":"2022-07-07","href":"https://syui.github.io/blog/post/2022/07/07/pleroma/","tags":["pleroma","heroku","docker"],"title":"pleromaをherokuで立てる[2022年度版]","utc_time":"2022-07-07T00:00:00Z"},{"categories":null,"contents":"カードに秘密鍵を刻印して認証する仕組みを作ってみました。\n$ openssl genrsa -out private.pem 31 $ openssl rsa -in private.pem -pubout -out public.pem $ openssl rsa -text -pubin \u0026lt; public.pem $ openssl rsa -text \u0026lt; private.pem modulus INTEGER, -- n = p*q publicExponent INTEGER, -- e = 65537 (=0x10001) privateExponent INTEGER, -- d == e^(-1) mod (p-1)*(q-1) prime1 INTEGER, -- p prime2 INTEGER, -- q exponent1 INTEGER, -- d mod (p-1) exponent2 INTEGER, -- d mod (q-1) coefficient INTEGER, -- q^(-1) mod p ### gh-actions $ openssl rsa -in pull-private.pem -pubout -out pull-public.pem a=`openssl md5 public.pem|cut -d \u0026#34; \u0026#34; -f 2` b=`openssl md5 pull-public.pem|cut -d \u0026#34; \u0026#34; -f 2` if [ \u0026#34;$a\u0026#34; = \u0026#34;$b\u0026#34; ];then echo verify else exit fi いろんな問題はあるけど、簡易版はこんな感じになりました。\n例えば、一つのカードにつき秘密鍵を一つだけ発行することにして、その所有者が秘密鍵をpull-reqすると認証できるようにします。\n送られた秘密鍵から公開鍵を作り、アップロードされている公開鍵に一致すれば、jsonのowner要素にpull-reqのusernameを入れて更新する仕組み。\n問題の一つとしては、鍵長をカードに刻印できるほど短くしてしまうと、総当たり攻撃で簡単に突破されてしまいます。\n2つ目の問題として、公開鍵のmd5で一致するか見ていますが、本来は個々の処理を計算に置き換えるべきでしょう。\nrsaは、例えばprime1 x prime2 = modulusになります。秘密鍵に記述された数値を計算していくと、公開鍵に記述された数値になることをもってペアであるか判断します。具体的な計算式は上記に載せています。\n私は処理書くのも面倒なので、送られてきた秘密鍵をもとに公開鍵を作り、それが一致するか見るだけにしています。\nここまで鍵長が短いと署名もできませんので、カードに見栄え良く刻印できる文字列のみで完璧な認証を作るのは難しいのかもしれません。\nref : https://inaz2.hatenablog.com/entry/2013/11/27/225953\n","description":"","formated_time":"2022-07-06","href":"https://syui.github.io/blog/post/2022/07/06/card/","tags":["make","card"],"title":"カードを作ってみた5","utc_time":"2022-07-06T00:00:00Z"},{"categories":null,"contents":"各国実装と同時あるいは直後の星5キャラは、引いたほうがいいと予想しています。\n一言で言うと最強キャラが最初にピックアップされる傾向が高いと考えています。スタートダッシュが重要としそのような方針を採用しているのかもしれません。\nですから、例えば、草国の実装同時にピックアップされる星5キャラは狙い目である可能性が高いと思っています。\n上記を基準に狙っていくキャラを確定すると、神+初キャラということになるのでしょうか。\n","description":"","formated_time":"2022-07-05","href":"https://syui.github.io/blog/post/2022/07/05/genshin/","tags":["genshin"],"title":"原神、各国実装と同時の星5キャラは引いたほうがいい?","utc_time":"2022-07-05T00:00:00Z"},{"categories":null,"contents":"カードを作ってみて、めちゃくちゃ満足感あったし、楽しかった。\nこっちのページでできる占いは実際にカードで持ってるやつだけにした。\n/ai/card\n関係ないけど、過去絵を整理してみた。\n/ai/imgall\n","description":"","formated_time":"2022-07-03","href":"https://syui.github.io/blog/post/2022/07/03/card/","tags":["make","card"],"title":"カードを作ってみた4","utc_time":"2022-07-03T00:00:00Z"},{"categories":null,"contents":"原神は無課金でプレイして1年が経ちました。ちょうど1年目に所持している武器は参考になるかもしれないので紹介します。\nぱっと見でわかりますが、武器もやばいです。\n一応、経歴を書きます。\n私が初めて武器ガチャをやったのは雷電1回目のときでした。草薙と無工がピックアップされていて、草薙を狙ったのですが、無工を引きました。ただし、この時点では星4武器を一つも持っていなかったので、流浪楽章、西風の槍、祭礼の剣などを引いたのがよかったし、それも狙いの一つでした。強化したい武器がないと初回はなかなかきつかったのを覚えています。ここで初めて強化できる武器が来ました。雷電にはこのときに引いた西風を今でも装備させています。\n次の武器ガチャは、胡桃2回目?のときでした。護摩と終焉がピックアップされていました。流浪楽章も入っていたので狙いました。このときは、護摩が当たり、流浪楽章も完凸しました。\nこれ以外で武器ガチャは、やっていません。その結果が今の所持状況というわけです。\n現時点で最強だと思うのは以下の武器です。\n種類 名前 ステータス 星 保有 長柄武器 草薙の稲光 元素チャージ 5 - 片手剣 蒼古なる自由への誓い 元素熟知 5 - 長柄武器 護摩の杖 会心ダメ 5 無凸 弓 終焉を嘆く詩 元素チャージ 5 - これらが同時にピックアップされている場合は、狙い目だと思います。\nしかし、今後、武器ガチャをやるかどうかは、わかりませんが、おそらく、やらないでしょう。\nスメールの情報が入ってきています。ここでは草神を絶対的に確保しなければならないので、そのための原石を確保しておく必要があります。\nただ、西風槍くらいは凸したいし、西風剣の一つくらいは欲しい\u0026hellip;。\n","description":"","formated_time":"2022-07-03","href":"https://syui.github.io/blog/post/2022/07/03/genshin/","tags":["genshin"],"title":"原神、武器がやばい","utc_time":"2022-07-03T00:00:00Z"},{"categories":null,"contents":"node v17で使います。\n$ brew install nvm $ nvm install 17 $ nvm use 17 $ npm i -g @squoosh/cli ","description":"","formated_time":"2022-07-02","href":"https://syui.github.io/blog/post/2022/07/02/squoosh/","tags":["node","mac"],"title":"squooshが壊れてた件","utc_time":"2022-07-02T00:00:00Z"},{"categories":null,"contents":" ","description":"","formated_time":"2022-07-01","href":"https://syui.github.io/blog/post/2022/07/01/genshin/","tags":["genshin"],"title":"原神、通しで螺旋攻略","utc_time":"2022-07-01T00:00:00Z"},{"categories":null,"contents":"今回作ってみたのはクリアカードです。\n使ったもの きらきらホログラムラベルシール(ガラスチップ) / クリアシール用紙A4\nセルフラメシート\n基本的にはシールに印刷して、それをクリアシートに貼り付けます。背面を用意しなくていいので一番楽だった。\n背面に枠だけ印刷してもいいかも。内側はカッターで切り取りとるとよさそう。\n","description":"","formated_time":"2022-06-30","href":"https://syui.github.io/blog/post/2022/06/30/card/","tags":["make","card"],"title":"カードを作ってみた3","utc_time":"2022-06-30T00:00:00Z"},{"categories":null,"contents":"今回は前回からの失敗を踏まえ、本物のトレーディングカードっぽくなった気がする。\n使ったもの きらきらホログラムラベルシール\nクリアホログラムシート\nきらきらホログラムラベルシール(オーロラ)がめちゃくちゃ良かった。\nこれにはガラスチップというタイプがあるんだけど、こっちは必要ありません。ただ、これを貼って剥がせばガラスチップのキラがついた。難しかったけど。\n基本的に白トランプや既存カードに印刷したシールを貼り付けて、カッターで切るという手順です。気泡が入りやすいので注意。\n形式も統一しました。サイズ調整が難しかったです。wordで68mmx92mmを指定して印刷しました。\n","description":"","formated_time":"2022-06-26","href":"https://syui.github.io/blog/post/2022/06/26/card/","tags":["make","card"],"title":"カードを作ってみた2","utc_time":"2022-06-26T00:00:00Z"},{"categories":null,"contents":"動機 最初は、ほんの出来心でした。ポケカが増えてきたので、ポケモンのレアカードを額縁に入れて飾ろうとしたのです。\nしかし、飾ってみると、どうもしっくり来ませんでした。\nそこで、フォトシールというやつが余っていたので、それをポケカの上に貼り、オリジナルカードっぽいものを作ってみました。\nここから、色々と気になりだして、例えば、裏面(ポケカになってる)とかコピーライトとか、ホログラムとか。\n最終的には、完全にイチからオリジナルカードを作ることになってしまいました。\n必要なもの すべて100円ショップで揃いました。\nフォトシールL判(印刷)\n分厚い紙(ベース)\nジュエリーラメホログラム(キラ)\nセルフラメシート(キラ固定)\nまず、(1)画像をシールに印刷、(2)用紙を切り取り、(3)シールを貼ります。ここまででカードは完成しますが、キラカードを作るには、もうちょっと工夫が必要です。\n今回は、(4)カードの上にラメを撒く、(5)カードシートに挟む、(6)シートを切り取る、という方法で作りました。\n全部自分で考えただけなので、他にも色んな方法があると思います。\n最後にショップで売っていた写真立てにカード袋を引っ付けてカード入れました。\nちなみに、ポケカは66パックでやっとアバター出ました。ミスったなという感想。ほぼコンプしたので、とっときます。\n","description":"","formated_time":"2022-06-23","href":"https://syui.github.io/blog/post/2022/06/23/card/","tags":["make","card"],"title":"カードを作ってみた1","utc_time":"2022-06-23T00:00:00Z"},{"categories":null,"contents":"ちょっと前に楽天モバイルから日本通信simに移行しました。\n合理的プラン290、1G/290円で運用しています。\n契約もスムーズでわかりやすかったです。手間取ることもなかったし、不満も全くありません。\n一応、初期費用に3000円程度かかりますが、初期費用は、個人的にあまり考慮しません。そのへんはどうでもいいと思っています。\n少しだけ使ってみた感じでは、回線は安定しています。問題ありません。\n個人的にm/1Gも使わない私のような人は、日本通信simが一番おすすめだと思います。\n","description":"","formated_time":"2022-06-19","href":"https://syui.github.io/blog/post/2022/06/19/sim/","tags":["sim"],"title":"楽天モバイルからの移行、日本通信sim","utc_time":"2022-06-19T00:00:00Z"},{"categories":null,"contents":"\nことの経緯 ポケモンGoとコラボしてるポケカを買いに行ったら、すごくいい感じのポケモン・フィギュアが並んでいて、試しにアルセウスのフィギュアを買ってみたら、すごくよかったので集めてしまったのです。\nなぜポケモンなのか いろいろな理由がありますが、ポケモンは古くならないと考えられるため、無駄になることが少ないと判断しました。\n実は今回購入したフィギュアは、私が子供の頃からよく知っているポケモンたちなのです。\nそれが未だに人気で、最新フィギュアとして登場している。どの世代にも共通して認識されている。これはとてつもないことだと思われます。\nこのことから予想されるのは、この先もこのポケモンたちは古くならないだろうということです。\nもちろん、私がフィギュアを欲しかっただけなんですけど、私はAR、つまり、現実とゲームが融合したポケモンGoというアプリを長くプレイしています。\n例えば、ゲーム内で私が捕まえた\u0026hellip;といっても、ポケモンを捕まえるには現実世界で歩いてその場所まで行かなければなりませんが、ようは、私のボックスにいる手持ちと同じフィギュアがあります。\nこれは、ゲームをプレイするモチベーションにもなりますし、例えば、次はフィギュアで持っているポケモンを集めようとか、逆にフィギュアを集めるモチベーションにもなります。\n次に思ったのは、フィギュアの出来の良さです。\n買ったアルセウスを見てみたのですが、とても出来が良いと思いました。\n出来が良ければずっと使えそうだなと思いました。ポケモンのフォルムからもこれ以上の変化はあまり望めなさそうにも思います。逆に出来が悪ければ、新しいのが出てきたりであまり長持ちしません。\nランキング それでもいくつかのフィギュアを買ってみて、おすすめできるやつとできないやつがあると思いました。今回はそれについて書いていこうと思います。\nぱっと見で少しでも違和感があるなら、個人的にそのポケモンはおすすめしません。\nポケモンによっては、フィギュアでの再現が難しいという問題もあると思います。\nですから、フィギュアとして作りやすそうで、安定してそうなポケモンのみ選び取ることが重要になると考えます。\n以上を踏まえて、私が購入したフィギュアの満足度ランキングです。\n順位 ポケモン 満足度 1 アルセウス SS 2 ネクロズマ(たそがれ) SS 3 リザードン(ダイマックス) S 4 ディアルガ S 5 レックウザ S 6 イベルタル A 7 ギラティナ B 8 ホワイトキュレム B もし購入を考えている人は、Sまでの購入をおすすめします。\nBの理由について書きます。ギラティナは足が多いので安定していそうと購入したのですが、意外にもたくさんの小さな足が作りづらかったようで、操作もしづらいです。羽の表現も難しいところだったのではないかと思われます。つまり、ポケモンの特徴から耐久性、安定性が低いように感じました。これはしかたないところですが、ギラティナが好きな人以外にはあまりおすすめできる感じではないと思いました。\nホワイトキュレムもほとんど同じ理由です。部位が多すぎたのか、それぞれが小さく迫力がありません。他と比べると耐久性、安定性が低いように感じます。\n同じようなブラックもおすすめできなさそうです。しかし、普通のキュレムなら見た感じSだったと思います。普通のキュレムが一番おすすめかも。\nref : https://www.takaratomy.co.jp/products/pokemon/moncolle_ex/lineup/\n","description":"","formated_time":"2022-06-18","href":"https://syui.github.io/blog/post/2022/06/18/pokemon/","tags":["pogo","pokemon"],"title":"ポケモン・フィギュアのランキング","utc_time":"2022-06-18T00:00:00Z"},{"categories":null,"contents":"現在、ポケカを買うとプロモーションコードがついてきて、低確率で限定衣装(ポケモンGoのアバター)が手に入るっぽいのでポケカを買うことにしました。\n以前からそんな予感はしていて、こういうコラボをされたら多分買うだろうなと思ってたんだけど、やっぱり買った。\n今回、10パック購入して、アバターは当たりませんでした。\nカードは博士とかメタモンが入ってた。\nメタモンは、このマークがついてるらしい。\n前面シールになってるので剥がすと出てくるっぽい。まだ剥がしてない、カードやらないので。\n近くにおいてあったフィギュアがよかったので買った。モンコレというらしいです。\n前からフィギュアは一つくらい欲しかったので、初めて買うの美少女フィギュアになりそう美少女フィギュアほしいって思ってたんだけど、まさか怪獣フィギュアになるとは思ってなかった。(ポケモンのアルセウスです\nフィギュア買ったらおまけでマスターボールもらえたので、とりあえずゴプラを入れてます。\nもうちょっとカード買って狙ってみるつもり。アバターと新しいミュウツー来るといいな。\n","description":"","formated_time":"2022-06-18","href":"https://syui.github.io/blog/post/2022/06/18/pogo/","tags":["pogo","pokemon"],"title":"ポケモンGo、ポケカを買った","utc_time":"2022-06-18T00:00:00Z"},{"categories":null,"contents":"mastodonのアイコンが紫になった。\nhttps://github.com/mastodon/mastodon/pull/18592\nグラデーションがついてて、上の方が若干明るくなってる感じ。\nmastodonとtwitterの青色(系統)が同じなのは、例えば、並べてアイコン載せるときとかに視認性がよくないと思っていて、今回の変更は個人的に嬉しい。\n","description":"","formated_time":"2022-06-11","href":"https://syui.github.io/blog/post/2022/06/11/mastodon/","tags":["mastodon"],"title":"mastodonが紫になった","utc_time":"2022-06-11T00:00:00Z"},{"categories":null,"contents":"なぜかpreviewでは表示されるのに、webでは表示されないのに気づいて、調べてみたらhugo versionの問題だった。\n具体的には、hugo v0.8xまでhighlightjs v9.xのbash(prompt)は下記のコードに変換されてた。\n\u0026lt;spac class=\u0026#34;prompt\u0026#34;\u0026gt;$ \u0026lt;/span\u0026gt; この生成のおかげでpromotはcopy(web)から除外しやすかった。\n$ whoami これが便利だったんだけど、それがなくなって個人的には不便な生成になってた。\nverの固定は好きじゃないんだけど、便利にhighlightを使える方法を見つけるまで固定することにした。\n- name: hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: 0.89.4 hugoもhighlight, markupがかなり使えるようになってるので、移行するのもあり。\n","description":"","formated_time":"2022-06-10","href":"https://syui.github.io/blog/post/2022/06/10/hugo/","tags":["hugo"],"title":"hugoのhighlightjsがうまく動作していなかったので調べてみた結果","utc_time":"2022-06-10T00:00:00Z"},{"categories":null,"contents":"前回、私は「原神では好きなキャラを狙っていく」と言いましたが、書き方がとても不明瞭だったので、今回は少し明確に方針を紹介します。\nまず、キャラに関して、当初の目標が達成できました。当初の目標は「各元素につき1体は強キャラを引く」というものでした。\nこれが達成できたので、次の具体的な目標、方針を決めたわけですが、次の方針は「神と合わせて各元素につき強キャラ2体を狙っていく」ことになります。また、余裕があれば好きなキャラを狙っていくことにしました。余裕があればと言いましたが、以前よりは好きなキャラ優先でいきたいと思っています。\nさて、今後の個人的な方針としてはそんな感じですが、理由はいくつかあります。\n一つは無制限に強いキャラを狙っていくと、無課金運用が破綻する可能性があることです。\nこれ以上はキャラ過剰になり、せっかく引いて強化育成までしたのに使わなくなっていくキャラが増えてしまうことが予想されます。\nそれを避けるため、ここで決めた方針に沿って攻略していく予定です。\n例えば、風元素はウェンティ(神)と万葉で2体となり、それ以上は基本的に狙わないことにします。\nまた、神が未実装の場合で、かつ残る一体にSS+ランクのキャラを確保できている場合も追加では狙わないことになります。この場合、未実装の神を狙うことが決定しているからです。\n以上を踏まえて、必要な原石数や空き領域を予測します。\n元素 神 キャラ 保有 風 ウェンティ 万葉 無凸/\u0026ndash; 岩 鍾離 ??? 無凸/\u0026ndash; 雷 雷電 ??? 無凸/\u0026ndash; 草 ??? ??? \u0026ndash;/\u0026ndash; 水 ??? 行秋 \u0026ndash;/完凸 炎 ??? ベネット \u0026ndash;/無凸 氷 ??? 綾華 \u0026ndash;/無凸 神は草、水、炎、氷の4人を確保する必要があります。\n各元素の空き領域に岩、雷、草の3人を確保する必要があります。\n合計で7キャラ分の原石が必要です。\n7000x7=49,000(期待値)が最低でも必要になる計算です。\n天井分は14,400x7=100,800(上限値)となります。\nここで万葉を引くための原石はすでに確保済みなので、それを除外して考えます。\nすると、2022/7から2026/7までの4年間で49,000(x2)の原石を貯めなければなりません。\nつまり、1年間で25,000くらいの原石を貯めてやりくりする必要があると考えられます。\nこれは、無課金の運用限界レベルであり、仮に当初の方針を逸れて、次々に実装される強いキャラを狙ってしまった場合、この目標は実現不可能となります。\n今後はこの表を見ながら、自分の空き領域を埋められることを条件に、狙っていくキャラを決めていくつもりです。\nなぜイエランを狙わないのか 以前書いた記事で、イエランを狙わない理由をいくつか書いたわけですが、内容が不明瞭だったと思います。\nイエランを狙わない個人的な理由として、水元素の空き領域が行秋と水神で既に埋まっているからです。\nさらに万葉の原石でギリギリなので、イエランを狙っている余裕がありません。\n\u0026hellip;と、これについては少し嘘が含まれるかもしれません。\n例えば、「原石が無限にあるなら、イエランを引いていたか？」という質問があったと考えます。\nすると、私は2つの理由により「引いていなかった」と答えることになります。\n1つ目は、イエランは特別好きなキャラではないからです。\n2つ目は、どれだけの原石があろうと、どれだけのお金があろうと、私は無課金での攻略を楽しみ、そこに固執することが挙げられます。\nつまり、今現在とは異なる状況にはなりえない。\n私の水元素の空き領域が行秋と水神で既に埋まっている限り、イエランは引いていなかったと思います。\nただし、イエランは引くべきかという質問に対し、私は、yesと答えるでしょう。\n単純に個人方針や事情を全く考慮せず、性能だけで評価した場合、現時点でyesになるからです。\nというわけで、個人方針やイエランの話でした。\n","description":"","formated_time":"2022-06-09","href":"https://syui.github.io/blog/post/2022/06/09/genshin/","tags":["genshin"],"title":"原神、今後の方針2","utc_time":"2022-06-09T00:00:00Z"},{"categories":null,"contents":"現在、giteaをherokuで動かしてるんだけど、この前、postgres(pgsql)のメンテンナンスがあるとかで一時停止されて、メンテナンス後に動作しなくなってたので再度動かしてみたときの知見。\nhttps://git.syui.ai/syui\nまず、メンテナンス後にherokuのpgsqlがwebとcliで情報が違ってたので、cliを参考にすること。\napp.iniのdb情報を修正すれば動くと思う。\nただ、db(record)がいっぱいになりかけてたし、updateもしたかったので、resetしてからdeployすることに。\n$ git clone https://github.com/go-gitea/gitea $ cd gitea $ vim docker-compose.yml version: \u0026#34;3\u0026#34; networks: gitea: external: false services: server: image: gitea/gitea:1.16.8 container_name: gitea environment: - USER_UID=1000 - USER_GID=1000 - GITEA__database__DB_TYPE=postgres - GITEA__database__HOST=db:5432 - GITEA__database__NAME=gitea - GITEA__database__USER=gitea - GITEA__database__PASSWD=gitea restart: always networks: - gitea volumes: - ./gitea:/data - /etc/timezone:/etc/timezone:ro - /etc/localtime:/etc/localtime:ro ports: - \u0026#34;3000:3000\u0026#34; - \u0026#34;222:22\u0026#34; depends_on: - db db: image: postgres:14 restart: always environment: - POSTGRES_USER=gitea - POSTGRES_PASSWORD=gitea - POSTGRES_DB=gitea networks: - gitea volumes: - ./postgres:/var/lib/postgresql/data 最小構成はこんな感じです。\nversion: \u0026#39;3\u0026#39; services: web: image: gitea/gitea:latest volumes: - ./gitea:/data ports: - \u0026#34;3000:3000\u0026#34; - \u0026#34;10022:10022\u0026#34; environment: - TZ=Japan - SSH_PORT=10022 restart: always $ docker-compose up 起動しないときは、dockerのpsやimageを削除します。\n$ sudo docker ps -aq $ sudo docker images -aq $ sudo docker stop `sudo docker ps -aq` $ sudo docker rm -f `sudo docker ps -aq` $ sudo docker rmi -f `sudo docker images -aq` $ chromium localhost:3000/install webでぽちぽちやると以下のファイルが生成されます。重要な設定部分を載せています。\n[database] DB_TYPE = postgres SSL_MODE = require [service] DISABLE_REGISTRATION = true REQUIRE_SIGNIN_VIEW = false REGISTER_EMAIL_CONFIRM = false ENABLE_NOTIFY_MAIL = false ALLOW_ONLY_EXTERNAL_REGISTRATION = false ENABLE_CAPTCHA = false DEFAULT_KEEP_EMAIL_PRIVATE = false DEFAULT_ALLOW_CREATE_ORGANIZATION = false DEFAULT_ENABLE_TIMETRACKING = false $ heroku git:remote -a $appname $ heroku pg:credentials:url $ heroku stack:set container DockerfileのENV USER gitを消してください。基本的にはこれだけで動きます。\n$ vim Dockerfile #ENV USER git COPY ./gitea/ /data/ $ git add gitea Dockerfile heroku.yml $ git commit -m \u0026#34;add conf\u0026#34; $ git push -u heroku main heroku $USER, $PORT herokuの場合、毎日web-serverのストレージがリセットされる際に$USER, $PORTが変わるので、それに対応しなければなりません。\nリセットされる都度、以下のような処理をどこかに入れて、gitea webするしかありません。\n$ echo RUN_USER=`whoami` \u0026gt;\u0026gt; /data/gitea/conf/app.ini カスタマイズしたい方は、./docker/root/以下のファイルが参考になります。\nheroku.ymlのrunはDockerfileにCMDがある場合は実行されません。ですから、仮にheroku.ymlを優先したい場合は、DockerfileのCMDを削除してrunを書きましょう。\nDockerfile\n#CMD [\u0026#34;/bin/s6-svscan\u0026#34;, \u0026#34;/etc/s6\u0026#34;] build: docker: web: ./Dockerfile run: web: echo \u0026#34;RUN_USER=`whoami`\u0026#34; \u0026gt;\u0026gt; /data/gitea/conf/app.ini;gitea web -p $PORT -c /data/gitea/conf/app.ini build: docker: web: Dockerfile release: image: web command: - echo RUN_USER=`whoami` \u0026gt;\u0026gt; /data/gitea/conf/app.ini run: web: gitea web -p $PORT -c /data/gitea/conf/app.ini herokuの$USERが難しいのは、Dockerfileがrootで実行されるので、heroku.ymlで制御する必要があるからです。ただし、heroku.ymlでは/data/gitea/confに書き込む権限がありません。\nref : https://devcenter.heroku.com/articles/container-registry-and-runtime#dockerfile-commands-and-runtime\ngit push herokuがストレージをリセットする関係上、webで作成したrepo、つまり、web serverに書き込まれる/data/gitは後々削除されます。\n$ heroku ps:restart ですから、localでrepo、つまり、/gitea/gitを生成して、それをheroku-repoにpushする必要があります。\nただし、herokuでつかうapp.iniとdocker-localで使うapp.iniは異なります。立ち上げる際は動くように調整する必要があります。\ngiteaを使う場合は、作成したrepoをcloneしてpushできます。\ninit, remoteで作成した.gitだとそのままではpushできません。cloneした.gitを使ってください。\n$ git clone xxx/xxx.git $ cd xxx $ tree .git また、localでrepoを作成、更新するのが面倒な場合は、/data/gitea/git/repositories/$userにrepoの.gitを$repo.gitとして置く方法があります。これをheroku-deployしなければなりません。\n$ git clone xxx/$user/$repo.git $ mkdir -p gitea/git/repositories/$user $ mv $repo/.git ./gitea/git/repositories/$user/$repo.git $ rm -rf $repo $ git add gitea/git $ git commit -m \u0026#34;add git-repo\u0026#34; $ git push heroku main ","description":"","formated_time":"2022-06-08","href":"https://syui.github.io/blog/post/2022/06/08/gitea/","tags":["git","heroku","gitea"],"title":"giteaのcleanとupdate","utc_time":"2022-06-08T00:00:00Z"},{"categories":null,"contents":"原神の記事書いてるので、イエランの評価とか適当に思ってることを書きます。\nFAQ\nQ イエランは引くべき\nA 引くべきだと思います\nQ イエランと万葉、どちらが強い\nA 万葉\nQ イエランと行秋、どちらが強い\nA 行秋\nQ あなたはイエランを引く\nA 狙っていない\nQ なぜ狙わないの\nA 特別好きなキャラではないから\n解説 まずイエランの評価は個々の状況によります。\n上記のすべての質問に明確な答えは存在しません。\nそのことを前提に、個人的な評価をしています。\nここで、私の今後の方針ですが、私は、万葉を引いたあとは神と好きなキャラを狙っていく方針に移行する予定です。これ以上はキャラ過剰になるとそう判断しました。\nイエランの利点は、水元素付与とダメージバフにあります。\nこれは、キャラの凸ができない、あまりプレイしていない無課金者の視点からは、なかなか最強とは言いづらい。\n例えば、行秋の利点は、回復やダメージ軽減を併せ持つことであり、これが結構でかいと考えています。\n確かに、キャラ凸していて、死ぬことがない、あとはダメージを上げることだけ考えればいいような状況の場合、イエランの評価は高いです。\nしかし、私のようなキャラも武器もなく、凸もしていない状況だと、イエランはPTの隙間を埋めてくれるキャラにはなりません。\nというのも防御や回復の性能も併せ持つ行秋やベネットのほうが総合評価が高くなるからです。\n無課金攻略では、防御面、回復性能だったりダメージ軽減が決定的に重要になってきます。\nイエランは回復やダメージ軽減がなく耐久も低い弓キャラです。私は甘雨を使いこなせなかったので、今後も弓キャラは基本的に狙わないと思います。\nあくまで個人的ですが、イエランは今後使わなくなる可能性が非常に高いと予想しています。\n水神の性能がどのようなものになるのか未知数ですが、おそらく、スキルがループ可能で爆発が回りやすいものになると思います。これにより水元素付与は長時間または永続できる可能性があります。次に回復性能がつくと予想しています。同時にダメージとバフかデバフ効果が多少あるかもしれません。\n以上を踏まえて、PTを組む場合、水元素は回復性能を持っていないと厳しいという予測が自分の中にあります。\n他元素の役割から考え、例えば、炎や氷は攻撃が合っている。雷も攻撃。岩は防御。風はどっちでもよさそう。残る水は回復です。\n水(攻撃)+水(回復)で組ませてもいいのですが、私は、元素をバラけさせるほうがいいと思っていて、原神は元素の組み合わせでダメージを上げていくゲームだと思っているので、そう考えると、イエランは今後使わなくなる可能性が高いと予想します。\nとはいえ、イエランは間違いなく引いておくべきキャラです。\n性能としては、ちょっと強すぎるなあと感じていて、イレギュラーを感じました。\nでは、このイレギュラー感についてちょっと私の考えを述べます。\n現在のイエランの性能は、当初予定されていたものだったのでしょうか。\n個人的には、直前になって上方修正されたのではないかと考えています。\n例えば、最近、開発元の減収が伝えられていました。それは、コロナ事件が発端の開発延期によるものでした。\nですからそのような事態が開けた時に実装されたイエランの性能というのは、もしかすると、事情(減収)により上方修正されていてもおかしくないと、私は予想しました。\nこれはキャラを引く人にとってはチャンスです。このような機会はめったにありません。\n事実として、イエランは破格すぎる性能を持ち、凸効果も信じられないほどすべてが強い。\nイエランは引いておくべきキャラだと思われます。\n私がイエランを狙わない主な理由は、個人的な方針によるものに過ぎません。\nそれ以外の方は、これは普通に引いておいたほうがいいと思います。\n","description":"","formated_time":"2022-06-05","href":"https://syui.github.io/blog/post/2022/06/05/genshin/","tags":["genshin"],"title":"原神、イエランの評価","utc_time":"2022-06-05T00:00:00Z"},{"categories":null,"contents":"\n実は並びが悪いことにあとから気づいたので、12-1を2回やってる。\n","description":"","formated_time":"2022-06-01","href":"https://syui.github.io/blog/post/2022/06/01/genshin/","tags":["genshin"],"title":"原神、クレーで螺旋攻略","utc_time":"2022-06-01T00:00:00Z"},{"categories":null,"contents":"以下のページにまとめてみた。\n/games\nやったこと 更新順に表示することにしたのと、アイコンを表示することにした。\nlastmod = \u0026#34;2022-05-29\u0026#34; header_image = \u0026#34;/games/genshin.png\u0026#34; \u0026lt;ul\u0026gt; {{ range .Data.Pages.ByLastmod.Reverse }} \u0026lt;li\u0026gt; \u0026lt;img src=\u0026#34;{{ .Params.header_image }}\u0026#34;/\u0026gt; {{ .Lastmod.Format \u0026#34;2006-01-02\u0026#34; }}\u0026lt;p\u0026gt;\u0026lt;a href=\u0026#34;{{.Permalink}}\u0026#34;\u0026gt;{{.Title}}\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; li img { float: left; padding: 7px; } ","description":"","formated_time":"2022-05-29","href":"https://syui.github.io/blog/post/2022/05/29/hugo/","tags":["hugo"],"title":"プレイしてるゲームをまとめた","utc_time":"2022-05-29T00:00:00Z"},{"categories":null,"contents":"自分のこれまでの原神とこれからの原神についてちょっと考えてみました。\nまず、自分のこれまでの原神のおさらいです。\n私は、twitterかどっかで目にした原神のクレーというキャラが「かわいい！」と思ったので、原神をはじめました。\nといってもそれまで原神のことは少しだけ知っていて、(1)switchのゼルダを参考にしたゲームであること、(2)なにかパソコンのwindows(.exe)関連の挙動で炎上したこと、(3)原神のアイコンにもなっているパイモンが気になったことがありました。また、中国企業のmihoyoが開発しているゲームというのも知っていました。\n原神がゼルダにインスパイアされたゲームであることについて個人的な考えを書きます。\n巷にはパクリと言われていますが、個人的には丸パクリでもない限り、全く問題と考えています。\nアニメでもゲームでも漫画でもそうですが、何かを作る際、既存のものを参考にすることはよくあることです。そして、それが認められない場合、文化の発展もありません。\nですから、mihoyoの開発スタイル、他のゲームの良いところを取り入れ独自の文化やゲームを作っていく姿勢は、むしろ誇るべき部分だと思います。\nプレイスタイル 次に、私のこれまでのプレイスタイルを少しだけ話します。\nゲームで影響を及ぼす3つの要素から私のプレイスタイルを明示します。\n無課金 : ゲームをプレイするにあたり、一切の課金は行わないと最初に決めました。今でもその方針に従っています。なので俗に言う無課金勢です。\n初見 : ここで言う初見は、主にアカウントのことです。最初に作ったアカウントのみでプレイしています。俗に言うサブ垢を持っていません。原神は未経験から始め、アカウントは一つのみです。ここで言う「初見」は主にこのことを指します。\n新規 : ここではサービス開始からプレイし始めたユーザーを「初期」や「初期勢」と呼びます。開始前から始めたユーザーを「ベータ」や「ベータテスター」といいます。途中から始めたユーザーを新規といいます。私の場合は、開始から1年後くらいに参加したので、新規ということになります。これについても様々な定義が存在しますが、ここではシンプルな条件でこのように分類します。\nつまり、私は、無課金+初見+新規に分類されるため、簡潔に表現すると原神の初心者です。\n原神のことは良くわかっていませんし、攻略もできていません。\nこれまでの方針 この前提で話をしますが、私のこれまでの方針は、強いキャラを引いて育てるという方針を採ってきました。\n現在、私が強いと思ったキャラは、必要最低限の範囲で確保することができました。\n必要最低限というのは、元素ごとに1体の確保を目指しました。\n具体的には、クレー、雷電、鍾離、香菱、行秋、ベネット、甘雨、ウェンティ、綾華が現在の主な戦力となります。育成もこれらのキャラに限定しています。\nクレーについては、原神を始めたきっかけでもあるので、炎元素の枠にいれます。\n例えば、炎元素では胡桃のほうが強いです。しかし、すでに育てているキャラがいるのに、貯めた原石を消費して胡桃を引くのは、必要最低限の範囲とは言えません。\nただし、育成や強化に関しては、無課金勢の私がなにか出し惜しみして、このキャラは使い続ける気がするけど、でも素材がもったいないのでやめておこうという考え方はしません。\n可能な限り早く育成し、強化して使っていく方針でやってきました。育成に関しては、原神を回していくことを一番に考えています。\nこれからの方針 これからの方針も基本的には同じです。\n原石を貯める、強いキャラを狙う、強いキャラを育てるという感じになると思われます。\nまず、次に狙っているのは万葉です。ここで当初予定していた強キャラが全員揃うことになります。\nそして、そこからは各国の神を狙っていく方針です。それ以外は基本的にスルーする方針です。\n武器に関しては、草薙を狙っていきたいと考えています。しかし、武器ガチャをやるタイミングは難しいでしょう。\nクレーはどうすれば強くなるのか ここからは個人的な願望の話になるのですが、クレーについて思ってることを書きます。\nまず、現状のクレーは、一言で「たいへん厳しい」という評価です。\nクレーは初期キャラでもあり、初期のピックアップ星5キャラです。\n最近、インフレがとても進んでいる環境ではクレーは弱いし、あまり使えないという評価なのです。\nクレーが厳しい最も大きな理由の一つとして元素爆発が挙げられます。あのキャラを入れ替えると消えてしまう、元素爆発ですね。\n今やこのタイプの元素爆発を持つキャラは、とても少なく、キャラを変えても残るタイプのものが多い。特にクレーのような継続するタイプだとそうです。\n更にこの元素爆発、効果がない。バフ、デバフ等の効果が乗っていないのも辛いところだと考えられます。\n例えば、クレーを強くする場合、あの元素爆発を変更するしかありません。武器や聖遺物では、ちょっと厳しいのではないかと思います。\nあの元素爆発には以下の変更があると、少しは強くなると思います。現環境風になります。\nキャラを変えても残る\nクレーの攻撃力x同敵へのヒット数を基準に場に出ているキャラに爆発終了までバフ効果を与える(キャラの変更があった場合はリセットされ、そこからのヒット数となる。敵ターゲットが変わりヒットした場合も同様)\nこのように考える理由として、現環境において、このタイプの元素爆発は残るのが一般的であることが挙げられます。\n効果については、クレーの性格からバフのほうが合っているようにに思います。\nこれらは単なる願望ですが、クレーを使い続けるには現環境では非常に厳しいと思います。このような変更があると、クレーが使用されることも少しは増えるかもしれません。\nこれで少し増える？本当にそうか？という疑問について解説します。\nまず、クレーというのは、基本的に元素爆発以外にも厳しいところが多い。\n攻撃が遅く、メインの重撃ではかなりのスタミナが持っていかれてしまいます。相手をふっとばしてしまうので連続ヒットしても2回目以降はほとんどダメージが通らないし、上がりません。元素スキルは使い方次第なところがありますが、弱点も多く、単体では使えません。設置型なので工夫が必要です。\n以上の理由から、数ある問題点の中で元素爆発だけが改善されても、残りの問題が存在し続けます。\n元素爆発が改善されても、残りの問題からクレーがメインアタッカーとして使われる機会は、それほど多くはならないと思います。\nしかし、逆に「全ての問題を解消してクレーを最強に」という意見にも私は反対です。\n要はバランスが重要で、キャラには弱点があって然るべき。クレーというキャラの立ち位置からは、最強はありえないし、似合わない。\nただし、下から数えたほうが早いピックアップ星5キャラとしては、もう少し現代風に強化してほしさがあるというのが個人的に思っていることです。\n次の復刻でクレーの元素爆発の上方修正を個人的には期待しています。\nアタッカー 現在、螺旋では雷電、綾華をメインアタッカーで使っています。マップ(秘境含む)では綾華かクレーですね。氷タイプが来たらクレーに切り替えますが、それ以外は綾華をメインに使っています。\n綾華の評価ですが、便利で強いし、使いやすいと思っていて、今後も使い続けるキャラになると思う。\nクレーの評価は上に書いたので、残るは雷電の評価ですが、雷電は最強です。\n純粋アタッカーとしての評価にあまり意味はないと思っているので、総合評価になりますが、雷電が一番だと思います。螺旋にもマップにも必ず入ってくるし、螺旋の場合はアタッカーとして入ってきます。\nただ、通常攻撃の天賦9はやりすぎた\u0026hellip;。爆発に乗るかもしれないと思ったんだよね(乗らないらしい)。\n","description":"","formated_time":"2022-05-28","href":"https://syui.github.io/blog/post/2022/05/28/genshin/","tags":["genshin"],"title":"原神、これから","utc_time":"2022-05-28T00:00:00Z"},{"categories":null,"contents":"nftとは nftを理解するには、まず仮想通貨から理解する必要があります。\nあくまで仮想通貨の個人理解を説明します。\nあまり詳しくないので、間違っているところはあるかもしれませんが、気になる方は自分で調べるようにしてください。\nbitcoin 仮想通貨には、bitcoin, ethereumなどがあります。nftでは主にeth(ethereum)が利用されているようです。\n仮想通貨の本質は、ブロックチェーンではありません。\nなぜなら、人々がブロックチェーンを求め、ブロックチェーンを欲しがったとは思えないからです。\nでは人々は何を求めていたのでしょう。\n人々が求めていたのは、自分で銀行口座を作ったり、口座から送金や振込みを自分で行えることだったのではないかと思います。\nそれを実現するのが仮想通貨でありブロックチェーンだったというわけです。ブロックチェーンが欲しかったわけではありません。\n今までは銀行に頼むことでしか、これらのことは行なえませんでした。銀行に書類を提出し、審査を通ることでしか口座を作ることはできなかったし、送ることも振り込まれることもできなかった。\n世界中の国々では政府や銀行が腐敗しているケースも多く、市民が手軽に口座を開設できないような場合も多く存在しています。\nそんな中、仮想通貨は、今まで銀行に頼むことでしか作れなかった口座や送金、振込を可能にしました。\nこれを可能にした技術がブロックチェーンであり、ブロックチェーンというのは、簡単に言うと改竄が困難な台帳のことです。\nお金の流れは全て共有される台帳に刻まれます。これによって、銀行が行っていた業務を個人でも行えるようになりました。\nnft nftとは、このブロックチェーンを何かしらのコンテンツ情報と紐付けることで、その所有や唯一性、検索性、履歴性を担保しようとしたのだと思います。\nこの仕組みが一般化するかはわかりません。\nしかし、例えば、今までにあった美術品などの問題は一部で解消される余地があるかもしれないと個人的には思っています。\n美術品の価値、及び所有や作者の問題は、関係者を悩ませる問題でもありました。\nこれは本当にゴッホの絵なのかどうなのか、あるいは、ゴッホの絵に数億の価値は本当にあるのだろうか、絵の真の所有者は誰なのだろう、ゴッホの絵は作者が死んでから価値が出たけど(それまでは無価値だった)なぜだろうとか。\nこのへんの話をすると長くなるので割愛しますが、nftは、今までの美術品に取って代わるものとして期待されている側面があるのかもしれません。そんな風に感じています。\n次に、現在のnftを構成する要素をいくつか説明します。\nopensea https://opensea.io\nまずはマーケットです。\nopenseaがそれにあたります。マーケットでは、主に、ブロックチェーンに書かれた特定のmetadataフォーマットからコンテンツを表示します。ここでは所有権を売買できるようです。\nmetamask https://metamask.io\n次にウォレットです。metamaskが有名です。新しい認証の仕組みで公開鍵と秘密鍵を使った認証を行います。\nethでの支払いやtestnetを使う際にもウォレットでの認証を経なければなりません。ウォレットは署名の役割も担います。\neth https://ethereum.org\n仮想通貨のethereumの略で、nftでは、ガス代などの支払いにethが使われます。マーケットに出品する場合は、mintしなければならず、その処理に必要です。\nガス代を使わないようにする場合は、openseaのtestnet上で独自コントラクトを接続する方法があります。\nこの際、metamask-rinkeby(testnet)でtest用のethを使います。\ntest用のethはこちらからもらえます。例えば、mintする際にrinkebyのtestnet(eth-address)を指定してください。\nopenzeppelin https://wizard.openzeppelin.com\n自分でブロックチェーンのネットワークにdeployすることを独自コントラクトといいます。\nもちろん、マーケットもコントラクトを持っていますが、それを使用すると、nftのowner(所有)はマーケットになり、口座もマーケットとの共有になります。\nですから、自身のowner権限でmetadata.jsonを発行し、自身の口座を指定したい場合は、独自コントラクトしたものを(接続)する必要があります。\nこの際にも当然、ウォレット認証や署名が必要になってきます。\n独自コントラクトを立ち上げるなら、openzeppelinが便利です。trufflesuiteもおすすめらしい。\nhttps://trufflesuite.com\n実践nft 今回は、openseaのtestnetと独自コントラクトを接続し、画像をマーケットに置くまでをやってみます。\nまず、openzeppelinでテンプレート(コード)を書きます。といっても、基本的にopenzeppelinで吐かれたコードをそのまま使用しても動作します。\nerc721を選択して、baseuriを設定します。これは画像urlと同じドメインを指定するようにしてください。baseuriにはwebに置いたmetadata.jsonを指定します。\n例えば、example.com/meta/0にjsonファイル、example.com/test/0.jpgに画像ファイルを置きます。\nbaseuri : https://example.com/meta/\nmetadata : /meta/0\n{ \u0026#34;tokenId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;test 1\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;test NFT\u0026#34;, \u0026#34;image\u0026#34;: \u0026#34;https://example.com/test/0.jpg\u0026#34; } file : /test/0.jpg Open in Remixボタンをクリックして、remixを起動します。remixはIDE(web)です。\nこのremixで先程のコードをcomplileします。\nその後、deploy(ethアイコンのやつ)するわけですが、ここではまず、envでweb3(injected)を選択して、metamask(rinkeby)のeth-addressとリンクします。これはtestnetのものを使用します。\ncontractに先程作ったmetadataを参照します。ここではMyTokenという名前になります。\ndeployボタンを押すと、しばらくして詳細が出てきます。そこにあるsafemintにrinkeby-testnetのaddressを入力しsafemintボタンを押します。\nこれでopensea-testnetで独自コントラクトが参照され、画像が表示されます。\nhttps://testnets.opensea.io/syui\nopenseaの本番マーケットに出品する場合、ガス代をethなどで支払う必要があります。これはmintしたときに必要になります。\nわざわざ独自コントラクトを作って接続する理由は、(1)自身のowner権限でmetadata.jsonを作成できること、(2)自身の口座を設定できることです。\nnftやweb3は流行るのか nftやweb3は流行るのか、一般化するのかについて、個人的な考えを書いていきたいと思います。\nここではweb3に統一して書きますが、web3が流行るのかどうかについては、私にはわからないということです。\nweb3は絶対に流行らない、一般化するわけがない、web3は詐欺であり、よくないものだ。web3はダメなものだ、胡散臭いと言われているのを私は知っています。\n確かに、そういった側面もあると思います。\nしかし、よく考えてみてほしいのですが、例えば、ゴッホの絵にどれほどの価値があるのでしょうか。\n多くの一般人にとって、ゴッホの絵に価値などありません。\nというのもゴッホの生前には言ってみれば価値はありませんでした。いくらでも安く買えたような代物で、もしかしたらタダでも手に入ったかもしれません。\nしかし、長い年月を経て、作者が亡くなってから、有名になり、ゴッホの絵の価値は上がりました。\nこれを詐欺だ、胡散臭い、絶対におかしい、無価値だなんて言いません。\n物の価値というのは、一概には言えないところがあります。その将来においての価値というのは、評価が難しい。評価不能と言ってもいいでしょう。\nそれを前提にnftにもそういったものが今後出てくるかもしれません。nftを買う人の中には、そういった流れを見越して買っている人もいるかもしれません。\nこれについては様々な意見があるものの、最も多い意見としては、詐欺だ、あんなものに価値はないという意見です。その気持ちもわかりますが、個人的には、どうなるかはわからないと思っています。先程述べた理由からそんな風に考えている。\n次に話していきたいのは、流行や一般化についてです。\n人間の歴史を見ていくと、流行や一般化したものについては、実に奇妙な経緯をたどります。\n今で言うGAFAですが、googleやapple, microsoftやamazonなども当初行っていた事業は、実は虚業のようなものだったりします。\n例えば、microsoftが作りはじめたosですが、当初は、技術からおもちゃだと笑われ、実際にもバグだらけで不良品、欠陥品でした。\n当初は、あんなものが流行って、一般化するとは考えられませんでした。今のようになっているとは、誰も考えていなかったのです。当時の意見を見ると、そんな感じでした。\nですが、タイミングが良かったのか、継続性によるものなのか、わかりませんが、その後、奇妙な経緯をたどって現在の形に進化することになります。\n何が言いたいのかというと、ある事柄がどのような経緯をたどり、広がりを見せ、あるいは進化していくのか。それを予測することは難しいということです。\nとても一般化するとは思えない規格が、その後、一般化して現在でも使われている例を、私はたくさん見てきました。\nweb3も同じで、これがどのような経緯をたどり、広がりを見せるのか。将来的に当たり前のように使われているものなのかどうなのか。逆に世間的な意見が的中して廃れているのか。それはなかなかにわからないところがあります。\nなので私は、web3やnftのdis(ディス)ばかりずっとやっている人を見ても、like(いいね)している人を見ても、特に思うところはありません。\nどちらの言い分もおおよそ正しいのではないでしょうか。\nそんな感じなので、私はnftに対して特別な拒否感はありませんし、逆に期待もしていません。\n今回は、とりあえず、面白そうだったnftを触ってみようということで、触ってみることにしました。\n触ってみた感想は、なかなかに面白いものなんじゃないかなって思いました。以上です。\n","description":"","formated_time":"2022-05-25","href":"https://syui.github.io/blog/post/2022/05/25/nft/","tags":["nft"],"title":"nftをやってみた","utc_time":"2022-05-25T00:00:00Z"},{"categories":null,"contents":"マジコスサカキを引きました。\n今回も引くべきと判断したので、回すことにしたのですが、今回は早めに出てくれてよかった。一発(11連)で出ました。ですが、ダイヤも尽きました。\n私は2凸(計3枚)をアメを貯めて狙うことにしますが、2凸するのがおすすめです。私が凸をすすめるのは珍しいですが、それくらいにおすすめです。\n原因はこれです。\n急所率上昇と急所確定or急所状態だとどちらが強いのかというと、後者の急所確定or急所状態です。なぜなら前者の率は下げられてしまう可能性があるからです。\nちなみに、相手が急所無効や急所防御(状態)を持っている場合はどちらが優先されるのか知りません。しかし、もしかすると、急所確定(状態)が優先されるのかもしれません。どちらにせよ率だとこれらを突破することは不可能です。\n無課金の保有バディーズ 無課金でやっていて、最近やたらガチャばかり回している印象あるかもしれませんが、実はそれほどバディーズは持っていません。\n私はポケマスをサービス開始から始めたので、私のような初期勢からすると、あまり持っていないということです。\n今までガチャを回したのは全部でこんな感じで、この中で恒常キャラのハルカ、グラジオ、リーフは回していませんし、配布のフウロ、サカキ、アカギ、メイは除きます。つまり、全部で21回くらいのガチャを狙ってやったという感じになります。\n狙ったのに最後まで出なかったキャラはいなかったんじゃないかな。それくらい今まではダイヤを貯めてから回すようにしていました。\nしたがって、天井で引いたキャラも結構多くて、天井は5,6体くらいだったかな。\nですが、最近はダイヤを貯める間もなくガチャを回してる。強いの多いから。\nこのペースだと、そのうち狙ってたのに最後まで出なかったというパターンも出てきそうな気がする。\nまあいいや。自分が引くべきと判断したキャラを今後も狙っていきたい。\n","description":"","formated_time":"2022-05-20","href":"https://syui.github.io/blog/post/2022/05/20/pokemas/","tags":["pokemon","pokemas"],"title":"ポケマス、マジコスサカキ","utc_time":"2022-05-20T00:00:00Z"},{"categories":null,"contents":"私は、去年から楽天モバイルを使っていました。\n今回、楽天モバイルが1GB/0円のプランを廃止するので、それに伴い楽天モバイルの総評と移行先のことなどを書きたいと思います。\n楽天モバイルの評価 まず、私の環境では、とても快適に使用できていました。1,2度の回線障害があり、その1回は、電話を使用しようと思っていたタイミングと重なってしまったため、その時だけは実際不便でしたが、全く問題ありません。\nというのもサービス開始直後というのは、障害があっても仕方ありませんよね。発生して当たり前だと考えています。もちろん、障害が発生しないほうがいいです。しかし、別に障害がまれに発生したとしても、私はそれを特別に問題だとは思いませんでした。\nですから、このことに関しては、楽天モバイルはうまくやっている方だと思います。基本的には、回線が途切れることなく、快適に使用できていたという評価になります。\n1GB/0円のプランは、個人的な使用とマッチしており、評価は高かったです。\n楽天モバイル以外でこのプランは存在しなかったと思います。\n私の月々の通信量は、普通に使っても1G以内に収まります。したがって、楽天モバイルを使用中に1年の中で1回だけ113円がかかりました。それ以外は0円でした。\nこれは無理に通信量を抑えたとかではなく、iosにはそういった機能がありませんので無理です。androidには、通信量を制限する設定がありますが、ios(iphone)にはありません。\nしかし、今回、楽天モバイルが私が最も評価しているプランを廃止するとのことなので、移行を検討することにしました。\n移行を検討する理由としては、第一にプラン廃止がありますが、実はそれだけでもありません。\n変更や廃止が早すぎたことも「できる限り早く移行したほうがいいのではないか」という考えに影響を与えたと思っています。\nやめるのが早すぎるとなると、この先、どうなるのかわかりません。\n数カ月後、あるいは1年後にまた変更や廃止が相次ぎ、解約したくてもできなくなるような事態も考えられます。\nそうなった場合、ユーザーとしてはどうしようもありません。逃げたくても逃げられないし、逃げ遅れてしまうと、取り返しがつかないことになります。\nということで、できる限り早く移行したほうがいいのかもしれないという判断になりました。\nただし、楽天モバイルは、私の環境では普通に快適に使えました。楽天が好きな人は、使うといいと思います。\nプラン自体もわかりやすくて、特段高いというわけではありません。アプリはわかりやすかったし、設定しやすかった。\n日本通信sim 日本通信simが合理的プランという名で1GB/290円で提供しています。\n解説記事 : https://ascii.jp/elem/000/004/084/4084000/\npovo2.0 auがpovo2.0という名で基本使用料0のトッピングのプランを提供しています。\nただ、個人的にはちょっと複雑で面倒だと思っていて、期間制限付きでギガを買う方式になります。買わなければ0円ですが、一定期間内に使用がなければ解約されるとかだったと思います。\nですから、ギガは定期的に購入する必要があります。\nそして、普通に使っていく分にもギガは買わなければならないわけですが、データ追加で1GB/7日間/390円, 3GB/30日間/900円となっています。\n個人的な使用では、povo2.0に移行するのと、楽天モバイルを使い続けるのでは、値段的にあまり変わらないと思いました。\n解説記事 : https://ascii.jp/elem/000/004/070/4070954/\nnuroモバイル 私が以前使っていたnuroモバイルは、0.2GB/495円です。\nただし、現時点ではあまりおすすめはしません。\n","description":"","formated_time":"2022-05-19","href":"https://syui.github.io/blog/post/2022/05/19/sim/","tags":["sim","mobile","iphone"],"title":"楽天モバイルの総評と日本通信sim, povo2.0","utc_time":"2022-05-19T00:00:00Z"},{"categories":null,"contents":"前期も螺旋36でクリアで、今期も螺旋を星36でクリアできたので、感想とか書きます。そういえば書いてなかった。\n原神、無課金、初見、新規、螺旋36 原神、無課金で螺旋36を攻略しているブログを検索で探してみたのですが、見当たりませんでした。微課金では1,2個ありました。\n検索方法が悪いのかもしれませんし、わざわざブログに書いている人がいないのかもしれません。しかし、思った以上に無課金での螺旋クリアは数が少ない可能性があります。\nまずはそのへんの話をしていきたいのですが、結論から言うと、無課金で螺旋は目指さなくていいよという話になります。\n人数自体が極めて少数だと考えられることもこの意見に寄与します。\n個人的に原神の難易度は、以下の要素が大きく影響すると考えています。\n課金\n初見\n新規\n微課金で螺旋36をクリアした人は少数ですが1,2個のブログを発見しました。ただし、微課金と無課金では、得られる原石の数が大きく違います。課金要素が難易度に最も大きな影響を及ぼします。無課金だと難易度がかなり上がっている印象です。\n次に、初見であるか否かも難易度に影響を及ぼします。例えば、サブ垢でやっているとなると、難易度は一気に下がります。すでに得た知識や経験の差が出てきます。これもかなり大きな違いが現れると思います。\n次に、新規であるか否かです。螺旋の難易度や敵の強さはずっと上昇傾向にあります。事実として上昇し続けています。例えば、サービス開始からプレイし続けている人と今から始める新規の人とでは、サービス開始からプレイしてる人のほうが、原神を簡単にプレイできる可能性が極めて高いと考えられます。逆に、今から始める場合は、相当苦労するかもしれません。\n私の場合、無課金、かつ初見(アカウント)、かつ新規(サービス途中から)で始めたので、この組み合わせだと、螺旋36でクリアした人は検索に出てきません。いるとは思いますが、想像以上に少ない可能性があります。\n螺旋36、最短最速 以上に述べた理由から、螺旋36クリアを目指すなら、課金するのが一番の近道だと考えられます。\n次に、初見ではなく経験したあとにサブ垢でも作ってクリアを目指しましょう。そのほうが遥かに早く螺旋36できる可能性が高いです。\n次に、サービス開始当初からプレイしましょう。当初から始めている人は、螺旋をクリアできる可能性が非常に高いです。これは今現在は無理なので、狙うとしたら上記のどちらかが最も手っ取り早い方法だと考えられます。\nそれでも無課金で螺旋36を目指したい人へ 実際やってみて、無課金(新規、初見除く)要素だけでも、結構きついんじゃないかなあと思いました。\nそれでも目指したい場合、原石を貯めて、強いキャラを確実に引いていき、それを育成するとよさそう。\n自分がクリアできたのも、たまたま(偶然)でしかないので、あまりこれといったアドバイスはありません。\n好きなようにやるのが一番だと思っています。\n好きなようにプレイしよう なにかアドバイスがあるとすれば、好きなようにやろうってことくらいです。\nこれについては、ちょっとだけ思っていることがあります。\n確かに、原神も面白いけど、他のことも楽しいよ、ということです。\n私は、原神をちょこちょこプレイしていますが、実際ほとんどプレイしていなかったと言うか、サボりまくっていたというのが現状でした。\n探索度とか見てもらえればわかるかもしれませんけど、全然進んでなくて、あまりプレイしていないという実情があります。\n例えば、配信を見てみると、原神ばかり何時間もプレイしている人がたくさんいます。\nたしかに、ずっと原神をプレイしていれば、螺旋攻略も早いかもしれません。\nですが、個人的には、あまりおすすめしません。\nそもそも螺旋攻略自体をあまりおすすめしないのですが、私が最もおすすめなのは、好きなようにプレイしているうちに、螺旋36が届きそうなタイミングが来るかもしれないので、その時がきたら、そこで初めて手を伸ばしてみるみたいな、そんな方針が一番なんじゃないかということです。\n私はそのような方針でプレイしてきました。\nこういうやり方でしかやってこなかったので、こういうやり方しかアドバイスできませんが、こういうやり方もあるよということで。\n以上です。\n螺旋36、クリアできたので、うれしい。\n","description":"","formated_time":"2022-05-17","href":"https://syui.github.io/blog/post/2022/05/17/genshin/","tags":["genshin"],"title":"原神、無課金で螺旋36","utc_time":"2022-05-17T00:00:00Z"},{"categories":null,"contents":"引くべきと判断したので回してたけど、今回も結構ギリギリで出た感じ。\nポケマスの可能性 今回は、ポケマスをプレイしていて思ったことを書きます。\nまず、このゲーム、長く続いていてすごいなって思います。\nすぐに終了するゲームをプレイしようとする人はいません。\nですから、サービスが続いている、続けられていることは何より重要です。それが土台であり基本です。\nよって、それができているだけで、ポケマスはすごいゲームだと思う。\n今現在、ポケマスでは、ストーリーも日々更新されていて、当初の遊び方からたくさんの進化を重ねてきました。\n私がこのゲームをプレイしている理由の一つとして、このゲームのプレイを通じて、いろんなことを考えることができるのもその理由の一つです。\nポケマスというゲームには、たくさんの可能性を感じることができます。\nこうすればもっとよくなるんじゃないかとか、そういったことを想像しやすいゲームでもあります。\nそれを含めて、ゲーム自体も非常に楽しくプレイしています。\nということで、今回は、ポケマスに感じている大いなる可能性について書いていこうかなって思います。簡潔に。\nプレイヤーの個性 このゲームは、もっとプレイヤーの個性が出るようになってくると、もっと楽しくなりそうと思っています。\nプレイヤーの個性が出ると、プレイヤーが愛着の持てるゲームに進化するからです。\nでは、プレイヤーの個性というのは、どういった要素から生み出されるのでしょう。\n具体的には(1)運要素、(2)取り返しのつかない要素、この2つを組み合わせることでプレイヤーの個性が出てくるようになります。\nこれは、例えば、既存のシステムを使っても説明できます。\n例えば、ポテンシャルというものがあって、最近、希少なポテンシャルを得る機会がありました。あれ惜しいなって思っていて、変更ではなく、追加できるようになってれば、プレイヤーの個性が反映されてたと思います。\nポテンシャル変更方式では、既存の急所無効や急所ダメ上昇のほうがいいとなってしまい、結局使わないという人が多かったし、私も結局使いませんでした。\n仮に新たなポテンシャル追加方式だったら、どのバディーズにつけようとなりますよね。そこでプレイヤーの個性が現れたと思います。\n好きなキャラに付ける人や最強バディーズもいまやたくさんいますし、そのどれが強いかは人によって評価は異なるからです。\n現在のポケマスでは、強化できる上限が決まっていて、自分が選択したキャラを強化していく要素が欠けていると思います。これは、ゲームにおいてすごく面白みを感じるところなので、これがないのは、非常にもったいない。\nもしポケマスに「自分が選択したキャラを強化していく要素」が追加されたなら、そこにプレイヤーの個性が現れ、このゲームをもっと愛着の持てるゲームに進化すると私は考えています。\nでは「自分が選択したキャラを強化していく要素」を追加するには、なにをどのように実行するのでしょう。\nこれは、(1)運要素、(2)取り返しのつかない要素を組合わることで実現します。\n例えば、プレイヤーの個性、それに伴う愛着は、この取り返しのつかなさと個人の選択によってもたらされるからです。\nいくらでも変更できるなら、そこにはプレイヤーの個性が現れにくい。攻略サイトの答え通りにすればいいだけです。それでは面白くなく、飽きられやすく、愛着も湧きにくい。\nよって、変更はできるけど、その困難さやコストの大きさから、取り返しがつかない要素として認識されるように誘導する必要があります。\nこれは、例えば、アイテムの入手機会を非常に限定的にしたりそういった取り組みから実現できると思われます。\n運要素も長く遊ばれ続けるには必要不可欠な要素です。組み合わせの数を圧倒的に増やしてくれると同時に、ここにも選択とは違ったプレイヤーの個性が現れます。\nもし今後プレイヤーの個性が現れる方向に調整されていけば、このゲーム、もっともっと面白くなると思います。ですから、ポケマスにはまだまだ可能性がたくさんあると思っていて、このゲーム、続けることができていて、進化し続けているので、見ていてとても楽しいです。\n","description":"","formated_time":"2022-05-16","href":"https://syui.github.io/blog/post/2022/05/16/pokemas/","tags":["pokemon","pokemas"],"title":"ポケマス、色違いホウオウ","utc_time":"2022-05-16T00:00:00Z"},{"categories":null,"contents":" ","description":"","formated_time":"2022-05-11","href":"https://syui.github.io/blog/post/2022/05/11/illust/","tags":["illust"],"title":"壁紙作った","utc_time":"2022-05-11T00:00:00Z"},{"categories":null,"contents":"この前、漫画に新しい話を追加したい気分だったので、書いてると、ストーリーが進むに連れ、どんどん絵が雑になっていき、最終的には下書きみたいになってしまったので、これはまずいと思い、過去コマの修正からやり直すことにしました。\nなぜ最初から書き直しているのか 絵が雑になっていく理由はいくつかあります。\n私の場合は、さっさとストーリーを進めて、早く自分が思い描いているコマ(ゴール)にたどり着きたいからです。\nしかし、雑になりすぎたので、今まで作った漫画の過去コマ全部を書き直すことにしました。\n今読み直すと、納得できないコマがたくさんあります。\nこの作業を通して、漫画の描き方がわかってくればと思います。(物語の変更はありません)\nページ数が少ない段階でこの作業に取り組めてよかったと今は思います。\nしばらく修正が続きます\n/ai/manga/\n","description":"","formated_time":"2022-05-07","href":"https://syui.github.io/blog/post/2022/05/07/manga/","tags":["manga","yui"],"title":"漫画描いた2","utc_time":"2022-05-07T00:00:00Z"},{"categories":null,"contents":"ポケモンGOのメガシンカが楽しすぎて、毎日メガシンカしてます。\n無料のメガシンカが実装。目指すべきところ 人によって目指すべきところは異なりますが、一般的には、以下のようになると思います。\nメガシンカできる同種ポケモンを3体用意する\n各個体のメガレベルをMAXに上げる、休憩時間が3日間になる\n1日目~3日目用の個体を用意することで継続的な運用が可能になる\n個人的な育成方針 上記はあくまでメガエナジーを豊富に貯蓄してきた人向けの運用になります。\n個人的には、メガシンカできるポケモンを各1体だけ用意し、メガレベルを最短で上げることを目標にプレイしています。私は、1日おきにメガエナジーを消費して、各ポケモンをメガシンカさせています。\nこうすることで、メガレベルを早く上げることが可能です。メガレベルを早く上げると、ボーナスや無料のメガシンカを早くに回せるようになります。\n1日の限界到達という表示がなければ、メガシンカすることでレベル(経験値)を上げられます。\nおすすめするのは、そのポケモンのメガエナジーが尽きるまでは毎日1回メガシンカすることです。これはメダル(メガシンカ回数)の獲得にも寄与します。\nメガエナジーは、最短でメガレベルを上げられるくらいまで集めることをおすすめします。例えば、伝説の場合は1,200くらいメガエナジーを貯めておくと、その後のメガレベルを順調にあげられると思います。\nまた、相棒にして歩くとメガエナジーが得られます。伝説の場合は20kmで100のメガエナジー獲得できます。\nref : https://pokemongo-get.com/pokego03882/\n","description":"","formated_time":"2022-05-03","href":"https://syui.github.io/blog/post/2022/05/03/%E3%83%9D%E3%82%B1%E3%83%A2%E3%83%B3go%E3%83%A1%E3%82%AC%E3%82%B7%E3%83%B3%E3%82%AB%E3%81%8C%E6%A5%BD%E3%81%97%E3%81%84/","tags":["pokemon","pogo"],"title":"ポケモンGO、メガシンカが楽しい","utc_time":"2022-05-03T00:00:00Z"},{"categories":null,"contents":"ウェンティが思った以上に強いと思った。綾華をメインで使うようになった。\n","description":"","formated_time":"2022-05-03","href":"https://syui.github.io/blog/post/2022/05/03/genshin/","tags":["genshin"],"title":"原神、螺旋に再チャレンジしてみた","utc_time":"2022-05-03T00:00:00Z"},{"categories":null,"contents":"この前、原神のyoutube動画をちょっと見たのですが、そこで「原神、向いてない真君(しんくん)」の動画がすごく面白くて「ああ、これは自分のプレイ歴そのものだ」と思ったので、今回、記事にしてみようと思いました。私がこれまで原神でやらかしたことの数々をね\u0026hellip;紹介しますよ。\nまた、各キャラについて、引いてよかった、引かなくてよかった等も書く予定なので、これから原神を始める人には参考になるかもしれません。よかったら読んでいってください。\nあと、記事の内容に関わらず、原神はとても楽しくて素晴らしいゲームです。ゲーム自体はすごくおすすめ。\nこれまでの数々のやらかし 原神は、今までなんとなくプレイしてきましたが、どうやら私、原神、向いてなかった！\nあのキャラを引いたほうがいいと聞けば、ガチャを回して爆死、あのキャラが強いと言われれば何も考えず強化して爆死。\nガチャを回すときもキャラを育成するときも、特に何も考えていなかったし、計画も目標もなかった。\n気がつけばゲーム内のお金であるモラも、ガチャを回すための原石も尽きていました。\n\u0026hellip;私、もしかして原神、向いてないのではなかろうか。\nうん、向いてない。どう考えても向いていない。\nふふっ、面白い！\nガチャ歴と手持ちキャラの評価 そんな「原神、向いてない真君(しんくん)」の私が、これまで回してきたガチャや本当に引くべきだったかどうか、強化すべきだったかどうか、強化するとしてもどのように強化すべきだったかなど、あるいは、各キャラの優先度について考えます。\nもちろん、あてになるはずありません！なぜなら、原神、向いてない私が考えたことだからです。そのことを前提に読んでもらえればと思います。\n私の手持ちキャラ、及び強化してきたキャラは、以下のとおりです。\nクレー、雷電、鍾離、甘雨、香菱、行秋、ベネット、ウェンティ、綾華 初期の頃はノエルとバーバラを少し強化して使っていた時期がありました。\nガチャ自体は、以下の順に回しています。\nクレー 雷電 鍾離 甘雨 ウェンティ 綾華 それぞれにおいて、実は、甘雨以外のキャラは、引いてよかったと考えています。\nしかし、甘雨は、私には使いこなせなかったし、PTに入れること自体、ほとんどありませんでした。結局の所、あまり使っていないのです。\nしたがって、甘雨は、引かなくてよかったキャラだったのかもと思っており、その代わり万葉に原石を割けばよかったと思っています。\nまとめます。\n引いてよかった 持ってないけど引くべき 引かなくてよかった 雷電、鍾離、ウェンティ、綾華 万葉、綾人 甘雨 好きなので引いてよかったけど、一般的には引かなくていい クレー なお、すべて無凸を前提に考えています。\n育成について 原神、全く向いていない私ですが、強化に関して、特に天賦レベルに関して、少しだけ思うところがありますので、それについて書きます。\n継続して長く使うキャラというのは、できる限り早く天賦レベルを上げたほうがいい。具体的には、天賦レベルMAXや天賦レベル9まで上げてもいいと思っています。\n確かに、天賦レベルの最終段階は、消費が著しいことがあります。\nしかし、例えば、半年、あるいは1年もの長い間、そのキャラを使い続けていると、それに伴ってダメージの総量というのは、蓄積していきます。\nその積み重ねは、消費以上に利益を受けている可能性があります。\n今後のためモラや素材を貯めるタイプの人もいて、それはそれで正しいと思う反面、回すことを考えることも正しいと思います。正しいというか、間違いではないと思っているのです。\n何度も何度も敵と戦い、プレイを継続し、ゲームを回していく以上、キャラの強化というものは、積もり積もって大きな力になります。時間短縮にもつながる可能性がある。\nですから、無駄に思えるような強化も、それを回していく以上、無駄になることは少ない。そんなふうに考えています。\nとはいえ、アタッカー以外で使うキャラの「通常攻撃」は上げる必要ないと思います。それ以外であれば、好きに上げても構わない。そのように考えます。\nLVに関しても同じことが言えます。もちろん、経験値が無駄になるという要素がデメリットとしてあげられますが、LV90にしても、ほぼ問題はないでしょう。\nゲームのストーリーが最終を迎える際、素材やモラが余っていても仕方ありません。それなら早いうちに使い、強化したほうが、最終的に受けられる利益のほうが大きくなる可能性が高いと思います。\nとはいえ、これらは好みの問題に過ぎない。どっちでもいいのです。そんなふうに思います。\n一応、おすすめを書いておくと、キャラLV80/90で、天賦はアタッカーなら全LV8、それ以外なら通常以外を全LV8がおすすめです。将来的にも使っていく予定のキャラに限ります。武器に関しては汎用性のある複数キャラに使える武器LV90がおすすめです。無課金でやる人は天目影打、鉄蜂の刺しを強化するのがおすすめです。\n螺旋について 螺旋についても好みが分かれると思います。\n螺旋は攻略を目指してもいいし、目指さなくてもいいと思っています。\nしかし、私のおすすめでは、螺旋攻略は無視して構わないし、特に私のように無課金でやる人は、無視したほうがいいと思っています。\nというのも螺旋のコンテンツは、敵の配置などを見てみいくと、あきらかに課金者向け販促コンテンツだと考えられるためです。\nしたがって、無課金で螺旋の突破を無理やり目指してしまうことで、本来育成したいキャラに育成リソースを割けなくなったり、あるいは、時間ばかり消費してしまい、成果がなかったりといったことが考えられます。\n例えば、100回チャレンジしてやっと星36でクリアできたとします。しかし、時間をかけたからと言って、報酬が増えるわけではありません。\nつまり、キャラを育成していくうちに自然にクリアできるようになるまでは、あまり参加せず、自然クリアできるようになってから参加するのが最も効率的だと私は思います。\nもちろん、無課金で最短で目指すというのも悪くない考えだと思います。そういった目標を立て、楽しめるのなら、それをやるのが一番です。\nただ、私の場合は、自然クリアできるようになるまで、あるいはその期待が感じられるようになるまで、参加したり、チャレンジしたりすることを控えていて、通しでプレイし、それで得られる報酬だけ受け取るようにしています。\n最後に、こんなふうになってはいけない。以上です。\nそれ以外の原神まとめの記事。\nhttps://syui.ai/games/genshin/\n","description":"","formated_time":"2022-04-24","href":"https://syui.github.io/blog/post/2022/04/24/genshin/","tags":["genshin"],"title":"原神、向いてない真君","utc_time":"2022-04-24T00:00:00Z"},{"categories":null,"contents":"今回は、PL50までのXLアメがギリギリ貯められるくらいの調整だったと思います。\n前回のコミュデイではPL50まで無理でした。\nイベント中は、パイルよりナナでエクセレントを狙ってました。\nそれ以外の進捗について。\n花飾り進化 やっと進化できた。\n夕暮れ 夕暮れ時の実装(進化条件としての)、まだまだ先だと思うので、とりあえず夜で進化させといた。\nルギアapex まさか自分がルギアまでリトレーンすることになるとは思っていませんでした。ルギアはシャドウのほうが似合っていたらそっち使おうと思っていたのですが、気づいたらリトレーンしていました。\nこのことに関して、いくつか自分なりの考えがあるので、それについてちょっとだけ書きます。\napex(リトレーン)ですが、このように光り輝くポケモンは今までに例がありません。\nポケモンには、色違いがありますが、色違いの演出は初動のみです。継続的に光り輝く演出はこれが初めてだと思います。\n演出を含め、今回のapex(リトレーン)は、個人的には、色違いより希少だと感じています。\nその性質も色違いとは大きく異なり、色違いは運に由来しますが、apex(リトレーン)は選択に由来するようです。\n現在、多くの人がシャドウをボックスに眠らせています。\nそれ故、この光り輝くポケモンを使えるかどうかは、単なる「選択」の問題にも関わらず、それを選択する人はほとんどいません。\nほとんどいないのが現状なので、相対的にそれを持つ人が非常に限定的になっており、それ故、希少になっていると感じます。\nこれが運営の意図したものかどうかはわかりません。\nしかし、個人的には、なぜ多くの人がこの選択を取らないのかも必然的だとは思います。\nそれは、一言でいうと損をするからです。\nリトレーンするとポケモンは弱くなり、もとに戻せない。個体値100がシャドウの個体値0より弱く設定されていたと思います。\nこのような理由でイベント参加者なら誰でも手に入れられるのに、誰も持っていないみたいな現象が発生しているように思います。\n私は、今回のapexリトレーンは、使っていて気分がいいので、レイドやジムなどで積極的に使うようにしています。\nここからが本題ですが、このような選択は、本当に損なのでしょうか。\n一般的に見ると明らかに損なのですが、私は、あまりそんな風には考えていません。\n私が思うのは、せっかくapexを手に入れたのに、ボックスに眠らせたままにしておくのはもったいないということ。そして、運営が決めた設定やパラメータ、強さを気にして、自分の好きなようにできないこと、好きなように楽しめないこと。それが一番、自分にとって損だなあと思ったのです。\n前回、書くのを忘れていましたが、好きなように楽しもう。\n実はルギアはシャドウもかっこいいな、似合ってるなと思っていたので、公式にダークルギアがあったりするので、シャドウのまま使おうと思ってたのですが、目が赤いのが気になったのと、リトレーン後を見てみたい気持ちがあったので、リトレーンすることにしました。\n結論から言うと、リトレーンして満足です。こっちのほうがかっこいいって思いました。\n感想は以上です。\n","description":"","formated_time":"2022-04-23","href":"https://syui.github.io/blog/post/2022/04/23/pogo/","tags":["pokemon","pogo"],"title":"ポケモンGO、ヌイコグマのコミュデイ","utc_time":"2022-04-23T00:00:00Z"},{"categories":null,"contents":"神里綾華、引きました。昔は神里と言ってたんですが、兄妹出てきたので、そこから綾華と呼ぶようにしています。\n今回も無事、爆死しました。でも、なんとか最後の最後に出てくれたことは感謝しかありません。ありがとう！\n綾華は移動が最高です。\n今後、綾華が今まで使ってきたクレーに置き換わると思います。\n甘雨を引いたときに置き換わるかなと思っていたのですが、実現しませんでした。\nクレーはデイリーや日常使用感が思いのほか良くて。\nですが、今回は置き換わると思います。\n爆死と方針 私は無課金でやってるんですが、今回予想を遥かに超える消費をしてしまい、今後のガチャのピックアップは引いていける可能性がとても低い感じになりました。\n今回は、原石をすべて消費しても出なくて、ハズレのアイテム、キャラと交換できるやつを全部変換してやっと出ました。\nしたがって、今後の選択肢について非常に悩んでいます。\n通常のガチャの場合、ある程度ピックアップを引けるまで貯めておかないと、ずっとピックアップを引けないような事態も十分に考えられるからです。\nどういうことかというと、例えば、少量の原石をゲット、すぐに消費、やっぱり出ない、ピックアップ終了という繰り返し、そのような事態に陥る可能性が非常に高い。\nですから、通常は原石は貯めてからガチャを回すようにしたほうがいいのです。\nしたがって、今後、負のスパイラルに陥るリスクを負っても少ない原石で狙うべきか、あるいはスルーして原石を貯めるべきか、非常に悩ましい。\nしかし、原神のガチャはちょっと特殊で、回すたびに貯まる一種のボーナスがあって、そのボーナスは次のガチャにも引き継がれるというような話も聞いています。\nそのような場合は、ガチャをいつ回しても構わないということになります。\nなぜなら、その時に引けなくても次のガチャを引ける確率が高くなるからです。\nとりあえず、先のことを考えるのはやめにして、綾華の育成をがんばります！\n","description":"","formated_time":"2022-04-19","href":"https://syui.github.io/blog/post/2022/04/19/genshin/","tags":["genshin"],"title":"原神、神里綾華を引いた","utc_time":"2022-04-19T00:00:00Z"},{"categories":null,"contents":"本当は万葉を狙ってたんですが、今回、ウェンティを引くことにしました。\nウェンティは実は原神で2番目に好きなキャラなので、それをスルーするのもあれ。よくない。\n私が1番好きなキャラはクレーで、2番目がウェンティなんですよね。で、一番気になってるのがパイモンです。\nウェンティは性格がとても気に入っててね、好きなんです。\nただし、ウェンティを引いた理由はそれだけではなく、風元素キャラが不足していたこと、暴風の目の効果が強いと思ったことです。\n今回のガチャは、若干、爆死する結果になってしまい、今後、引く予定だったキャラを引けなくなるかもしれません。\n現在は綾華と万葉を狙っていて、この二人を引けるかどうかは原石がギリギリな感じです。\nですが、原神のガチャは爆死続きなので、近々早めに出てくれるんじゃないかって期待してたりします。\n","description":"","formated_time":"2022-04-15","href":"https://syui.github.io/blog/post/2022/04/15/genshin/","tags":["genshin"],"title":"原神、ウェンティを引いた","utc_time":"2022-04-15T00:00:00Z"},{"categories":null,"contents":"今回は、ほんとにギリギリでした。マジコスセレナは4/14まで。\n私はアニメを見てたこともあって、今回のマジコスセレナは本当に欲しかったので、よかった。\n状況としては、ダイヤ不足のときにガチャが来たので、ダイヤ貯まったら回すというのをやってて、それでも最終日まで出なくて、これはやばいと思い、そこで一気にバトルヴィラ、謎解きイベントを進め、ダイヤを貯めてやっと1つゲットできました。\nアメを使って1凸しています。アメが確保できたら2凸する予定。\n今回、謎解きイベントをやってみて、今回の形式は初めてなので、できる限り余裕を持ってやったほうがいいですね。\nhttps://pokemonmasters.pokemongo-raku.com/posts/13437\nエンブレムも欲しいので、色々と同時に進めていると、クリアできていないミッションがあって、調べてみると、それも謎解きでした。\nこの辺、見落としすプレイヤーいそうな気がする。こういうのが4つありますので、がんばろう。\nミクリの謎に答えよう！ チームスキル「マフラー」を持つバディーズを1組\nhttps://wikiwiki.jp/touko_hip/%E8%AC%8E%E8%A7%A3%E3%81%8D%E3%83%86%E3%82%A3%E3%83%BC%E3%83%91%E3%83%BC%E3%83%86%E3%82%A3%E3%83%BC\n関係ない話なんですが、ちょっと前にセレナのエンブレムで一個欠けていたやつをゲットできました。これもよかった。\n私のように雑にプレイしてると、見落としそうな気がする。(今できるかはわからない\nこちらにポケマス関連の情報をまとめています。\nhttps://syui.ai/games/pokemas/\n","description":"","formated_time":"2022-04-14","href":"https://syui.github.io/blog/post/2022/04/14/pokemas/","tags":["pokemon","pokemas"],"title":"ポケマス、マジコスセレナを引いた","utc_time":"2022-04-14T00:00:00Z"},{"categories":null,"contents":"nexus7にlineage-19.1(android12)を入れてみました。\nhttps://forum.xda-developers.com/t/rom-flo-deb-unofficial-lineageos-19-1-2022-03-18.3569067/\nほとんどが前回と変わらずです。\ngapps : https://drive.google.com/drive/folders/1O-I01LDvno57ztnxIW_bSnVWEk8-6Ics\nbitgapps : https://github.com/BiTGApps\nmagisk : https://github.com/topjohnwu/Magisk\nsysrepart_1380_20.zipのパーティションの処理が失敗する場合は、公式factory-imgで初期化するといいかもしれません。\nflo : https://developers.google.com/android/images\nnexus7が文鎮化した 今回、nexus7が文鎮化しました。\nlineage 19.1を入れて、うまく動作していたのですが、gappsが入らなくて、gappsが入らないと、gmsが使えません。gmsが使えないと、google-storeなどが使えませんので不便です。\ngappsが入らないのは、sysrepartのscriptが失敗しているからなんですが、それを修正しようと、公式のfactory-imgで初期化したのが失敗でした。\n私のnexus7は以前からfastboot(bootloader)に入る際、電源ボタン+volume下ボタンでは入れなくなっていたため、usb接続からのadb reboot bootloaderで入っていました。\nで、初期化後に起動しなくなったのですが、当然ながら、fastbootに入れない。\n\u0026hellip;まあ、いわゆる文鎮化です。\ngoogleロゴが繰り返し出てきてandroidが起動せず、fastbootにも入れない。\nこの場合、ボタンを押して入るしかないからです。これが文鎮化につながりました。\nちなみに、起動後はちゃんとボタン、つまり、ボリュームダウン等は機能してたんですよ。ただ起動時のみ、なぜかボタンを押してもfastbootに入れない。以前はボタンで入れたのですけど、いつの間にかボタンで入れなくなっていました。\nnexus7の文鎮化を修理した 分解してボタン周りをいじったら、なんとかfastbootに入ってくれました。\nこのチャンスを逃す手はありません。\nここで様々な処理を施し、最低限、androidが正常に起動するようにしました。\nandroid12 app list 使ってるアプリのリストです。\nTerminal Emulator for Android\nBusyBox\nHacker\u0026rsquo;s Keyboard\nAFWall+\nClipper - Clipboard Manager\nAdAway\nPerfect Viewer\nchrootしたarch.imgにもsshできたのでよかった。この辺もちょっとしたhackは必要だった。\n","description":"","formated_time":"2022-03-24","href":"https://syui.github.io/blog/post/2022/03/24/nexus7/","tags":["nexus7","android"],"title":"nexus7にandroid12を入れる","utc_time":"2022-03-24T00:00:00Z"},{"categories":null,"contents":"niantic profile(web)がreleasesされました。\nhttps://my.nianticlabs.com\nniantic idを登録(予約)している人は少なく、体感だと2/100くらいでした。niantic profileの役割は今後、徐々に拡大される可能性があるので、今のうちにidをとっておくのがおすすめです。\nnianticのゲームは、大半が位置情報ゲームであるため、idの選択には注意してください。例えば、network上のcodename(username), handlename類を現実の社会関係性に適用、または認知を望まない場合、idの選択には注意が必要です。\nref : https://nianticlabs.com/blog/niantic-profile\n","description":"","formated_time":"2022-03-24","href":"https://syui.github.io/blog/post/2022/03/24/niantic-profile/","tags":["pokemon","niantic","pogo"],"title":"niantic profile web","utc_time":"2022-03-24T00:00:00Z"},{"categories":null,"contents":"課金だと引くべきと考えます。無課金だと引くべきではないと考えています。\nこの微妙な結論の理由を自分なりの考えをまとめます。\n神里綾人は、おそらく、俗に言う「強いキャラ」となります。これに関してはただの推測ですが、水元素という点と元素爆発が継続範囲ダメージの交代可能なものなので、その点で非常に高い評価ができます。\n私が考える最も強い元素は、今の所、水元素です。\nこれをランキング形式にわかりやすくまとめると以下のとおりです。なお、草に関してはただの推測ですが敵の行動制限に関わるものが多いらしいので、そこからの評価です。\n水 \u0026gt; 風 \u0026gt; 氷 \u0026gt; 炎 \u0026gt; 雷 \u0026gt; 岩 \u0026gt; 草 これらは、聖遺物や環境によっても変動します。例えば、風元素は、聖遺物の評価も相まってのランキングとなっています。\n水元素を最も評価する理由については、各元素にダメージ、サポートの両面で作用しやすい点が大きいです。\n原神は、元素反応でダメージを倍々に上げていくゲームであり、それが最も効率の良いダメージの出し方でもあります。\nつまり、原神では、元素の組み合わせが最も重要なので、その組み合わせが一番やりやすいと考えられる水元素が今のところ自分の中では、一番強い元素になります。\nそして、一番強い元素を持つアタッカーの神里綾人は、評価も高くなります。その点で、神里綾人は、おそらく、強いキャラになり、引いておいたほうがいいキャラになるだろうと予想できます。\nただし、無課金で引くべきかどうかに関しては、おそらく、引くべきではない状況のほうが多いと考えます。\n私の現在の状況を説明すると、期待値で2キャラを引く程度にしか原石が貯まっていません。そして、持っていない強キャラが多い。ですが、水元素は行秋を持っています。\nこのような状況下では、引くべきでないと判断します。\nでは、無課金でも引くべき状況は、どのようなパターンが存在するか、解説します。\n無課金でプレイする上で絶対に引いておきたいキャラは3人います。\n鍾離\n雷電\n万葉\nちなみに、行秋、ベネットは含みません。あくまでピックアップ星5に限定しています。星4キャラは、無課金だとすり抜けやイベントで狙うのが最も効果的だと思います。ハズレのアイテム交換なども可能です。\n話をすすめると、仮に鍾離、雷電、万葉、行秋、ベネットを保持しているとして、ここで足りないのは、氷元素です。\nこの場合は、元素優先順位が高い氷キャラを狙ったほうがいいということになります。氷元素のアタッカーである綾華を狙ったほうがいいでしょう。\n逆に言うと、鍾離、雷電、万葉を持っており、それ以外の各元素で使うキャラも保持しており、かつ行秋を持っていない場合は、原石に余裕がある限りにおいて、綾人を狙っていくのも悪くない選択だと考えます。\n私の場合は、このパターンに当てはまらない。\n行秋を持っており、原石に余裕はなく、風元素が不足しており、絶対に引くべき「万葉」を狙わなければならないので、天井分までの原石は確保しておかなければなりません。\nこのように無課金で綾人を引くべき状況は、あまり多くないと考えられます。\n無課金で綾人を引くべき人の特徴をまとめます。\n原石に余裕がある\n鍾離、雷電、万葉を持っている\n行秋を持っていない、または各元素で強いキャラを一人は確保している\nこのような条件に当てはまる場合、綾人は引いておくべきなのかもしれません。\nただし、水元素キャラには、不確定要素もあります。\n現在は、草国、水国、炎国、氷国が未実装で、当該元素の神の性能がわかりません。\nつまり、水神は綾人より高性能な可能性があるため、未実装国の元素を持つキャラの優先度は、若干、下がります。神が出たときに判断すればいいということになるので。\n","description":"","formated_time":"2022-03-23","href":"https://syui.github.io/blog/post/2022/03/23/genshin/","tags":["genshin"],"title":"原神、神里綾人は引くべきか","utc_time":"2022-03-23T00:00:00Z"},{"categories":null,"contents":"今回は久しぶりにポケモンGOの記事です。\n2022/2/26にジョウトツアーというイベントがあって、私がどのようにイベントを体験したのかを記録します。\nゴールドとシルバー イベントでは色を選択して参加することになっています。\n色はゴールドとシルバーを選択できます。私はゴールドを選択しました。\nなぜゴールドを選択したのかというと、私は原作をゴールドでプレイしているからです。\nなぜポケモンGOでも原作を引き継いだのかというと、ポケモンGOにも原作をプレイしたときの思い出を受け継ぎたかったからです。\nポケモンでは、私は赤系の色を選択する傾向にありました。最初のポケモンも炎タイプを選択し続けてきました。ほとんどのバージョンでそのような選択をしてきた。これは偶然を含みます。\nでは、金色が好きかと聞かれると、実は銀色が一番好きな色です。\nまた、赤系より青系のほうが好きですね。そのため、ジムカラーは青を選択しています。\nはじめて原作をプレイしたときのことですが、確か販売店にゴールドしか売ってなかったので、本来はシルバーを選ぼうと思ってたんだけど、ゴールドを買ってプレイしました。このような偶然が重なり、私はなぜか赤系を選択することが多かった。\nまた、個人的には、ホウオウよりルギアのほうが好きなのに、今回もゴールドを選択しています。\nポケモンGOでは、私は、原作でプレイした色を選択し続けると思われます。\n原作の思い出を受け継ぐことができるから。\nヒノアラシ イベントでは朝に1時間くらいプレイしましたが、他にやることがあったので、その日は、そこで終了しています。色違いは、2匹ほどしか出ませんでした。しかも全部持ってるやつ。\nで、後日、タスクを進めると「マグマアラシを進化させる」というタスクがあって、ボックスを見てみると、すでに進化させたあとだったんです。\nそこで詰まってしまって、しばらく放置しながらフィールドタスクでヒノアラシのタスクを合間に探してたんですが、見つからず、結局、ロケット団でヒノアラシをゲットして進化させるという方法でタスクをクリアしました。\nこの間は、ほぼプレイせず、たまに開いては「ヒノアラシでないなあ」とぼやいていた記憶。\nヒノアラシ進化タスクをクリアしたあとは、半日くらいプレイして、次のタスクを進めました。\nホウオウ やったー！シャドウ・ホウオウ・apexをゲットした。\n個体値も高くてすごい。運が良かった。実は、シャドウの高個体は珍しいので、とても貴重なのです。\nリトレーン \u0026hellip;ですが、私はそのホウホウをリトレーンすることにしました。\nリトレーンすることは、最初から決めていました。\n絶対に真似してリトレーンしないように！このゲームでは、リトレーンでポケモンを救う選択は、ゲーム内で取り返しがつかない損を被ることになります。ポケモンも弱くなります。仮にリトレーンしてしまうと、あなたはバトルを含めたあらゆる要素で不利に扱われることになります。したがって、絶対にリトレーンしないようにしてください。\nなぜリトレーンしてはいけないのか、その理由については説明しましたので、あとは数字で語ることにしますが、youtubeや攻略サイトでは、絶対にリトレーンしてはいけないと書かれています。\nそのため、多くの人がこのことを知っていると思われます。\n実際、youtubeやtwitterを検索してみたところ、ホウオウapexをリトレーンしている人は、ほぼ0でした。\n私が視聴したことのあるyoutuberの15人を見てみましたが、15/15の割合でシャドウのままでした。つまり、リトレーンした人の数は0です。\ntwitterの当日画像から判断しても、リトレーンした人は、1000/1にも満たないと推測されます。twitterに画像を上げる人も全体の割合から言うと少ないので、実際はもっと少ないかもしれません。\nなぜでしょう。なぜみんなポケモンを救うと設定されたリトレーンを選択しないのでしょうか。\nそれは、みんなリトレーンすると確実に「損」をするということを理解しているからです。\n仮に「得」であれば、リトレーンする人の割合は多くなります。\nこのことは、データからも数字からも明らかです。\n再度書きますが、もし今回のホウオウapexをリトレーンしてしまうと、ゲーム内では取り返しのつかない損を被ります。ポケモンが弱くなり、あなたは対戦でも負けることになるでしょう。ですから、その選択は絶対に取らないようにしてください。多くの人がこのことを理解しているのでリトレーンしていません。決して私の真似をしないようにしてください。\nなぜ私がリトレーンしたのか。ちょっとだけ書くことにします。\n率直にいうと、私がリトレーンしたのに理由なんてありません。\nただやりたかったからやった。それだけです。\n実は、決定的に損をする、取り返しがつかない、ポケモンが圧倒的に弱くなる。このことは知っていました。\nですが私は、ホウオウにはリトレーンしたあとの姿のほうが似合うなって、そう思ったのです。\n私は、私がやりたいことしかやらないので、今回のリトレーンも同じです。\n私はあまり個体値を気にしませんし、ゲーム内の損得についてもあまり気にしていません。\nですが、私を含めた多くの人は、それが間違った選択であり、損をすることを知っています。ですから、実際にリトレーンするような人はほとんどいません。\nポケモンGOは、ARゲームとして、現実に近いところに位置するゲームです。今回の選択を含め、最初に色を選ばせたりだとか、リトレーンするかしないかだったりとか、それらの選択、多くのプレイヤーの個性が現れるところでもあり、とても面白いと感じました。\nもちろん、これは好みの問題に過ぎない。そういった側面も大きいと思います。\nシャドウ・ホウオウ・apexもかっこいい！\nでも私は、リトレーン後のほうが好き！\n今回、ホウオウというポケモンには、リトレーン後のほうが似合ってると、私はそう思ったのでした。\n私のジョウトツアーは以上です。\n注意 : 絶対、真似しないようにっ！\n","description":"","formated_time":"2022-03-21","href":"https://syui.github.io/blog/post/2022/03/21/pogo/","tags":["pokemon","pogo"],"title":"ポケモンGOのジョウトツアー","utc_time":"2022-03-21T00:00:00Z"},{"categories":null,"contents":"\n","description":"","formated_time":"2022-03-10","href":"https://syui.github.io/blog/post/2022/03/10/illust/","tags":["illust"],"title":"イラスト描いてみた112","utc_time":"2022-03-10T00:00:00Z"},{"categories":null,"contents":"\n","description":"","formated_time":"2022-03-09","href":"https://syui.github.io/blog/post/2022/03/09/illust/","tags":["illust"],"title":"イラスト描いてみた111","utc_time":"2022-03-09T00:00:00Z"},{"categories":null,"contents":"こんな感じでカードを引けます。\n# user create # username : [a-z] 7 characters, lower-case letter $ curl -X POST -H \u0026#34;Content-Type: application/json\u0026#34; -d \u0026#39;{\u0026#34;user\u0026#34;:\u0026#34;${USER}\u0026#34;}\u0026#39; api.syui.ai/users # user info $ curl api.syui.ai/users/{id} # card draw $ curl -X PUT api.syui.ai/users/{id}/d $ curl api.syui.ai/users/{id} | jq . ページは /api に作りました。ここでは自分で引いたやつだけ表示させています。\napiからデータを取得する際、cros-originのerrが出ますが、proxy-serverを立てることで無理やり回避。\nなお、heroku webは一定時間アクセスしないとsleepしますので、表示までに時間がかかることがあります。\n","description":"","formated_time":"2022-02-27","href":"https://syui.github.io/blog/post/2022/02/27/golang-api-ent/","tags":["go","api"],"title":"cardをcliから引けるようにした","utc_time":"2022-02-27T00:00:00Z"},{"categories":null,"contents":"最初は、gormを使っていました。\ngormは非常に見通しがよく、わかりやすかったです。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;time\u0026#34; \u0026#34;os\u0026#34; \u0026#34;aicard/database\u0026#34; \u0026#34;net/http\u0026#34; \u0026#34;github.com/labstack/echo/v4\u0026#34; \u0026#34;gorm.io/gorm\u0026#34; ) type User struct { Id int `json:\u0026#34;id\u0026#34; param:\u0026#34;id\u0026#34; gorm:\u0026#34;primary_key\u0026#34;` Name string `json:\u0026#34;name\u0026#34; gorm:\u0026#34;unique,collate:utf8,length:7` CreatedAt time.Time UpdatedAt time.Time DeletedAt gorm.DeletedAt `gorm:\u0026#34;index\u0026#34;` } func hello(c echo.Context) error { return c.String(http.StatusOK, \u0026#34;Hello, World!\u0026#34;) } func getUsers(c echo.Context) error { users := []User{} database.DB.Find(\u0026amp;users) return c.JSON(http.StatusOK, users) } func getUser(c echo.Context) error { user := User{} if err := c.Bind(\u0026amp;user); err != nil { return err } database.DB.Take(\u0026amp;user) return c.JSON(http.StatusOK, user) } func updateUser(c echo.Context) error { user := User{} id := c.Param(\u0026#34;id\u0026#34;) if err := c.Bind(\u0026amp;user); err != nil { return err } if err := database.DB.Where(\u0026#34;id = ?\u0026#34;, id).First(\u0026amp;user).Error; err != nil { fmt.Println(err) } database.DB.Save(\u0026amp;user) c.JSON(http.StatusOK, user) return nil } func createUser(c echo.Context) error { user := User{} if err := c.Bind(\u0026amp;user); err != nil { return err } database.DB.Create(\u0026amp;user) c.JSON(http.StatusCreated, user) return nil } func deleteUser(c echo.Context) error { id := c.Param(\u0026#34;id\u0026#34;) database.DB.Delete(\u0026amp;User{}, id) return c.NoContent(http.StatusNoContent) } func main() { e := echo.New() database.Connect() sqlDB, _ := database.DB.DB() defer sqlDB.Close() e.GET(\u0026#34;/\u0026#34;, hello) e.GET(\u0026#34;/users\u0026#34;, getUsers) e.GET(\u0026#34;/users/:id\u0026#34;, getUser) e.PUT(\u0026#34;/users/:id\u0026#34;, updateUser) e.POST(\u0026#34;/users\u0026#34;, createUser) e.DELETE(\u0026#34;/users/:id\u0026#34;, deleteUser) port := os.Getenv(\u0026#34;PORT\u0026#34;) if port == \u0026#34;\u0026#34; { port = \u0026#34;1323\u0026#34; } e.Logger.Fatal(e.Start(\u0026#34;:\u0026#34; + port)) } しかし、ent@0.9.0に追加されたようなonconflictの仕組みがなかったので、entを使いはじめました。\nonconflictは、dbに既に一致するdateがある場合、errを出してくれます。これによって、例えば、同じユーザー名では登録できないようにすることが可能です。もちろん、gormでも可能ですが、entのほうが簡単にできます。\nb := h.client.User.Create() b.SetUsername(*d.Username).OnConflict() それでは、entの基本的な使い方を紹介していきたいと思います。\nまずは、project-dirを作り、その中にgo.modを作ります。go getなどする際は依存関連が示されるgo.sumが更新されていきます。\n$ mkdir t $ cd t $ go mod init $project $ cat go.mod なお、herokuにdeployする際は、go.modには以下のようにverを指定してやらなければいけません。\nmodule t // +heroku goVersion go1.17 go 1.17 go.modのmoduleの名前は、ent/以下のファイルをimportする際に使います。ここでは、project-nameをtとしています。例えば、ent/entryをimportしたい場合は、t/ent/entryというpathを指定することになります。\nentはschemaに作成されたファイルからコントロールし、dbのデータをclientと受け渡しする仕組みを構築できます。schemaを書きかえたら都度、go generateでコードファイルを更新できます。追加機能などもこの仕組からコードファイルに追記されていきます。\npackage ent //go:generate go run -mod=mod entgo.io/ent/cmd/ent generate ./schema //go:generate go run -mod=mod entgo.io/ent/cmd/ent generate --feature sql/upsert ./schema go mod initでgo.modを作成できたら、entをインストールして、entcコマンドを使えるようにします。通常はgoを使用しているとインストールされるbinaryにはpathが通っているはずですが、通っていなくてもgo runからurlを指定すれば実行可能です。\nなお、go mod initやent initで指定した名前は各ファイルに書かれますので適切なものにしてください。\n$ go get -d entgo.io/ent/cmd/ent $ ent init Entry or $ go run entgo.io/ent/cmd/ent init Entry $ tree . . ├── ent │ ├── generate.go │ └── schema │ └── entry.go ├── go.mod └── go.sum ここで、entの通常の開発手順としては、(1)entc initしてschemaを作成する、(2)ent/schema/*.goを編集する、(3)go generate ./entを実行する、(4)main.goなどのメインファイルからclientを操作する、(5)go runやgo buildする、という流れになります。\nということで、次はent/schema/entry.goを書きます。\npackage schema import ( \u0026#34;entgo.io/ent\u0026#34; \u0026#34;entgo.io/ent/schema/field\u0026#34; ) // Fields of the User. func (User) Fields() []ent.Field { return []ent.Field{ field.Int(\u0026#34;age\u0026#34;). Positive(), field.String(\u0026#34;name\u0026#34;). Default(\u0026#34;unknown\u0026#34;), } } project-rootからgo generate ./entを実行します。すると、先程、initした名前のファイル、entry*.goが作成されています。これらをimportすることで、開発者はschemaとmainの編集に集中できるという感じになります。\n$ go generate ./ent $ tree . . ├── ent │ ├── client.go │ ├── config.go │ ├── context.go │ ├── ent.go │ ├── entry │ │ ├── entry.go │ │ └── where.go │ ├── entry.go │ ├── entry_create.go │ ├── entry_delete.go │ ├── entry_query.go │ ├── entry_update.go │ ├── enttest │ │ └── enttest.go │ ├── generate.go │ ├── hook │ │ └── hook.go │ ├── migrate │ │ ├── migrate.go │ │ └── schema.go │ ├── mutation.go │ ├── predicate │ │ └── predicate.go │ ├── runtime │ │ └── runtime.go │ ├── runtime.go │ ├── schema │ │ └── entry.go │ └── tx.go ├── go.mod └── go.sum 次は、clientを操作するmain.goを作成していきます。project-rootにmain.goを置き、それをbuildします。\npackage main import ( \u0026#34;log\u0026#34; \u0026#34;t/ent\u0026#34; _ \u0026#34;github.com/lib/pq\u0026#34; ) func main() { client, err := ent.Open(\u0026#34;postgres\u0026#34;,\u0026#34;host=\u0026lt;host\u0026gt; port=\u0026lt;port\u0026gt; user=\u0026lt;user\u0026gt; dbname=\u0026lt;database\u0026gt; password=\u0026lt;pass\u0026gt;\u0026#34;) if err != nil { log.Fatal(err) } defer client.Close() } $ go build $ ./t 特に重要になる部分は以下のような書き方がされる箇所です。apiへpostされたdateを受け取り、それをdbに保存し、返すための処理を書くのに使われることが多い。\ne := client.Entry.Create() e.SetUser() また、各種ファイルでのimportはproject-nameからのpathとなります。\nimport ( \u0026#34;t/ent\u0026#34; \u0026#34;t/ent/entry\u0026#34; ) もちろん、projectをgithubにおいているなら、github.com/$USER/$PROJECT/entとしてもいいです。この場合、go.modのmoduleもそのように書き換えてください。\nここまでがentの基本的な部分です。ここからは、heroku-postgresやonconflictに対応します。herokuはportが変わりますので、envから受け取らなければなりません。\nまずは、heroku-postgresに対応します。\npackage schema import ( \u0026#34;time\u0026#34; \u0026#34;entgo.io/ent\u0026#34; \u0026#34;entgo.io/ent/schema/field\u0026#34; ) type Entry struct { ent.Schema } func (Entry) Fields() []ent.Field { return []ent.Field{ field.String(\u0026#34;user\u0026#34;). MaxLen(8). Unique(). Immutable(), field.Int(\u0026#34;first\u0026#34;). Unique(). Immutable(), field.Time(\u0026#34;created_at\u0026#34;). Immutable(). Default(func() time.Time { return time.Now() }), } } func (Entry) Edges() []ent.Edge { return nil } package main import ( \u0026#34;time\u0026#34; \u0026#34;t/ent\u0026#34; \u0026#34;context\u0026#34; \u0026#34;log\u0026#34; \u0026#34;os\u0026#34; \u0026#34;database/sql\u0026#34; entsql \u0026#34;entgo.io/ent/dialect/sql\u0026#34; \u0026#34;entgo.io/ent/dialect\u0026#34; _ \u0026#34;github.com/jackc/pgx/v4/stdlib\u0026#34; ) type User struct { user string `json:\u0026#34;user\u0026#34;` first int `json:\u0026#34;first\u0026#34;` created_at time.Time `json:\u0026#34;created_at\u0026#34;` } func Open(databaseUrl string) *ent.Client { db, err := sql.Open(\u0026#34;pgx\u0026#34;, databaseUrl) if err != nil { log.Fatal(err) } drv := entsql.OpenDB(dialect.Postgres, db) return ent.NewClient(ent.Driver(drv)) } func main() { url := os.Getenv(\u0026#34;DATABASE_URL\u0026#34;) + \u0026#34;?sslmode=require\u0026#34; client := Open(url) ctx := context.Background() if err := client.Schema.Create(ctx); err != nil { log.Fatal(err) } defer client.Close() } $ go build 次に、onconflictへの対応です。\npackage ent //go:generate go run -mod=mod entgo.io/ent/cmd/ent generate ./schema //go:generate go run -mod=mod entgo.io/ent/cmd/ent generate --feature sql/upsert ./schema $ go generate ./... これでonconflictが使えるようになります。\nb := h.client.Entry.Create() b.SetUser(*d.User).OnConflict() 例えば、作成したapiにpostすると、同じ名前にはerrを返すようになります。\n$ curl -X \u0026#39;POST\u0026#39; -H \u0026#39;Content-Type: application/json\u0026#39; -d \u0026#39;{\u0026#34;name\u0026#34;:\u0026#34;syui\u0026#34;}\u0026#39; \u0026#34;https://$APP.herokuapp.com/u\u0026#34; ...ok $ !! ...err $ heroku logs herokuにdeployする場合は、.gitignoreを書いて、git pushします。\n$ cat .gitignore *.db t $ git init $ heroku git:remote -a $APP $ git add . $ git commit -m \u0026#34;first\u0026#34; $ git push -u heroku main ここからは、entで作るopen-apiの作り方を紹介します。基本的には、ent/entc.goを作成し、genarateします。\n実は、entでopen-apiの作成はなかなかに面倒で、gormのほうが基本的にはわかりやすく、コードも見通しが良いものになるでしょう。ですが、規模が大きくなると、entのほうがよいapiを作れるのではないかと思います。\n//go:build ignore package main import ( \u0026#34;log\u0026#34; \u0026#34;entgo.io/contrib/entoas\u0026#34; \u0026#34;entgo.io/ent/entc\u0026#34; \u0026#34;entgo.io/ent/entc/gen\u0026#34; \u0026#34;github.com/ariga/ogent\u0026#34; \u0026#34;github.com/ogen-go/ogen\u0026#34; ) func main() { spec := new(ogen.Spec) oas, err := entoas.NewExtension(entoas.Spec(spec)) if err != nil { log.Fatalf(\u0026#34;creating entoas extension: %v\u0026#34;, err) } ogent, err := ogent.NewExtension(spec) if err != nil { log.Fatalf(\u0026#34;creating ogent extension: %v\u0026#34;, err) } err = entc.Generate(\u0026#34;./schema\u0026#34;, \u0026amp;gen.Config{}, entc.Extensions(ogent, oas)) if err != nil { log.Fatalf(\u0026#34;running ent codegen: %v\u0026#34;, err) } } $ go get entgo.io/contrib/entoas ariga.io/ogent $ entc init Todo $ vim ent/schema/todo.go package schema import ( \u0026#34;entgo.io/ent\u0026#34; \u0026#34;entgo.io/ent/schema/field\u0026#34; ) // Todo holds the schema definition for the Todo entity. type Todo struct { ent.Schema } // Fields of the Todo. func (Todo) Fields() []ent.Field { return []ent.Field{ field.String(\u0026#34;title\u0026#34;), field.Bool(\u0026#34;done\u0026#34;). Optional(), } } 最初に作ったentryは削除します。\n$ rm -rf ent/entry* $ rm -rf ent/schema/entry* 続いて、ent/entc.goからファイルを再構成します。\npackage ent //go:generate go run -mod=mod entc.go $ go generate ./... package main import ( \u0026#34;time\u0026#34; \u0026#34;t/ent\u0026#34; \u0026#34;net/http\u0026#34; \u0026#34;context\u0026#34; \u0026#34;log\u0026#34; \u0026#34;os\u0026#34; \u0026#34;database/sql\u0026#34; entsql \u0026#34;entgo.io/ent/dialect/sql\u0026#34; \u0026#34;entgo.io/ent/dialect\u0026#34; _ \u0026#34;github.com/jackc/pgx/v4/stdlib\u0026#34; _ \u0026#34;github.com/lib/pq\u0026#34; \u0026#34;t/ent/ogent\u0026#34; \u0026#34;entgo.io/ent/dialect/sql/schema\u0026#34; ) type User struct { user string `json:\u0026#34;user\u0026#34;` first int `json:\u0026#34;first\u0026#34;` created_at time.Time `json:\u0026#34;created_at\u0026#34;` } func Open(databaseUrl string) *ent.Client { db, err := sql.Open(\u0026#34;pgx\u0026#34;, databaseUrl) if err != nil { log.Fatal(err) } drv := entsql.OpenDB(dialect.Postgres, db) return ent.NewClient(ent.Driver(drv)) } func main() { url := os.Getenv(\u0026#34;DATABASE_URL\u0026#34;) + \u0026#34;?sslmode=require\u0026#34; client, err := ent.Open(\u0026#34;postgres\u0026#34;, url) //client, err := Open(url) if err := client.Schema.Create(context.Background(), schema.WithAtlas(true)); err != nil { log.Fatal(err) } port := os.Getenv(\u0026#34;PORT\u0026#34;) if port == \u0026#34;\u0026#34; { port = \u0026#34;8080\u0026#34; } srv,err := ogent.NewServer(ogent.NewOgentHandler(client)) if err != nil { log.Fatal(err) } if err := http.ListenAndServe(\u0026#34;:\u0026#34; + port, srv); err != nil { log.Fatal(err) } } $ go get t $ go run -mod=mod main.go or $ go build $ ./t -------------------- $ curl -X POST -H \u0026#34;Content-Type: application/json\u0026#34; -d \u0026#39;{\u0026#34;title\u0026#34;:\u0026#34;Give ogen and ogent a Star on GitHub\u0026#34;}\u0026#39; localhost:8080/todos {\u0026#34;id\u0026#34;:1,\u0026#34;title\u0026#34;:\u0026#34;Give ogen and ogent a Star on GitHub\u0026#34;,\u0026#34;done\u0026#34;:false} できました。\n次は、userを作成するapiを作ってみます。\n$ entc init Users package schema import ( \u0026#34;time\u0026#34; \u0026#34;entgo.io/ent\u0026#34; \u0026#34;entgo.io/ent/schema/field\u0026#34; ) type Users struct { ent.Schema } func (Users) Fields() []ent.Field { return []ent.Field{ field.String(\u0026#34;user\u0026#34;). NotEmpty(). Immutable(). MaxLen(7). Unique(), field.Int(\u0026#34;first\u0026#34;). Optional(), field.Int(\u0026#34;draw\u0026#34;). Optional(), field.Time(\u0026#34;created_at\u0026#34;). Optional(). Default(func() time.Time { return time.Now() }), field.Time(\u0026#34;updated_at\u0026#34;). Optional(). Default(func() time.Time { return time.Now() }), } } func (Users) Edges() []ent.Edge { return []ent.Edge{} } $ go generate ./... $ go run -mod=mod main.go -------------------- $ curl -X POST -H \u0026#34;Content-Type: application/json\u0026#34; -d \u0026#39;{\u0026#34;user\u0026#34;:\u0026#34;syui\u0026#34;}\u0026#39; localhost:8080/users {\u0026#34;id\u0026#34;:1,\u0026#34;user\u0026#34;:\u0026#34;syui\u0026#34;,\u0026#34;first\u0026#34;:0,\u0026#34;draw\u0026#34;:0,\u0026#34;created_at\u0026#34;:\u0026#34;2022-02-24T10:15:33Z\u0026#34;,\u0026#34;updated_at\u0026#34;:\u0026#34;2022-02-24T10:15:33Z\u0026#34;} $ !! {\u0026#34;code\u0026#34;:409,\u0026#34;status\u0026#34;:\u0026#34;Conflict\u0026#34;,\u0026#34;errors\u0026#34;:\u0026#34;ent: constraint failed: pq: duplicate key value violates unique constraint \\\u0026#34;users_user_key\\\u0026#34;\u0026#34;} $ curl localhost:8080/users/1 {\u0026#34;id\u0026#34;:1,\u0026#34;user\u0026#34;:\u0026#34;syui\u0026#34;,\u0026#34;first\u0026#34;:0,\u0026#34;draw\u0026#34;:0,\u0026#34;created_at\u0026#34;:\u0026#34;2022-02-24T10:15:33Z\u0026#34;,\u0026#34;updated_at\u0026#34;:\u0026#34;2022-02-24T10:15:33Z\u0026#34;} 以上がentでopen-apiを作成する基本的な手順になると思われます。\nentは、最初はとっつきにくいですが、触っているうちに慣れてくると思うので、おすすめです。\nref : https://entgo.io/ja/docs/tutorial-setup\nhttps://entgo.io/ja/blog/2021/08/05/announcing-upsert-api/\nhttps://entgo.io/ja/blog/2021/09/10/openapi-generator/\nhttps://entgo.io/ja/blog/2022/02/15/generate-rest-crud-with-ent-and-ogen/\n","description":"","formated_time":"2022-02-23","href":"https://syui.github.io/blog/post/2022/02/23/golang/","tags":["go"],"title":"goのentでapi serverを作ってみた","utc_time":"2022-02-23T00:00:00Z"},{"categories":null,"contents":"$ cfdisk /dev/sdb # /dev/sdb1 : 200M, EFI # /dev/sdb2 : 26G, linux $ mkfs.ext4 /dev/sdb2 $ mkfs.vfat /dev/sdb1 $ mount /dev/sdb2 /mnt $ pacstrap /mnt base base-devel linux # paru(rust)のbuildは時間がかかりすぎるし、usbには読み書き負担が大きすぎるのでbinaryを持ってきたほうがいいです $ which paru $ cp /bin/paru /mnt/bin/ $ arch-chroot /mnt $ useradd -m -G wheel -s /bin/zsh syui $ passwd $ passwd syui $ echo -e \u0026#39;Defaults env_keep += \u0026#34;HOME\u0026#34;\\n%wheel ALL=(ALL) ALL\u0026#39; \u0026gt;\u0026gt; /mnt/etc/sudoers $ echo -e \u0026#39;%wheel ALL=(ALL) NOPASSWD: /usr/bin/pacman -Syu --noconfirm, /usr/bin/reboot, /usr/bin/poweroff\u0026#39; \u0026gt;\u0026gt; /mnt/etc/sudoers $ pacman -S grub dhcpcd vim zsh tmux git go openssh net-tools sway xorg-xwayland waybar lightdm lightdm-gtk-greeter networkmanager network-manager-applet blueman pulseaudio pavucontrol udevil pcmanfm chromium fcitx5 fcitx5-mozc # grubは様々なマシンをbootできるimgからもってきてcfgを再構築するといいです $ exit $ cp -rf /boot/{efi,boot} /mnt/boot $ arch-chroot /mnt $ grub-mkconfig -o /boot/grub/grub.cfg # macbook-air特有の問題に対処 $ pacman -S broadcom-wl $ vim /etc/mkinitcpio.conf HOOKS=\u0026#34;base udev block autodetect modconf filesystems keyboard fsck\u0026#34; $ mkinitcpio -p linux $ ln -s /dev/null /etc/udev/rules.d/80-net-setup-link.rules $ vim /etc/systemd/network/eth.network [Match] Name=eth0 [Network] #DHCP=ipv4 Address=192.168.1.xx Gateway=192.168.1.xx DNS=192.168.1.1 $ sudo systemctl enable NetworkManager $ sudo systemctl enable systemd-networkd $ vim /etc/lightdm/lightdm.conf [Seat:*] autologin-user=syui autologin-user-timeout=0 autologin-session=sway $ groupadd -r autologin $ gpasswd -a USERNAME autologin $ sudo systemctl enable lightdm $ vim /etc/locale.gen $ locale-gen $ touch .xprofile # paru -S numix-gtk-theme numix-icon-theme-git $ paru -S arc-icon-theme arc-gtk-theme ttf-font-awesome $ ls /usr/share/{icon*,theme*,font*} $ cp /usr/share/gtk-2.0/gtkrc ~/.gtkrc-2.0 $ vim ~/.gitrc-2.0 gtk-icon-theme-name = \u0026#34;Arc\u0026#34; gtk-theme-name = \u0026#34;Arc\u0026#34; gtk-font-name = \u0026#34;awesome-terminal-fonts\u0026#34; $ sudo systemctl restart lightdm $ pcmanfm $ pacman -S powerline zsh-syntax-highlighting $ source /usr/share/powerline/bindings/zsh/powerline.zsh $ source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh vpnに接続する方法 まずは、pritunl-serverを立ち上げて、profileをdownload(or rewirte)します。\n次に、clientを使い接続します。この辺の仕組みは一度構築すると便利に使えます。usbは外で使う事が多く、local-networkに入るための手段を確立しておくことは重要です。\n[pritunl] Server = https://repo.pritunl.com/stable/pacman $ sudo pacman-key --keyserver hkp://keyserver.ubuntu.com -r 7568D9BB55FF9E5287D586017AE645C0CF8E292A $ sudo pacman-key --lsign-key 7568D9BB55FF9E5287D586017AE645C0CF8E292A $ sudo pacman -Sy $ sudo pacman -S pritunl-client-electron $ sudo pacman -S pritunl-client-electron-numix-theme $ pritunl-client-electron # ここでprofile(.vpn)をimport $ git clone https://github.com/cghdev/gotunl.git $ cd gotunl $ go install $ ./${GOPATH}/bin/gotunl -l $ ./${GOPATH}/bin/gotunl -c 1 ","description":"","formated_time":"2022-02-19","href":"https://syui.github.io/blog/post/2022/02/19/usb/","tags":["arch","usb"],"title":"usbのarchもswayにしてみた","utc_time":"2022-02-19T00:00:00Z"},{"categories":null,"contents":"移行自体はwm(window manager)のi3を使っていたこともあり簡単でした。\n基本的には、dm(display manager)をwayland対応のものにすることと、swayを呼び出すことくらいです。slimから呼び出すと問題が発生します。\n今回はdmをlightdmにしました。\n$ sudo pacman -S sway xorg-xwayland qt5-wayland $ sudo pacman -S lightdm lightdm-gtk-greeter $ sudo systemctl disable slim $ sudo systemctl enable lightdm $ cp -rf ~/.config/i3 ~/.config/sway $ cp -rf ~/.xinitr ~/.xprofile # groupadd -r autologin # gpasswd -a USERNAME autologin /etc/lightdm/lightdm.conf\n[Seat:*] autologin-user=syui autologin-user-timeout=0 autologin-session=sway ~/.xprofile\nexport GTK_IM_MODULE=fcitx export QT_IM_MODULE=fcitx export XMODIFIERS=\u0026#34;@im=fcitx\u0026#34; ~/.config/sway/config\nexec fcitx5 \u0026amp; status bar $ sudo pacman -S waybar $ cat .config/sway/config bar { swaybar_command waybar } 今回は、こちらをもとに設定しました。\nhttps://github.com/201dreamers/sway-config\nblueman-appletやnm-applet, pavucontrolなどを表示、クリックできます。\nあと、rofi-greenclipを入れて、keybindとiconを設定したりしました。\n\u0026#34;custom/clipboard\u0026#34;: { \u0026#34;format\u0026#34;: \u0026#34;{} \u0026#34;, \u0026#34;on-click\u0026#34;: \u0026#34;rofi -modi \u0026#39;clipboard:greenclip print\u0026#39; -show clipboard -run-command \u0026#39;{cmd}\u0026#39;\u0026#34; } bindsym $mod+Shift+x exec rofi -modi \u0026#34;clipboard:greenclip print\u0026#34; -show clipboard -run-command \u0026#39;{cmd}\u0026#39; x11vncが使えなくなったのがつらかったけど、それ以外は今のところ問題ありませんでした。そのうち、keybindあたり不満が出てきそうだけど\u0026hellip;。\nwayvncを試してみたけど、今使ってるclientが対応してないっぽい。\n","description":"","formated_time":"2022-02-13","href":"https://syui.github.io/blog/post/2022/02/13/sway/","tags":["arch"],"title":"archのwmをi3からswayに移行してみた","utc_time":"2022-02-13T00:00:00Z"},{"categories":null,"contents":"\n","description":"","formated_time":"2022-02-12","href":"https://syui.github.io/blog/post/2022/02/12/illust/","tags":["illust"],"title":"イラスト描いてみた110","utc_time":"2022-02-12T00:00:00Z"},{"categories":null,"contents":"msrというmastodon clientでは、macはiterm2のimgcatを使い、linuxはmltermなどでimg2sixelを使って画像アイコンを表示します。\nwindowsの場合は、msys2でsixelをcompileし、minttyで表示できます。\nmsys2をscoopでinstallする場合のpathは~/scoop/apps/msys2/currentになります。\n$ scoop install msys2 $ msys2 $ git clone https://github.com/saitoha/libsixel $ cd libsixel $ pacman -S make gcc $ ./configure $ make $ make install $ mintty $ img2sixel test.png https://github.com/saitoha/libsixel\nwindows terminalもsixelに対応してくれるといいんですけどね。\nhttps://github.com/microsoft/terminal\nhttps://github.com/microsoft/terminal/issues/448\n","description":"","formated_time":"2022-02-11","href":"https://syui.github.io/blog/post/2022/02/11/sixel/","tags":["rust","terminal","sixel"],"title":"windowsでのsixel","utc_time":"2022-02-11T00:00:00Z"},{"categories":null,"contents":"opensslのerrorが出る場合はsudo apt-get install -y -qq pkg-config libssl-devするといいらしい。\nwindowsのbuildやuploadは、同じ内容でも、うまく行ったり行かなかったりしたので、そのうち動かなくなりそう。\nname: release on: push: tags: - \u0026#39;*\u0026#39; jobs: build: name: release binary strategy: matrix: include: - os: macos-latest artifact_prefix: macos target: x86_64-apple-darwin artifact_name: msr asset_name: msr-x86_64-apple-darwin - os: ubuntu-latest artifact_prefix: linux target: x86_64-unknown-linux-gnu artifact_name: msr asset_name: msr-x86_64-unknown-linux-gnu - os: windows-latest artifact_prefix: windows target: x86_64-pc-windows-msvc artifact_name: msr.exe asset_name: msr-x86_64-pc-windows-msvc runs-on: ${{ matrix.os }} steps: - uses: actions/checkout@v1 - name: installing rust toolchain uses: actions-rs/toolchain@v1 with: profile: minimal toolchain: stable override: true components: rustfmt, clippy - name: installing needed macos dependencies if: matrix.os == \u0026#39;macos-latest\u0026#39; run: brew install openssl@1.1 - name: installing needed ubuntu dependencies if: matrix.os == \u0026#39;ubuntu-latest\u0026#39; run: | sudo apt-get update sudo apt-get install -y -qq pkg-config libssl-dev libxcb1-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev sudo apt-get install -y -qq mingw-w64 - name: running cargo build uses: actions-rs/cargo@v1 with: command: build toolchain: ${{ matrix.rust }} args: --release --target ${{ matrix.target }} - name: upload binaries to release uses: svenstaro/upload-release-action@2.1.1 with: repo_token: ${{ secrets.github_token }} file: target/${{ matrix.target }}/release/${{ matrix.artifact_name }} asset_name: ${{ matrix.asset_name }} tag: ${{ github.ref }} overwrite: true ","description":"","formated_time":"2022-02-10","href":"https://syui.github.io/blog/post/2022/02/10/github/","tags":["github","rust"],"title":"github actionsでrustのcross compile","utc_time":"2022-02-10T00:00:00Z"},{"categories":null,"contents":"この前、イラストを描いたやつをtarot-cardに追加したいなって思って、現在の仕組は、以下のようなscriptでcardを生成し、その情報を記述したjsonをvueでimportしてたんですが、毎回buildするのが面倒だと思ったので、jsonの更新のみで対応することにしました。\nこの程度のことはブログに書こうか迷いましたが、どんな些細なことでも、できる限り書いてく方針なので。\n#!/bin/zsh d=${0:a:h} dd=${0:a:h:h} n=`cat $d/static/json/tarot.json|jq \u0026#34;length\u0026#34;` n=`expr $n - 1` bg=$dd/static/img/tarot_bg.png br=$dd/static/img/tarot_br.png font=\u0026#34;/System/Library/Font/ToppanBunkyuGothicPr6N.ttc\u0026#34; for ((i=0;i\u0026lt;=$n;i++)) do p=`cat $d/static/json/tarot.json|jq -r \u0026#34;.[$i].p\u0026#34;` h=`cat $d/static/json/tarot.json|jq -r \u0026#34;.[$i].h\u0026#34;` s=`cat $d/static/json/tarot.json|jq -r \u0026#34;.[$i].src\u0026#34;` s=$dd/static/img/yui_$s.png o=$dd/content`cat $d/static/json/tarot.json|jq -r \u0026#34;.[$i].file\u0026#34;`.png echo \u0026#34;$s -\u0026gt; $o\u0026#34; composite -gravity north -geometry +0+160 -compose over $s $bg $o.back composite -gravity north -geometry +0+0 -compose over $br $o.back $o rm $o.back if [ `echo $h|wc -m` -eq 2 ];then mogrify -font \u0026#34;$font\u0026#34; -fill white -pointsize 200 -annotate +930+2570 \u0026#34;$h\u0026#34; $o else mogrify -font \u0026#34;$font\u0026#34; -fill white -pointsize 200 -annotate +830+2570 \u0026#34;$h\u0026#34; $o fi squoosh-cli --webp \u0026#39;{\u0026#34;quality\u0026#34;:100}\u0026#39; -d $dd/content/ai/tarot/ --resize \u0026#39;{width:400,height:550}\u0026#39; $o done s=$dd/static/img/tarot.png o=$dd/content/ai/tarot/tarot_00.webp composite -gravity north -geometry +0+160 -compose over $s $bg $o [ { \u0026#34;id\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;h\u0026#34;: \u0026#34;title\u0026#34;, \u0026#34;file\u0026#34;: \u0026#34;/ai/tarot/tarot_01\u0026#34;, \u0026#34;src\u0026#34;: \u0026#34;100\u0026#34;, \u0026#34;p\u0026#34;: \u0026#34;text\u0026#34; } ] \u0026lt;template\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;tarot-card-list\u0026#34;\u0026gt; \u0026lt;Loading v-show=\u0026#34;loading\u0026#34;\u0026gt; \u0026lt;vue-loading type=\u0026#34;barsCylon\u0026#34; color=\u0026#34;#99892b\u0026#34; :size=\u0026#34;{ width: \u0026#39;50px\u0026#39;, height: \u0026#39;50px\u0026#39; }\u0026#34;\u0026gt;\u0026lt;/vue-loading\u0026gt; \u0026lt;/Loading\u0026gt; \u0026lt;button @click=\u0026#34;picker\u0026#34; \u0026gt;\u0026lt;i class=\u0026#34;far fa-play-circle\u0026#34;\u0026gt;\u0026lt;/i\u0026gt; START\u0026lt;/button\u0026gt; \u0026lt;p v-if=\u0026#34;cName.file\u0026#34;\u0026gt; \u0026lt;img v-show=\u0026#34;!loading\u0026#34; :src=\u0026#34;cName.file + \u0026#39;.webp\u0026#39;\u0026#34; /\u0026gt; \u0026lt;img :src=\u0026#34;cnt.file + \u0026#39;.webp\u0026#39;\u0026#34; /\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;p v-else\u0026gt;\u0026lt;img :src=\u0026#34;tarotz\u0026#34; /\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;blockquote\u0026gt; \u0026lt;p v-if=\u0026#34;cName.p\u0026#34;\u0026gt;{{ cName.p }}\u0026lt;/p\u0026gt; \u0026lt;p v-else\u0026gt;\u0026lt;strong\u0026gt;タロットカード\u0026lt;/strong\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ cnt.p }}\u0026lt;/p\u0026gt; \u0026lt;/blockquote\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; //import items from \u0026#39;/static/json/tarot.json\u0026#39;; import axios from \u0026#39;axios\u0026#39; import { VueLoading } from \u0026#39;vue-loading-template\u0026#39;; export default { data() { return { items: null, cName: \u0026#34;\u0026#34;, cnt: \u0026#34;\u0026#34;, loading: false, tarotz:\u0026#34;/ai/tarot/tarot_00.webp\u0026#34; } }, mounted() { axios .get(\u0026#39;/json/tarot.json\u0026#39;) .then(response =\u0026gt; (this.items = response.data)) }, components: { VueLoading }, methods: { picker: function(){ this.loading = true; setTimeout(() =\u0026gt; { var cNumber = Math.floor(Math.random() * this.items.length); var cn = Math.floor(Math.random() * this.items.length); this.cName = this.items[cNumber]; while (cNumber === cn) { var cn = Math.floor(Math.random() * this.items.length); }; this.cnt = this.items[cn]; var list_element = document.querySelector(\u0026#34;button\u0026#34;); list_element.remove(); this.loading = false; }, 1200); } } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; img { width:400px; } \u0026lt;/style\u0026gt; axiosでpreviewする際は、public/jsonに同ファイルをおいてやるとできると思います。\n変更前はこんな感じで直接読み込んでました。\nimport items from \u0026#39;/static/json/tarot.json\u0026#39;; import { VueLoading } from \u0026#39;vue-loading-template\u0026#39;; export default { data() { return { items, cName: \u0026#34;\u0026#34;, cnt: \u0026#34;\u0026#34;, loading: false, tarotz:\u0026#34;/ai/tarot/tarot_00.webp\u0026#34; } }, components: { VueLoading }, methods: { picker: function(){ this.loading = true; setTimeout(() =\u0026gt; { var cNumber = Math.floor(Math.random() * items.length); var cn = Math.floor(Math.random() * items.length); this.cName = items[cNumber]; while (cNumber === cn) { var cn = Math.floor(Math.random() * items.length); }; this.cnt = items[cn]; var list_element = document.querySelector(\u0026#34;button\u0026#34;); list_element.remove(); this.loading = false; }, 1200); } } } ","description":"","formated_time":"2022-02-09","href":"https://syui.github.io/blog/post/2022/02/09/vue/","tags":["vue"],"title":"tarot-cardを追加した","utc_time":"2022-02-09T00:00:00Z"},{"categories":null,"contents":"mastodon apiのrust libであるmammutですが、exampleがあるとわかりやすいと思ったので、作ってみました。\nまず、mastodonへのrequestはこんな感じになります。\ncurl -H \u0026#34;Content-Type: application/json\u0026#34; -X POST -Ss https://$host/oauth/token \\ -d \u0026#34;{ \\\u0026#34;client_id\\\u0026#34;: \\\u0026#34;$client_id\\\u0026#34;, \\\u0026#34;client_secret\\\u0026#34;: \\\u0026#34;$client_secret\\\u0026#34;, \\\u0026#34;grant_type\\\u0026#34;: \\\u0026#34;password\\\u0026#34;, \\\u0026#34;username\\\u0026#34;: \\\u0026#34;$username\\\u0026#34;, \\\u0026#34;password\\\u0026#34;: \\\u0026#34;$password\\\u0026#34;, \\\u0026#34;scope\\\u0026#34;: \\\u0026#34;$scope\\\u0026#34; }\u0026#34; mammutではDataとして認証に必要な要素がまとめられてますので、各種要素を入れてMastodon::from_data(data)すると認証できます。\n[package] name = \u0026#34;test\u0026#34; version = \u0026#34;0.0.1\u0026#34; [dependencies] dotenv = \u0026#34;0.15\u0026#34; mammut = \u0026#34;0.13.0\u0026#34; extern crate mammut; extern crate dotenv; use std::env; use mammut::{Data, Mastodon}; fn main() -\u0026gt; mammut::Result\u0026lt;()\u0026gt; { let data = Data { base: env::var(\u0026#34;BASE\u0026#34;).unwrap().into(), client_id: env::var(\u0026#34;CLIENT_ID\u0026#34;).unwrap().into(), client_secret: env::var(\u0026#34;CLIENT_SECRET\u0026#34;).unwrap().into(), redirect: env::var(\u0026#34;REDIRECT\u0026#34;).unwrap().into(), token: env::var(\u0026#34;TOKEN\u0026#34;).unwrap().into(), }; let mastodon = Mastodon::from_data(data); let t = mastodon.verify_credentials(); println!(\u0026#34;{:?}\u0026#34;, t); Ok(()) } export TOKEN=\u0026#39;\u0026#39; export CLIENT_ID=\u0026#39;\u0026#39; export CLIENT_SECRET=\u0026#39;\u0026#39; export REDIRECT=\u0026#39;\u0026#39; export BASE=\u0026#39;https://mstdn.syui.ai\u0026#39; $ cargo run $ ./target/debug/test Data : https://docs.rs/mammut/latest/mammut/struct.Data.html\nsrc/data ちなみに、struct Dataはmammutが用意してるので、作る必要がありませんが、ファイルを分けて、何度も呼び出す場合、下記のようになります。envをやめてconfigにtokenなどを書いて読み込む例です。\nなお、editionを2021にすることで、様々な記法を省略できたりします。\n[package] name = \u0026#34;test\u0026#34; version = \u0026#34;0.0.1\u0026#34; edition = \u0026#34;2021\u0026#34; [dependencies] dotenv = \u0026#34;0.15\u0026#34; mammut = \u0026#34;0.13.0\u0026#34; serde_derive = \u0026#34;*\u0026#34; serde = \u0026#34;*\u0026#34; config = { git = \u0026#34;https://github.com/mehcode/config-rs\u0026#34;, branch = \u0026#34;master\u0026#34; } use config::{Config, ConfigError, File}; use serde_derive::Deserialize; use std::borrow::Cow; #[derive(Debug, Deserialize)] #[allow(unused)] pub struct Data { pub base: Cow\u0026lt;\u0026#39;static, str\u0026gt;, pub token: Cow\u0026lt;\u0026#39;static, str\u0026gt;, pub client_id: Cow\u0026lt;\u0026#39;static, str\u0026gt;, pub client_secret: Cow\u0026lt;\u0026#39;static, str\u0026gt;, pub redirect: Cow\u0026lt;\u0026#39;static, str\u0026gt;, } impl Data { pub fn new() -\u0026gt; Result\u0026lt;Self, ConfigError\u0026gt; { let s = Config::builder() .add_source(File::with_name(\u0026#34;config\u0026#34;)) .build()?; s.try_deserialize() } } pub mod data; use data::Data as Datas; use mammut::{Data, Mastodon}; fn token() -\u0026gt; Mastodon { let data = Datas::new().unwrap(); let data = Data { base: data.base, token: data.token, client_id: data.client_id, client_secret: data.client_secret, redirect: data.redirect, }; let t = Mastodon::from_data(data); return t; } fn main() { let mastodon = token(); let t = mastodon.verify_credentials(); println!(\u0026#34;{:#?}\u0026#34;, t); } token = \u0026#34;\u0026#34; client_id = \u0026#34;\u0026#34; client_secret = \u0026#34;\u0026#34; redirect = \u0026#34;localhost\u0026#34; base = \u0026#34;https://mstdn.syui.ai\u0026#34; $ cargo run home dir ここからは簡潔に紹介します。\n$HOMEを使うにはshellexpandが便利です。\n[dependencies] shellexpand = \u0026#34;*\u0026#34; impl Data { pub fn new() -\u0026gt; Result\u0026lt;Self, ConfigError\u0026gt; { let d = shellexpand::tilde(\u0026#34;~\u0026#34;) + \u0026#34;/.config/msr/config.toml\u0026#34;; let s = Config::builder() .add_source(File::with_name(\u0026amp;d)) .add_source(config::Environment::with_prefix(\u0026#34;APP\u0026#34;)) .build()?; s.try_deserialize() } } toot post fn post() { let mastodon = token(); let message = \u0026#34;test\u0026#34;.to_string(); let status_b = StatusBuilder::new(format!(\u0026#34;{}\u0026#34;, message)); let post = mastodon.new_status(status_b); println!(\u0026#34;{:?}\u0026#34;, post); } timeline fn timeline() -\u0026gt; mammut::Result\u0026lt;()\u0026gt; { let mastodon = token(); let t = mastodon.get_home_timeline()?.initial_items; println!(\u0026#34;{:?}\u0026#34;, t); Ok(()) } toot delete #[allow(unused_must_use)] fn delete() -\u0026gt; mammut::Result\u0026lt;()\u0026gt; { let mastodon = token(); let id = \u0026amp;mastodon.get_home_timeline()?.initial_items[0].id; mastodon.delete_status(id); Ok(()) } upload media media_idsが必要になるので、手順としては、画像をmastodonのmedia serverにuploadする処理と、その出力にあるmedia_idsをtootとしてpostする処理が必要になります。\nuse mammut::{Data, Mastodon, StatusBuilder, MediaBuilder}; fn media() { let mastodon = token(); let file = \u0026#34;./test.png\u0026#34;.to_string(); let t = mastodon.media(file.into()); println!(\u0026#34;{:?}\u0026#34;, t); let id = t.as_ref().unwrap(); let mid = Some(vec![id.id.to_string()]); let status = \u0026#34;#media\u0026#34;.to_string(); let status_b = StatusBuilder { status: status, in_reply_to_id: None, media_ids: mid, sensitive: None, spoiler_text: None, visibility: None, }; let post = mastodon.new_status(status_b); println!(\u0026#34;{:?}\u0026#34;, post); } } StatusBuilder : https://docs.rs/mammut/0.11.0/mammut/status_builder/struct.StatusBuilder.html\ntextも同時に投稿するのはこっち。\nuse std::borrow::Cow; let text = \u0026#34;test\u0026#34;; let s = Cow::Owned(String::from(text)); let status_b = StatusBuilder { status: s, in_reply_to_id: None, media_ids: mid, sensitive: None, spoiler_text: None, visibility: None, }; ref : https://github.com/syui/msr\n","description":"","formated_time":"2022-02-06","href":"https://syui.github.io/blog/post/2022/02/06/rust-mammut/","tags":["rust","mastodon"],"title":"mammutのexampleをまとめてみる","utc_time":"2022-02-06T00:00:00Z"},{"categories":null,"contents":"今までmastodonはzshでapi叩いてやってたんですが、他言語でもclientを作ろうかなと前々から思ってて、今回はrustではじめてみた。\n大抵の場合、本人が使うときにしか機能追加されない模様。\n使ってるうち便利にしていければと思ってます。\nhttps://github.com/syui/msr\n","description":"","formated_time":"2022-02-05","href":"https://syui.github.io/blog/post/2022/02/05/rust/","tags":["rust","mastodon"],"title":"rustでmastodon clientをはじめてみた","utc_time":"2022-02-05T00:00:00Z"},{"categories":null,"contents":"\n","description":"","formated_time":"2022-02-04","href":"https://syui.github.io/blog/post/2022/02/04/illust/","tags":["illust"],"title":"イラスト描いてみた109","utc_time":"2022-02-04T00:00:00Z"},{"categories":null,"contents":"\n","description":"","formated_time":"2022-02-03","href":"https://syui.github.io/blog/post/2022/02/03/illust/","tags":["illust"],"title":"イラスト描いてみた108","utc_time":"2022-02-03T00:00:00Z"},{"categories":null,"contents":"v2.5では八重と雷電がピックアップされる可能性が高いらしいので、それを前提にどんな感じでプレイしていくのかをちょっとだけ考えてみました。\nまず、八重を狙うかについてですが、個人的には狙わない可能性が非常に高いと思っています。様々な理由がありますが、主に八重が雷元素だからです。\n雷電がいるので、雷元素は足りていて、なおかつ、風元素が不足しているため、八重を引いている余裕がありません。\n現在、螺旋12-1,2,3の前半はこんな感じのPTでクリアできました。\nしかし、後半のPTでは、星3でのクリアが難しいと思っていて、この解決には2通りの方法が考えられます。\n1つは、手持ちキャラを育成することです。現在不足している風元素キャラを育成し、PTに組み込めばギリ行けるかもしれないと考えています。\nもう1つは、新しいキャラを引いてPTに組み込む方法です。\n私は、ここで無理やり育成したくないキャラを育成して攻略を目指すより、育成したいキャラが来るまで待って、それを引きクリアを目指すほうがよさそうだと思いました。\nいろいろな理由はありますが、一つは、無理な育成はリソースの無駄遣いにつながる危険が高いと考えるからです。\nしかし、不足している風元素は誰を狙えばいいのでしょう。\nこれは、v2.5あるいはv2.6で復刻される可能性が高い万葉を狙っていきたいと考えています。\n現在は、針刺しを強化している最中です。仮に万葉が来たら、それを渡して、ベネット用の武器を確保しなくてはいけません。\nまとめると、以下のような感じになりそうです。\n万葉を狙う\nベネット1凸できればラッキー\nベネット、万葉、綾華に使えそうな武器を一つ確保する\n原神、ちょっとずつだけど強くなってきた気がするので楽しい。\n","description":"","formated_time":"2022-02-02","href":"https://syui.github.io/blog/post/2022/02/02/genshin/","tags":["genshin"],"title":"原神、v2.5以降の戦略","utc_time":"2022-02-02T00:00:00Z"},{"categories":null,"contents":"今までアタッカーはクレーしかいない状態だったのですが、甘雨が来たので、甘雨をアタッカーとして使ってみた所感です。\n甘雨には、破魔の弓5凸を装備し、聖遺物は楽団です。会心率50%, 会心ダメージ120%なので厳選はできていません。\nこの状態で7,000+15,000くらいのダメージを出します。おそらく、会心ダメが200%~300%なら2発目では20,000以上のダメージが出せると思われます。\n甘雨は爆発が強いと思って引きましたが、重撃運用もできたほうが良いと思い重撃ビルドを採用することにしました。アタッカーが不足していることもあります。\nが、甘雨の重撃、正直、つらいという感想。\nたしかに強いんですが、外れたときのデメリットが大きすぎるし、狙うのは疲れるし、対応できない敵や状況が多すぎると思っていて、無課金でリソースが限られた上で育成するのは、正解だったかどうかわかりません。\nつまり、今回の甘雨を引いたこと、破魔の弓を使っていくことに関しては、非常に微妙な選択だったのかもしれません。もしかしたら、神里のほうがよかったかもしれない。\n今回の強化育成でモラや鉱石等が無くなりました。したがって、武器や聖遺物はそのまま使っていくしかなく、一度計画し、実行したら修正不可能なところは、無課金の面白いところでもあり、難しいところでもあります。\nですが、甘雨は強い。他キャラと比べても、その強さは際立ちます。\n扱いづらさはありますが、他キャラでは対応できない敵に対応できるのも事実ですし、爆発が強すぎる。\nせっかく育成した2体目のアタッカー、甘雨の性能を最大限引き出せるようがんばります。\nクレー、強くない? 話は変わりますが、クレー、使ってる人少ないですよね。\n使ってる人が少ないということは弱いということでもあると思っていて、だから、クレーはずっと弱いキャラだと思ってたんです。\nしかし、最近、クレー強くない?と思い始めています。\nあらゆる場面で使えて、弱点は炎スライムくらい。なんだろう、クレーって実はかなり色々できるんですよね。\n現在は、最大で40,000から80,000ダメージを出せる感じ。80,000はなんかのはずみで出る感じ。\nもちろん、行秋、雷電、鍾離が強すぎるってのはあるんですが、今でもアタッカーで頼れるのはクレーしかいなくて、普通に使ってます。\n正直、クレーがいないと、火力がきつい。\nアタッカーを持ってないからなのか、あるいは、クレーって意外と強いのか。\nクレーは重撃で会心出ると仲間の元素エネルギー回復できるので、クレーの会心ビルドを試したいと思ってるけど、炎魔女、冠の会心率がなかなか出ない。\n","description":"","formated_time":"2022-02-01","href":"https://syui.github.io/blog/post/2022/02/01/genshin/","tags":["genshin"],"title":"原神、甘雨の所感","utc_time":"2022-02-01T00:00:00Z"},{"categories":null,"contents":"現在、武器ガチャはアモスの弓/破天の槍をやっています。\n個人的には、武器が不足している状況や甘雨を引いたことでアモスを狙いたい気持ちもありますが、今回の武器ガチャは回すべきではないと思ったので、そのことについて書きます。\n武器ガチャの基準 理由はいくつかありますが、そもそもアモスが他の弓キャラで使いまわしができない点が挙げられます。\n無課金でやっている人は「使い回しできるか否か」は特に重要な判断基準となります。\n今回は、無課金ユーザーの視点から甘雨をどのように使っていくかや、武器不足にどう対処するかを考えてみたいと思います。\nまずは、回すべき武器ガチャの基準についてです。これは以下のすべての条件が満たされたときのみ、回すことをおすすめします。現に私もこの基準を使って判断しています。\n(1) ピックアップされた2つがともに魅力的であること\n(2) ピックアップされた武器が汎用的なものであること(複数のキャラに使える)\n(3) 星4武器が魅力的であること\nなお、初期ユーザーのみは例外で、星4武器が未所持だと強化して使えないので(無駄になるため)、早めに回し、強化して使っていくほうが効率的だと考えられます。\n今回の武器ガチャに当てはめると、破天の槍、アモスの弓、ともに汎用性がありません。なので、回すべきではないということになります。\nまた、星4も厳しいラインナップだというのが個人的な感想です。\n甘雨とアモス では、アモスを持たない甘雨は使えるのかという話ですけど、私は、甘雨の魅力は他のところにあると考えるので、甘雨を引くことにしました。\n今回はちょっと無課金でプレイする上で、当たり前のことをお話します。\n世間一般で言う最強解(最適解)に囚われてはなりません。\nそれにとらわれてしまうと、課金してしまったり、あるいは原石を無駄にしてしまったりということになりかねないからです。\n無課金プレイヤーが目指すべきなのは、最強ではなく、快適な旅だったり、好きなキャラだったり、あるいは、課金せず以下に工夫して攻略するかだったり、そういったところだと思います。\n原神界で言われている常識、つまり、最強(最適)を目指すべきではありません。\n甘雨には特に、非常にはっきりとした答えがあります。それがアモスです。\nですから、どの情報を見ても「甘雨にはアモス」と教えられます。\nそれはそうでしょう。間違いなく正しい。\nですが、無課金でやる人にとっては、アモスを狙うべきか否かは、非常に難しい問題です。\nそして、私の回答では「狙うべきではない」ということになります。\n例えば、すり抜けで狙うか、あるいは、他キャラにもつけられる終焉や冬極を回し、それを甘雨に装備させるほうがよほどいい選択だと思います。\nこの場合、仮に甘雨を使わなくなっても他キャラが使ってくれることでしょう。\nですから、私の中では、アモスを狙ったり、アモスを強化したりする選択は今のところは考えていません。\n武器不足への対処 とはいえ、私は現在、圧倒的な武器不足です。強化すべきこれといった武器がない状態。しかも、使用キャラに装備させる武器すら用意がない。\n甘雨とベネットには何を装備させたらいいのか、非常に迷っています。\nなので、まずは甘雨に破魔の弓を装備させ、ベネットには鉄蜂の刺しを装備させて様子を見ようと思っています。\nベネバフを考えれば攻撃力高い武器のほうがいいので、鉄蜂の刺しというのは不思議な選択ですよね。\nですが、これって万葉にも普通に使える武器なのです。\nですから、これを作り強化しておくのも悪くないと、そう考えました。\n本当は祭礼があればいいんですけど、ないんですよね。\n仮に祭礼が来ても行秋のために祭礼3凸したいので、どちらにせよ不足しちゃいます。\nということで、鉄蜂の刺しです。\nこんな感じで武器不足への対処を考えていて、決して完璧ではないし、最適でもないけど、自分なりに工夫してやっていけたらと思っています。\n今後の武器ガチャ 今後の武器ガチャについて書きます。\n現状、キャラが増えたので、武器が必要になりました。\nもちろん、キャラ優先ではありますが、余裕があれば、武器ガチャも回すべき時が来るかもしれません。\n今のところ磐岩結緑を狙っていて、この武器は腐らない可能性が高いと考えているからです。\nまた、雷電用に草薙が欲しいですけど、これは優先順位が低めかな。\n","description":"","formated_time":"2022-01-27","href":"https://syui.github.io/blog/post/2022/01/27/genshin/","tags":["genshin"],"title":"原神、甘雨とアモス","utc_time":"2022-01-27T00:00:00Z"},{"categories":null,"contents":"やっとキャラが集まってきたので螺旋に再挑戦してみました。\n鍾離と行秋をPTに加えました。レベルや天賦、聖遺物はまだ素材が集まっていないため、育成されていない状態で使ってる感じです。\n直近では鍾離と行秋を育成していく予定です。\nまだタイムとか全然だけど、甘雨とベネットを育成して、ノエルとバーバラを入れ替えれば、ちょっとはタイムが早くなるかもと考えています。\n","description":"","formated_time":"2022-01-26","href":"https://syui.github.io/blog/post/2022/01/26/genshin/","tags":["genshin"],"title":"原神、螺旋12-3","utc_time":"2022-01-26T00:00:00Z"},{"categories":null,"contents":"ずっと欲しかった鍾離を引きました、うれしい！\n今回は3回目となる無課金者のガチャ内容を紹介していきたいと思います。同じく無課金でやってる人は参考になるかも。\n結果として、今回のガチャでは、28,000あった原石が5,000(-23,000)になるという\u0026hellip;大爆死でした。\n見通しが甘かったのと、天井すら調べてなかったのと、計画性がなさすぎたのが敗因だったと思われます。\n鍾離は早めに出てくれてよかったんですが、次に回した甘雨があまりに出ないので流石に天井を調べたわけですが、天井は28,000とあったので、これはやばいって思いました(今更)。\n今回引いたキャラは、鍾離, 甘雨, ベネット, 行秋(完凸)という感じでした。すべて未所持のキャラです。\nあと、ハズレ交換で香菱を4凸にしました。3凸でした。\n3回目ガチャの感想ですが、鍾離が割と早めに出てくれて、この時点では-6,000くらいだったと思います。しかし、甘雨は、なかなかでなくて-17,000くらいになってしまったという感じだった。\nただ、行秋は未所持から完凸できたので、その点では良かったです。そういえば、行秋が初めての完凸キャラだ。仮に甘雨が早々出てたら行秋は完凸していませんでした。\nとはいえ、今回のガチャで予想以上に原石を消費してしまったので、今後の見通しは立ちません。\nアモスがどっかで出てくれることを祈りつつ、ベネットはハズレ交換やすり抜けで1凸を目指し、風元素のウェンティか万葉が来れば、狙っていくという感じでしょうか。新実装の草神が来れば、それも狙わざるを得えないなあと、そんなようなことをぼんやりと考えてます。\n\u0026hellip;そんなことは置いといて、今は原神を楽しもうって思います。\nようやく増えてきたキャラの育成でいそがしくなるぞー！\nガチャ履歴 参考までに無課金でのガチャ履歴をまとめました。\n今回で3回目のガチャになり、今までずっとキャラ不足でしたが、3回目でようやくキャラが増えはじめてきた感じだと思われます。\n第一回(2021.06) 原石 : -3,000\nキャラ : クレー\n第二回(2021.09) 原石 : -7,000\nキャラ : 雷電\n第三回(2022.01) 原石 : -23,000\nキャラ : 鍾離, 甘雨, ベネット, 行秋(完凸)\n","description":"","formated_time":"2022-01-25","href":"https://syui.github.io/blog/post/2022/01/25/genshin/","tags":["genshin"],"title":"原神、鍾離を引いた","utc_time":"2022-01-25T00:00:00Z"},{"categories":null,"contents":" 今回は、果てのない夢について書いていきたいと思います。\n果てのない夢のその先へ。\n物語 物語は唐突にはじまります。\nある文明の頂点に達した生命体。その生命体は、ある2つの巨大意見に分かれ対立していました。\n対立しているものの、それぞれ目指す場所は同じようでした。\nその生命体が夢みたのは「自らがどのような存在になるか」だったからです。\n一方は永遠の存在を、もう一方は永遠の非存在を夢みたのです。\nこれを果のない夢とそう呼ぶことにします。\nおしまい。\n解説 たった今作ったお話を少しだけ解説することにします。\n私はいかなる文明も最終的に望むことは一つだと思っています。\nただ、その方法については、よりこの世の摂理(原理)を理解したものになるだろうと予想します。\n望むこと。それは「永遠」です。\nそして、この永遠を得るための唯一の手段として考えられたのが、ある2つの意見だったわけです。\nでは、それぞれの意見について内容を見ていきましょう。\nまず私は、この世のすべてには何らかの意識が宿っている可能性があると考えています。\nそのことを前提にお話するのですが、この世で最も小さい物質、最も小さい存在には、いかなる文明も触れられず、それだけが永遠を構成しています。\nこれは、消えることもなければ、崩壊することも、非存在になることもありません。この「最も小さいもの」の作用は、ただ存在することのみ。それだけです。\nしかし、この最も小さい存在なくして、いかなる存在も成り立たない。この世界は、これにより構成されています。\nですが、その上からの存在領域になると、そこからは永遠というものはありません。\n生と死、誕生と崩壊、再生と破壊、あるいは循環を繰り返すだけです。\nここで考えてみてほしいのですが、すべての存在に意識があるなら、その最も小さい存在にも意識はあるのだろうか、その意識とはどんなものなのだろうか、と\u0026hellip;。\n私はこれを「存在の意識」と呼んでいます。\nただ、人間には「神の意識」と表現したほうがわかりやすいかもしれませんね。そういったものであると考えてください。\n話を戻して、その上の存在領域には永遠はなく、生と死を繰り返すことで、ランダムに自らの意識を宿す。\nですが、仮に「最も小さいそのもの」に自らの意識を宿すことができたらどうでしょう。\n今回は、それを目指した文明のお話です。\n宇宙文明、と言っていいのかわかりませんが、極地に達した特殊生命体は、上のような可能性にたどり着き、そして、ある地点まではそれを目指すことになると私は予想しています。\nこれが対立する2つの意見のうちの一つとなります。\nもう一つの意見は\u0026hellip;長くなるので飛ばします。\n簡潔に述べると、宗教的には、輪廻からの解脱と呼ばれるのでしょうか。あまり詳しくないのでわかりませんが、実は上記と同じく不可能なものだと考えられます。\nそれを阻むのは、同じく「最も小さい物質」の存在です。\nというのも、存在とは、存在している以上、存在で有り続けるしかない。\n最も小さい存在の作用は存在し続けることであり、すべてに敷き詰められ、それは、どこにでもあり、どこにもない。\n置き換わることもなければ、成り代わることもなく、消し去ることもできません。\n文明レベルにおいて、その存在は認識すらできない。\n極限の文明レベルにおいても、それがそこにあるだろうと推測できるだけ。アクセス不可能。\nなぜなら、それは存在するけど、存在しないものだから。\nこの2つの意見、どちらが正しいわけでも、間違っているというわけでもありません。\nしかし、どちらも叶わない願い、果てのない夢だと私は思います。\nですが、文明というのは姿かたちを変え、それを目指し続ける。\n私は、この世界は、そのままで正しいと思っています。\nあるがままで正しく、何かをする必要がないのです。\n例えば、すべての存在は、そのすべてが終わると思われたその時、この世界そのものだったことを理解できると、そんな風に思っていて、すべてはひとつであり、ひとつはすべてです。\n仮にそうだとしたら、その願いや夢は既に叶っているのかもしれません。\nあなたは、存在であり、この世界そのものです。それでは不満ですか？\n文明は、不満であると答え、私は、何も答えません。\nそして、文明の答えは正しいし、間違っているわけでもありません。\n","description":"","formated_time":"2022-01-23","href":"https://syui.github.io/archive/note/16/","tags":["note"],"title":"果てのない夢","utc_time":"2022-01-23T00:00:00Z"},{"categories":null,"contents":"mailは全く使ってなくて、spam-mailに分類されてそのまま見ないこともあるため、個人的に、やり取りするには不確実性が高いものになってます。\n私は、gmailをベースにmailgunでaddress(syui@syui.ai)に転送していました。\nただ、2022.1.16あたりからroutingが動いてないことに気づき、mailgun-logを見る限りでは単なるmailgun側の障害だったようですが、その時に送信ができなくなってることに気づきました。(送信自体は全くしないので)\n具体的には、gmailにmailgunのsmtp serverを適用していました。これによって指定のaddressを送信元と表示することができます。\n結論から言うと、mailgunがplan:free -\u0026gt; plan:flexに移行し、昔からのユーザーは、発行しているsmtp serverが裏で動かない状態でした。\n何度か再発行して、UIでは正常に動いているように見えるけど、実は動いてなくて、新たに必要になった登録情報を更新しないとsmtp serverは正常に動作しないようです。\nそんな感じの変化がmailgunにあって、今更気づいたという話です。ちなみに、移行は2020だったらしい。\nで、色々と試している際、cloudflare mailがβ版で登場しており、これは予約制ですが、たまたま通ったので使ってみることにしました。\nhttps://blog.cloudflare.com/ja-jp/introducing-email-routing-ja-jp/\nこれはmailgunでも簡単にできるrouting(受信)を可能にするものです。ただし、smtpなどは今のところなく、送信元にすることはできません。\nなので、しばらくはcloudflare-mailで受信、mailgunで送信を設定していこうかなと思っています。\nなお、gmailでmailgunのsmtpを設定する方法は、gmail mailgun smtpとかで検索すれば良さそう。この設定に関するgoogle(gmail)の公式docsがどこにあるのかちょっとわからなかった。\n","description":"","formated_time":"2022-01-22","href":"https://syui.github.io/blog/post/2022/01/22/mail/","tags":["mail"],"title":"cloudflare mailとmailgun","utc_time":"2022-01-22T00:00:00Z"},{"categories":null,"contents":" 今回は、少し物質的にダークマターの話をしてみることにします。\nいつもと同じく個人的な妄想です。\nみなさま、ダークマターという言葉をご存知ですか？\n知らないという人もいるかもしれませんね。\n私も知りません。\nですが、今回は、未知の物質、ダークマターについて、なんとなく考えてみることにしました。\n一般的に言われているのは、宇宙には説明のつかない未知の力が存在しており、それが作用して、宇宙が構成されていることは、ほぼ間違いないということです。\n特に重力的影響を考えると、ありえない場所にありえない星があったり、集まっていたりすることがあって、その説明にダークマターという力の作用が疑われる場面が多く存在します。\n実は、宇宙には、まだ人間が認識し、把握できていない力の要素がいくつかあります。その全部をひっくるめてダークマターと呼んでいると理解しているのですが、今回は、その多くを占める力の作用について、個人的な考えを書いていきたいと思います。なお、ダークマターは、複数のエネルギーの集合体で呼ばれており、個別には違うものなんだろうと思っていて、例えば、未知のA力+B力+C力があるみたいな感じだと思う。もちろん、その大部分を占めるエネルギーをダークマターと呼ぶのかもしれませんが。\n私が直感するのは、宇宙には重力よりも遥かに弱い持続的な力の作用がいくつか存在しているということです。\nしかし、まずは重力について考えてみましょう。\n重力とは、自然界で最も弱い力の作用と言われています。\n一般人が認識している重力とちょっと違いますよね。\n重力はとても強い力とイメージされているかもしれませんが、実は、重力は最も弱い力と言われています。\nダークマターは、おそらく、重力よりも遥かに弱い力の作用となります。\nですが、力が弱いからといって、影響力が小さいとは限りません。\n重力も同じで、最も力は弱いけど、環境を構築していくものです。\n現在の科学の認識では、重力=環境といっても間違いではありません。\nしかし、私の予想では、ダークマター=環境と考えられる日が来るかもしれません。\nダークマターを重力よりも遥かに力は弱いが、重力よりもさらに環境構築に起因する要素だと考えているからです。\nダークマターがどのようなものか、私には想像しかできませんが、おそらく、それは人が認識できるまでに時間がかかるものだと思います。\n例えば、ダークマターの影響を人間が認識できる値で1とします。\nダークマターは非常に持続的に蓄積され、例えば、1億年で0.1を蓄積すると考えてみましょう。\nとすると、人が認識できる値の変化になるまでに10億年かかる計算になります。それを捉えることは難しい。\nまた、イメージでは霧に近いと思っていて、あくまでその作用が霧みたいなものではないかという話ですが、宇宙で霧というのはかなり厄介なものだと思います。\n例えば、地球が霧の中にあったとしましょう。\n仮にそのような場合、霧の中にいることが認識できない可能性が高い。\nなぜなら、霧の中の世界が当たり前であって、それが標準であり、通常だと思いこんでしまうからです。\nですから、霧のない状態を0として計算しなければいけないところを、霧がある状態を0として計算してしまう危険があります。または、このような場合、-1から計算しなければいけなかったなんてこともあるのではないでしょうか。\n宇宙科学者にとって、どこまでが当たり前で、どこまでが当たり前ではないことか、私にはわかりません。\nこういったことも考慮されているのかもしれませんし、ダークマターについて、わかっていることも多いのかもしれません。\nダークマター、あるいはその一部が証明される日を心待ちにしています。\n","description":"","formated_time":"2022-01-22","href":"https://syui.github.io/archive/note/15/","tags":["note"],"title":"ダークマター","utc_time":"2022-01-22T00:00:00Z"},{"categories":null,"contents":"このまえバッジを作ってみました。\n全部で4つ作って、2つは人に送り、2つは自分の手元に残った感じ。\nたまにデスクの写真載せるので、気になる人はどうぞ(自分も他人のデスク見るの好き\n/photo\n","description":"","formated_time":"2022-01-21","href":"https://syui.github.io/blog/post/2022/01/21/badge/","tags":["badge","make"],"title":"バッジ作ってみた1","utc_time":"2022-01-21T00:00:00Z"},{"categories":null,"contents":" もしなんでもできるなら、あなたは何をしますか？\n今回は、私が考える神というものについて書いていきたいと思います。\nまずはじめに、神はいるのかいないのか。\n私は、それについての答えを持ち合わせていません。\nいるとも言えるし、いないとも言えると、そう考えているからです。\n神はいると言う人に対して、私は「そうだね」と答えます。\n反対に、神はいないと言う人に対しても、私は「そうだね」と答えます。\nこれは、一見、矛盾しているように見えますが、私の中では矛盾していません。\nこの世の中には、正しいことしかない、そんな風に感じることがとても多い。\nつまり、「どちらも正しく、どちらも間違いではない」のです。\nですから、他人の考えに対して「そうだね、それも正しいし、それも間違いではないよ」と答えてしまったり、思ってしまったりする事が多いのです。\nしかし、私が考える神というものは、人が考える一般的なそれとは大きく異なるかもしれません。\nですから、まずは、私が考える神というものについて、少し説明しなければいけません。\nここで勘違いしてほしくないのは、私が「神はいる」と考えているわけでもないということです。\n仮に定義するなら、私はすべてであると答えます。\n実は、言語と意識や心(気持ち)というものは全く異なるものです。\n例えば、人間の言葉で表現した瞬間、それは、意識や心(気持ち)とは別のものになったりすることが多い。\nしかし、あえて私が感じていることを言葉で表現するなら、私は、この世に存在するすべてを神とみなす。\nですが、これでは人が考える神というものとあまりに乖離するため、私はもう少し違った形で表現したいと思います。\nそこで、最初の問いです。\n「もしなんでもできるなら、あなたは何をしますか？」\nどうでしょう。これについての答えを考えてもらえましたか。\nおおよそ人は、なんでもできるものを神と呼ぶらしい。\nですから、もし自分がなんでもできる、そんな存在になったと仮定するなら、あなたは何をするのでしょう。\n私の答えは決まっていて「おそらく、なにもしないだろう」というものになります。\n一体なぜでしょう。\nなんでもできるなら、例えば、美少女と恋人になるとか、お金持ちになるとか、成功者になるとか、または、神になるとか、あるいは、持病を治すとか、そんなことをまっさきに思いついた人がいるかもしれません。\nですが、私は、私個人としても、あるいは、神になったと仮定した存在においても、おそらく、なにもしないという選択を取ると思われます。\nですから、そのことを率直に表現した言葉が「おそらく、なにもしないだろう」です。これは、単なる感覚であり、感情です。\n私は、私として、ただ、あるがまま、このような答えを出しました。\nそれは大それたことでもなく、ただ環境があり、そして、その環境によって私がいるだけで、その答えがこれだということに過ぎません。つまるところ、環境が良ければいいやつ、環境が悪ければ悪いやつ。それだけの話だと思います。\n私がこんなふうに考えるのも、実のところ、私が考えたとかではなく、たまたまなのです。\n偶然、私は、この世界をそんなふうに感じている、それだけです。\n他の人の答えも、私の答えと変わりはありません。それがどのようなものであっても、ただ、あるがままなのです。\nさて、なんでもできる神のような存在になったら何をするのかという話でした。\n私の答えはなにもしないというものでした。\nこれは、この問いに対して私が瞬間的に感じたことに過ぎません。\n実は、私はなんらかの問いに対して、瞬間的に答えが出ていることが多く、これまでの哲学的な記事は大抵そういったものになっています。\n今回もその類なのですが、なぜそのように答えたのかも、多少は説明することが可能となります。\n私が考えるこの世界は存在の世界であり、あらゆるもの、つまり、すべては、存在です。\nここからは以前書かなかったことですが、存在は、そのすべてがある種の意識を持つと考えています。\nそれがどういった形になるのか、人間である私には想像も及びません。とはいえ、人に想像できるものではない事が多いと思います。例えば、岩の意識はどういったものかなどですね。\n確かに、岩は物体であり、そんな生きてもいないものなんかに意識なんてあるはずないと考えられる人もいると思います。\nそれは間違いではないし、正しいことです。\nですが、意識があるという考えもまた、私にとって正しく、間違いではないのです。\nここで何が言いたいのかというと、私は、すべてのものには何らかの意識が宿っている可能性を考えていて、それが、何もしない選択につながるということです。\n例えば、植物はどうだろう、虫はどうだろう、人はどうだろう、石はどうだろう、細胞はどうだろう、ウィルスはどうだろう、地球はどうだろう。人の体の中で動き回っている寄生虫や細胞なんかはどうだろう。なんらかの意識はあるのだろうか。\n考えれば考えるほど、あらゆるものに境界線がないことがわかるでしょう。\n私達は意識を持ち、私達の体の中にも意識を持つと考えられる様々なものが動き回り、では一体、何に意識があって、何に意識がないのだろう。\n私の答えは、全てに意識はある、でした。\n実は、地球などの大きいものにもあると考えています。\nこれは、私達の体の中で動き回るそれぞれに意識があるのに、私達にも意識があることが関係しています。\nもちろん、宇宙にもあるし、その外にだってあると考えます。反対に小さいもの、例えば、原子にも意識はあると考えます。\nただ、その意識というものが、どういった形になるのか、人間である私達には想像が及ばないものです。\nモノの記憶というものについて聞いたことはありますか？\n物体には、身の回りの出来事をある種の記憶をすることがあって、そういったものを読み取れる人がたまにいます。\n記憶というのも、一種の意識の一つだと思います。\nつまり、私達が認識している世界は、この世界のほんの一部に過ぎないということです。\n話を戻すと、私はこんな風にこの世界を見ており、すべての存在に意識があるとそう考えているのです。\nそして、意識を持つ存在一つ一つに対して、その形を変えること、変わっていくことには、一種の苦痛を伴うことも知っています。あるいは、そう推測しています。\nただ、それぞれの存在に対して、それがどのような苦痛になるのかは難しい問題です。\n例えば、殴られたことが一度もない人が殴られるのと、ボクサーが殴られるのとでは、同じ力でも痛みが違ってきます。\n痛みを感じる器官が存在しないとしても、その変化や苦痛は、その存在にとっては大きなものなのかもしれません。\nでは、最初の問いに戻りましょう。\n「もしなんでもできるなら、あなたは何をしますか？」\nここで、私が「こいつはいいやつだから、長生きさせてやろう」と考えたとします。\n私はなんでもできるので、そんなこともできるのです。\nしかし、その人が長生きするということは、その人の周りにある他の存在は、例えば、物だったり、植物だったり、食料となる動物だったりが、消費され、傷つき、変化していく、ということでもあります。\nそれ自体は悪いことでもなく、いいことでもありません。\nですが、私にとって、この世のすべては等しく愛すべきものです。\nですから、私が何かを優遇したり、あるいは劣遇することはなく、結果として、私はなにもしないでしょう。\n例えば、神に祈りを捧げたやつは優遇しよう。反対に神を信じない愚か者はひどい目に合わせよう、などのようなことは考えません。\n神に祈りを捧げる人も、捧げない人も、信じる人も信じない人も、全てを等しく、あるがまま見守るだけなんだろうなと、そんなふうに思いました。\nこのようなことを書くと「神に祈りを捧げたやつは助かっているぞ」と言う人がいるかもしれません。\nですが、私は、神に祈りを捧げたか否かに関わらず、たまたま助かった人、たまたま助からなかった人がいるだけだと答えます。仮に神に祈りを捧げたにもかかわらず助からなかった人の話は人間からはなかなか上がってこないので、そういった事が起こるのだろうと、仕組みを説明します。\nもしなんでもできるなら、おそらく、私は何もしないでしょう。\nなぜなら、すべての存在が等しく同じで愛おしいのなら、そうするしかないからです。\nあるいは、私の言葉に言い直して、この世界は存在の世界。存在とはこの世界そのもの、すべてであると。\nそんなことを思います。\nですが私は、人として、いろんなことをやっていきたいと思っています。\nそのへんは勘違いのないように。\n","description":"","formated_time":"2022-01-21","href":"https://syui.github.io/archive/note/14/","tags":["note"],"title":"神がやること","utc_time":"2022-01-21T00:00:00Z"},{"categories":null,"contents":"$ yarn add vue-loading-template https://github.com/jkchao/vue-loading\ndemo : https://jkchao.github.io/vue-loading/\nローディング処理はv-showで変数を指定すればOKです。\n今回はボタンをクリックするとnameに文字列を入れる処理が入るのですが、その処理まで1.2s待機するようにしています。その間、ローディングが表示される仕組み。\n\u0026lt;template\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;Loading v-show=\u0026#34;loading\u0026#34;\u0026gt; \u0026lt;vue-loading type=\u0026#34;barsCylon\u0026#34; color=\u0026#34;#99892b\u0026#34; :size=\u0026#34;{ width: \u0026#39;50px\u0026#39;, height: \u0026#39;50px\u0026#39; }\u0026#34;\u0026gt;\u0026lt;/vue-loading\u0026gt; \u0026lt;/Loading\u0026gt; \u0026lt;button @click=\u0026#34;picker\u0026#34; \u0026gt;start\u0026lt;/button\u0026gt; \u0026lt;p v-show=\u0026#34;!loading\u0026#34;\u0026gt;{{ name }}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import { VueLoading } from \u0026#39;vue-loading-template\u0026#39;; export default { data() { return { name:\u0026#34;\u0026#34;, loading: false } }, components: { VueLoading }, methods: { picker: function(){ this.loading = true; setTimeout(() =\u0026gt; { // ここに処理\tthis.name = \u0026#34;test\u0026#34;; this.loading = false; }, 1200); } } } \u0026lt;/script\u0026gt; import Vue from \u0026#39;vue\u0026#39; import App from \u0026#39;./App.vue\u0026#39; Vue.config.productionTip = false new Vue({ render: h =\u0026gt; h(App) }).$mount(\u0026#39;#app\u0026#39;) ","description":"","formated_time":"2022-01-14","href":"https://syui.github.io/blog/post/2022/01/14/vue/","tags":["vue"],"title":"vueでloadingを作る","utc_time":"2022-01-14T00:00:00Z"},{"categories":null,"contents":"雰囲気タロット占い作りました。\n/ai/tarot\n解釈やルールは皆様におまかせします。1日1回占ってみてはどうでしょう(適当)。\nちなみに、私は占いをやったことも、してもらったことも一度もなくて、タロットカードも全然知りませんが、雰囲気で作りました。\nあと、この前から気になってたこのサイトのディレクトリ問題を一部解消しました(ついでに)。\n前はroot下においてたgame, manga関連をすべて/ai直下に変更しました。hugoではindex.mdと_index.mdの挙動が異なります。index.mdはディレクトリが作れませんが_index.mdは作れますので。\nただ、リンクが変わったので、どこかでリンク切れを起こしてる危険があり、aliasを設定しといたほうがいいかも(やってない)。\n","description":"","formated_time":"2022-01-13","href":"https://syui.github.io/blog/post/2022/01/13/illust/","tags":["illust"],"title":"雰囲気タロット占い","utc_time":"2022-01-13T00:00:00Z"},{"categories":null,"contents":"過去のイラストを見ていて、あまりうまく描けなかったやつを修正しました。\n何度かお絵かきをしていると、うまくかけたやつと、うまくかけなかったやつが出てきます。\n修正においては、過去にうまくかけたやつを参考にすると、比較的、楽にできます。\n参考になりそうなポーズ(構図)もいくつか追加できたので良かった。\n","description":"","formated_time":"2022-01-12","href":"https://syui.github.io/blog/post/2022/01/12/illust/","tags":["illust"],"title":"過去絵を修正してみた","utc_time":"2022-01-12T00:00:00Z"},{"categories":null,"contents":"前々から修正した絵の一覧があれば便利だなあと思ってたことから、色々と追加。\n最近修正した絵をcommit logから拾うようにしました。terminalの$ ai cコマンド(オプション)から飛べるようにしました。\n$ ai c jsonからimg pathを取ってきてvueで表示する方針でやります。以下は、簡単なexmapleです。\nimport Vue from \u0026#39;vue\u0026#39; import App from \u0026#39;./App.vue\u0026#39; Vue.config.productionTip = false new Vue({ render: h =\u0026gt; h(App) }).$mount(\u0026#39;#app\u0026#39;) \u0026lt;template\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;p\u0026gt;1week commit /static/img/\u0026lt;/p\u0026gt; \u0026lt;div v-for=\u0026#34;item in items\u0026#34; :key=\u0026#34;item.id\u0026#34;\u0026gt; \u0026lt;p\u0026gt;\u0026lt;a :href=\u0026#34;item.file\u0026#34;\u0026gt;\u0026lt;img :src=\u0026#34;item.file\u0026#34; /\u0026gt;\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import items from \u0026#39;/static/json/img.json\u0026#39;; export default { data() { return { items } } } \u0026lt;/script\u0026gt; /static/json/img.jsonはこんな感じで作成。\n$ git --no-pager log --since=1.weeks --name-status |grep \u0026#34;\\.png\u0026#34; #!/bin/bash mkdir -p ./static/json echo \u0026#39;[]\u0026#39; \u0026gt;\u0026gt; ./static/json/img.json s=`git --no-pager log --since=1.weeks --name-status |grep -e \u0026#34;A\\t\u0026#34; -e \u0026#34;M\\t\u0026#34; |grep \u0026#34;static/img/\u0026#34;|grep \u0026#34;\\.png\u0026#34;|cut -d / -f 3|sort|uniq` n=`echo \u0026#34;$s\u0026#34;|wc -l` for ((i=1;i\u0026lt;=$n;i++)) do t=`echo \u0026#34;$s\u0026#34;|awk \u0026#34;NR==$i\u0026#34;` cat ./static/json/img.json|jq \u0026#34;.+[{\\\u0026#34;id\\\u0026#34;:\\\u0026#34;$i\\\u0026#34;,\\\u0026#34;file\\\u0026#34;: \\\u0026#34;/img/$t\\\u0026#34;}]\u0026#34; \u0026gt;\u0026gt; ./static/json/img.tmp mv ./static/json/img.tmp ./static/json/img.json done これを$ yarn buildとかすればOKです。\n{ \u0026#34;name\u0026#34;: \u0026#34;sample-vue-project\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;0.0.1\u0026#34;, \u0026#34;private\u0026#34;: true, \u0026#34;scripts\u0026#34;: { \u0026#34;serve\u0026#34;: \u0026#34;vue-cli-service serve\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;vue-cli-service build\u0026#34;, \u0026#34;lint\u0026#34;: \u0026#34;vue-cli-service lint\u0026#34; }, \u0026#34;dependencies\u0026#34;: { \u0026#34;core-js\u0026#34;: \u0026#34;^3.6.4\u0026#34;, \u0026#34;vue\u0026#34;: \u0026#34;^2.6.11\u0026#34; }, \u0026#34;devDependencies\u0026#34;: { \u0026#34;@vue/cli-service\u0026#34;: \u0026#34;~4.5.15\u0026#34; } } module.exports = { configureWebpack: { output: { filename: \u0026#39;[name].js\u0026#39;, chunkFilename: \u0026#39;[name].js\u0026#39; } }, css: { extract: { filename: \u0026#39;[name].css\u0026#39;, chunkFilename: \u0026#39;[name].css\u0026#39; }, }, } $ yarn install $ yarn serve $ yarn build hugoと組み合わせている場合は、templateを書けばOKです。書き方は人それぞれ。\n$ cp -rf ./dist/*.js ./static/js/ $ cp -rf ./dist/*.map ./static/js/ $ cp -rf ./dist/*.css ./static/css/ \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/css/app.css\u0026#34; /\u0026gt; \u0026lt;div id=app\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script src=/js/chunk-vendors.js\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=/js/app.js\u0026gt;\u0026lt;/script\u0026gt; {{ partial \u0026#34;head.html\u0026#34; . }} {{ partial \u0026#34;header.html\u0026#34; . }} {{ partial \u0026#34;app.html\u0026#34; . }} {{ .Content }} \u0026lt;/div\u0026gt; {{ partial \u0026#34;footer.html\u0026#34; . }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; ","description":"","formated_time":"2022-01-10","href":"https://syui.github.io/blog/post/2022/01/10/vue%E3%81%A7%E9%81%8E%E5%8E%BB%E7%B5%B5%E3%81%AE%E4%BF%AE%E6%AD%A3%E3%82%921%E9%80%B1%E9%96%93%E5%8D%98%E4%BD%8D%E3%81%A7%E8%A1%A8%E7%A4%BA%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F/","tags":["vue"],"title":"vueで過去絵の修正を1週間単位で表示してみた","utc_time":"2022-01-10T00:00:00Z"},{"categories":null,"contents":"ドラゴン装備集め終わった。久々にマルチやって、賑わってたので楽しかった。\n","description":"","formated_time":"2022-01-09","href":"https://syui.github.io/blog/post/2022/01/09/pokemas/","tags":["pokemon","pokemas"],"title":"ポケマス、ドラゴン装備","utc_time":"2022-01-09T00:00:00Z"},{"categories":null,"contents":"原神では、v2.4で1/25から鍾離の復刻ガチャが来ます。この時を待ってました\u0026hellip;。\nということで、個人的に3回目のガチャになりそう。\nこれでキャラガチャは1回目がクレー、2回目が雷電、3回目が鍾離になる感じ。\nなお、甘雨は迷ってる模様。\n神里と甘雨なら神里を引きたいと思っていて、ですが、樽を爆破する赤い試練あるじゃないですか。あれ、全くやってないんですよね。育成してる弓キャラいないので、やる気でなくて。甘雨がいればやると思う。使用キャラでやりたいってのがある。\n話は変わりますが、現在の個人的な戦略は、各元素で最強のキャラを一人ずつ引いていくことと、余裕があれば凸を狙っていくことを考えています。\n凸に関しては、私が最も優先すべきと考えるのが雷電と鍾離です。この二人なら雷電が優先です。\n雷電はもちろんのこと、鍾離も完凸がおすすめだと個人的には思っていて、鍾離の完凸(HP回復)は後々必要になってくるのではと考えています。\nこの2名に関しては、今後、PTから外れることがあまり考えられないため、PTから外れる可能性のある各キャラを2凸するより、今後も使い続けるキャラの完凸を目指したほうがいいという考えです。\nですが、これはあくまで強いキャラが各元素で揃ってる場合の話であり、まず最優先すべきは、強キャラを無凸で揃えることだと思います。\n例えば、鍾離完凸と鍾離+雷電+万葉+神里+甘雨+胡桃の無凸では、どちらが攻略に有利でしょう。\nこれは圧倒的に後者だと思われます。\nしかし、鍾離完凸と万葉+神里+胡桃の各2凸ずつはどうでしょう。\n難しいですが、現時点では後者だと思います。ですが、将来的には前者になりうる可能性があります。使わなくなると、凸の意味はなくなるからです。\nしたがって、せっかく凸するなら使い続けるキャラにしたほうがいい。\nそれが現時点での雷電と鍾離ということになると思います。\nこれは武器に関しても同じです。他キャラは無凸、この2名だけ集中投資するのが一番いいと思う。\n私は無課金なので、強いキャラは雷電しか持っておらず、キャラを集めるところからですけどね。\nクレーを引いてよかった 私が原神を始めたきっかけはクレーが可愛いかったからなんです。\n未だにフィールドはクレーです。\n足が速い高身長キャラやモナのほうが効率はいいのですが、ずっとクレーを使ってる。\n好きなキャラで好きなように冒険するのが一番。\nクレーを最初に引いてよかった。\n","description":"","formated_time":"2022-01-08","href":"https://syui.github.io/blog/post/2022/01/08/genshin/","tags":["genshin"],"title":"原神、鍾離復刻","utc_time":"2022-01-08T00:00:00Z"},{"categories":null,"contents":"キュレムは前半に全然出なかったけど、後半すごかった。色違い、交換キラ、個体値100という結果。キュレムは原作では合体(融合)できて、個体値とか色違いはキュレムベースになるので、レシラム、ゼクロムと合わせてとっておきましょう。\n5年やってて伝説100が3体になりました。ユクシーも100いた気がするんだけど、間違えて逃しちゃったんだろうか。\n","description":"","formated_time":"2022-01-07","href":"https://syui.github.io/blog/post/2022/01/07/pogo/","tags":["pokemon","pogo"],"title":"ポケモンGo、キュレム","utc_time":"2022-01-07T00:00:00Z"},{"categories":null,"contents":"blogのlayoutをちょっとだけ変更しました。\n変更点を簡単に説明します。\nまず上のメニューですが、項目が多すぎたので減らしました。\n全部を/aiに放り投げました。\nできる限りシンプルな見た目にしようと思っていたため、かつてこのサイトはテーマカラーの朱色のみでした。\nしかし、snsアイコンの追加により少しだけカラフルになりました。また、緑が足りないので、githubの芝を追加しました。\n本当はmastodonのアイコンも追加したかったけど、twitterと青色がかぶるのでやめました。色もそうですが、アイコンも多すぎると分かりづらいと思ったので、数は限定していく方向で。\n自己紹介やサイトマップ、ヒントの文字数も減らしました。\n以上です。\n","description":"","formated_time":"2022-01-03","href":"https://syui.github.io/blog/post/2022/01/03/hugo/","tags":["hugo","blog"],"title":"blogのlayoutを変更した","utc_time":"2022-01-03T00:00:00Z"},{"categories":null,"contents":"archlinux-armの方なんだけど、goがcould not fully load metadata for packageのerrorでupdateできなかった。\npackageのdesc, filesあたりを消して破損したmetadataは削除後にインストールしました。\n$ touch /var/lib/pacman/local/go-xxx/desc $ touch /var/lib/pacman/local/go-xxx/files $ pacman -S go --overwrite \u0026#39;*\u0026#39; 修正する過程で面白そうなブログ見つけた\nhttps://jeffreytse.net/\n","description":"","formated_time":"2022-01-02","href":"https://syui.github.io/blog/post/2022/01/02/arch/","tags":["arch"],"title":"archlinuxの'could not fully load metadata for package'のerror","utc_time":"2022-01-02T00:00:00Z"},{"categories":null,"contents":"昔、gitlabのを表示していたことがありましたが、apiの変更があったので、今回はgithubの芝を生やしてみました。\n現在、githubでは以下のurlにて芝の情報を取得できます。\n$ curl -sL https://github.com/users/$USER/contributions しかし、データは加工されていない状態で使いづらいので、以下のapiを使います。\nhttps://github-contributions-api.deno.dev/\n開発者 : https://zenn.dev/kawarimidoll/articles/b573f617a51c0b\n$ curl -sL https://github-contributions-api.deno.dev/$USER.json これをcal-heatmapで表示します。\n# sample date $ curl -sL https://cal-heatmap.com/datas-years.json $ bower install cal-heatmap 使い方は見ての通りですが、exampleを紹介します。\n\u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;//d3js.org/d3.v3.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;//cdn.jsdelivr.net/cal-heatmap/3.3.10/cal-heatmap.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;//cdn.jsdelivr.net/cal-heatmap/3.3.10/cal-heatmap.css\u0026#34; /\u0026gt; \u0026lt;div id=\u0026#34;example-b\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; var cal = new CalHeatMap(); cal.init({ itemSelector: \u0026#34;#example-b\u0026#34;, domain: \u0026#34;month\u0026#34;, data: \u0026#34;/datas-years.json\u0026#34;, start: new Date(2021, 0), cellSize: 9, range: 15, previousSelector: \u0026#34;#example-b-PreviousDomain-selector\u0026#34;, nextSelector: \u0026#34;#example-b-NextDomain-selector\u0026#34;, legend: [2, 4, 6, 8] }); \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; div#example-b{ margin-right: auto; margin-left: auto; } .cal-heatmap-container { width: 100%; } \u0026lt;/style\u0026gt; ただし、表示速度などの問題からbowerなどで同web-server上にインストールしたほうがいいでしょう。\n\u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;/bower_components/d3/d3.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;/bower_components/cal-heatmap/cal-heatmap.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/bower_components/cal-heatmap/cal-heatmap.css\u0026#34; /\u0026gt; jsonは以下のように形成すればよさそう。\n$ curl -sL https://github-contributions-api.deno.dev/$USER.json|jq \u0026#34;.|del(.totalContributions)|.[]|.[]|.[]|{(.date+\\\u0026#34;T00:00:00Z\\\u0026#34;|fromdate|tostring):(.contributionCount)}\u0026#34;|jq -n \u0026#39;[inputs] | add\u0026#39; { \u0026#34;1640822400\u0026#34;: 18, \u0026#34;1640908800\u0026#34;: 5, \u0026#34;1640995200\u0026#34;: 8, \u0026#34;1641081600\u0026#34;: 2 } これはcal-heatmapの仕様だと思いますが、dateがunixtimeなのと、keyにdateを入れるフォーマットに注意。\nもし更新が必要なら、定期にgh-actionsを回せば良さそう。更新頻度が高くなければ、hugo build時でもいいですが、更新頻度が高く、かつ最新にこだわらないなら、1週間とか3日とかの間隔でいいかもしれません。常時だとapiやgh-actions側の負担になりますので。\n./static/json/cal.jsonと${{github.actor}}に注意してください。\nname: push json github contribution on: push: branches: - src schedule: - cron: \u0026#39;00 00 * * 0\u0026#39; jobs: comment: runs-on: ubuntu-latest steps: - uses: actions/checkout@v1 - name: install jq env: WORKFLOW_FILE_PATH: ${{ github.workflow }} GITHUB_REPOSITORY: ${{ github.repository }} run: | sudo apt-get install -y jq curl - name: get json run: | curl -sL https://github-contributions-api.deno.dev/${{ github.actor }}.json|jq \u0026#34;.|del(.totalContributions)|.[]|.[]|.[]|{(.date+\\\u0026#34;T00:00:00Z\\\u0026#34;|fromdate|tostring):(.contributionCount)}\u0026#34;|jq -n \u0026#39;[inputs] | add\u0026#39; \u0026gt;\u0026gt; ./static/json/cal.json.tmp mv ./static/json/cal.json.tmp ./static/json/cal.json cat ./static/json/cal.json|jq . git config --local user.email \u0026#34;action@github.com\u0026#34; git config --local user.name \u0026#34;GitHub Action\u0026#34; if [ -z \u0026#34;`git status -s`\u0026#34; ];then exit fi git add ./static/json/cal.json git commit -m \u0026#34;push json github contribution\u0026#34; - name: Push changes uses: ad-m/github-push-action@master with: github_token: ${{ secrets.GITHUB_TOKEN }} branch: src ","description":"","formated_time":"2022-01-02","href":"https://syui.github.io/blog/post/2022/01/02/github/","tags":["github"],"title":"blogにgithubの芝を生やした","utc_time":"2022-01-02T00:00:00Z"},{"categories":null,"contents":"\n","description":"","formated_time":"2022-01-01","href":"https://syui.github.io/blog/post/2022/01/01/illust/","tags":["illust"],"title":"イラスト描いてみた107","utc_time":"2022-01-01T00:00:00Z"},{"categories":null,"contents":"お絵描きしてました。\n新年も近いので新年のイラスト、ということにしておこう。\n今年はどんな年だったか、あまり覚えてないので、特に何もやってなかった気がする。\n来年はいろんなことをやっていきたい。\n","description":"","formated_time":"2021-12-30","href":"https://syui.github.io/blog/post/2021/12/30/illust/","tags":["illust"],"title":"イラスト描いてみた106","utc_time":"2021-12-30T00:00:00Z"},{"categories":null,"contents":"kuina-chan\n","description":"","formated_time":"2021-12-26","href":"https://syui.github.io/blog/post/2021/12/26/illust/","tags":["illust"],"title":"くいなちゃん描いた2","utc_time":"2021-12-26T00:00:00Z"},{"categories":null,"contents":" 原神をプレイしています。\n美しい世界で旅ができますので、おすすめです。\nもし最初からプレイするなら もし最初からプレイするならどうするのかという視点で現在の最適解を作成します。\n原神を始めたばかりの人は参考になると思います。高難易度コンテンツはクリアしていますが、幽境のアルティメットは突破していません。螺旋12, 幻想12, 幽境エクストラをクリアできる状態です。\n2025-10-30 現在、高難易度コンテンツをクリアするには、ナタ、ルナのキャラクターが必要で、かつキャラクターをセットで考える必要があります。単体では火力が出せません。したがって、ナタ、ルナで強いキャラをセットで保有する必要があります。また、幽級のアルティメットの攻略は完凸(c6)が必要になるかもしれません。\nマーヴィカ、シロネン、シトラリ ネフェル、ラウマ、ナヒーダ、(コロンビーナ?) ヌヴィレット、フリーナ スカーク、エスコフィエ 星4もナタ、ルナのキャラがおすすめ。\n現在の手持ちキャラ数と凸数を示し、今ならどう配置(ガチャ)するか考えてみます。武器ガチャも引いているのでそれも考慮。\n15 + 16 + 3 = 34\n現在 移行 マーヴィカ[c2] マーヴィカ[c6]🆙 シロネン シロネン ネフェル ネフェル ラウマ ラウマ ナヒーダ[c6] ナヒーダ[c6] ヌヴィレット[c1] ヌヴィレット[c1] フリーナ[c2] フリーナ[c2] スカーク[c5] スカーク[c6]🆙 雷電 雷電 万葉 万葉 鍾離 鍾離 神里 エスコフィエ🔄 甘雨 シトラリ🔄 クレー ウェンティ [武器]護摩の杖 [武器]無工の剣 [武器]聖顕の鍵 アタッカーを凸するか、サポーターを凸するか。例えば、マーヴィカではなく、シトラリを凸したほうが良いという考えもあります。そのほうが強くなるかもしれません。\nその場合、シトラリとエスコフィエを完凸ということになります。しかし、両方が氷元素というのはよくありません。完凸キャラの元素は分けておきたい。この場合、神を完凸するという方針のほうが明確かもしれません。\n2025-04-26 最小構成をまとめます。螺旋を突破できるレベル。\n引くべきキャラは星5で5名、星4で4名となります。 パーティー(PT)は3つの固定枠と1つの自由枠で構成します。 旅人は草と炎を最大限育成します。 星4キャラは完凸を目指します。 ナヒーダの通常攻撃を活用(c6でなくてもダメージは出ます)。 固定枠 固定枠 固定枠 自由枠 ナヒーダ フリーナ 忍 旅人(炎/草) 行秋 香菱 マーヴィカ シロネン 万葉 ベネット レイラ スカークは使っていない 現在、スカークはc5ですが、使っていません。爆発が外れまくるし、PTは制限されるし、弱点が多く、柔軟に元素対応できません。つまり、使い勝手が悪いのです。\n現時点では、マーヴィカ、フリーナ、ナヒーダのほうがおすすめです。\nプレイスタイル 私のこれまでのプレイスタイルを少しだけ話します。\nゲームの難易度に最も影響を及ぼすと考えられる3つの要素から、私のプレイスタイルを明確にします。\n無課金 : ゲームをプレイするにあたり、一切の課金は行わないと最初に決めました。今でもその方針に従っています。なので俗に言う無課金勢です。完全無課金。\n初見 : ここで言う初見とは、主にアカウントのことを指します。最初に作ったアカウントのみでプレイしています。俗に言うサブ垢を持っていません。原神は未経験から始め、アカウントは一つのみ。これをここでは「初見」と表現しています。\n新規 : ここではサービス開始からプレイを始めたユーザーを「初期」や「初期勢」と呼びます。開始前から始めたユーザーを「ベータ」や「ベータテスター」といいます。途中から始めたユーザーを「新規」と表現しています。私の場合は、原神が開始されて1年後くらいから参加したので、新規になります。\nこれについても様々な定義が存在しますが、ここではシンプルな条件で分類しています。\nプレイ履歴 記憶の限りプレイ履歴を書きます。\n年 月 内容 備考 2021 06 原神を始めた パイモンが気になったのと、クレーがかわいかったので原神を始める 2021 07 クレーを引く 原石を貯めてた。ほとんどプレイせず、ストーリーのみを少しずつ進める 2021 08 クレーしか強化しなかった ストーリーのみを進め、最新マップに追いつく 2021 09 雷電を引く。バーバラとノエルも少し強化 秘境、週ボスを楽に倒せるようになる 2022 01 鍾離, 甘雨を引く。 ベネット, 行秋が来た キャラの育成で大変だった。モラと鉱石が尽きる 2022 02 螺旋を星32でクリア 風元素がいないので、次は風元素のキャラを狙う 2022 04 ウェンティ, 綾華を引く 狙っていた全元素キャラが揃う 2022 05 螺旋を星36でクリア 無課金+初見+新規の人は参考に 2022 06 螺旋を通しでクリア 一度もリセットすることなく連続で攻略 2022 07 万葉を引く 各元素につき2体の強キャラ育成を目指す 2022 11 ナヒーダを引く ナヒーダの完凸を決意 2023 04 ナヒーダを完凸 初めての完凸 2023 11 フリーナを2凸 スカークが実装されたら完凸したい 2024 04 ヌヴィレットを1凸 螺旋単騎やってみた 2024 10 シロネンを確保 マーヴィカと氷神を完凸予定なので1人につき原石が90,000必要 2025 01 マーヴィカを2凸 2凸で止めておくことにしました 2025 06 スカークを5凸 無課金では完凸に届かなかった。ラストすり抜けなかったらいけた 2025 06 幻想を星10でクリア 気が向いたので挑戦 2025 06 幽境をエクストラでクリア 気が向いたので挑戦 2025 10 幻想を星12でクリア 気が向いたので挑戦 無課金のガチャ歴 年 月 保有 消費 残高 引いたキャラ 2021 06 4,000 -3,000 1,000 クレー 2021 09 15,000 -7,000 8,000 雷電 2022 01 28,000 -23,000 5,000 鍾離, 甘雨 2022 04 20,000 -20,000 0 ウェンティ, 綾華 2022 07 20,000 -1,000 21,000 万葉 2022 11 48,000 -48,000 0 ナヒーダ(3凸) 2023 04 40,000 -40,000 0 ナヒーダ(完凸) 2023 11 44,000 -22,000 22,000 フリーナ(2凸) 2024 04 55,000 -30,000 25,000 ヌヴィレット(1凸) 2024 10 75,000 -8,000 65,000 シロネン 2025 01 83,000 -41,000 42,000 マーヴィカ(2凸) 2025 06 90,000 -90,000 0 スカーク(5凸) 2025 09 28,800 14,400 14,400 ラウマ 2025 10 28,800 14,400 14,400 ネフェル スターダスト変換した運命も合算しています 引いておきたいキャラと武器 個人的に引いておきたいキャラをランキング形式でまとめます。特に無課金では強いキャラを狙っていかないと厳しいと感じています。方針としては、原石を貯める、強いキャラを狙う、強いキャラを育てるという感じになると思われます。\nキャラ 順位 名前 1 マーヴィカ 2 ナヒーダ 3 フリーナ 4 シロネン 5 万葉 6 鍾離 7 ヌヴィレット 8 ラウマ 私はまず各元素の強キャラを1人確保し、余裕が出てくれば2人確保する計画を立てました。\n元素 キャラ1 キャラ2 風 ウェンティ 万葉 岩 鍾離 シロネン 雷 雷電 忍 草 ナヒーダ(c6) 蛍 水 フリーナ(c2), ヌヴィレット(c1) 行秋 炎 マーヴィカ(c2) ベネット, 香菱, 蛍 氷 氷神 スカーク(c6) 月 コロンビーナ ラウマ 凸はcという表記に変換されることがあります。凸1=c1\n元素 草+水+雷の元素反応が強いです。初心者でも手軽にダメージを出せますので、雷の元素熟知を上げましょう。\n{ 草, 風 } \u0026gt; { 水, 炎 } \u0026gt; { 氷, 雷 } \u0026gt; 岩 武器 順位 種類名前 1 片手剣 サイフォス 2 片手剣 祭礼の剣 3 長柄 西風の槍 4 法器 祭礼の書 ゲーム中に手に入れられる武器\n順位 種類 名前 1 長柄 漁獲 2 法器 金箔 3 片手剣 天目 4 片手剣 鉄蜂 5 片手剣 原木刀 6 片手剣 サーンドル 星5武器は必要ありません。\n育成 アーカーシャシステムというファンサイトがあって、そこで順位を確認できます。育成の方向性を確認できるので便利です。\nhttps://akasha.cv/\n螺旋 螺旋は攻略を目指してもいいし、目指さなくてもいいと思っています。\nしかし、私のおすすめでは、螺旋攻略は無視して構わないし、特に私のように無課金でやる人は、無視したほうがいいと思っています。\nというのも螺旋のコンテンツは、敵の配置などを見ていくと、あきらかに課金者向け販促コンテンツだと考えられるためです。\nしたがって、無課金で螺旋の突破を無理やり目指してしまうことで、本来育成したいキャラに育成リソースを割けなくなったり、あるいは、時間ばかり消費してしまい、成果がなかったりといったことが考えられます。\n例えば、100回チャレンジしてやっと星36でクリアできたとします。しかし、時間をかけたからと言って、報酬が増えるわけではありません。\nつまり、キャラを育成していくうちに自然にクリアできるようになるまでは、あまり参加せず、自然にクリアできるくらいになってから参加するのが最も効率的だと私は思います。\nもちろん、無課金で最短で目指すというのも悪くない考えだと思います。そういった目標を立て、楽しめるのなら、それをやるのが一番です。\nただ、私の場合は、自然クリアできるようになるまで、あるいはその期待が感じられるようになるまで、参加したり、チャレンジしたりすることは控えていました。通しでプレイし、それで得られる報酬だけ受け取るようにしていましたね。\n2022/05に螺旋を星36でクリア 幻想 幻想を星10でクリアしました。\nそれまでは星を取ろうとせずマスターモードを一回プレイして終了するようにしていました。つまり、プレイ時間を最小に抑え、クリア報酬だけ受け取っていました。\n今回は気が向いたので、挑戦してみることにしました。\n今までは「キャラが過剰にならないように」という方針でした。そのためキャラ不足と育成不足でした。今後の方針を考え直すきっかけになりました。\n幻想で星10を狙う場合、方針を変更したほうがいいかもしれません。具体的には、「凸を抑えて、星5キャラをたくさん確保する」のがベストな方針です。\n今までの方針は「キャラが過剰にならないよう引くキャラは限定しよう」でした。\nこれは螺旋には最適ですが、幻想には合いません。\n2025/10に幻想を星12でクリア 星12でクリアしました。フレンドにサポートキャラを借りられるので、それがなければ突破は難しかったと思います。\n幽境 幽境のエクストラをクリアしました。\nまだアルティメットは挑戦していません。行けそうだと思ったときに挑戦しようと思います。\n2025/06に幽境をエクストラでクリア パイモンの考察 パイモンは最初に出てきてアイコンにもなっているキャラです。ということは、最初にヒントがあるはずであり、それが全てです。パイモンの出身はおそらくここ。\n原神のちょっとした考察をまとめます。\n原神というゲームは、一言でいうと「パイモンが怪しい」ということになると思われます。\n初めてプレイしたとき、天理とパイモンは同一人物の可能性を強く疑いました。同一人物でなくとも、過去、現在、未来の自分、あるいは兄弟姉妹などの血縁関係にある可能性などパイモンと天理には何らかの関連性があるような気がします。\nパイモンが怪しい理由については、色々ありますが、まず1つは浮いてることでしょう。また、外見、衣装なども怪しすぎます。これらの要素は天理との一致が見られます。\nパイモンをゲーム内での神の一種だと考えてもおかしくはないと個人的には思います。\nもちろん、パイモンの日頃の言動などに惑わされ、そう感じられないのも理解はできますが、しかし、これも本来の姿を隠すための制作陣の意図と考えれば不自然ではありません。あからさまにそれっぽい言動なのもつまらないものでしょう。\nでは、パイモンとは一体何者なのでしょう。\n私の今の所の予想ですが、パイモンはゲームタイトルにもあるように原神なのではないかと考えます。\n率直に考えて、原神というタイトル、そして、パイモンのアイコンとなると、このパイモンが原神と考えることになります。\nでは、原神とはなにかですが、それは今後のストーリーで明らかになるところかもしれませんし、そうではないのかもしれませんが、ある程度予測がつくまでには至るだろうと個人的には考えます。\n現時点で予測できることは少ないですが、原神には、原石というものが存在し、それが、それぞれのキャラを紡ぎ合わせ運命を変えていく\u0026hellip;なんだっけ。ガチャを回すときのアイテムなんですが、それに変換できるようになっています。\nそういった原石を創造、生成しているのが原神なのかもしれませんね。(あくまで比喩ですが\n比喩というのは一部の側面であり、もっと明確に表現するなら、原神というのはその名の通り、最初の神のことでしょう。つまり、この世界の創造、あるいは原始に関係する人物を指します。\n次はゲーム内の仕様に関して、少し予想していることがあるので、それについて話します。\n原神の物語が終了した段階で、パイモンが使用可能になる可能性を私は考えています。\nパイモンのモーションなどは既にあり、現時点では、開発陣にしかそれを扱えません。\n実は、開発者用に裏でパイモンがこの世界を飛び回り、調整や実装の役立っているのかもしれないという妄想をしています。\nパイモンが使えるようになったら楽しそうだし、楽しいことをするのがゲームですから、私はそんな風に妄想しています。\nストーリー考察 主人公はアビスそのもの パイモンは時の神 アビスと天理は対立している アビスの力を使ったカーンルイア人は罰せられた 主人公は死者かそれに近い状態。そのため双子の片方が主人公を救うためアビスの力に頼っている。アビスそのものだからその力の影響を受けず、吸収することもできる。\n時間(1日後など)を操作するとき、ゲーム中に時を止めるとき(設定画面を開くなど)は必ずパイモンが出てくる。\n履歴 当初の計画 v0.1 各元素につき1体ずつ強キャラを引く\n各元素につき1体は最強キャラを育てていきたい。サポート性能とアタッカー性能の両方で判断します。この2つを最高水準で実行できるキャラ。\n無課金なので2体は狙わないし、凸も狙わないこととします。\n今後の計画 v0.2 各元素につき2体ずつ強キャラを引く\nv0.1の目標達成できたので、計画を変更しました。\n目標は、各元素につき2体の強キャラ確保です。\n以上を踏まえて、必要な原石数などを予測します。\n神は草、水、炎、氷の4人を確保する必要があります。\n各元素は岩、雷、草の3人を確保する必要があります。\n合計で7キャラ分の原石が必要です。\n7000x7=49,000が最低でも必要になる計算です。\n天井分は14,400x7=100,800(期待値)となります。\n1年間で25,000くらいの原石を貯めてやりくりする必要があります。\n今後は表を見ながら、自分の空き領域を埋められることを条件に、狙っていくキャラを決めていくつもりです。\n今後の計画 v0.3 ナヒーダを完凸する\nv0.2の目標達成できたので、計画を変更しました。\n完凸キャラを1体は体験しておきたいということで、タイミングがあったナヒーダの完凸を目指します。\nまた、これ以降は凸を解禁します。\n今後の計画 v0.4 スカークを完凸する\nv0.3の目標達成できたので、計画を変更しました。\n今後は好きなキャラが来たら完凸する予定です。\nナヒーダの完凸に消費した原石はおおよそ90,000でした。スターダスト交換等を除くと110,000くらいかと思われます。例えば、無課金では20,000をためた時に運命が25くらいあります。25を原石数に換算すると4000ですね。もちろん、ガチャの結果により値は前後します。\n現在はスカークを完凸する方向で考えています。\n今後の計画 v0.5 スカーク, コロンビーナ, {エスコフィエ or シトラリ} を引く予定ですが、原石はギリギリです。\n","description":"","formated_time":"2021-12-25","href":"https://syui.github.io/m/post/genshin/","tags":["genshin","m"],"title":"genshin","utc_time":"2021-12-25T00:00:00Z"},{"categories":null,"contents":"やっと取れた。シーズン1は、ちょっとだけ頑張れたと思う。\n","description":"","formated_time":"2021-12-19","href":"https://syui.github.io/blog/post/2021/12/19/ff7fs/","tags":["ff7fs","game"],"title":"ff7fs、モーグリコレクター","utc_time":"2021-12-19T00:00:00Z"},{"categories":null,"contents":"ポケモンGoでは、ブラック・ホワイト世代(gen5)の色違いポケモンが実装され始めました。\n私は、ポケモンGoを基本的に無課金で楽しんでいます。\n今回は、ポケモンGoの事情を知らない人向けに、このゲームが現在どんな感じなのかを紹介していければと思います。\n個人的な課金事情 無課金と言いつつ、早速、課金した時の話をします。\n矛盾していますし、これを無課金と言っていいのかわかりませんが、ポケモンGoは重課金ゲームへと変貌を遂げているので、今の自分は無課金ユーザーの部類だと思われます。\n話を戻すと、覚えている限りでは、ポケモンGoに課金したのは、以下のイベントのみでした。\n巨大ポケモンの謎を解け！(2019) / 980円 限定ポーズ、メダル、レジギガスが配布されたイベント。このイベントを境に課金が必要なゲームになってしまった印象。ですが、後にレジギガスはEXレイドで復刻したので、個人的には課金しなくても良かったかなと思っている。\nPokemon GO Fest 2020 / 1,840円 ビクティニとシャドウ・ミュウツーが配布されたイベント。なお、ビクティニとシャドウ・ミュウツーは後に復刻。これも課金しなくてよかったかなと思ってる。\nPokemon GO Tour:カントー地方 (2021) / 1,480円 色違いミュウ、色違いメタモンが配布された。赤と緑を選んで、当該メダルが貰えたので、主にメダルを目当てに課金しました。これは課金してよかったと思ってる。\nしたがって、2016~2021の合計で4,300円ということになります。\nちなみに、私が課金したゲームはポケモンGoのみ。\nここで、私が課金してよかったと思うのは、Pokemon GO Tour:カントー地方だけです。\nなので、必要最小の出費を目指すなら費用はもっと抑えられたはず。1,480円\nXLアメやPvPの実装 XLアメというのは、平たく言えば、課金要素です。簡単に言うと、課金すればレベルが上げられると考えてもらえればわかりやすい。\n私は、原神というゲームをプレイしていますが、ポケモンGoのほうが課金要素は強いと思います。\n理由はいくつかありますが、一つは、ポケモンGoでは対人戦(PvP)が実装されているからです。\nもう一つは、ポケモンGoは、課金しないと実質的にレベルをMAXに上げられないから。\n原神では課金すると、凸効果が付与されます。これも強力ですが、ポケモンGoでは、基本レベルに差が出てきて、基本レベルというのは、すべてのステータスに影響を及ぼします。\nですから、現在のポケモンGoは、原神にPvPが実装されたと考えるとわかりやすい。現在のポケモンGoの環境、状況を理解しやすいと思います。\n原神も課金者と無課金者の間には圧倒的な差が生まれますが、ポケモンGoほどではありません。ポケモンGoのほうが課金者有利になりやすいと考えられます。\nもちろん、無課金でも工夫すればいいと考える人もいます。\nですが、課金すればするほど有利になるというのは事実であり、そこは変わりません。\nこの記事は、良い悪いについて書いているわけではありませんし、問題について議論するつもりもありません。ただの事実を書き、その事実を前に、どうすればいいのかを模索していけたらと思います。\nこの世界を楽しもう 確かに、無課金勢が重課金者に張り合うのは無理がありますよね。あらゆる要素で。\nそこには圧倒的な差が生まれますし、仮にそのような差が生まれなければ、課金ゲームは成り立たない。\nですが、ゲームの楽しみ方はそれぞれの人が模索していくことができるものです。\nポケモンGoでは、PvPが最も大きい要素ですが、それ以外の楽しみ方もできます。\n私の場合は、色違いのポケモンになります。\n色違いを強化して使おうって人はなかなかいませんが、個体値とかありますし。ですが、私は色違いを強化して使うようにしています。\n現在、ゼクロム、レシラム、キュレムの色違いが実装されていて、これらの色違いを捕まえることを目指してプレイしています。実は、無課金が伝説の色違いを捕まえるのって結構難しいんです。\n確率は1/20ですから、1週間プレイしても捕まらない可能性があります。\nここで少し工夫が必要になり、前日のパスを取っておいたり、リモートパスをストックしておくなどしながらやっています。\n今回は、運良く早めに色違いが出たのでよかった。\nですが、ハマりだすと、ほんとに出ないので、無課金者には、なかなか難しい。\nポケモンGoで捕まえたポケモン達は、ポケモンホームを通して原作に送れたりしますので、この機会に色違いを狙ってみるのもいいかもしれません。\n最初は無課金で頑張ってみるのがおすすめです。\nPokemon GO Tour：ジョウト地方 (2022) / 1,480円 これメダルが欲しいので、課金するかも。今後も続いていくと仮定すると、やっぱりgenのパッケージになってる各種バージョンのメダルは欲しいと思っていて、欠けるとやる気なくす。どちらか一方しか選べないため個性が出るところだと思う。でも、総課金額も増加していくことが予想されます。\nちなみに、私は、実際にプレイしたバージョンを選んでいく予定。\ngen 色 1 赤 2 金 3 ルビー 4 ダイヤモンド 5 ホワイト 6 Y 7 サン 8 ソード ただ、赤系に統一するのも悪くないと思っていて、私の場合は、ダイヤをパールに、ソードをシールドに変更すると、赤系統一できそうな気がしてる。\nでも、個人的にはお気に入りのポケモンを選択してきたつもりだから、やっぱりプレイしてきた方を選びたい気持ち。\n","description":"","formated_time":"2021-12-14","href":"https://syui.github.io/blog/post/2021/12/14/pogo/","tags":["pokemon"],"title":"ポケモンGo、ブラック・ホワイト","utc_time":"2021-12-14T00:00:00Z"},{"categories":null,"contents":"目標まであと少し あと少しでモーグリコレクターのメダルが取れます。メダルが取れれば、シーズン1はちょっとだけ頑張ったという証になります。\n今後の休止は確定 ちょっとずつではありますが、勝てるようになってきた気がする。楽しい。\nff7fsは楽しく面白いゲームですし、流行ってほしいなって思います。\nですが、今回の目標を達成したあとは、プレイを休止します。\n理由はいくつかありますが、このゲームは中毒性が高いと、そう判断したからです。\n中毒性について少し書くと、その時、その瞬間は楽しい、面白いってなるんですけど、その後に、なにも残らない\u0026hellip;。\n例えば、ポケモンの原作をプレイしていると、思い出に残るんです。あの街並み好きだったな、もう一度やりたいなって。また、ポケモンGoは、現実に捕まえたポケモンたちが残りますよね。\nしかし、ff7fsは、その瞬間の快楽はありますが、私は、勝った試合も負けた試合も全く覚えてないんです。\nですから、このゲームを何年も何十年も続けるのは、ちょっともったいないって思うんです。時間とか色々と。\n人と競い合うゲームというのはこのような傾向にある気がする。\n私の場合、それよりも他のこと(創作とか)に時間を使っていきたいという思いがあったりで。(できるとは言ってない\nff7fsをプレイし始めてから、つい熱中してしまって寝不足になったり、他のことをしなくなったりしてしまったことがありました。\n今回の目標は「シーズン1はちょっとだけ頑張った」という証になり、それがあればいいかと思ってる。\n以前までは休止予定でしたが、今回は強制的に休止に持っていくつもり。\nそうしないと、なかなかやめられそうにないので。\n最後の記事になりそうなので、感想を書いておくと、すごく面白かった。バトロワやfpsを初プレイできたのも良かった。ff7じゃなきゃプレイしてなかったと思います。\n","description":"","formated_time":"2021-12-13","href":"https://syui.github.io/blog/post/2021/12/13/ff7fs/","tags":["ff7fs"],"title":"ff7fs、モーグリコレクターまであと少し","utc_time":"2021-12-13T00:00:00Z"},{"categories":null,"contents":"ff7fsは、シーズン1のモーグリ全種のメダルを取ることを新たな目標に、プレイを続けています。\nバトロワやfpsをプレイするの初めてなので、全く勝てないけど、面白い。\n戦歴はこんな感じ。\n今回は、ff7fsの中で唯一の癒やしであるチョコボについて書いていきたいと思います。\n私はチョコちゃんと呼んでいるので、チョコちゃんと表記しますが、主に育成の話になります。\nチョコボ育成 私は、初めてお迎えしたチョコちゃんのchokoを、はじめてカップリングしたときに生まれたやつを使っています。名前はchoです。\n初めてカップリングしてみて、初めて育成素材を投入してみてわかったことを書いていきたい。\nなお、攻略サイトは一切読んでいないのでわかりません。\nまず、スキルですね。これは、2つ付いている状態が望ましく、カップリングによって決まります。\n私の場合、初めてのチョコちゃん、chokoがチョコケアル、そして、次のbがチョコガードを持っていたため、そこから生まれたたchoは、この2つを持ちます。\n次に、強化素材について。\n具体的には、攻撃、スタミナ、HPの順にMAXまで上げる素材を投入しています。\nそこでわかったのは、初期ステータスが重要で、初期ステータスより下には下がらないので、そのことを考慮して素材を投入するのがおすすめ。強化ステータスだけ素材で下がるんだと思う。\nつまり、初期ステータスでは特化型が望ましく、何かに突き抜けたチョコボが理想的です。なぜならそのステータスを無視して強化できるから。\n私の場合でいうと、初期ステータスはスピードとジャンプがMAXなら完璧なチョコボを育成できるということになります。\nですが、おそらく、2つのステータスがMAXなチョコボは生まれない。あるいは非常に低確率だと考えられ、現実的には、1つのステータスがMAXで、ついで無視できるステータスが2番目に高いって状態かなと思います。\nなお、強化したステータスは、カップリングに引き継がれません。\nですから、投入するチョコボは慎重に選びたいところです。\nしかし、私は、その意見に賛成しません。\nチョコボ育成での優先順位は、スキル、攻撃、スタミナ、HPとなっています。\n完璧なチョコボを作るというのに時間をかけすぎて、強化チョコボを連れていく機会を逸してしまうと、そっちのほうが良くないと思います。\n今後、時間が立つに連れ完璧なチョコボを育成した人が増えていきます。\nつまり、状態が硬直化していく可能性が高い。\nこうなってしまうと、みんなが平均して同じ強さのチョコボを使うため、差が生まれず、運要素が強い勝負になっていまい、勝率も下がってしまうのではないかと推測しています。\nしたがって、できる限り早い段階で強化したチョコボを実戦投入するほうがいいという考えです。\nただ、理想のチョコボが来たら、カップリングして、スキルを厳選し、ステータス的に望ましいなら強化素材を使ってあげましょう。\nステータスは、基本的には突き抜け型が望ましく、スピード、ジャンプが突き抜けていることが理想的だと思います。\nスキルは、チョコケアル、チョコガード、ヒソヒソ歩き、あたりがいいと思ってる。\nスキル : (1)チョコケアル, (2)チョコガード, ヒソヒソ歩き\nステータス : スピード, ジャンプのどちらかがMAX\n強化 : 攻撃, スタミナ, HPの順にMAXにしていく(HPとスタミナは前後逆でもOKだったと思う)\nその他の戦略的なことを少し書きます。\nチョコちゃんは離脱する前に帰してあげよう チョコちゃんは、ダメージを受け離脱する前に帰してあげるようにしましょう。\n時間が経てばまた呼び出してあげるといいですよ。\n乗り物には乗ろう 一度乗るとマッピングされますので。\n草むらに隠れよう 相手の動きを見極めたり、相手がどこにいるのかを調べるためには、草むらに入って、姿勢を低くするといいですよ。\nチョコボ亭の近くには、草むらがあることが多いのですが、待ち時間は突っ立ってないで、草むらに身を潜めるのが良さそう。\n関係ないですが、最近、14キルしたのと、プレゼントのスキン取りました。やたー^^\n","description":"","formated_time":"2021-12-12","href":"https://syui.github.io/blog/post/2021/12/12/ff7fs/","tags":["ff7fs"],"title":"ff7fsのチョコボ育成","utc_time":"2021-12-12T00:00:00Z"},{"categories":null,"contents":"チャンピオンバトルで10000ptチャレンジやってみた。\n","description":"","formated_time":"2021-12-07","href":"https://syui.github.io/blog/post/2021/12/07/pokemas/","tags":["pokemon","pokemas","game"],"title":"ポケマス、10000ptチャレンジ","utc_time":"2021-12-07T00:00:00Z"},{"categories":null,"contents":"今までrbenvでversion管理してたんだけど、archlinuxにruby-3.0.3が来ていたので、これがmastodonのgemfileと合いそうだったので上げてみた。heroku-runtimeも3.0.3ですし、今だとrbenvは必要ありません。\n$ cd mastodon $ rbenv local system $ ruby -v 3.0.3 $ sudo gem i bundler $ export PATH=\u0026#34;$HOME/.gem/ruby/3.0.0/bin:$PATH\u0026#34; $ rm Gemfile.lock $ bundle あとはGemfile.lockをherokuにcommit, deployすればいいです。\nまた、nodeのnpm(yarn)でerrが出てたので、package.jsonも変更してます。\n\u0026#34;engines\u0026#34;: { \u0026#34;node\u0026#34;: \u0026#34;12.13.0\u0026#34; }, 最新のmastodonではkeybaseのリンクが消滅しています。下記の事情があったみたいです。したがって、当該commitをrevertすることでリンク(認証)を残すことができます。\nhttps://github.com/mastodon/mastodon/issues/13670\n$ git revert 7de0ee7ab その他のリンク https://devcenter.heroku.com/ja/articles/ruby-support\nhttps://devcenter.heroku.com/ja/articles/nodejs-support\nhttps://docs.joinmastodon.org/user/contacts/\n","description":"","formated_time":"2021-12-05","href":"https://syui.github.io/blog/post/2021/12/05/mastodon/","tags":["mastodon"],"title":"mastodonをruby-3.0.3で動かしてみた","utc_time":"2021-12-05T00:00:00Z"},{"categories":null,"contents":"ちょこちょこプレイしてて、モーグリのスキンを集めることができました。\nでもやっぱり忍者スキンしか使ってない。\nプレイしてて気づいたこととか書きます。\n忍者は弱い 私は忍者しか使ってませんけど、忍者、弱いです。\nジョブの中では一番弱いんじゃないかな。\nただ、この弱さに基づくスキルが、初心者の私にとって非常に扱いやすかった。\n順をおって説明します。\nまず、忍者が一番弱い理由について。\n例えば、魔法使いや剣士のスキルは敵を攻撃するものです。反対に、忍者のスキルは、身を隠したりするもの。\nしたがって、降り立った地点で即戦闘になろうものなら、忍者は死にますね。\n実際、即キルされた経験ある人も多いのでは。\nこれは、スキルの優位性によるもので、同じレベルの使い手がタイマンしたら、間違いなく忍者は負けるでしょう。\nでは、忍者はどうやって勝てばいいのでしょう。\n忍者の戦い方は、というか、これは単に私の戦い方にもなると思うんですけど、あくまで忍者のスキルから推測される忍者の戦い方というのは「圧倒的に有利な場面を作る」ことだと考えられます。\nつまり、忍者は、圧倒的に有利な場を作り、その上でしか戦わない。これが忍者の戦い方です。\n例えば、敵が近くにいるとき、部屋の中に入り、少し後退してファイアを準備するとか(こちらは足音を立てないように)、瞬間移動で高台を取るとか、2段ジャンプして魔法を打つ、銃を切り替えるなど。とにかく、有利な場を作って戦うようにしてます。\nその他に思ったことなど それ以外では、例えば、頭を狙えばクリティカルで一撃で仕留められます。\nできる限り一撃を狙い、それ以外はあまり狙っても意味はありません。\n狙撃に関しては、むやみにダメージを与えてはいけません。それでは逃げられてしまう可能性があり、逃げられてしまっては意味がないからです。\n仕留められないなら、銃弾の消費、居場所が察知される危険が高くなる等のデメリットしかありません。\nしたがって、狙撃では、狙えるけど狙わないことも重要で、できる限り一撃で仕留めるような工夫が必要だと思ってます。\n具体的には、相手に沿うように、しかし、標準は合わせず、スーッと移動させ、そして、頭が狙えると思ったら、こう横にヒュッと移動させるようにするといいのでは、と思いました。まあ、やり方は人それぞれ。\nあと、初回ルート決めというか、私の場合、いつもの探索ルートを決めてたりします。ここは降りた直後から宝箱が連続で取れ(密集はしていない)、しかも、敵やられる危険、人が知っている可能性が少ないところで、地理的には忍者が逃げやすく、かつ敵を仕留めやすい場所なので、その初回は当該ルートをできる限り通るようにしています。\nコントローラーの使い方 最近までコントローラーの使い方がわかっていなかったので、魔法とか戦闘で使っていませんでした。\nですが、魔法使えれば便利だなーと思ったことがきっかけで、コントローラーの使い方を把握しました。\n私が当初わからなかった操作は下記になります。\n魔法 L1を押しながら、3つの魔法のどれかのボタンを押します。\n(1) R1\n(2) R2\n(3) L2\nキャンセル 魔法やスキルはL2でキャンセルできます。\nただし、スキルや3番魔法の場合、2回押したりしなきゃダメかも。\n走りながら地図 左上メニューで地図です。\n左スティックを押すことで自動で走れますので、その際に表示することが多いかな。\n魔法の入れ替え 右上メニューでバッグの中身。\nタッチ操作ですが、魔法を入れ替えることができます。主にそれで使ってる。\n最後に シーズン1のモーグリのスキンが手に入ったので満足。\nあと、バトロワ、fpsというジャンルをはじめてプレイできたのもよかった。\nあくまで訓練という設定も好きでした。あまり過激な設定は好みません。\nただ、中毒性が高そうなゲームだと思うので、しばらく休止予定。\n","description":"","formated_time":"2021-12-03","href":"https://syui.github.io/blog/post/2021/12/03/ff7fs/","tags":["game","ff7fs"],"title":"ff7fsでモーグリのスキンを集めた","utc_time":"2021-12-03T00:00:00Z"},{"categories":null,"contents":"ポケマス、マジコスのルザミーネは強いと思ったので、引きました。\n30連くらいで2凸できたんだけど、運がとてつもなかった。ここまで引きがよかったの初めてじゃないだろうか。\n下記はポケマス関連で良さそうなサイトで、ここのランク、かなり信憑性あると思ってる(自分の意見とほぼ一致してた\nhttps://pokemonmasters.pokemongo-raku.com/posts/4602\nここにあえてSS+を追加するなら、個人的には以下の3組になります。\nマジコスレッド : 初代ポケマスから未だ最強を誇る\nN(21アニバーサリー) : 最近のトレンド、レッド超えの可能性\nマジコスルザミーネ : また超えてきた可能性\n現在のEXはこんな感じ。\n","description":"","formated_time":"2021-11-30","href":"https://syui.github.io/blog/post/2021/11/30/pokemas/","tags":["pokemon","pokemas","game"],"title":"ポケマス、ルザミーネ","utc_time":"2021-11-30T00:00:00Z"},{"categories":null,"contents":"/ai こっちはinkscapeでsvgを作ったんだけど、このアプリ、毎度触るたびによくわからんってなってる。\n","description":"","formated_time":"2021-11-28","href":"https://syui.github.io/blog/post/2021/11/28/icon/","tags":["icon"],"title":"アイのアイコンを作った","utc_time":"2021-11-28T00:00:00Z"},{"categories":null,"contents":"qiita表彰プログラムなるものに載ってるよって公式から連絡が来て、qiitaバッジもらった。うれしい。\nqiita、10thおめでとう！\nqiitaとは エンジニアのコミュニティサイト。主に技術情報が共有されている。月間600万を超えるユーザーが訪問し、会員数は70万人以上。日本最大級のエンジニア・コミュニティ。\n参照 : https://qiita.com/about , https://qiita.com/qiita10th\n","description":"","formated_time":"2021-11-22","href":"https://syui.github.io/blog/post/2021/11/22/qiita/","tags":["qiita"],"title":"qiitaバッジもらった","utc_time":"2021-11-22T00:00:00Z"},{"categories":null,"contents":"昨日言ってたモーグリの翼がゲットできました。\nこの画面の詳細のところ見たらドロップするモンスターとか表示されてた。\nで、サボテンダー倒したらドロップした。\nおそらく、このアイテムのIは、シーズン1の1だと思います。\nシーズン1のスキン、一つくらい欲しかったので満足。\n","description":"","formated_time":"2021-11-20","href":"https://syui.github.io/blog/post/2021/11/20/ff7fs/","tags":["game","ff7fs"],"title":"ff7fsでモーグリの翼をゲットした","utc_time":"2021-11-20T00:00:00Z"},{"categories":null,"contents":"はじめてのfps 実は、fpsというジャンルのゲームをプレイするのは、はじめてです。\n正直、fpsというゲームにあまり良い印象を持っておらず、個人的には苦手なジャンル。\n一応、学生の頃に友達の家で1,2回プレイした経験があります。当時はすぐに酔ってしまい、プレイするどころじゃなかった記憶。\nff7fsでの立ち回り 私は、忍者を選択しました。\n初心者が動き回るのもよくないだろうと思い、私は戦闘を避けつつ、初回はアイテムを回収するよう心がけ、遠距離から敵を狙う戦法です。\n私が好んで使う武器は、遠距離用の銃で、遠くから標準を合わせると大きく拡大されるやつ。\n基本的に、岩場が大好きで、時間経過とともに狭まるエリアを考慮しながら、その中心辺りにある岩場を登り、ときにエアロなどの魔法を使って最上まで行くことを目指します。\nそこで敵を待ち構えながら、のんびりします。\nチョコボで走り回るのも好きで、チョコボ亭があったら即座にチョコボに乗ってます。\nなぜこういう立ち回りをするのかというと、それは、たまたまです。\nゲーム開始直後から自然とこんな感じで動いてるので、なにか深い考えがあるわけでもありません。このゲームについてもよくわかっていません。\n自分の立ち回りの弱点 私の立ち回りでは、終盤まで生き残ることはできますが、終盤には弱いと思います。\nなぜなら、接近戦が苦手だからです。\n最終的な勝利(1位)を目指すなら、接近戦は必要不可欠だと思います。\nですから、接近戦もある程度、練習しておいたほうが良さそう。\nここで、終盤を見据えた動き方みたいなものは、初回ロード時の訓練場で練習しました。\n接近戦での忍者の動き方ですが、基本的には、小型の銃を使います。中距離なら相手に標準を合わせます。最初は中距離がいいかな。中距離というのは、相手の物理攻撃が当たらないくらいの距離を言います。標準を合わせて打つと、そこから自動で射撃してくれるようになると思うので、画面を通常に切り替え、カーソルを相手に合わせつつ、自身は上下左右に動くようにします。\n具体的には、相手が逃げ腰なら追いかけるように、攻めならバックです。\nここで、相手との距離を徐々に近づけるようにするのがおすすめかなって思います。\n相手との距離が一定以上に近づいたら、ジャンプしながら物理攻撃に移行します。これは、単純にジャンプしながら攻撃ってのがポイントかなって思います。ジャンプ物理攻撃を駆使しながら戦うと、様々な状況に対応できる気がするので。\n最後の物理攻撃、3段目が当たると、相手は吹っ飛びます。これはむやみに追いかけるのではなく、中距離を目指して移動し、銃を構えるようにします。で、銃で撃ちつつ、次にジャンプ攻撃を繰り出すという流れ、その繰り返しになります。\n私は、魔法が苦手なので、使いません。別に使ってもいいと思いますが、正直、魔法に関しては全くわかっておらず、どのような動きをするのかも把握していません。\nですから、私が好んで所持する魔法は、エアロ、ケアルくらいです。\n画像は運良く1位をとった時のもの。うれしい！\n今の所、目指しているもの 今の所、私がこのゲームで目指しているのは、ギルをためて、モーグルの鈴(戦場でまれにドロップする希少アイテム)を呼び出し、13,600Gくらいのアイテムを購入して、モーグリの翼(スキン)を手に入れることかな。シーズン後に入手不可能になるものを優先的に取っていきたい無課金勢。\n【#FF7FStips：モーグリショップ】\nマッチゲームで1位を取るか、モグ鈴を獲得すると\nリザルト後にモーグリショップが出現！\nマッチ中、ある条件が適用される特殊なアイテムが並ぶことも・・？#FF7FS #ファイナルファンタジー #FF7R pic.twitter.com/lsL1CeeVyO\n\u0026mdash; FINAL FANTASY VII THE FIRST SOLDIER_JP｜FF7FS (@FFVII_FS_JP) November 19, 2021 【#FF7FStips：コレクション】\n集めたデータピースとスキンを交換しよう✨\nホーム左下のシーズンパスページからコレクションボタンをタップで交換画面へ！#FF7FS #ファイナルファンタジー #FF7R pic.twitter.com/tNAIfHGPoP\n\u0026mdash; FINAL FANTASY VII THE FIRST SOLDIER_JP｜FF7FS (@FFVII_FS_JP) November 20, 2021 中毒性 このゲームをプレイしていて、気づいたことがあります。\nそれは、このゲームの中毒性です。\nプレイしてたら、いつの間にか時間が経ってて、でも、あと一回ってやりたくなるんですね。\nこれはちょっとまずいと思ったので、シーズン1でモーグリの翼スキンを取ったら、しばらく距離を置いてみる予定。あくまで予定ですが。\n","description":"","formated_time":"2021-11-19","href":"https://syui.github.io/blog/post/2021/11/19/ff7fs/","tags":["game","ff7fs"],"title":"ff7fsをプレイしてみた","utc_time":"2021-11-19T00:00:00Z"},{"categories":null,"contents":"ff7fsとは、ff7のキャラや世界観を使ったapexやフォーナイトのようなバトルロイヤル式のゲームです。2021/11/17の17:00からサービス開始らしい。\nということで、17:00から起動して、チュートリアル(基本訓練)まで進めましたが、そこでロードから進まない状況。\nこういうのはサービス開始直後によくあることらしく、チュートリアルでは一応、名前だけ入力送信を完了してるので、確保されてるっぽい？(ネット知識\n正直、ゲームはプレイするかどうかは分かりません。\n今回の起動は名前確保だけが目的だったので、確保されてればそれでいいのです。\n画面下の方にIDが表示されてますが、それが取得されたようでしたら、あとは名前入力できる画面までたどり着いて、入力が完了し、それが通ったら確保されてそうではあります。\napexとフォーナイト apexとフォーナイト、めちゃくちゃ流行ってますよね。\n今、最も流行っているゲームじゃないかな。\n私は銃を打ち合うゲームをやると、昔から酔っちゃうので、プレイしていませんでした。\n今回のff7fsは、世界観やキャラに馴染みがあるし、ファンタジー要素があると、あまり酔わずに済む事が多いので、今回、プレイを始めてみようかなと思っています。\nすごく流行りそうなアプリなので、とりあえず名前だけでも確保しておくとよさそう。\n","description":"","formated_time":"2021-11-17","href":"https://syui.github.io/blog/post/2021/11/17/ff7fs/","tags":["game","ff7fs"],"title":"ff7fsをはじめてみた","utc_time":"2021-11-17T00:00:00Z"},{"categories":null,"contents":" goodreader(latest)がopenssh 8.7に対応\niosには昔からgoodreaderという便利なアプリがあります。\nこれがずっと便利で(遥か昔から今日に至るまでiosには他に便利なアプリがあまりなかったとも言う)、このアプリ、すごく基本的なことができるのです。\nandroidでは普通にできるようなことができ、例えば、ssh(sftp) serverにpublic-key方式でアクセスしたりできるんですけど、一時期からupdateが滞り、openssh verによっては、public-keyなどによるアクセスが使えなくなっていました。\nしかし、ここ最近のgoodreaderのupdateでopenssh 8.7(openssl 1.1.1)ならpublic-keyでも接続可能になりました。\n","description":"","formated_time":"2021-11-11","href":"https://syui.github.io/blog/post/2021/11/11/goodreader/","tags":["ios"],"title":"goodreaderからopenssh(fstp)にpublic-keyでアクセスする","utc_time":"2021-11-11T00:00:00Z"},{"categories":null,"contents":"どのキャラにどれを付けたらいいのか、迷ってきたので、まとめます。\nキャラ 武器 聖遺物 メイン 補足 クレー 流浪楽章/ドドコ 炎魔女 攻撃%, 元素バフ, 会心ダメ ドドコでも相当の火力が出る 雷電 西風 絶縁 チャージ効率, 元素バフ, 会心ダメ 雷電以外の全員に絶縁、チャージ効率を上げて爆発を連発するビルドが使える ノエル 無工 旧貴族 防御x3 無工は他キャラが貼ったバリアでも効果を発揮する バーバラ 金珀 愛され HPx2, 治療バフ HPより治癒バフのほうが回復量が上がった 香菱 ひれ長/漁獲 絶縁 チャージ効率, 攻撃%, 攻撃% 雷電と組ませてチャージ効率を重視 持ってない以下のキャラを想定し、とりあえず聖遺物と武器だけは集めたり強化したりしてる。\nキャラ 武器 聖遺物 メイン 補足 鍾離 護摩 千岩 HPx3 シールド要因として割り切る。HPを上げるとシールドが強化される。また、護摩によってHPで攻撃力も伸びる ウェンティ 終焉(持ってない) 翠緑 熟知x2, 会心率 拡散要因として割り切る 甘雨 西風 大地 攻撃%, 元素バフ, 会心ダメ 雷電と組む場合、絶縁でもいいかもしれない 行秋 祭礼 絶縁 チャージ効率, 元素バフ, 会心率 雷電と組ませてチャージ効率を重視 ベネット 祭礼 旧貴族 HPx2, 治癒バフ バフ要因として割り切る。サブに基礎攻撃力 雷電と組ませる場合、鍾離とかウェンティとか甘雨も絶縁でチャージ効率と爆発を上げたほうが強いかもしれない。どのキャラも爆発が強いので。\nとりあえず、行秋, 香菱, 甘雨用の絶縁を作った上で、それを使い回すことを考えています。\n","description":"","formated_time":"2021-11-07","href":"https://syui.github.io/blog/post/2021/11/07/genshin/","tags":["genshin","game"],"title":"原神、武器と育成方針","utc_time":"2021-11-07T00:00:00Z"},{"categories":null,"contents":"\n","description":"","formated_time":"2021-11-06","href":"https://syui.github.io/blog/post/2021/11/06/illust/","tags":["illust"],"title":"イラスト描いてみた104","utc_time":"2021-11-06T00:00:00Z"},{"categories":null,"contents":"現在、nianticがこれまでにリリースした3つのゲームをプレイしていたユーザーに対して、niantic idへの予約が招待されています。\ningress\npokemongo\nharrypotter(wizardsunite)\nこの招待は2021/11/05のAMにmailで届きました。私は、AM 9:00~10:00頃に予約しましたが、その際は、登録しづらい状況でした。ですが、何度かトライすると通りました。\n具体的には、googleアカウントでのログインエラーが3回ほどやり直し、その後もユーザー名を選択して送信する際の送信ボタンを4回ほど押しました。ページが切り替わらなかったので何度か送信ボタンぽいものを押すと、ページが切り替わり「登録が完了した」という趣旨のメッセージが表示されたような状況でした。\n画像は、PMに再確認したときのもの。idはプライバシー保護のためsyuiに書き換えています。\nid予約制の趣旨 予約制の趣旨は、「既存のアカウントを持っているプレイヤーがNiantic IDを優先するようにするため」だと考えられます。\nhttps://nianticlabs.com/reserve-nianticid/faq\n通常、プラットフォーム誕生におけるidの取得は早いもの勝ちになります。\nしかし、今回のケースでは、ゲームをプレイしていたユーザーが優先的にidを確保する珍しいタイプになります。\nゲームをプレイしていないとidの予約はできないので、その点でidを確保する難易度が上がります。\nですが、これまで長くプレイしてきたユーザーにとっては納得の行くものだったと考えられます。\n新規登録へのハードルは高くなりますが、今後、このような形でidを取得する形態が増えてくるかもしれません。\nちなみに、そのプラットフォームが流行るか流行らないかは誰にもわかりません。nianticのそれについても、今後の戦略次第だと思われます。\nなお、新規登録は今後可能になりますし、予約できるのは既存のユーザー名のみに限定されます。\nniantic profile(一種のプラットフォーム)は流行るのか これまでniantic profile, niantic socialと呼ばれるものは、それぞれのゲームにおいて少しずつ実装されてきました。\nですが、現時点で、それを気にしている人はいません。使っている人もいません。話題にもなっていません。\n現時点では、そもそも機能がないし、あったとしても使われるかどうかは微妙なところだと思います。\n理由としては、ゲームをプレイしている人は、基本的に、そのゲームがやりたいだけなので、nianticには興味がないし、そのprofileやidなど、どうでもいいのです。\nですから、それを定着させようと思ったら、やはり、ゲーム内に強く影響を及ぼすものでなければいけません。\n影響を強く及ぼせる要素としては、やはり、名前が一番強いということになると思います。\n個人的に実装してほしいオプションは以下の3つです。\nゲーム内のユーザー名をniantic idで表示(選択)するオプション これは、当該ゲームをプレイするユーザーがどちらを使うかを選択できるようにするというものです。識別しづらいという問題があるなら、色を変えたり、(N)アイコンを付けたりなどすることで回避できると思われますが、同一表記でも個人的には構いません。\n当該ユーザー名が使われていない場合に上書き変更するオプション niantic idで取得したものがゲーム内でユーザーに使われていない場合、それに変更できるオプションがあるとうれしい。つまり、退会や凍結されているユーザー名を開放してほしい。\nniantic profileをゲームみたいにしてほしい niantic profile自体にミニゲームや特典みたいな思想を実装してほしい。例えば、niantic profileに独自通貨を発行し、コミュニケーション特典として発行するなど。発行される通貨は、各ゲーム内で使えるようにすることで、niantic profileがゲームに影響を与えるものとして認識されるようになると思います。報酬があり、継続する価値があるのなら、プラットフォームとして繁栄していく可能性は高いとみています。\nniantic profile自体を楽しいものにして、流行らせてほしいなって、個人的には思います。\n個人的な事情 私がpokemongoをやり始めたのは、リリースからちょっと遅れた時期でした。\nその時期は、「ユーザー名は個人と関わりのない推測されないようなものにしてください」と注意があり、私もそれに従いました。\nそのときはそれで良かったのですが、予想外に長く付き合うゲームになり、変更オプションが実装されたときにはすでに手遅れでした。こんなことなら最初にとっておくべきでした。\nその後、ingress, harrypotterをプレイしましたが、ingressは取れず、harrypotterでは取れました。\ningressのmentionで確かめてみると、私が欲しかったユーザー名は現在使われないことがわかりました。おそらく、当該ユーザーは退会、もしくは凍結されているのだろうと思います。\nそんなことなので、pokemongoも使われているのかわかりません。おそらく、使われていないでしょう。\n個人的には、niantic idでゲーム内のユーザー名を統一できるようになるといいなと思っています。\nちなみに、ユーザー名が入ったスクショは、プライバシー保護のためユーザー名のところだけsyuiと書き換えて投稿するようにしています(実際のユーザー名は異なります)。\n実際のユーザー名は、本名にちなんだものとなっておりますが、なるべく公開しないほうがよいでしょう。\npikmin(bloom)が除かれている理由 今回、pikminのユーザー名は予約できません。予約対象ではないのです。\npikminは、この前リリースされたばかりのゲームであり、実装が間に合わなかったという理由も十分に考えられますが、予約制の趣旨から考えると、今回、pikminが除かれていることは説明できます。\n今回の予約制は、長らくプレイしてきたユーザーに対して優先権を確保する、というものなので、プレイを始めたばかりのユーザー名を優先確保する必要性はあまりないのです。\n公式サイトの文言には以下の文章があります。\nユーザー名は、ゲームをプレイすることでできたフレンドや、参加するコミュニティのアイデンティティを表わす大切な要素のひとつです。\n今回の措置は、あくまで、これまでユーザーが培ってきたアイデンティティを継承できるようにしたという例外的な措置だと考えられます。\n小文字への統一 これまでゲーム内のユーザー名は、大文字と小文字を区別していました。\nつまり、aiという文字列には、最大で4人のプレイヤーがいます。具体的には、ai, aI, Ai, AIです。\nですが、今回のniantic idは小文字に統一されているように思います。\n今回の先着順の意味が大きいのは、そのためです。例えば、上記の4人のユーザーは同じidを予約できますが、先に予約した人が優先されます。残る3人は予約できなくなると予想されます。\nなぜ小文字に統一するのか、大文字は使えないのかという批判を見かけますが、小文字への統一は正しい判断だと思います。\n今後、チャット機能などを実装予定と言われているため、宛先が統一された書式でないと様々な問題の発生が予想されます。\n通常、domainやmail, chatは小文字で統一されています。これは識別子として小文字が最も適切だと考えられるためです。\nなお、今回のniantic idは、あくまでidであり、表示方法については、大文字が使えるようになるかもしれません。\nつまり、当該idを取得した人が任意に設定可能であり、例えば、shellscriptというidを取得した人は、ShellScriptと表示することもできるようになるなど、そういった可能性は考えられます。\n今回の予約は表示方法の予約ではなく、あくまでidの予約です。\nですから、選択肢が小文字で表示されていることも、idが小文字で統一されるらしいことも適切だと私は思います。\n","description":"","formated_time":"2021-11-05","href":"https://syui.github.io/blog/post/2021/11/05/niantic/","tags":["niantic","game"],"title":"niantic idを予約してみた","utc_time":"2021-11-05T00:00:00Z"},{"categories":null,"contents":"miiでアイの輪っかを再現してみた。金髪である以上、輪があるか輪(剣)を持つかしないといけないので。\n色んなパターンを作ってみたものの、最終的には、これに落ち着きました。pikminbloomで見たとき比較的違和感が少ないものを選択。\n","description":"","formated_time":"2021-11-04","href":"https://syui.github.io/blog/post/2021/11/04/pikmin/","tags":["pikmin","game"],"title":"miiで輪っかを再現してみた","utc_time":"2021-11-04T00:00:00Z"},{"categories":null,"contents":"nianticのharrypotter(wizardsunite)が終了するようです。wizardsuniteはどういった契約だったのかわからないので、今回の終了はnianticが決めたのかはわかりません。\n例えば、harrypotterの映画を出してるワーナー・ブラザーズがnianticに開発を依頼してたのか、nianticがharrypotterのIPを借りて運営してたのかによって異なってくると思われます。pokemongoはpokemonのIPをお金を出して買ってたと思う。新しいpokemonを追加するにも大金がかかってるんじゃないだろうかと予想してる。\nそのnianticから今度はpikminbloomがリリースされました。pikminbloomはnintendoと共同開発らしい。\n今回、pikminbloomではじめてmiiを触ってるんだけど、よくわからなかった。miitopiaってのがあるらしいんだけど、これで作ったものをニンテンドーアカウントに設定できるのだろうかとか。\nmiiの選択肢を増やしてほしいのと、miiの等身がpikminbloomに反映されるようにしてほしいかな。\n","description":"","formated_time":"2021-11-03","href":"https://syui.github.io/blog/post/2021/11/03/pikmin/","tags":["pikmin","game"],"title":"pikmin bloomとmii","utc_time":"2021-11-03T00:00:00Z"},{"categories":null,"contents":"ようやく冒険者ランク55になり、世界ランク8になりました。\n世界ランクは、秘境とか螺旋とかに影響を及ぼさなかった気がするので、野生の敵の強さが変わってくる感じなのでしょうか。\nちょっと戦ってみました。が、よくわからなかった(何が起こってるのかもよくわからなかった)。\n現在、胡桃のキャラと武器ガチャが熱いので、その話題について書きます。\n胡桃は引くべきか 胡桃は、現時点では、引くべきキャラだと思います。炎元素で最も強いと言われているのが胡桃です。\n実際、お試しで使ってみましたが、こいつは強い。\n胡桃の強さは、元素爆発でのHP回復とHPを上げることが火力につながる特性にあると思います。HPは耐久値でもあり、耐久と同時に火力も上げることができます。元素爆発も攻撃と回復が働くため無駄がありません。\nつまり、胡桃は強い。クレーよりも圧倒的に強いでしょう。\nただ、私にはクレーという炎元素アタッカーがいるため、胡桃を引いて、かつ育てるのは、コストはかかるが、効果は少ないと考えます。したがって、今回、胡桃はスルーする予定。\nしかし、今回のガチャは、やっても損はないと思います。\n今回、私がスルーする最大の理由は「将来への期待」があるからです。これがなければ、炎元素最強キャラは回していた可能性が高い。\nつまり、将来、もっと良い武器、良いキャラが来たとき回せなかったら困るので、原石を貯めるという選択を取ります。\nそのような期待は不確実なものであり、将来への期待が当たるかどうかはわかりません。例えば、今後、火の神が実装されたとして、胡桃のほうが結局は強いという評価なら、胡桃を引いておかなかったのは失敗、ということになります。\n基本的には、私のように無課金に対して強いこだわりでもなければ、普通に回したほうがいいガチャだと思います。\n武器ガチャは何を狙うべきか 現時点では、雷電か鍾離に装備できる武器が最もおすすめだと考えています。つまり、長柄武器です。\n長柄武器では、特に護摩の杖、草薙の稲光の2つがいいと私は考えています。\n今回、武器ガチャを回すことにしました。\n前回は「もう武器ガチャは回さない」と言いましたが、まさか、早速回す羽目になるとは思わなかった\u0026hellip;。\n結果として、7,000くらいの原石を使い、辛うじて護摩の杖をゲット。うれしい。\n実は、今回の武器ガチャは、鍾離(用)の護摩の杖を狙う以上に、香菱の斬波のひれ長, クレーの流浪楽章凸, 行秋(用)の祭礼の剣凸, 甘雨(用)の終焉を嘆く詩 or 曚雲の月を狙う意図がありました。\n(用)は持っていないキャラです。\nつまり、今回の武器ガチャはハズレがなかった。だからこそ、回してしまったわけですが\u0026hellip;\nしかし、これ以上、武器ガチャに原石を消費するのは非常にまずい！\n私は現時点で相当のキャラ不足。キャラガチャは、クレーと雷電の2回のみですから、本当にまずい。\n今後、原神の攻略自体ができなくなる可能性が大いにあると思います。\n原神の攻略ができなくなり、沈んでいった人達って、もしかして、武器ガチャにやられちゃった可能性あるのでは？\n確かに、無課金で武器ガチャばかりやっちまったら、そりゃ、攻略できなくなる可能性あると思いました。\n今回は半分理性を失い、武器ガチャをやっちまったわけですが、改めてキャラ最優先に考えていきたい。\n現在、キャラガチャと武器ガチャは2:2でやっていて、無課金でプレイするには4:0が望ましいと考えています。\nそう考えると、原神の攻略、半分失敗してる気がする。\n\u0026hellip;もう武器ガチャはやらない！！(n回目\n","description":"","formated_time":"2021-11-02","href":"https://syui.github.io/blog/post/2021/11/02/genshin/","tags":["genshin","game"],"title":"原神、世界ランク8","utc_time":"2021-11-02T00:00:00Z"},{"categories":null,"contents":"\n","description":"","formated_time":"2021-10-30","href":"https://syui.github.io/blog/post/2021/10/30/illust/","tags":["illust"],"title":"イラスト描いてみた103","utc_time":"2021-10-30T00:00:00Z"},{"categories":null,"contents":"結論から言うと、手動で設定するにはgoogleフォトがいいです。\nデフォルトの写真アプリでやっても「コンテンツがありません」と表示され続けるので。\n","description":"","formated_time":"2021-10-28","href":"https://syui.github.io/blog/post/2021/10/28/ios/","tags":["ios"],"title":"iosの写真ウィジェット","utc_time":"2021-10-28T00:00:00Z"},{"categories":null,"contents":"グリーン\u0026amp;プテラを引いたので、からておうに「はかいこうせん」を当てるエンブレム、やっと取れた。\nよく使う編成はN\u0026amp;レシラム、マツブサ\u0026amp;グラードン、レッド\u0026amp;カビゴンかな。\n","description":"","formated_time":"2021-10-27","href":"https://syui.github.io/blog/post/2021/10/27/pokemas/","tags":["pokemon","pokemas","game"],"title":"ポケマス、からておう","utc_time":"2021-10-27T00:00:00Z"},{"categories":null,"contents":"今回、写真が増えてきたので、ページを作ったのですが、その際、hugoのresourceを使ってみました。\n/photo\ndir構造は以下の通り。content/photo/以下に画像を置きます。\ncontent/photo ├── figure.jpg ├── illust.jpg ├── index.md ├── pokecard.jpg └── sticker.jpg --- title: \u0026#34;photo | syui.ai\u0026#34; resources: - src: \u0026#39;*.jpg\u0026#39; type: \u0026#34;photo\u0026#34; --- それをlayout/photo/single.htmlでresourceを使って取得。\n{{ with .Resources.Match \u0026#34;*.jpg\u0026#34; }} \u0026lt;div class=\u0026#34;Carousel__slide\u0026#34;\u0026gt; \u0026lt;p\u0026gt; {{ range . }} \u0026lt;a href=\u0026#34;{{ .RelPermalink }}\u0026#34;\u0026gt;\u0026lt;img src=\u0026#34;{{ .RelPermalink }}\u0026#34; width=\u0026#34;480\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; {{ end }} \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; {{ end }} 以下のような感じで取得してもいいらしい。\n{{ .Resources.ByType \u0026#34;image\u0026#34; }} {{ .Page.Resources.ByType \u0026#34;image\u0026#34; }} でも、正直、分かりづらかったり、思ったように動かなかったりするかも。\nhttps://gohugo.io/content-management/page-resources/\n","description":"","formated_time":"2021-10-24","href":"https://syui.github.io/blog/post/2021/10/24/hugo/","tags":["hugo"],"title":"hugoのresourceを使ってみた","utc_time":"2021-10-24T00:00:00Z"},{"categories":null,"contents":"\n","description":"","formated_time":"2021-10-23","href":"https://syui.github.io/blog/post/2021/10/23/illust/","tags":["illust"],"title":"イラスト描いてみた102","utc_time":"2021-10-23T00:00:00Z"},{"categories":null,"contents":"やっとクレーと雷電の天賦が当初の目標まで到達しました。クレーの天賦(攻撃、スキル、爆発)がLV9で、雷電の天賦(スキル、爆発)がLV10です。\n雷電の通常攻撃の天賦は、LV9まで上げる予定ですが、現状でも問題ありません。余裕があればやるつもり。ただし、さすがに雷電でも通常攻撃の天賦に王冠を使うのはやめとく。他のキャラに使ったほうがよさそう。\n最近やっと全員に聖遺物+20を付けられました。長かった。\n現PTはクレー、雷電、ノエル、バーバラです。キャラ持ってないんで。\n次は何をしていくのかというと、狙っていくキャラにつける予定の聖遺物のレベルを上げようと考えています。\n具体的には、ウェンティに翠緑の影、鍾離に旧貴族(HP)、ベネットに旧貴族(攻撃)、香菱に絶縁です。これらは、他のキャラに付けることもできるので、使い回しができます。\n聖遺物は通常、時=攻撃%、杯=元素バフ、冠=会心を目指すらしい。\nですが、これは最低限やるべきことらしいので、本来の厳選を意味しません。\n本来の厳選は、メインだけでなく、サブステータスも含め厳選していくことを指します。\n私の場合、聖遺物の厳選はやらないつもり。\nしたがって、聖遺物レベルを上げていく過程で得られたもので妥協する考えです。主にメインステータスは気にしますが、サブステータスは無視する方向で。\nなぜかというと、例えば、聖遺物8つ(前半PT、後半PT)のレベルがMAXに達しているのに、それ以上に厳選するため樹脂を消費するのはもったいないからです。\n無課金なので、育成スピードが段違いに遅いし、割けるリソースも限られる。\nその分の樹脂は、モラやレベルアップ素材などに変換したほうがいいと思いました。\n現PTのステータスを記録しておきます。原神は6月頃からはじめたので、期間は4ヶ月くらいかな。\nST クレー 雷電 ノエル バーバラ HP +6307 +8926 +8621 +16160 攻撃 +831 +1332 +847 +440 防御 +69 +258 +1381 +187 会心率 21% 20% 5% 17% 会心ダメ 198% 88% 69% 78% 元素バフ 90% 99% 15% 15% チャージ 144% 231% 157% 135% クレーはサブで会心率上げると強くなる感じがする。雷電はチャージ効率をもう少し上げたい。時と冠のメインが攻撃%なので。\n実際の強さは、動画で見てもらったほうがわかりやすい。現状、こんな感じです。\nクレーは重撃で3万ほどのダメージ、雷電の爆発で6万ほどを見たことがあります。\n週ボス(全)も安定してクリアできるけど、螺旋11層からは時間不足で星が取れず、12層に進めません。螺旋は手持ちキャラが増えていく過程で達成できたらと思っていますが、後半PTにつける聖遺物レベルを全員+20にできたら、再チャレンジする予定。\nしかし、現在の手持ちでは厳しいでしょう。レベルや天賦は上げるつもりないですし。\n課金するならどのキャラか その他の話題として、課金について考えてみます。\n原神は面白いし、課金してもいいんじゃないって思えるゲームですね。\n仮に私が課金するとしたら、どのキャラに課金(武器、凸)するのか、考えてみました。\n雷電 鍾離 現在はこの二人ですね。\n雷電はPTの元素爆発を連発できるという強みがあり、そのため、今後の実装においても、PTに組み込みやすい。なので、1位です。\n前の記事に書きましたが、例えば、氷の神は未だに実装されておらず、強さがわかりません。ですから、例えば、甘雨が強くて課金しても良さそうなキャラですが、課金するなら情報がすべて出てからのほうがよさそう。\nとはいえ、スネージナヤ(氷の国)は最後に実装なので、甘雨は課金したいキャラ3位かな。\n原神の進め方 原神の進め方について、自分の考えがまとまってきたので再掲。\n強いキャラを引く 強いキャラを育てる 以上の2点がおすすめです。\n「2.強いキャラを育てる」に関して。\nレベルを上げる(限界突破を含む) 武器レベルを上げる(限界突破を含む) 天賦レベルを6くらいまで上げる 聖遺物の効果とメインステータスのみ厳選し、レベルを上げる(全+20) 天賦レベルを9以上まで上げる 聖遺物の厳選(サブステータスを含む)を行う ここで、私の現在のフェーズは5です。\n次は、クレーと雷電の「聖遺物の厳選」に移行しても良さそうに思います。\nですが、私は、現在狙っているキャラの育成素材を集めることにします。\nまずは聖遺物から集めようと思ってて、それを+20にすることを目指す予定。他キャラに付けて運用できますし。\nそれが終わったら、次は、レベル素材、天賦素材を集めるつもりです。\n","description":"","formated_time":"2021-10-21","href":"https://syui.github.io/blog/post/2021/10/21/genshin/","tags":["genshin","game"],"title":"原神、聖遺物の厳選なし","utc_time":"2021-10-21T00:00:00Z"},{"categories":null,"contents":"100枚目から個別記事にするのやめようか迷ったんだけど、とりあえず101枚目のイラストです。\nなぜ個別記事にするのか 私があえて個別記事にする理由は、私自身がそういうのを読むのが好きだからです。\n私は、うまい人が書いた絵を見るのも好きなんですが、自分と同じような初心者の人が書いた絵を見るのも好きです。\nそういう人がブログに上げているのを見るのが好きで、よく読ませてもらっています。\n実は、絵があまり得意ではない人(本人がそう言っている)の絵が載せられているブログなんかも、私はよく見に行くのです。\nそして、そういうのを楽しませてもらっているため、自分もイラストを書いたら記事にしています。\n初心者の絵を見ること 初心者が書いた、一般的にはヘタ、あるいは、うまくないと言われている絵を見ることについて、このような意見を持つ人がいるかもしれません。\n「そんな初心者が書いた下手くそな絵ばっかり見てるからダメなんだ。もっと、上手い人の絵を見なさい」と。\nでは、うまい絵を見れば、うまくなるのでしょうか。\n結論から言うと、うまくなりません。\nうまい絵をたくさん見ている人の多くは、実は絵がかけなかったりします。\n私も、ドラゴンボールのような、うまい絵をたくさん見てきているはずなのに、あまりうまくありませんよね。\nですから、うまい絵を見れば、うまい絵がかけるようになるとは限らない。\n世間一般には、一流に触れれば云々と言われますが、そんなことは知ったことではありません。\n私は、色んな人が描いた様々な絵を見るのが好きなだけで、一般的にうまいかどうかは気にしません。一般的にヘタと言われる絵を見るのも、うまい絵を見るのと同じくらい好きなのです。\nですから、沢山の人が絵を書き、ブログやtwitterに載せてくれるとうれしいねー。\nそんな風に思います。\n","description":"","formated_time":"2021-10-14","href":"https://syui.github.io/blog/post/2021/10/14/illust/","tags":["illust"],"title":"イラスト描いてみた101","utc_time":"2021-10-14T00:00:00Z"},{"categories":null,"contents":"ノートパソコンにステッカーを貼ってる人を見て、かっこええなーと思ったので、自分も貼ってみることにしました。\n100円ショップでシール買ってきて印刷するとできます。\n今回使ったのは、L判の光沢紙シールで、印刷設定もそんな感じで。\nでも透明シールのほうがよかったかも。\nパソコンには、arch linuxベースのai linuxがインストールされています(嘘です\n","description":"","formated_time":"2021-10-13","href":"https://syui.github.io/blog/post/2021/10/13/icon/","tags":["private"],"title":"ステッカーを貼ってみた","utc_time":"2021-10-13T00:00:00Z"},{"categories":null,"contents":"月逐い祭をクリアしました。月逐い祭は、めちゃくちゃ楽しめたと思います。\n最初の天賦MAXは雷電の元素爆発でした。天賦レベルMAXは雷電からやっていく予定。\n雷電を優先する理由 雷電は、私が初めて本気で課金しようか真剣に考えたキャラでもあります。\nというのも、雷電は今後も活躍し続ける可能性が高く、ここに注ぎ込むのも悪くないと考えたからです。\n雷電が強い理由は、PTの元素爆発を連続して回せるところにあります。\nしたがって、雷電の天賦は全強化しても全く無駄がありません。\n雷電は、元素スキルを放つ、通常攻撃して元素エネルギーを貯める、元素爆発する、という一連の流れが必要になります。\nPTの元素爆発が自身の爆発を強化するという特性を持つため、PTの元素爆発も無駄になりません。\n元素爆発自体が、そのキャラ特有の一番強力なものですから、使っておいて損はありません。\nまた、爆発はキャラごとに様々な特性を備えるため、適応力があります。雷電を残してPTを変えるだけで、どのような状況にも対処できる可能性が高い。それに、爆発は回避(防御)にも使えます。\nつまり、爆発が唯一無二の効力を持ち、それを回せる雷電もまた、唯一無二の性能を持ちます。\nすべてにおいて隙がなく、雷電を一言で言い表すなら、無駄がないキャラです。\n雷電は、私が全キャラ中で一番凸したいキャラでした。どうせならモチーフ武器も完凸するのがいいとすら思いました。ずっと使えると思うキャラなので。\nですが、なんとか踏みとどまりました。このときが一番、危なかった。\n無課金でも楽しめる 原神は無課金でも楽しめるゲームです。\n無課金じゃ楽しめないという人もいるみたいですが、そういう人は課金したほうがいい。すぐに強くなって無双しなきゃ楽しめない、最強じゃなきゃ楽しめないと考える人は、原神は課金すればするほど強くなる、有利になるゲームですから、当然、無課金で楽しむことはできません。\nなので、そういった価値観を持つ人は、課金したほうがいいと思っています。\n私自身、キャラを強くしたいという願望はありますが、しかし、ゲームを楽しむという基準においては、私には課金は必要ないと思いました。\nむしろ、課金で強くしたらすぐに飽きちゃう可能性すらあるので、課金するのやめました。\n一度、課金してしまうと、リミッターが外れちゃうと思うので、やはり、最初に決めた無課金でやってくほうが自分には合ってると思う。無課金であることも、実は楽しんでる。\nでも、課金するなら、雷電を最強にしたかったなって思います。\n今後の方針 現在、螺旋11-3で止まってて、おそらく、私の手持ちでは厳しいと思います。\nまあ、PT全員のレベル上げ、聖遺物を厳選し、武器を強化して、凍結パーティーを採用すればいけなくはないと思うんですが、そこは目指しません。\n計画的に強いキャラを引きつつ、強いキャラを育成しているうちに、自然とクリアできるようになればいいと思ってて、現在は、その方向性で考えています。\n無課金では、強いキャラを狙う、育てるというのは、とても大変なことです。なので、当初計画していた方向性がブレたり、間違ったりすると、さらに大変なことになりそうだと思うので。\n現在、私が優先して狙うキャラは、鍾離とウェンティです。\n理由は2つあって、一つは元素、もう一つは神属性です。\n現在、岩と風は足りておらず、育成していないので、必要な元素です。また、二人のシールドと拡散という役割からも必要なキャラです。さらに、神属性を持っているため、同元素中でそれを超えるキャラはなかなか出てこないという予測を立てており、その予測に基づき、優先して狙っていきたいキャラです。\n他の元素、例えば、行秋が水元素使いとして強力ですが、後に実装される水の神は、行秋の性能を超えてくる可能性があります。\nここで、行秋を強化してしまうと、リソース(モラ、樹脂、素材)がもったいないことになってしまう。無課金でやる以上は、リソースの無駄は避けるべきであり、リソースを無駄にしてしまうと、攻略死に直結する可能性があります。\n例えば、バーバラが好きだと言って、そこにリソースをつぎ込むと、攻略がやばくなる可能性が出てきてしまう。課金ユーザーの場合は、この問題は発生しません。\nリソース自体が大きくなるので、バーバラを完全強化してもお釣りが来ます。\n無課金だとリソースが限られており、少ないため、その使い所によっては、攻略が厳しいことになりうると考えています。\nとはいえ、例に出した行秋は、たとえそれ以上のキャラが実装されたとしても、強化して損はないキャラだと思います。また、プレイ時期によってもリソースは異なるので、この考えが絶対的に正しいとは思いません。\nですが、私の状況だと、リソースは無駄にしないほうがいい、攻略できなくなるから、と考えています。\nさて、次に私が狙っていきたいキャラは、神里or甘雨です。\n氷が不足してること、また、神が実装されるとしても、氷の国(スネージナヤ)は7国のうちの最後なので、時間的に余裕があり、原石を貯められる可能性が高いからです。\n風 -\u0026gt; 岩 -\u0026gt; 雷 -\u0026gt; 草 -\u0026gt; 水 -\u0026gt; 炎 -\u0026gt; 氷の順で今後4年間で7国すべてを実装予定らしい。なお、風、岩、雷はすでに実装済み。\nですから、鍾離、ウェンティの次に優先すべきなのは、個人的には、氷元素の神里or甘雨ということになります。\nちなみに、遠距離で攻撃できるキャラは育てていないので、甘雨を優先すべきとは思いますが、しかし、神里のほうが使いやすそうでいいなとは思っていて、悩ましい。\n次は、カズハを狙いたいと思ってるのですが、ウェンティを持った場合はスルーしてもいいかもしれません。ですが、風の神のウェンティが実装されている上でのカズハの評価ですから、引いておいて損はないと思っていて、余裕があれば狙っていきたい。\n最後に、星4キャラである行秋とベネットです。これは狙うというより、ガチャのすり抜けで来る可能性があるので、他の星5キャラのガチャを回すことを優先したいと思っています。現在、行秋がピックアップされていますが、個人的にはスルーしています。同時にピックアップされている星5キャラには、あまり魅力を感じないので、原石は貯めてる。\nなお、無課金なので1体引きで撤退という方針です。仮に凸を狙うとしたら、7神を引いたあとになります。その7神のうちどれかで狙うことになると思います。また、武器ガチャはやらないことに決めました(変更がなければ)。\n","description":"","formated_time":"2021-10-06","href":"https://syui.github.io/blog/post/2021/10/06/genshin/","tags":["genshin"],"title":"原神、天賦レベル10","utc_time":"2021-10-06T00:00:00Z"},{"categories":null,"contents":"この前、100枚目のイラストを描いたんですけど、今回は、その中で個人的にお気に入りのイラストを挙げていきたいと思います。\n1位 これが一番気に入ってるかも。この絵は、部屋に飾るために、いつもより丁寧に描いたやつです。\nあるyoutuberさんの動画を見ていて、部屋に絵が飾ってあったんですよ。\n誰かからもらった絵だと思うんですが、右下にサインがあって、それ自体は読めなかったんですが、その時、絵が飾ってある部屋って素敵だなあと思ったので、自分で描いて飾ってみたときのやつ。\n2位 100枚目のイラストということもあり、ちょっとだけ丁寧に書いたやつ。\nテーマは「願い」ですが、どうでもいいですね、そんなこと。\n3位 躍動感があって、うまく描けたと思ったやつ。\n4位 背景とかが気分いい絵です。この視点は難しかったと思うんだけど、なぜか一発でうまい具合に描けた記憶。\n他のお気に入りは、/img/に載せてますので、よかったら見ていってください。\n","description":"","formated_time":"2021-10-05","href":"https://syui.github.io/blog/post/2021/10/05/illust/","tags":["illust"],"title":"お気に入りのイラスト","utc_time":"2021-10-05T00:00:00Z"},{"categories":null,"contents":"現在、ポケマスでは、メガミュウツーYが実質配布されています。10/16までらしい。めちゃくちゃ強いので、もらっといたほうがいいかも。\nポケマスは、個人的に好きなポケモンが出てくる。メガリザードンXとかメガミュウツーYとか。\nちなみに、メガリザードンX(リザードン)が一番好きなポケモンで、あとは、ミミッキュ、ミュウ、メガミュウツーY、アルセウス、あたりが好き。\n現在のバディーズ一覧、レベル上げしてる。\n","description":"","formated_time":"2021-10-04","href":"https://syui.github.io/blog/post/2021/10/04/pogo/","tags":["pokemon","pokemas"],"title":"ポケマス、メガミュウツーY","utc_time":"2021-10-04T00:00:00Z"},{"categories":null,"contents":"最近、あまりプレイしてなかったのでイベントタスクが山積みになってて、それを消化しました。\n今回、映画ココとメロエッタ、ロケット団サカキ(シャドウ・ホウオウ)、カードコラボ(メルタン)のタスクを全部こなしました。ちょっとは進んでたものも含みます。3時間くらい外をうろちょろしてたら終わりました。クリア条件などが重なってるものも多く、割と効率良く進められたと思います。\nクリア条件が重なるというのは、例えば、ロケット団下っ端と戦うというタスクがあったとして、それが複数のイベントタスクのクリア条件に指定されてる場合、複数のイベントタスクを進めることができました。ということで、イベントが来てすぐにこなすのもいいけど、定期にこなすのも悪くないって思いました。まあ、あまり山積みにしちゃうと、消化できる気がしなくなり、やる気もなくなるので、貯めるのもほどほどがいいと思いますが。\nちなみに、サカキは9/2までだったみたいで、現れませんでした。これ放置してて見逃したみたい。でもサカキレーダー取れたので次が楽。\n","description":"","formated_time":"2021-10-03","href":"https://syui.github.io/blog/post/2021/10/03/pogo/","tags":["pokemon","pogo"],"title":"ポケモンGo、タスク消化","utc_time":"2021-10-03T00:00:00Z"},{"categories":null,"contents":"\n","description":"","formated_time":"2021-10-02","href":"https://syui.github.io/blog/post/2021/10/02/illust/","tags":["illust"],"title":"イラスト描いてみた100","utc_time":"2021-10-02T00:00:00Z"},{"categories":null,"contents":"\n","description":"","formated_time":"2021-10-01","href":"https://syui.github.io/blog/post/2021/10/01/illust/","tags":["illust"],"title":"イラスト描いてみた99","utc_time":"2021-10-01T00:00:00Z"},{"categories":null,"contents":"そういやもうすぐ100枚目。98枚も絵を描くとは思ってなかった。\n","description":"","formated_time":"2021-09-30","href":"https://syui.github.io/blog/post/2021/09/30/illust/","tags":["illust"],"title":"イラスト描いてみた98","utc_time":"2021-09-30T00:00:00Z"},{"categories":null,"contents":"ちょっと前にランニング関連の記事がバーっと出てて、自分もいくつか読ませてもらって面白いなーと思ったので、なにか書こうと思ったんだけど、書くことが特になにもなく、つまり、アドバイスできることは何もないので、とりあえず、自分の考えでも書いてみようかなという記事になっています。役に立つとか、そういうのではないと思う。\nちなみに、私はちょっとだけですが、ランニングやります。\nランニングはなんのため メリットばかりが叫ばれるランニングですが、特に意味はありません。\nなので、やりたくない人がやるものではないし、例えば、体を鍛えたいとか、そういった理由でやるものでもないというのが私の考えです。\nというのも体を鍛えるなら他にもっと効率的な方法がいくらでもあります。プロティンだって飲みまくればよいのでは。\nつまり、私がなぜやっているのかというと、体を鍛えるためでもなければ、痩せるためでもありません。特に理由もなく、なぜはじめたのかも忘れました。\nそんな私でもちょっと思うところはあって、世間的には、ランニングの少しばかりのメリットということになるのでしょうか。\n数ヶ月前から毎日走ってる人をお見かけしています。\nこれは、とても珍しいこと。なぜなら、毎日走ることは決して楽なことではないから。雨の日も、風の日もというやつで、大変な日もあることでしょう。体調だって悪いこともあるでしょう。\nそんな中、それらを乗り越えて、毎日走ることで得られたものは、おそらく、少しの高揚感と、そして、心の強さだけだったのではないかと。\n心を鍛えるつもりではじめたわけではないけど、結果として、精神が鍛えられるのではないかと思っています。\nまた、ランニング、つらいこともあるけど、楽しいことも少しあります。私の場合、走ってると気分がいい。\nただ、それだけです。\n多くの人は、これを聞いて、無駄だな、意味ないな、コスパ悪いな、とそう思うでしょう。それは、たしかにそのとおり。\nですから、個人的には、そこまでおすすめしない、というのが本音です。\n続けるのも大変でしょうし、続けられる人は圧倒的に数が少ないと思います。それなら他のことをやったほうがいいというのが持論です。\n続いて、ランニングやってる人向けになにか書きます。\n最高の靴 結論から申し上げると、ランニングに必要なものはなにもありません。もちろん、常識的な範囲でという話になりますが、例えば高い靴は、ランニングをする上では必要ありません。\n私も高い靴(1万5000円以上)と安い靴(3000円くらい)で走っていたことがありました。\nしかし、特に違いは何も感じませんでした。\n高い靴のほうが走りやすくなったとか、長持ちしたとか、そういった実感は全くなく、あったとしても誤差の範囲だったと思います。\nでは、最高の靴とはなんでしょう。\nそれは「履きなれた靴」です。\n高いか安いかに関わらず、その人が履きなれたものであれば、それは、その人にとって最高のものです。\nまあ、ランニングしてると、定期的に、寿命でそれが失われていくので、そのことに関しては、ちょっとだけ寂しい気分になるかな\u0026hellip;。\n靴の価値も他人に決めさせてはいけません。自分で決めましょう。\nもちろん、高い靴を買ってモチベを上げ、形から入っていく人もいて、それはそれでいいと思います。\nですが、靴の値段ではなく、履き心地で決めたほうがいいと思います。例えば、高かったけど合わない靴は、もったいないけど、売るか捨てるかしたほうがいい。あなたの足と靴、どちらが大切かという話でもあります。本当に大切なものを見失わないように。\nちなみに、自分はいつもナイキの靴を使ってます。\n42kmを走った時の話 実はこのまえ、はじめて42kmを走りました。その時の話を少しだけします。42kmに挑戦するのは、これがはじめてだったこともあり、走っている最中には色々考えて、その結果、走りきることができたと思います。\n事前に21kmを走っていたので感覚はつかめていました。一言でいうと、21kmまでは大丈夫、それ+7kmくらいは走れそうだけど、それ以降は未知数だと考えていました。\nまた、事前に21kmを走ったコースの中で特に走りやすそうな道を知っていましたから、そこを周回することで距離を稼ごうと戦略を立てました。\nいよいよ21kmを超え、未知の領域に突入します。走りやすそうな道の周回に入り、そこは特に歩道が大きく、だだっ広い道で、車も走らないので、「精神」が消耗することもありません。\n実はランニングにおいて、人や車、その他の物事に注意力を持っていかれると、余裕がないときは、特に辛かったりすることがあります。\nですから、そういった事はできる限り避けたほうがいい。\nまた、知らない道も精神の消耗が激しく、私の場合は、事前に21kmを走っていたコースということもあって、精神的な消耗を抑えることができたと思います。\nで、良さそうなコースを周回しながら、このまま順調なら、ここを周回することで42kmを走りきりたいと思っていたのですが、予想以上につらくなってきました。\nただただ静かで真っ暗で真っ直ぐな歩道をずーっと走っていると、それが原因か、あるいは体力的に辛くなってきただけなのか知りませんけど、これは、やばいと思い始めました。\n42kmまでまだ10km以上もあり、このコースをあと4,5回以上も回るのは無理だと、そう感じ始めていました。\nそこで私は、そのコースの周回を抜け、元来た道に戻ります。なぜなら、ラストの7kmはいつものコースを走ろうと計画したからです。\n大体、4,5kmでいつものコースに入ることができます。\nですが、正直、体力は限界でした。にも関わらず、わずかながら勝算を見いだせたのは「毎日走っているコースにたどり着けたなら、どれだけつらくても最後まで走りきれる」と思ったからです。\nここまで来ると、もはや、体力勝負なんかではありません。精神だけが物を言います。\n結果、死にそうになりながらも、なんとか、いつものコースに入ることができました。\nそこで、足が棒になるような感覚に襲われたりしたんですが、いつものコースの7kmを走り終え、無事、42km走り切ることができました。(死ぬかと思った\nこのときのこと、特にきつかったので、よく覚えています。\nこの話がなんの役に立つかわかりませんが、一応、ランニング中にあった思い出話を書きました。\nランニングは、体力というより、精神力の部分が大きい。\nなので、皆様は、私より遥かに簡単に42kmくらいを走れるんじゃないかと思います。\nですが、私も1回目はギリギリでしたが、2回目はどうでしょう。もしかしたら人並みくらいになっている可能性も。(甘すぎる希望的観測\n","description":"","formated_time":"2021-09-29","href":"https://syui.github.io/blog/post/2021/09/29/running/","tags":["private","running"],"title":"ランニングに必要なもの","utc_time":"2021-09-29T00:00:00Z"},{"categories":null,"contents":"ポケモン界の最新であるガラル地方のポケモン達が追加され始めました。\nそういえば、ポケモンGOは5周年です。おめでとう！\n自分は、このゲームが長く続きそうと思ったので、続けてきましたが、今や本家(原作)を超えそうな勢いで成長しているように見えます。\n理由はいくつかあって、このゲームが常時ネット接続が必要なネットゲームだからです。\n従来のポケモンでは、チートツールでポケモンを作ったり、あるいは個体値を操作したりといったことが比較的簡単に実行可能でした。しかし、ポケモンGOでは、そういったことが難しくなりました。\nまた、ポケモンGOでは従来のゲームよりポケモンを捕まえるのが難しくなりました。\n従来のゲームは家の中でプレイしていればよかったのですが、ポケモンGOでは、外に出てポケモンを探すところからはじめなければなりません。\nその点で、ポケモンGOで捕まえたポケモンの価値のほうが高くなりました。\nもちろん、通常はそういう事を考えてゲームをプレイするわけではありませんが、しかし、ゲームというものも、自然と価値が高い方に人は流れるのではないだろうかと私は思います。したがって、このこともポケモンGOのユーザー数が増え続けている一つの要因なのかもしれません。\nポケモンGOが面白いかというと、そうではありません。つまり、通常の感覚では面白くも楽しくもないと思います。\nですが、不思議と満足感は常にある、そういうゲームです。\nこのゲームは、面白いだけ、楽しいだけ、瞬間的な高揚感が得られるだけ、そういったゲームとは一線を画してると思います。つまり、そういうところを目指しているわけではないと思います。\nポケモンGOは、現実にリンクした形でポケモンを捕まえたり、育てたり、そういうところが、他のゲームとは少し違うところであり、それが満足感につながっている部分だと私は思います。\nポケモントレーナーの日常が、常に面白くて楽しくて興奮するものだと思いません。ですが、それでいいのだと、私は思います。\n","description":"","formated_time":"2021-09-28","href":"https://syui.github.io/blog/post/2021/09/28/pokemas/","tags":["pokemon","pogo"],"title":"ポケモンGO、ガラル地方","utc_time":"2021-09-28T00:00:00Z"},{"categories":null,"contents":"\u0026hellip; \u0026hellip; \u0026hellip; !!\nレッド、引きました。\nポケマスも無課金で続けていますが、前回は貯めてたダイヤ全部使った爆死だったこともあり、今回は早めに出そうだなあということで、単発で回してました。すると、40/400くらいで出ました、よかった。\nアメ使って凸しました。\n","description":"","formated_time":"2021-09-27","href":"https://syui.github.io/blog/post/2021/09/27/pokemas/","tags":["pokemon","pokemas","game"],"title":"ポケマス、レッド","utc_time":"2021-09-27T00:00:00Z"},{"categories":null,"contents":"深境螺旋11に到達しました。\nPTは以下の通り。育成は進んでいませんし、進む予定もありません。(主にモラとレベル本不足で\nPT1 : 雷電 LV90(聖遺物+20), ノエル LV60(+15), モナ LV50(+0), 香菱 LV50(+0)\nPT2 : クレー LV90(聖遺物+20), バーバラ LV60(+15), ガイヤ LV40(+0), スクロース LV40(+0)\n雷電、強すぎる 雷電は、現状、無凸、聖遺物厳選なし、武器も無凸ですが、かなりの強さを発揮しているように見えます。\n逆に、クレーのPTは敵を倒すのに時間がかかりすぎてる。あるいは死にすぎる。\nよって、現在の手持ちとレベルでは螺旋11の攻略は難しいと判断し、ここで終了しています。\n今の所、無課金を継続しつつ、以下のPTを目指したいと考えています。\nPT1 : クレー, 雷電, 鍾離, ウェンティ\nPT2 : 甘雨(or神里), ベネット, 行秋, カズハ\n甘雨と神里はどちらも氷枠なので、どちらか一人なんですが、遠距離の甘雨がいいかもしれません。しかし、個人的には神里のほうが使いやすそうと思ってて、武器とか時期の状況によるかも。\nベネットと行秋は星4なので、まだ持っていませんが、すり抜けで狙いつつ、残る4キャラである鍾離, ウェンティ,甘雨(or神里), カズハをガチャで回していくという感じになると思います。\nで、4キャラを狙うとして、一人あたり原石7,000(期待値)以上が必要になります。つまり、合計で28,000ですね。\nそれくらいを貯めながら新実装が来たときに、上記の4キャラに代替可能かどうかを判断しつつ、代替可能なら新キャラのほうを狙っていきたい。\n","description":"","formated_time":"2021-09-26","href":"https://syui.github.io/blog/post/2021/09/26/genshin/","tags":["genshin","game"],"title":"原神、深境螺旋11に到達","utc_time":"2021-09-26T00:00:00Z"},{"categories":null,"contents":"windowsの使い方をまとめます。windows11を使用しています。\ntitle body cpu AMD Ryzen 7 5700X memory 32GB / DDR4-3200 DIMM (PC4-25600) gpu GeForce RTX 4060Ti 8GB storage 1TB M.2 NVMe SSD inc © INVERSENET gpu 基本的にgpuのhdmi端子からdispalyに接続します。\nnvidiaのdriverは常にupdateしてください。\ndownload : driver, cuda v12.1, cudnn\n現在、pytorchはcuda v12.1に対応しています。\ndefault setting 基本的にはpwshを使用します。これからはmcpからAIで操作してもらってもよいでしょう。\nsearch-bar(bing disable) # 「Explorer」キーの存在確認 \u0026amp; 作成 New-Item -Path \u0026#34;HKCU:\\Software\\Policies\\Microsoft\\Windows\\Explorer\u0026#34; -Force | Out-Null # DisableSearchBoxSuggestions を 1 に設定（Bing無効化） New-ItemProperty -Path \u0026#34;HKCU:\\Software\\Policies\\Microsoft\\Windows\\Explorer\u0026#34; ` -Name \u0026#34;DisableSearchBoxSuggestions\u0026#34; -PropertyType DWord -Value 1 -Force # Explorer.exe を再起動 Stop-Process -Name explorer -Force Start-Process explorer local account windowsをinstallする際に、microsoft accountを要求されます。これを回避するには、インターネット接続を停止、つまり、回線を引っこ抜いてから初期設定を行う必要があります。\nwinget choco, scoopなどがありますが、現在はwingetが使いやすくなっています。\n# https://github.com/microsoft/winget-pkgs $ winget install git.git \u0026lt;Publisher\u0026gt;.\u0026lt;PackageName\u0026gt; $ winget show --id=9NT1R1C2HH7J --source=msstore 公開元: OpenAI 発行元 URL: https://help.openai.com title command(id) url terminal microsoft.windowsterminal.preview https://github.com/microsoft/terminal pwsh microsoft.powershell.preview https://github.com/powershell/powershell aishell microsoft.aishell https://github.com/powershell/aishell/ openssh microsoft.openssh.preview https://github.com/powershell/win32-openssh wsl microsoft.wsl https://github.com/microsoft/wsl vscode microsoft.visualstudiocode https://github.com/microsoft/vscode vim vim.vim https://github.com/vim/vim-win32-installer git git.git https://github.com/git/git node openjs.nodejs https://github.com/nodejs/node nvm coreybutler.nvmforwindows https://github.com/nvm-sh/nvm python python.python.3.12 https://github.com/python conda anaconda.miniconda3 https://github.com/anaconda title command(id) cuda nvidia.cuda epicgameslauncher epicgames.epicgameslauncher blender blenderfoundation.blender discord discord.discord unity unity.unity unity hub unity.unityhub godot godot.godot obs obsproject.obsstudio ollama ollama.ollama chatgpt \u0026ndash;id=9NT1R1C2HH7J \u0026ndash;source=msstore default shell wingetでpwshをinstall, upgradeしてopensshのdefault-shellにする手順です。\n$ ssh windows $ winget -v # 7.2.6 $ winget upgrade microsoft.powershell # 7.3.0 $ winget install microsoft.powershell.preview $ pwsh-preview # winのpathは面倒なので適当に補完。下記でも行けると思いますが、念の為tabで変換するといいかも $ vim c:/programdata/ssh/sshd_config PasswordAuthentication no ForceCommand pwsh-preview # default-shellにする手順(forcecommandより早くなるけど注意が必要) $ get-command pwsh-preview $ New-ItemProperty -Path \u0026#34;HKLM:\\SOFTWARE\\OpenSSH\u0026#34; -Name DefaultShell -Value \u0026#34;C:\\Program Files\\PowerShell\\7-preview\\preview\\pwsh-preview.cmd\u0026#34; -PropertyType String -Force $ net stop sshd $ net start sshd $ exit $ ssh windows powershell 7.3.0-preview $ winget upgrade --all openssh https://github.com/PowerShell/Win32-OpenSSH\n$ winget install microsoft.openssh.beta sshd_configはc:/programdata/ssh/sshd_configにあります。public-key方式でアクセスするには、最後の方の行にauthorized_keysのpathが記載されており、そこにpublickeyを記述します。ここでは、c:/programdata/ssh/administrators_authorized_keysになります。なお、ssh-copy-idコマンドは機能しません。\n$ ls c:/programdata/ssh/ Match Group administrators AuthorizedKeysFile __PROGRAMDATA__/ssh/administrators_authorized_keys ADD userの場合、publickey認証が通らないことがあるようです。このようにしてc:/users/$user/.ssh/authorized_keysに置いてみましょう。pathにauthorizedKeyPath:c:/users/$user/.ssh/authorized_keysを追加します。\nc:/programdata/ssh/sshd_config\nPasswordAuthentication no PermitEmptyPasswords yes AuthorizedKeysFile .ssh/authorized_keys #Match Group administrators # AuthorizedKeysFile __PROGRAMDATA__/ssh/administrators_authorized_keys shellをpwshに変更するには、以下のコマンドを実行します。\nhttps://docs.microsoft.com/ja-jp/windows-server/administration/openssh/openssh_server_configuration\n$ New-ItemProperty -Path \u0026#34;HKLM:\\SOFTWARE\\OpenSSH\u0026#34; -Name DefaultShell -Value \u0026#34;C:\\Program Files\\PowerShell\\7\\pwsh.exe\u0026#34; -PropertyType String -Force default-shellを変更した場合の注意ですが、更新した際に以下のerrが出るようになる場合があります。default-shellのpathが違うとpassword/publickey認証のどちらも通りません。\nPermission denied (publickey,keyboard-interactive).\nscpでConnection closedが出る場合、pathが通っていない可能性があります。\nsshd_configでfstp-serverのpathを記述するか、openssh(dir)のpathを追加しましょう。\n$ get-command fstp $ Set-Item Env:Path \u0026#34;c:C:\\Program Files\\OpenSSH;$ENV:Path\u0026#34; auto-login 起動時のパスワードを省略する設定です。\n通常はnetplwizを起動して、パスワード入力が必要のチェックを外します。\n仮にユーザーがこのコンピューターを使うには、ユーザー名とパスワードの入力が必要のチェックボックスが表示されない場合、レジストリの値が2になっているので変更する必要があります。\nregeditを開き、HKEY_LOCAL_MACHINE \u0026gt; SOFTWARE \u0026gt; Microsoft \u0026gt;Windows NT \u0026gt; CurrentVersion \u0026gt; PasswordLess \u0026gt; Deviceを0にします。\nhttps://docs.microsoft.com/ja-jp/troubleshoot/windows-server/user-profiles-and-logon/turn-on-automatic-logon\nsysinternals https://learn.microsoft.com/ja-jp/sysinternals/downloads/\nsynthv sunoに移行しました。\n作曲アプリです。\nhttps://dreamtonics.com/synthesizerv\nstable-diffution comfyuiに移行しました。\nAIによるイラスト生成です。\nmodel-fileをdownloadします。今回はstable-diffusion-v1-4を使用します。novelaiのmodelがすごいらしい。他のmodelもmodel.ckptに置き換えると動きます。\nhuggingface.co\n$ git clone https://huggingface.co/CompVis/stable-diffusion-v-1-4-original $ mv stable-diffusion-v-1-4-original stable-diffusion/models/ldm/stable-diffusion-v1 $ mv sd-v1-4.ckpt model.ckpt 次にanacondaでstable-diffusionのpython環境を構築します。cudaをinstallしておいてください。\n# 現在、scoop:extrasからanaconda3がなくなっています # scoop bucket add extras # scoop install anaconda3 $ scoop install python rust $ python -V $ pip -V $ pip install --pre torch torchvision torchaudio --index-url https://download.pytorch.org/whl/nightly/cu121 $ conda init powershell $ git clone https://github.com/basujindal/stable-diffusion $ mkdir -p ~/stable-diffusion/models/ldm/stable-diffusion-v1 $ mv sd-v1-4.ckpt ~/stable-diffusion/models/ldm/stable-diffusion-v1/model.ckpt $ cd stable-diffusion $ conda env create -f environment.yaml $ conda activate ldm # pytorchはcuda:12.1に対応しています $ conda install pytorch torchvision torchaudio -c pytorch -c conda-forge $ conda install jupyter pandas matplotlib -c conda-forge $ pip install diffusers transformers scipy ftfy $ pip install $ python -m pip install pytorch-lightning $ pip install einops 次回からは$ conda activate ldmで使います。\n$ conda activate ldm $ cd ~/stable-diffusion # query(txt)から生成 $ python optimizedSD/optimized_txt2img.py --prompt \u0026#34;japanese anime of a beaultiful girl, fantasy costume, fantasy background, be autiful composition, cinematic lighting, pixiv, light novel, digital painting, extremely, detailed, sharp focus, ray tracing, 8k, cinematic postprocessing\u0026#34; --H 512 --W 512 --seed 27 --n_iter 2 --n_samples 10 --ddim_steps 50 # imgから生成 # convert -resize 700x510 o.png input.png $ python optimizedSD/optimized_img2img.py --prompt \u0026#34;japanese anime of a beaultiful girl, pixiv, light novel, digital painting, 8k\u0026#34; --init-img C:\\Users\\syui\\input.png --strength 0.2 --n_iter 2 --n_samples 2 --H 300 --W 230 # web-uiからパラメータを調整 $ python optimizedSD/inpaint_gradio.py --init-img C:\\Users\\syui\\input.png # open localhost:7860 $ ls outputs/* 追記 : update\ntxt2img.py\ncudaを12.3から12.1にdowngradeします。\npytorchはstableではなくnightlyであるpre-versionを使わないとインストールできません。\n# pytorch:nightly, cuda:12.1 $ pip install --pre torch torchvision torchaudio --index-url https://download.pytorch.org/whl/nightly/cu121 scoopのanaconda3がなくなっていたので手動でインストールしました。具体的にはminicondaを適当にインストールして~/miniconda3/condabinにpathを通します。私はpwshを使うので、以下のコマンドで自動設定します。これをやらないとactivateを使えません。\n$ conda init powershell diffusers .ckptではなく.safetensorsを使用します。\nv2.1 : https://huggingface.co/stabilityai/stable-diffusion-2-1 github : https://github.com/Stability-AI/stablediffusion model : civitai prompt : majinai $ conda diactive --- $ conda activate ldm $ pip install diffusers $ pip install git+https://github.com/huggingface/transformers$ # https://huggingface.co/docs/diffusers/api/pipelines/stable_diffusion/text2img from diffusers import StableDiffusionPipeline import torch import sys pipe = StableDiffusionPipeline.from_single_file(\u0026#34;model.safetensors\u0026#34;, torch_dtype=torch.float16).to(\u0026#34;cuda\u0026#34;) # Potential NSFW content was detected in one or more images. A black image will be returned instead. Try again with a different prompt and/or seed. #pipe.safety_checker = None #pipe.requires_safety_checker = False # nsfw_content_detected n = len(sys.argv) if n == 2: prompt = sys.argv[1] else: prompt = \u0026#34;masterpiece, best quality, 1girl, solo, flower, long hair, outdoors, letterboxed, school uniform, day, sky, looking up, short sleeves, parted lips, shirt, cloud, black hair, sunlight, white shirt, serafuku, upper body, from side, pink flower, blurry, brown hair, blue sky, depth of field\u0026#34; print(prompt) image = pipe(prompt=prompt, height=512, width=768).images[0] image.save(\u0026#34;test.png\u0026#34;) $ python safe.py $ ls test.png $ python safe.py \u0026#34;masterpiece, best quality, very_high_resolution, large_filesize, full color, beautiful kawaii, gold hair, little girl\u0026#34; $ ls test.png mcafee remove Win+Rを押してmsconfigからboot(セーフモード)を起動しましょう。以下のようなフォルダを削除します。\nC:\\Program Files\\Common Files\\McAfee C:\\Program Files\\Common Files\\AV C:\\Program Files(x86_64)\\Common Files\\McAfee C:\\Program Files(x86_64)\\Common Files\\AV C:\\ProgramData\\McAfee なお、以下のコマンドは管理者実行でも効果なし。\ntaskkill /im /f mfemms.exe wmic process where \u0026#34;name=\u0026#39;mfemms.exe\u0026#39;\u0026#34; delete 理由: アクセスが拒否されました。 sc stop \u0026#34;mfemms\u0026#34; sc config \u0026#34;mfemms\u0026#34; start= disabled sc delete \u0026#34;mfemms\u0026#34; https://answers.microsoft.com/en-us/windows/forum/all/remove-all-mcafee-files/19ff126f-4378-4e43-ab7f-262a6f6e4853\ndesktop このアプリは現在非推奨です。\nhttps://github.com/rocksdanister/lively こういうのはあまり使わないんだけど、nasaのページが気に入っているので、それを設定したいということで。 https://eyes.nasa.gov/apps/solar-system/#/earth ultravnc このアプリは現在非推奨です。\nhttps://www.uvnc.com/downloads/ultravnc.html $ winget install uvncbvba.UltraVnc 管理者権限で実行しなければ、すべてのウィンドウに対して操作することができません。 したがって、exeやstartup(shell:startup)は、`プロパティ \u0026gt; 管理者としてこのプログラムを実行する`にチェックを入れます。 その後、タスクスケジューラで設定しなければ自動起動しないようになりました。最上位の権限にチェックを入れます。 virtualbox このアプリは現在非推奨です。\nhttps://www.virtualbox.org/ \u0026#34;C:\\Program Files\\Oracle\\VirtualBox\\VBoxManage.exe\u0026#34; startvm arch --type headless virtualboxのimgを起動時にbackgraundで実行するには、以下のようなscriptをstartupを置きます。 ","description":"","formated_time":"2021-09-23","href":"https://syui.github.io/m/post/windows/","tags":["windows","m"],"title":"windows","utc_time":"2021-09-23T00:00:00Z"},{"categories":null,"contents":"ios15 : https://www.apple.com/jp/ios/ios-15/\niphone se1がios15に対応するということでupgradeしてみました。\nこの端末、思った以上に長生きするかもしれません。\nというのも、appleがiosについて、古いverのsecurity patch(update)を継続していく方針を発表したからです。\nつまり、来年にios16が来て、それがse1非対応だったとしても、ios15のままで問題は生じません。\n今回、iphone se1をios15にしてみましたが、動作に全く問題はありませんでした。\n新しい機能にあまり興味がありませんし、個人的には、pokemongoが起動し、そこそこに動作するなら、新しい端末に乗り換える必要性を感じません。\nということで、この端末は予想以上に長生きする可能性があると思いました。\nこれはとてもいいことです。私が持っている端末は全部お気に入りなので。\nそういえば、自分が使ってる端末、意外と長生きする傾向にあるのでは、と思ったので、ちょっと整理してみることに。\niphone se(1st gen) os : ios 15 (最新)\ncpu : A9\nmemory : 2G\niphone5の形や大きさが好きで、それを系譜しているiphone se1を使っています。iphone5sからハードを分解して内部をいじっているうち内部構造に詳しくなりました。seが故障しても修理できるので、このタイプの端末には安心感があります。\nipad 7th os : ios 15 (最新)\ncpu : A10\nmemory : 3G\n原神とかも普通にプレイできてる。ただ、自作フィギュアから3Dモデルを作ってみたいなあと思っており、scaniverseというアプリに非対応なので、ipadは買い替え時かもしれません。\nnexus7(2013) os : android 11 (最新)\ncpu : Krait 1.50GHz\nmemory : 2G\nnexus7(2013)を調べてみるとmemoryが2Gもあったので驚いてます。それにしては動作がちょっと重くて、アプリもゲーム系は動かない気がしてるけど、そのへんはcpu, gpuなのかな。まあ、memory足りてないと落ちるようになるんだけど。\nこの端末はrootを取り、公式imgを焼いてましたが、最新のandroidを入れるにあたって、非公式imgを使うようになりました。\nipadを買ってからは、あまり用途がなくなっていた端末ですが、色々と遊べるので、たまに使ってます。\nmacbook air(mid2013) os : mac bigsur 11.6 (最新)\ncpu : core i7\nmemory : 8G\nメインで使ってるパソコンで、未だに最新macが問題なく使えてる。apple製はハード、ソフトともに長く使えるので好き。iosはその傾向になかったけど、今後改善されそうなので期待しています。\nmacbook air(mid2011)からの乗り換えです。私が初めて自分で買ったパソコンはmacbook air(mid2011)でした。現在もarchlinuxをinstallして使ってます。このタイプのマシンは分解・修理しているうちに詳しくなりました。\nlenovo ideacentre 350 os : windows 11 (最新)\ncpu : ryzen5(3500u)\nmemory : 8G\nwindows機のdesktopです。windowsを入れたハードはfilesystemの関係上、一つは必要になることが多く、また、windowsしか動かないアプリもあり、なおかつそれがハード起因のツールだった場合、仮想環境では不便も多いので、あると便利です。\nlenovo y520 tower os : windows 10 (古い)\ncpu : core i5\ngpu : geforce GTX1050Ti\nmemory : 8G\nこっちはgpuとか乗ってるパソコンになります。その他にもちょこちょこ端末やマシンはあるけど、省略します。\n","description":"","formated_time":"2021-09-22","href":"https://syui.github.io/blog/post/2021/09/22/ios/","tags":["ios"],"title":"ios15とiphone se1","utc_time":"2021-09-22T00:00:00Z"},{"categories":null,"contents":"久しぶりに描いた。\n","description":"","formated_time":"2021-09-20","href":"https://syui.github.io/blog/post/2021/09/20/illust/","tags":["illust"],"title":"イラスト描いてみた97","utc_time":"2021-09-20T00:00:00Z"},{"categories":null,"contents":"syui.aiは、このサイト(ブログ)のタイトルです。\nこのサイトには、いくつかの隠し機能があり、今回はそれらを使って、このサイトを便利に閲覧しちゃおうという内容です。\nといっても、ほとんどが遊び機能。\n環境 : safari, chrome\n動作するには、browserのcookie, javascriptをenableに、adblockなどpluginをdisableにする必要があるかもしれません\nj, kで移動 ブログ記事へのリンク間をshift + j, shift + kで移動できるようになっています。\nshiftを選択している理由は、このような設定はkeybindを奪うことにもなり、不便が生じるかもしれないので、あまり使われなさそうなshiftにしています。\nterminalの呼び出し ctrl + enterでterminalを呼び出すことができます。主に/と2階層目くらいまでは呼び出せるようなってることが多いかな。\nこのterminalにより、サイト上の色々な機能にアクセスしやすくなってます。\n現在使える便利機能をいくつか紹介します。\nただし、個別記事である/blog/foo上ではterminalは呼び出せず、代わりに/blogに移動するようになっています。/blogからは従来通りterminalを呼び出すことができます。\n/ コマンドで個別記事に飛ぶ $ / /コマンドを使うと最新記事の中から個別記事に飛ぶことができます。飛びたい番号を入力します。\nsearch コマンドでタグを検索する $ search -t hugo search -t $tagでタグを検索することができます。オプションなしだと通常検索です。補完機能があるので\u0026lt;tab\u0026gt;でタグ補完できます。\nlogin コマンドで自分の名前を表示する $ login login : test password : test 適当な遊びコマンドですが、自分のusernameとip addressをこのサイト上に表示することができます。ちなみに、個人情報がこのサイトの管理人に送信されることはありません。あと、passwordは何でもいいです。\nまた、遊びの一環としてroot loginに挑戦してみるのも面白いかもしれません。ちゃんとpasswordが設定されてますので、ぜひ、突破してみてください。\nその他 その他にも面白おかしいコマンドがいくつかあります。是非、遊んでみてください。\n","description":"","formated_time":"2021-09-19","href":"https://syui.github.io/blog/post/2021/09/19/blog/","tags":["blog","hugo"],"title":"syui.aiの歩き方","utc_time":"2021-09-19T00:00:00Z"},{"categories":null,"contents":"この前、スシローとポケモンのコラボがあり、ポケモンカードを手に入れました。\nポケ盛りのフィギュアとかも良さそう。\nhttps://www.yoshinoya.com/special/pokemori202108/\n","description":"","formated_time":"2021-09-18","href":"https://syui.github.io/blog/post/2021/09/18/pogo/","tags":["pokemon","pogo"],"title":"ポケモンカード","utc_time":"2021-09-18T00:00:00Z"},{"categories":null,"contents":"ポケマス、2周年ガチャで爆死しました。1周年でも爆死してなかった？ということで、今回はそのことについて書いていきたいと思います。\nポケマスの2周年、リーリエ、エヌ、ダイゴのどれを回そうという話を以前に書きましたよね。そこで私は「ダイゴを回す」と言いましたが\u0026hellip;。\nすみません、あれは嘘です！嘘でした。\n実は、ダイゴを回す前にエヌを10連で回したんですよ。\nこんだけダイヤがあればどちらも手に入れられると思うから、どっちからやろうが同じだろうと高をくくっていたのです。\nですが、結果、出ませんでした！\nエヌは絶対に一体は確保しておきたいバディーズなので、その後も回し続け、それでも出なかった。そして、気づけば天井です。しかもダイヤは空っぽ。\nおまけにレッド(マジコスではない)が実装されたので、無課金で得られるダイヤをレッドにつぎ込むことに。\nレッドまで実装されるとは予想外です。\n完全にダイヤの使い所をミスりました。おそらく、フーパーとムゲンダイナあたりをスルーして貯めておくことができなかったのが敗因だったと思われます。\n現在の進捗ですが、チャンピオンは7500でクリアすることもあれば、しないこともありますが、一度クリアすると、なぜかハードルが下がり(難易度ではなく心理的)、簡単にクリアできるようになりました。\nちなみに、レジェンドバトルとダイヤもらえるやつはこんな感じ。\n引くべきバディーズのランキング、更新しときます。\nレッド\u0026amp;リザードン, エヌ\u0026amp;レシラム レッド\u0026amp;カビゴン, グリーン\u0026amp;プテラ リーフ\u0026amp;フシギバナ, グリーン\u0026amp;カメックス リーリエ\u0026amp;ルナアーラ, ダイゴ＆レックウザ 特におすすめなのは以下の2キャラかな。\nエヌ\u0026amp;レシラム, レッド\u0026amp;カビゴン\n","description":"","formated_time":"2021-09-17","href":"https://syui.github.io/blog/post/2021/09/17/pokemas/","tags":["pokemon","pokemas","game"],"title":"ポケマス、2周年ガチャで爆死","utc_time":"2021-09-17T00:00:00Z"},{"categories":null,"contents":"冒険者ランク50になりました。世界ランク7です。\nモラ不足で、レベル、武器、天賦、全部モラが必要なので、4キャラ分もモラを集めるの無理では。\n","description":"","formated_time":"2021-09-15","href":"https://syui.github.io/blog/post/2021/09/15/genshin/","tags":["genshin","game"],"title":"原神、冒険者ランク50","utc_time":"2021-09-15T00:00:00Z"},{"categories":null,"contents":"現在、冒険者ランク49です。50になったときに開放されるレベルアップ素材、突破素材も無事集められました。\nこれも雷電を引いたおかげかな。雷電いなかったら攻略止まってたと思う。ということで、今回は、雷電の評価と履歴から攻略に必要な情報をまとめていきたいと思います。\nまずはプレイ履歴、つまり、「失敗から学ぼう」という初心者向けの記事になります。原神を始めたばかりの人は参考にしてみてください。\n以下、私の大体の原神歴です。今年の6月頃からはじめました。\nクレーというキャラがいるらしく、クレー可愛いなと思って原神をはじめる 原石1,000を使いクレーを引く 限定配布の武器、ドドコの物語をゲットする 素材集めとかは冒険者ランクが上がってからやればいいやと、ストーリーとデイリーのみやってた(クレーのみ育成し、聖遺物も適当にあるのをつける 稲妻が解禁された時点で最新のストーリーにおいつく(クレーだけが頼りなので敵の討伐がつらくなってくる 稲妻の物語最終章が来る(ここで雷電将軍を原石7,000を使って引いた 武器ガチャを回してハズレである無工の剣を引く(星4武器の祭礼の剣, 西風長槍, 西風猟弓, 流浪楽章などを手に入れる 冒険者ランク45になり素材集めを開始する(クレー、雷電、バーバラ、ノエルを育成する ここでようやくボスや遺跡を一人で回れるようになった このような履歴となっています。\n仮に今から原神を始めるとしたら、どのようなやり方がいいのか。私が失敗した点などを踏まえ解説します。\n原神で最も重要だと思うのは「強キャラを引く」ことです。\nですから、原神をはじめるにあたって、そのことを最優先に意識したほうがいいです。\n次に星4武器の祭礼の剣, 西風長槍, 西風猟弓, 流浪楽章は強化しておいて損はないと思います。逆に言うと、それ以外の武器というのは、使いたいキャラにもよりますが、使う予定がない武器やキャラは強化すべきではありません。私も何個かミスって強化してしまったことがありました。\n天賦レベルをMAXに上げるには週ボスの報酬が必要となります。ですから、マルチでもなんでもいいので、週ボスと遺跡ボスなどを無駄なくこなし、天然樹脂を消費しておきましょう。天然樹脂は1日120くらい回復するとかそういった仕組みであり、デイリーと合わせてここの消費をやっておくといいです。私は育成はじめた最近まで知りませんでした。育成は強いキャラを引いてからでいいやと思ってたので。\n以上です。要約すると、以下のようになります。\n強キャラを引く\n武器の強化は使うものだけ、キャラの育成も同じ(無課金の場合、バーバラとノエルは育てないと詰むことがあります。それまでにベネットとかを引いてれば別ですが、持ってるキャラによります\n天然樹脂の消費は初期の頃からやっておく(マルチ活用\n原神とガチャ 原神というのは、課金すればするほど強くなるゲームです。\nですから、課金を考えている人は、すぐにでも課金したほうがいい。それだけ効率も良くなり、お気に入りのキャラを強くすることで楽しめるということもあるでしょう。\n実際、私も雷電に課金しそうになりました(踏みとどまりましたが)。\nとはいえ、課金を考えている人には、雷電将軍がピックアップされている今の時期、課金するのはおすすめかもしれません。雷電はここでいう強キャラ認定されるようなキャラだからです。そういうキャラに集中投資するのは、とても合理的。\nただし、キャラの強化、凸といいますが、凸するとどうなるのかについても少し書いていきたいと思います。\n原神では、凸すればするほど他キャラとの差は縮まります。つまり、どのキャラも課金すればある程度強くなり、他キャラとの差は縮まると思っておけばよいでしょう。そういった傾向にあります。\nですから、好きなキャラ、使いたいキャラに課金するのも全然ありだと思います。\n決定的な差がでるのは、あくまで初期の無凸段階などであり、ここでいう強キャラも無凸の状態を指しています。どのキャラも凸すれば強い。\n雷電の評価 雷電も課金すれば圧倒的に強くなるキャラの一人です。無凸でも相当強いですけどね。\n元素チャージ効率は、戦闘力に直結します。必殺技(元素爆発)が弱いキャラはいませんし、それが連発できるというのは、必要ない場面を想定できない。\nどのような場面にも必要になりますし、元素爆発は回避にも使えます。\nもし雷電を引いてなかったら、おそらく、私の攻略は終わってました(攻略できなかった)。\n武器ガチャ 初回では武器ガチャは良い結果をもたらしました。強化素材を投入できる武器が手に入ったので。それまでは星4武器を一つも持っていませんでした(ドドコ以外)。\nしかし、武器ガチャはもう二度とやらないと思います。\n様々な動画とかを見て、これはやるべきではないなとそう思いました。\nですから、欲しいキャラが来たときにキャラガチャだけ回すのがいいかな。武器も出るし。\n無課金でやる以上は、もはや武器は無視すべきかと。\n","description":"","formated_time":"2021-09-14","href":"https://syui.github.io/blog/post/2021/09/14/genshin/","tags":["genshin","game"],"title":"原神、失敗から学ぶ","utc_time":"2021-09-14T00:00:00Z"},{"categories":null,"contents":"最近の原神のプレイ状況を紹介です。\n最近、キャラの育成を始めて、そこからやっと原神でやることが見えてきました。\nやることって具体的には素材集めなんですが、天賦レベル7以上にするにはボスを倒さないとドロップしない素材があるので、ボスを倒さないといけないみたい。知らなかった。\n現在、世界ランク6なのですが、ボスの雷電が強すぎたので、ノエルとバーバラを育成することにしました。そうしないと勝てなかった。\nこの二人は最終的なPTに入ってこない気がするので、育てる意味ってあまりないんですが、無課金勢は次にガチャを回すのいつになるんだろうって考えたら、今育てても問題なさそうと思ったので。\nですが、ここでモラと脆弱樹脂、レベル本が不足するという事態が発生。まさかあれだけあったものが枯渇するとは思ってなかった。\n育成に関しては、現在、聖遺物の厳選はなし(というか資源もない)。ノエルに旧貴族のしつけで防御を優先し、バーバラに愛される少女でHPを優先してます。クレーは火魔女の攻撃、雷電は絶縁の攻撃です。\n武器に関しては雷電に西風をもたせています。これは鍾離が来ても使い回せるので強化しました。あと、釣りで漁獲という武器もそのうち手に入れたいと思ってます。\nノエルは無工の剣を持たせて強化。\nこれ武器ガチャでハズレを引いてしまったのですけど、武器ガチャはハズレを引いた時点で撤退しています。武器ガチャは最初の星5が出たときにあたりを引かないと厳しそう。\nこれ自体は残念だったのですが(本当は雷電のモチーフ武器が欲しかった)、実は武器の星4も全然持っていなかったので、結果的に武器ガチャを回して良かったと思っています。強化したい武器が一つもない状態だったので。\nダメージは最大で2万くらいが出るようになりました。(これでも相当に無理してる\n今後の育成方針については、キャラを育成すると資源が枯渇しがちなことがわかったので、無課金でやる以上、育てるキャラを本当に限定しないといけません。\nということで、最大で5人くらいかな。クレー、雷電、鍾離、ベネット、ウェンティを考えてて、それ以外の魅力的なキャラに手を出さないようにしないと。\nスクロースとかモナとか、すごく魅力的で強いと思うんですが、育てないという選択を取ることにしました。\n","description":"","formated_time":"2021-09-06","href":"https://syui.github.io/blog/post/2021/09/06/genshin/","tags":["genshin","game"],"title":"原神、育成とか","utc_time":"2021-09-06T00:00:00Z"},{"categories":null,"contents":"雷電はお試しプレイしてみて、戦闘がカッコよくなるので使ってて楽しそうだと思ったので、1周年情報を待たずに回すことにしました。(辛抱できない短気さん\nあと冒険者ランクは45になりました。\n雷電が来るというので、ちょっと頑張っちゃった。\n無課金者のガチャについて 今回は、クレー以来となる2回目のガチャです。無課金者の原石がどうなったのかを記録します。履歴では前回が6月なので3ヶ月ぶり。\n原石は15,000ありました。雷電を引いた時点で8,000になりました。つまり、7,000ほどの原石を消費したことになります。その間、スターダスト交換なども最大限活用してガチャを回しています。\n引いたキャラは雷電, モナ, スクロース, ロザリア, 九条x2, 香菱x2でした。原神ガチャのことはよくわかりませんが、かなり上々なのではと思いました。\n原神ガチャで参考になった記事はこちらです。\n(1枚目を引くとして\u0026hellip;)\n結論から申し上げますと、キャラガチャ（ピックアップ）であれば、期待値は『原石：15,000個（22,313円相当）』となります。 また、運が悪いと最大値として『原石：28,800個（42,840円相当）』が必要となります。\n一方、完凸（７枚）を目指すのであれば、期待値は『原石：105,000個（156,188円相当）』となり、最大値は『原石：201,600個（299,800円相当）』が必要となります。\nhttps://chara.ge/genshin-impact/rough-pieces-pickup/\n勝ってるときに退く。無課金の鉄則なので、私は無理に凸を狙わず、ここらで撤退することにします。\n本当は雷電を6凸したいんですけど\u0026hellip;無課金で目指すのは最強ではないので、できる範囲でプレイを楽しんでいければと思います。\n今後のキャラ育成、方針について 次に、キャラ性能について。\ntier rankで信頼のおけるところは、ggだと思います。それによると、モナは無凸でもS+でかなり使えるみたい。\nhttps://genshin.gg/tier-list\nまた、香菱は4凸でS+なので使えるようになるかもしれません。\n行秋は6凸でSS+でした。ですが無課金で6凸は正直難しい。\n現状ではモナを育て、水国が実装されたとき神を狙うのが良いかも。\nスクロースも6凸が前提なので、ちときつい。それならウェンティの無凸を狙ったほうがいいですね。\nしたがって、現状ではモナと雷電を育てつつ、鍾離やウェンティを待つという感じで。\n雷電を早めに引けたの、すごくうれしい！\n","description":"","formated_time":"2021-09-01","href":"https://syui.github.io/blog/post/2021/09/01/genshin/","tags":["genshin","game"],"title":"原神、雷電を引いた","utc_time":"2021-09-01T00:00:00Z"},{"categories":null,"contents":"やっと冒険者ランクが40になりました。これ前にも言いましたが。\n冒険者ランク40になって、1日にやることが見えてきたので、今回はそれについて書きます。\n今まではデイリーをやって、ストーリーを進めるだけでした。\nですが、ランク40以上になると遺跡みたいな場所で聖遺物の星5が取れたり、その他にも良い素材が手に入ったりします。\nそのため天然樹脂を消費して、これらの素材を集めるということをやりはじめました。\n最大160で回復は約21時間半です。なので、1日のうちにデイリーをやって、天然樹脂を全部使うということをやっています。\nまた、ヒルチャールなどと戦います。ドロップアイテムは天賦レベルを上げるため必要になります。効率良く回れる場所をマップ上に記録しておきます。\nここまでがだいたい1日にやることです。他にも増えるかもしれませんが、今のところは。\n最後に雷電を引くべきかについて、個人的な考えを書いていきたいと思います。\n正直、雷電を引くべきかはよくわかりません。なぜかというと、後でもっと強いのが出てくる可能性もあるからです。これは物語の展開によっても変わってきます。\nまた、雷電が本当に神属性持ちかどうかもわかりません。ただ、おそらく神属性持ちの可能性が高いと今の所は考えられます。\nですが、物語の展開によってはそのへん変わってくるかもしれませんので、なんともいえません。\n例えば、日本の殿様なんかはたくさんの影武者を使ってたりします。彼女は影武者であり、実は本物ではなかったなんてことも可能性として考えられる。様々な可能性が考えられます。また、先代が強かっただけであり、その子孫は巫女のほうだったみたいなことがあるかもしれません。とすれば、次に登場するキャラのほうが強いということもありうると思われます。\nということで、雷電を引くべきかは、正直、わかりません。\nまた、1周年に復刻があるかもしれません。そこでショウリがピックアップされる可能性もあります。\nその場合、私が引くべきなのは、現状では、雷電よりショウリのほうでしょう。\n現在のPTはクレーのみが頼りです。使えるのが現状はクレーのみって話ですが、他のキャラの強化もレベル上げもほとんどやってなくて、また、手持ちのキャラが少ない。このような状況下での選択は、非常に重要かつ決定的になってくると思われます。そして、私のPTに最も必要なのは、ショウリということになります。\nしたがって、雷電を回そうかはかなり迷ってる。色んな意味で。できれば1周年の情報、あるいは復刻の情報が来てから判断したいです。できればですが。\n現在ほしいキャラは、優先順にショウリ、雷電、ウェンティ、甘雨、行秋、ベネットかな。甘雨はアーロイが来るのでスルーしてもいいかもしれませんが、わかりません(キャラ知識や使用感がないのでわからない)。\n","description":"","formated_time":"2021-08-31","href":"https://syui.github.io/blog/post/2021/08/31/genshin/","tags":["genshin","game"],"title":"原神、1日にやること","utc_time":"2021-08-31T00:00:00Z"},{"categories":null,"contents":"リーリエ、N、ダイゴがありますが、私は、ダイゴから回していこうかなと思ってます。次にNで、余裕があればリーリエですね。\n理由としては、色違いレックウザ、しかもメガシンカ付きときたら、これはもう引くしかないからです。\nあと、役割として考えた場合、現状ではデバフを連発してくる敵は苦手なんですよね。対応できない可能性があるし、バトルが長引く。今回のダイゴはそれを解消してくれそうだという点です。\nそれぞれの役割としてみていくと、リーリエは最速アタック、Nは高火力全体技+全体デバフ+高火力一撃B技、ダイゴはデバフ無力化(プラス変換)となっています。\n先程も言ったように、私が持っていない役割は、デバフ無力化です。他の役割は組み合わせでなんとかなりそう。\nただし、最初に述べたように色違いレックウザが使えるというのが一番の理由ですね。使ってて気持ちいいのでやりたいという思いがあるので、私はダイゴを優先して回すことにします。\nですが、一番のおすすめは全部2凸(同キャラ3枚引き)することです。どれも本当に強い。\nどれを優先すべきかという話なら個人的におすすめなのはNを2凸することだと思います。特に始めたばかりの人はNが一番だと思います。\nNがいい理由は、複数の役割を担うことができるからです。例えば、全体攻撃、B技による一撃(テクニカルなので)、全体デバフなど。また、2凸で攻撃時に素早さバフを全体にかけられるようになります。\nつまり、N\u0026amp;レシラムは今までに例を見ないほど完璧なバディーズと言っていい。\nしたがって、今回のNを2凸して他の盾役と回復役は配布キャラを使い攻略していくのが始めたばかりの人にはおすすめです。\nちなみに、凸に関してもポケマスを続けているとメダルをもらえるので凸を増やせます。よって、2凸は無理でも1凸でOKだと思います。ただ、無凸から2凸にするのは結構きついというか、時間がかかると思います。\n私はダイゴを回します\n一番のおすすめはNの2凸です(1凸でも可)\n最後に、始めたばかりの人がもう一つ疑問に思いそうなことについて書きます。\nそれは、マジコスリーフやマジコスグリーンの性能についてです。\n今回、魅力的なキャラが沢山登場しましたが、個人的に、アタッカーに強いのを持っているなら、マジコスリーフやマジコスグリーンを優先したほうがいい。私はマジコスリーフを使ってチャンピオンバトルをクリアしていますが、マジコスリーフがいれば毒殺によって比較的簡単にクリアできます。回復役もできます。\nまた、マジコスグリーンがいないとアタッカーは苦労することになります。盾役として一番優秀です。\nしたがって、始めたばかりの人には以下の順番におすすめ。\nN or マジコスレッド マジコスリーフ マジコスグリーン リーリエ ダイゴ ","description":"","formated_time":"2021-08-30","href":"https://syui.github.io/blog/post/2021/08/30/pokemas/","tags":["pokemon","pokemas","game"],"title":"ポケマス、2周年でどれを引くべきか","utc_time":"2021-08-30T00:00:00Z"},{"categories":null,"contents":"色んな方向から描くようにしてるんだけど、横顔がいちばん苦手。後ろからもあんまり描かないや。\n","description":"","formated_time":"2021-08-29","href":"https://syui.github.io/blog/post/2021/08/29/illust/","tags":["illust"],"title":"イラスト描いてみた96","utc_time":"2021-08-29T00:00:00Z"},{"categories":null,"contents":"\n","description":"","formated_time":"2021-08-28","href":"https://syui.github.io/blog/post/2021/08/28/illust/","tags":["illust"],"title":"イラスト描いてみた95","utc_time":"2021-08-28T00:00:00Z"},{"categories":null,"contents":"ポケマス、2周年ですごいの来たし、めちゃくちゃ頑張ってると思います。ダイゴと組んだ色違いレックウザが欲しい。\nポケマスは私もプレイしてて、楽しませてもらってます。\n今回は、ポケマスについて、急成長ってわけにはいかなかったポケマスについて、色々と考えていることがあるので、それについて書いていきたいと思います。\n運営について ゲーム業界は本当に大変というか、難しい部分があると思っていて、儲けられるのがほんの一部に限られており、二極化しているので、運要素も大きいと思われます。\nコンテンツ産業って、1割の成功が9割の多様なコンテンツを支えるっていう構図で、博打に近い側面があります。つまり、出してみなければわからない。確実に成功すると言われてるものがポシャったり、あるいは絶対に駄目だろうと思われてたものがあたったり、そういった要素が大きいので難しいと思います。\nですが、ポケマスは自分がプレイしているだけに、これだけは絶対にやりたい、やってほしいと考えている機能が2つあって、今回は、その実装について具体的に考えていきたいと思います。\nもちろん、IP契約などの内容によって制約なども多々あるでしょうし、現実的には難しい部分があるかもしれません。ですが、なるべく具体的に戦略について語っていきたいなと思います。よろしくおねがいします。\nちなみに、ポケマスは、日本企業のDeNAが開発しており、ポケモンのコンテンツ、つまり、IPは株式会社ポケモンから提供されています。株式会社ポケモンは原作を作ったゲームフリークという会社から派生し、ゲームフリークに出資していたのが任天堂という認識ですが、実はあまり詳しくないので間違ってるかもしれません。また、ポケモン=任天堂と言われる所以も、任天堂が株式会社ポケモンの株主だからだと思っていて、ポケモン=任天堂という認識も間違いではないと思います。というより、面倒なので私もポケモン=任天堂という認識かな。\nそんなどうでもいい話は置いといて、少しIPについて触れると、IPというのは、実は、直接の利益をもたらさないところから成長するところがあると思っています。\n例えば、アニメの影響力なんかすごいですよね。\nですが、アニメ自体は、そこまで利益をもたらさなかったり、あるいは赤字だったりするわけですが、文化浸透力については過去のデータを見る限りでは圧倒的だと考えています。正直、アニメが担った役割というのは、価値に換算すると、とてつもなく大きかった。\nですが、当時はあまり評価されず、評価していた人も少なかったように思います。そもそも目先の利益のみ、お金のみで物事を考える人からすると、なんでこんな儲からないアニメなんかやるんだよって感じだったと思います。\nですが、その儲からないアニメがIPを急成長させ、あるいは、ポケモンを文化浸透レベルにまで持っていったところがあったのだと私は思っています。\nしたがって、儲からない、あるいは儲かっていないことがイコールで失敗であるかどうかは、なかなかに判断が難しいところがあります。それはあとになってみなければわからない。\nポケマスもそういった視点を含めて続けられているのかもしれません。あと、トレーナーの設定や素材を拡大する方向でも後々に役立つと考えられます。\n直接的には売上が出なくても、ポケモンという世界を広げていくことは、IP戦略的には正しいと個人的には思っています。\nユーザーの主体性 ゲームって色々ありますけど、ユーザーの主体性っていうのは、とても大切だと私は考えています。\nポケモンの原作では、最初に自分の名前を決めさせ、物語をスタートさせます。ここで、ユーザーは、登場する主人公になりきってプレイすることを想定しています。\nですが、それはあくまでなりきりであって、ユーザー自身ではないので、主体性は少し下がります。\nARの登場によって、ポケモンGOでは、ユーザーが主人公になって物語をスタートさせることに成功しました。意外に思われるかもしれませんが、これはとてつもなく大きかったと考えます。\n例えば、原作では、知らない街の知らない家から主人公を操作して他人の物語を進めていくゲームです。しかし、ポケモンGOは、自分の住んでいる街の自分の家からゲームがはじまります。主人公を操作して歩くのか、あるいは自分が本当に歩くのかでは、その主体性に大きな違いがあります。\nゲームにおいて、この主体性が重要なのは言うまでもありません。\nなぜなら、多くの人は、主人公になりきりたいのではなく、自分自身が主人公でありたいと、そう願うからです。\nもちろん、これはあくまで傾向であり、自分を操作するよりゲーム内の主人公を操作したほうが楽しいって人もたくさんいると思います。\n個人的にはどちらも好きで、どちらも楽しいと思いながらプレイしています。\n例えば、主人公になりきってプレイする原作のほうがのんびりできて、たとえそれが2Dであっても、知らない街の雰囲気を楽しみながら、思い出深いのは、やはり原作の風景だったりすることもあります。\nですが、ユーザーの主体性を考えたとき、あくまで主人公のなりきりで他人の物語をやっていく原作より、自分自身が主人公になってプレイするポケモンGOのほうが主体性の点では上だと思います。\nしたがって、ポケモンGOのコンセプトは、とんでもなかったというか、すごかった。ですから、未だに成長し続けており、その規模もめちゃくちゃ大きいのだと思います。\nここまでで、ユーザーに主体性をもたせることが、どれほど重要か、おわかりいただけたと思います。\nでは、ポケマスでユーザーに主体性をもたせるにはどうすればいいのでしょう。具体的な方法を考えていきたいと思います。\nポケマスでも原作と同じように、ユーザーに名前を決めさせ、かつ操作できるようにしなければなりません。そうしない限り、主体性というのは生まれにくいと考えます。\n変更できない名前を決めさせる ここで、ユーザー名については、ネットゲームにおいて、重複不可能なもの、唯一無二なものにしなければならない。私はそう考えています。\nですから、現在の数字のみのIDにalias(エイリアス)でもなんでもいいので設定して、再度、英数(プログラム的には英数が最適)のみからなる、ユーザーID、名前をつけてもらうようにしたほうがいい。そして、数字のみのIDはプログラムの裏側、あるいは設定からのみ確認できるようにして、表側のプロフィールには、aliasした英数のIDを表示するようにします。\nもし私がポケマスを作り変えていけるなら、まず最初にやることはこれですね。\n数字IDにaliasを設定する aliasは英数からなる唯一無二で重複不可能なIDを設定してもらう 数字IDは裏側のみで表示し、表側はユーザー自身が決めた名前を表示する 自身となるトレーナーを一人だけ選択させる 名前はこれでOKとして、つぎに、操作に関してです。つまり、自らが主人公になりきって、ユーザーがその主人公を歩かせること、これを実現しなければならないと考えます。\nですから、あの最初に出てくる空間、フロアですが、自分が一人選んだ主人公、つまり、トレーナーですね。そのトレーナーを操作できるよう、歩かせられるようにして、話しかけられるようにします。今は簡易化され、タップして話しかける形式ですが、起動時の空間、フロアのみはトレーナーをユーザーが操作できるようにします。\nなぜ、既存のトレーナーでなければならないのかというと、これはポケマスだからとしか言いようがありません。ポケマスをプレイしている人たちというのは、好きなトレーナー、推しがいる人がほとんどで、ポケマスのプレイヤーの本当の望みはそこだと考えています。\nつまり、ポケマスをプレイすれば、推しのトレーナーになれる、推しを主人公にできる、推しを操作できる、あるいはそんなことがやってみたいなあと思って、プレイを始めた人が大半だと思っています。私もそうです。ですから、これをポケマスで実現することはすごく重要だと考えます。\nですが、現実問題、この実装は、正直、難しいかもしれません。\nなぜなら、今までと形式が異なるので、プログラムを組むにしても、そう簡単ではないかもしれない。\nですが、これはなんとしてでも実装したいところです。もちろん、私がやるとしたらの話ですけど。\nまた、このようにするとして、様々な問題が出てきます。その解決策をいくつか述べることにします。\n例えば、ユーザーは一人のトレーナーを選べるとして、それを変更可能にするか否かです。\nここで、ポケマスは、ポケモンGOより原作を重視すべきだと思います。\n特にユーザーに主体性をもたせる点に関してはそうです。今更、ポケマスをARゲームにしようってのは、それは無理です。ですが、ネットゲームなので、ポケモンGOで実装されているいくつかの視点は必要になってくるでしょう。\nさて、原作では最初に決めた主人公を変更可能ですか？例えば、性別とか見た目とか。\n原作において、主人公の属性は変更不可能です。これは、ユーザーに主体性をもたせる上で必要なことだと考えています。\nつまり、できる限り最初の選択を変更できないようにしたほうがいい。すぐに変更できるようだと主体性が定着しにくいからです。\nですが、ポケマスはネットゲームです。変えたくなるときもありますよね。例えば、後から欲かったトレーナーが手に入ったような場合です。\nここで参考にするのは、ポケモンGOにある一つのシステムです。\nポケモンGOでは、最初に3つの色のうち一つを決めるようになっています。これはジムと言われるシステムで、ゲーム内では極めて重要な選択になります。ポケモンGOでは主人公である自身がジムリーダーになってジム防衛をすることになっています。ジムリーダーはそのジムに行って、実際に行って、戦って勝つとジムリーダーになれます。ジムリーダーになるとポケモンをそのジムに配置できます。で、その配置したポケモンでジム防衛します。基本的にはその繰り返しです。そして、ジムにはカラーが3つあって、自分のチームカラーのジムリーダーにしかなれませんし、自分のチームカラーでジム攻撃、ジム防衛することになります。つまり、3つの陣営があって、自分はどこに所属するのかを最初に決められるようになっており、変更できないというシステムと考えてもらえればわかりやすい。\nですが、基本的には変更できなかった陣営ですが、1000円(レイド10回分)くらいの課金アイテムによって、1年単位の期間制限で変更できるようになりました。\nここで、ポケマスのトレーナー選択においては、基本的に、ポケモンGOのジム(チーム、陣営)のシステムを参考に構築することになります。つまり、ポケマスでは一人のトレーナーを選択した時点でトレーナーを操作し、ポケモンセンター、つまり、起動時のフロアを自由に移動できるようになる。また、話しかけられるようになる。トレーナー(自身)は基本的には変更できないが、3000円(10連分)の特殊アイテムを使うと、半年とか1年ごとに変更可能になる。\n要約すると、以下の要素を実装します。\n手持ちから一人のトレーナーを選択できるようにする トレーナーを選択した時点で、そのトレーナーを操作し、ポケモンセンター、つまり、起動時のフロアを自由に移動したり話しかけられるようにする 選択したトレーナー(自身)は基本的には変更できないが、3000円の特殊な課金アイテムを使うと、半年あるいは1年ごとに変更可能にする ちなみに、最初は自由に歩き回れる場所を限定していますが、そのうち広げてもいいと思います。ですが、最初の一歩を踏み出すことが重要で、かつプロトタイプとなると、これで十分だと考えます\nポケモンGOとのコラボ ポケモンGOはすごいです。バグだらけでとんでもないんですけど、コンセプトだけはいいっていう、あれなんですけど、でも、ポケモンGOには本当に熱心な課金ユーザーが多くて、様々な企業とコラボして、現実の洋服メーカーとかとコラボして、アバター(自身)の服に設定できたりします。\nポケモンGOに熱心な課金ユーザーがいる理由も個人的にはわかります。\nそれは自分自身が主人公になってポケモンを捕まえたり、あるいは、アバターも自分の分身みたいなところがあったりするからです。\nARなので、現実とゲームが融合しているからこそ、実現できた世界観だと思います。\n例えば、ジムなんかで自身のアバターが表示されるんですけど、それもやっぱり宣伝になったりします。ですから、スポンサーなんかがつきやすかったり、コラボしやすかったりして、ほんとよくできたシステムです。\nそんなこともあって、ポケモンGOでは、限定的で価値のあるアイテムにお金も時間も惜しまない、絶対に手に入れる、そんなコンプを目指すユーザーが沢山いるのです。\n個人的には、ポケマスは、それを利用したほうがいいと考えています。\nつまり、ポケマスとポケモンGOがコラボするとうれしい。個人プレイヤーとしては、絶対にコラボしてほしいと思っています。\nもちろん、コラボにはNianticの意向が重要になると思うし、内部的なコラボが無理なら、スポンサーとして、宣伝費用をNianticに使うという方法もありそうな気がします。\nでは、どのようなコラボがポケマス的にもポケモンGO的にも望ましいのでしょうか。具体的に考えていきたいと思います。\nポケマスは、トレーナーを主体とするゲームです。ですから、コラボもトレーナーに焦点を当てることになります。それをポケモンGOでどう実現するのか、という話です。\n具体的には、ポケマス側にレジェンドバトルのシステムを利用して、一人のトレーナーと戦えるようにします。レジェンドバトルというと、課金しなければ勝てないような難易度で、決して、初見者が簡単に勝てるような難易度ではありません。\nここで、そのレジェンドバトルをクリアしたとき、最高ランクのエンブレムがもらえますよね。そのエンブレムを受け取った時点で、ポケモンGOに使えるクーポンナンバー(個別認証番号)みたいなものを発行します。\nそれをポケモンGOのショップで入力すると、ポケマス上で打ち勝ったトレーナーの衣装とポーズが手に入るっていう感じにします。というか、ポケモンGOのいちユーザーとしては、こういうのがほしい。ポケモンGOでも、ポケマスをやってて強いんだぜという称号や明示できるようなものがあればうれしいなって思っていて、それは、ポケマスにとって、とてもプラスになると考えています。\nなぜポケマスにとってプラスになるかというと、先程も述べたようにポケモンGOには熱心な課金ユーザーが多い。課金額も半端なく、彼らは価値ある限定アイテム、あるいはアバターや衣装を必ず手に入れようとするはずです。ここで、ポケマスをプレイしなければ手に入らないとなると、おそらく、プレイするはずです。\nただし、この辺が難しいのですが、「じゃあ、ポケマスをインストールして一度ログインしてくれればアイテムをあげるよ」という形にしてしまうと、一瞬だけはインストール数やログイン数は稼げるけど、それ以上の成長はないだろうと思っていて、私なら期限付きの高難易度に設定すると思います。\n先程も言いましたが、ポケマスのレジェンドバトルは決して簡単にクリアできるものではありません。特に始めたばかりなら難しい。すぐにクリアしようとするなら当然、課金が必要になってくると思われます。ですが、そんなことをすると批判は免れないでしょう。あたりまえですが、無課金でも継続していれば実現できるような仕組みが望ましいと私は思います。これがポケマスのレジェンドバトル級の難易度に相当します。\nしかし、「期限があり、かつ難易度は高いけど、ポケマスを続けていれば取れるようになる」という仕組み作りは難しいところがあります。一回コラボすればいいという話ではありません。ポケモンGOへのスポンサー、あるいはコラボを継続していくことでしか実現できません。よって、例えば、4ヶ月ごとにコラボが発生し、様々なトレーナーと戦えるようにします。\n話をまとめます。ポケマスで一人のトレーナーと戦うバトルを用意します。これは、既存のレジェンドバトルのシステムを使います。その高難易度をクリアすると、ポケモンGOで当該トレーナーの限定衣装とポーズ、アバターが手に入るようにします。具体的には、ポケマス上で最高ランクのエンブレムを受け取った時点でポケモンGOで使える認証番号が発行されます。その個別認証番号はポケモンGOのショップで使うと、当該アイテムを受け取れます。ポケマスとポケモンGOのコラボ期間、つまり、レジェンドトレーナーバトル期間は基本的に1ヶ月とします。4ヶ月ごとにコラボが発生し、様々なトレーナーと戦えるようになります。なお、一度登場したトレーナーは、基本的には二度と登場しません。これは、様々なトレーナーを紹介する上でも、かつコラボ価値を上げる上でも必要なことだと理解します。また、この仕様はポケモンGOのNianticへの負担を軽減し、かつポケモンGOのゲーム性に配慮する形になると考えられます。\nこれによって、ポケマスからポケモンGOをやってみようというユーザーも出てくると思われます。ポケマスやってる人も、もしポケモンGOですごい貴重なのが手に入るならやってみようってユーザーたくさんいると思います。\n要約すると、以下のようになります。\nポケマスはポケモンGOとコラボする、あるいはスポンサーになる レジェンドバトル形式で実装済みの一人のトレーナーと戦うバトルを用意し、その高難易度をクリアすると、ポケモンGOで当該トレーナーの限定衣装とポーズ、アバターが手に入るようにする。具体的には、エンブレムを受け取った時点でポケモンGOで使える認証番号が発行され、これをポケモンGOのショップで入力すると当該アイテムを受け取れる レジェンド・トレーナーバトルは基本的に1ヶ月の期限を設定する。ただし、コラボは4ヶ月ごとに発生し、次のトレーナーとバトルできるようになる。一度登場したトレーナーは、基本的には二度と登場しない(あるいは、戦えはするけどポケモンGOで使えるコードは発行されない ","description":"","formated_time":"2021-08-27","href":"https://syui.github.io/blog/post/2021/08/27/pokemas/","tags":["pokemon","pokemas","game"],"title":"ポケマス、起死回生の手はあるのか？","utc_time":"2021-08-27T00:00:00Z"},{"categories":null,"contents":"今まではストーリを進めることを優先してプレイしてきましたが、ストーリーを最新まで進められたので、強化のほうをやってみました。\nで、少し原神のことがわかってきたので、ポイントだけ書いていこうかなと思います。\n原神のポイントは一つで、それは「火力」です。\n火力があれば周回も早くなりますし、敵に攻撃される前にやっつけられるので合理的。\nですから、原神で考察される多くは「いかに火力を上げるか」なのだと思います。\n火力を上げるポイントは2つあって、一つはステータス、もう一つは元素(パーティー属性)の組み合わせです。\n後者は各キャラの役割で考える必要もありますが、役割というのは、例えば、回復役だったり、盾役だったり。\nステータスで火力を上げるには、まずは、聖遺物を優先すれば効率がいいと思います。使いまわしもできますし。\nただし、聖遺物は、各キャラの特性に応じて、火力をあげられる組み合わせは異なります。\n例えば、重撃が強いキャラには、重撃を上げる聖遺物を、元素が強いキャラには、元素ダメージ、元素効率を上げる聖遺物を、という感じです。\nまた、聖遺物に付くステータスは、ランダムと固定があり、優先すべきは基本的に会心と攻撃です。冒険者ランクが45以上になったら厳選(周回)するとよいでしょう。ただ、私の場合は、そこそこのものが出ればOKにしています。育成もありますし、無課金かつ初見での厳選はほどほどにしておいたほうがいい思います。報酬を得るためにはアイテムが必要になりますが、それを育成素材の周回に使ったほうがいいです。\n次に、基礎レベルや武器レベル、天賦レベルがあります。これは優先順に並べています。\n最近まで天賦レベルをあげられるの知らなかった。課金要素だと思ってスルーしてました。\n私は現在、クレーにドドコ物語(武器)をもたせて、ドドコは配布なので精錬がMAXにできました。実は、無課金で精錬は難しく、同武器の重複、つまり、凸と呼ばれるものでしか精錬できません。\nキャラも凸によって様々な追加効果が付与されます。原神ではこれを命ノ星座と呼ぶようです。最大6凸ですね。\n話は変わりますが、最新のストーリーでは、雷電将軍が神の目と呼ばれる元素(魔法)が使える個人固有のアイテムを没収していますが、なぜそんなことをするのかについては、理由があるのだと思います。\n例えば、神の目を持つ者に何らかのデメリットがあったりするのではという仮説。命ノ星座という命名についても、それらを感じ取れる要素があったりするのかも。あくまで可能性の一つとしてですが。\nちなみに、雷電将軍の実装は1周年の9月らしい。\n9といえば、思い浮かぶのはドラゴン(龍)ですね。中国で9という数字、なんとなくドラゴンのイメージがあったりします。\nそして、原神でもドラゴンというのは馴染み深いもので、例えば、最初に出てきたボスのトワリンとか\u0026hellip;あるいは\u0026hellip;ドラゴンスパイン(地名)です。\n個人的に考えていることがいくつかあって、その一つに、原神のすべてはドラゴンスパインからはじまったんじゃないかという仮説を立てています。\nはるか昔にあり今は滅ぼされたとされている機械王国の王子と王女、つまり、双子主人公のことですが、その国は今のドラゴンスパインにあったんじゃないかなと。あそこ、機械兵がたくさんいますので。もちろん、あくまで可能性の一つですが、そういった可能性もありそうという程度。現時点では、ストーリーを飛ばしながら見た程度なので、情報不足ですが。\nさて、話を戻して、原神をどう進めていけばいいのか、あるいは楽しんでいけばいいのかという話でした。ポイントとしては「火力をあげればいいんじゃない」ってことでした。\n私が考えている方向性としては、強キャラを引きたいってことですね。\n自分は無課金で、かつ始めたばかりということもあり、無駄に育成する余裕がありません。\nですから、まずは強キャラを引くことが重要かと思われます。現在、私はクレーは強化することにしていて、といっても、クレーってそんな強くないんですが\u0026hellip;お気に入りキャラですし、現状、クレーがいないと、ストーリーや素材集めすら進められない状況に陥ってるので。\n現在の手持ち状況、ほぼこのまま。現在、クレー、主人公、香菱は、育ててもいいかもしれないと思っています。聖遺物集めだけは使い回せるのでやりました。冒険者ランク45以下なので、星5を集めるの、苦労した。\n次に、星4で無課金でも引きやすいと考えられているのが行秋やベネットで、この二人は育てていいかもしれません。\n最後に、個人的願望を述べますが、一言でいうと「ショウリが\u0026hellip;ほしい」。\nショウリを持っているかいないかで攻略難易度が圧倒的に変わってくると思います。\nということで、1周年で神ガチャでも来ないかなあと思っています。神属性のショウリ、ウェンティ、雷電があたるやつ。\n今思っている理想のパーティーはクレー、ショウリ、ウェンティ、雷電、です。\nでも、雷電が弱そうなんだよなあ。というか、多分、弱いと思う。炎上しない限り、めちゃくちゃ弱いと思う。でも今回は炎上で強くなるってことも流石に起きないんじゃないかな。ショウリのときはそういうことが起こったらしいけど、こういうイレギュラーも発生して1度くらいなのではないかと思います。\n雷電、強かったらいいのですが、ここらへんでキャラを引かないと、攻略きつい。深境螺旋も後半パーティーが必要な5層1で詰みました。\nともあれ、原神はストーリーが面白いし、演出(FFっぽさを感じた)もかっこいいし、すごく楽しめてるので、おすすめ！\n","description":"","formated_time":"2021-08-25","href":"https://syui.github.io/blog/post/2021/08/25/genshin/","tags":["genshin","game"],"title":"原神、少しわかってきた","utc_time":"2021-08-25T00:00:00Z"},{"categories":null,"contents":"\n","description":"","formated_time":"2021-08-23","href":"https://syui.github.io/blog/post/2021/08/23/illust/","tags":["illust"],"title":"イラスト描いてみた94","utc_time":"2021-08-23T00:00:00Z"},{"categories":null,"contents":"\n","description":"","formated_time":"2021-08-22","href":"https://syui.github.io/blog/post/2021/08/22/illust/","tags":["illust"],"title":"イラスト描いてみた93","utc_time":"2021-08-22T00:00:00Z"},{"categories":null,"contents":"この前、画像を圧縮してpushするaction(workflow)を作ったんだけど、workflowでpushしても、gh-actionsのon:pushが動作しなかったので、どうやらworkflowでpushしたやつには反応したいみたい。\nこのブログの場合、画像を圧縮してpushしてもhugo-buildを通さないとweb server(gh-pages)にdeployされないので、build+deployのworkflowに以下を追加すると、ちゃんと動いてくれるので便利になります。\non: workflow_run: workflows: - push webp branches: src types: - \u0026#34;completed\u0026#34; こんな感じで書いて、pushするworkflowはnameを設定します。\nname: push webp ","description":"","formated_time":"2021-08-21","href":"https://syui.github.io/blog/post/2021/08/21/github-workflow/","tags":["github"],"title":"gh-actionsでpushしたとき指定のworkflowを実行する","utc_time":"2021-08-21T00:00:00Z"},{"categories":null,"contents":"\n","description":"","formated_time":"2021-08-20","href":"https://syui.github.io/blog/post/2021/08/20/illust/","tags":["illust"],"title":"イラスト描いてみた92","utc_time":"2021-08-20T00:00:00Z"},{"categories":null,"contents":"萌えフィギュアがあると、デスクトップの写真を撮りたくなるのでおすすめ。\n","description":"","formated_time":"2021-08-19","href":"https://syui.github.io/blog/post/2021/08/19/desk/","tags":["private","desktop"],"title":"デスクトップ写真3","utc_time":"2021-08-19T00:00:00Z"},{"categories":null,"contents":"squoosh-cliは、google製の画像圧縮ツールらしい。\n$ npm i -g @squoosh/cli $ squoosh-cli --webp \u0026#39;{\u0026#34;quality\u0026#34;:75,\u0026#34;target_size\u0026#34;:0,\u0026#34;target_PSNR\u0026#34;:0,\u0026#34;method\u0026#34;:0,\u0026#34;sns_strength\u0026#34;:50,\u0026#34;filter_strength\u0026#34;:60,\u0026#34;filter_sharpness\u0026#34;:0,\u0026#34;filter_type\u0026#34;:1,\u0026#34;partitions\u0026#34;:0,\u0026#34;segments\u0026#34;:4,\u0026#34;pass\u0026#34;:1,\u0026#34;show_compressed\u0026#34;:0,\u0026#34;preprocessing\u0026#34;:0,\u0026#34;autofilter\u0026#34;:0,\u0026#34;partition_limit\u0026#34;:0,\u0026#34;alpha_compression\u0026#34;:1,\u0026#34;alpha_filtering\u0026#34;:1,\u0026#34;alpha_quality\u0026#34;:100,\u0026#34;lossless\u0026#34;:0,\u0026#34;exact\u0026#34;:0,\u0026#34;image_hint\u0026#34;:0,\u0026#34;emulate_jpeg_size\u0026#34;:0,\u0026#34;thread_level\u0026#34;:0,\u0026#34;low_memory\u0026#34;:0,\u0026#34;near_lossless\u0026#34;:100,\u0026#34;use_delta_palette\u0026#34;:0,\u0026#34;use_sharp_yuv\u0026#34;:0}\u0026#39; -d out-dir img.jpg size的にはjpgのほうがいいのですが、webpじゃないとpng透過が保存されないので、webpを使います。\nresizeは300x400だとスマホで見たとき粗くなってしまうため、600x800にしました。\ngit-diffにcommit-hashを指定し、更新ファイルがあれば、squooshを実行します。gh-actionsはpush:pathsからトリガーできます。\nパラメータ、特にqualityは適時、調整してください。\non: push: paths: - \u0026#39;static/img/*.png\u0026#39; jobs: comment: runs-on: ubuntu-latest steps: - uses: actions/checkout@v1 - name: install squoosh env: WORKFLOW_FILE_PATH: ${{ github.workflow }} GITHUB_REPOSITORY: ${{ github.repository }} run: | npm i -g @squoosh/cli - name: convert webp run: | s=`git diff-tree --no-commit-id --name-only -r $GITHUB_SHA|grep \u0026#34;static/img/\u0026#34;|grep \u0026#34;\\.png\u0026#34;` echo $s if [ -z \u0026#34;$s\u0026#34; ];then exit fi for i in $s do squoosh-cli --webp \u0026#39;{\u0026#34;quality\u0026#34;:100}\u0026#39; -d ./static/img/min --resize \u0026#39;{width:600,height:800}\u0026#39; $i done git config --local user.email \u0026#34;action@github.com\u0026#34; git config --local user.name \u0026#34;GitHub Action\u0026#34; if [ -z \u0026#34;`git status -s`\u0026#34; ];then exit fi git add ./static/img/min git commit -m \u0026#34;push webp\u0026#34; - name: Push changes uses: ad-m/github-push-action@master with: github_token: ${{ secrets.GITHUB_TOKEN }} branch: src ","description":"","formated_time":"2021-08-18","href":"https://syui.github.io/blog/post/2021/08/18/github/","tags":["github"],"title":"squoosh-cliとgh-actionsで画像表示を高速化してみる","utc_time":"2021-08-18T00:00:00Z"},{"categories":null,"contents":"password managerのbitwardenを試してみました。self-hostしますので、herokuを使います。\nhttps://bitwarden.com\nbitwardenはossのcloud pass managerみたいなものだと思われます。web domainを使ってdbにアクセスし、そっから情報を読み込みます。\nつまり、passwordにアクセスするには、networkにつながっていなければなりません。また、自分のserverからdbを管理する場合、updateなどの手間がかかります。ですが、その手段が採れるというのはいいですね。\nself-hostの利点として挙げられるのは、例えば、「bitwardenがhackされてもpasswordが流出しない」と公式では言われています。ですが、様々な可能性が考えられるため、本当のところはわかりませんが。\n私が使ったのは、非公式clientであるvaultwardenのdocker-imageです。それをheroku deployする便利なrepoがありましたので、それを使いました。\nhttps://github.com/davidjameshowell/vaultwarden_heroku\n基本的には、readmeにあるとおりですね。\nenv: AUTOBUS_ENABLE: 1 CREATE_APP_NAME: ${{ secrets.HEROKU_APP_NAME }} DUO_ENABLE: 1 GIT_HASH: main HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }} USE_PSQL: 1 HEROKU_VERIFIED: 0 OFFSITE_HEROKU_DB: ${{ secrets.OFFSITE_HEROKU_DB }} HEROKU_CREATE_OPTIONS: ${{ secrets.HEROKU_CREATE_OPTIONS }} bitwarden-serverを立ち上げたあとは、webからアクセスし、管理者アカウントを作成します。\nそのserver(address)を使って、bitwarden-clientからpass管理や自動入力を行います。もちろん、pass管理はwebからもできます。\nですが、多くの人がやりたいのは自動入力だと思うので、やはり、bitwarden-clientは必要になると思われます。\nbitwarden-clientでは、初期画面に設定アイコンみたいなものがあると思うので、そこから先程立ち上げたserverのaddressを設定します。\n例えば、chromeからtwitterに自動入力したい場合は、twitter.com/loginにアクセスして、chrome addonのbitwardenのアイコンをクリックします(あらかじめtwitterのpassを登録しておく必要があります)。\n使ってみた感想ですが、自動入力も便利ですが、登録とかも便利でした。\nですが、そのためにcloudに情報を置くのはちょっとオーバーだなと思いました。self-hostする場合、bitwarden-serverの運用や管理、維持も必要になってきます。\n現在の運用段階 現在の運用では、dbに保存するpassを制限し、つまり、流出してもあまり問題なさそうなアカウントのみで登録を行い、運用テストしています。\nまた、当該repoは、dbにheroku-postgresqlではなく、autobus, jawsdbなどのaddonを使いますが、個人的には、これらのaddonを使用するのは不安要素も大きいです。\nこのようなsecure要請が高い事柄においては、herokuでhostする場合、herokuが提供するaddonに限定したほうがいいと思ったので、heroku-postgresqlを使用するようにしました。option:envに項目はありましたが、あまり有効に機能してないような気もしましたので。\n# yes $ heroku addons:create heroku-postgresql -a \u0026#34;$APP_NAME\u0026#34; # no $ heroku addons:create autobus -a \u0026#34;$APP_NAME\u0026#34; $ heroku addons:create jawsdb -a \u0026#34;$APP_NAME\u0026#34; backupも基本的には、herokuが提供するcmdで足りると思います。ただし、plan:hobby(free)の場合、backup数は限りがありますので注意です。\n# backup $ heroku pg:backups:capture -a \u0026#34;$APP_NAME\u0026#34; # restore $ heroku pg:backups -a \u0026#34;$APP_NAME\u0026#34; x001 $ heroku pg:backups:restore x001 -a \u0026#34;$APP_NAME\u0026#34; herokuはfreeの場合、30minでsleepしますので、以下のaddonは必要になるかもです。\n$ heroku addons:create scheduler:standard -a \u0026#34;$APP_NAME\u0026#34; $ heroku addons:open scheduler -a \u0026#34;$APP_NAME\u0026#34; every10min $curl https://$APP_NAME.herokuapp.com 感想としては、bitwardenは便利です。主に登録と自動入力が便利で、これに慣れてしまうと、keepass時代のcopy/pasteはつらさがあります。\nですが、入力頻度がそれほどない場合は、私のことですが、keepassでいいんじゃないかという気もしてます。\nbitwarden-serverの運用や管理、維持する手間、危険性などを考えると、安全なのは、間違いなくkeepassのcopy/pasteだと思います。とはいえ、状況にもよりますが、基本的には。\nbitwarden-cloudとcopy/pasteの安全性 例えば、bitwarden-cloudは、必ずnetwork上のaddressを持ちます。\nだからこそ、そのaddressからuser accountにloginできるわけです。それぞれのclientも動作するにはこの情報を必要とします。\nここでlogin passなどが漏れてしまった場合、情報にアクセスされてしまいます。\n逆に、copy/paste領域の安全性について考えてみましょう。\ncopy/pasteはlogin passが漏れると、アクセス可能になりますか?\nいいえ、可能にはなりません。そもそもcopy/paste領域が必ずしもnetwork上の住所を持っているわけではありません。\nそうでなくてもbitwardenのserver自体が、bitwardenやdb, web-serverなどのsoftwareのexploitをついて、そこから設定や権限を書き換えられ、loginされてしまうという事も考えられる。つまり、login passが漏れていなくても攻撃が成功する危険性は複数考えられます。これは、server運用上、仕方のないことです。\nbitwarden-cloudの利用は、端末がnetworkにつながっており、かつ、bitwarden-serverがnetwork上に公開されている必要があります。\n逆に、copy/pasteはnetworkにつながっていないofflineでも利用できます。network接続を切れば、そもそも外部からはアクセスできません。もちろん、offlineでもcopy/paste領域には端末の占有者が情報にアクセスできます。bitwarden-cloudはできません。\n次に、copy/paste領域におけるexploitの可能性について考えてみます。これについては、公開されているserverよりも明らかに低いと考えられます。\nまず、使用可能なexploitが限定的で、大抵の場合、osに依存します。つまり、cloudは、osまたはsoftwareのどちらかのexploitで攻撃が成功する可能性があるのに対し、copy/pasteはos+softwareの両方を必要とするexploitが必要になる可能性が高い。\nそのため、bitwardenのほうが便利ですが、例えば、copy/pasteを使用するようなkeepassに比べ、安全性は低いと思います。\nこれは当然の帰結だと思います。便利であればあるほど、つまり、networkにつながってると便利なわけですが、危険も高くなる、ということです。\nそのため、offlineで使うもの、使えるもののほうが、一般的には安全です。offlineで使うもの、使えるものは、共有やらなんやらのことを考えると、不便ではあります。不便さの解消に、例えば、key-fileやmaster-fileなどを共有するとなると、危険性も増します。\n個人的には、入力頻度などを考慮した上で、結論を出すと良いと思います。\n例えば、入力頻度が高い人は、bitwardenという選択肢は非常に有用だと思います。\n逆に入力頻度、つまり、登録や自動入力の機会がそこまで高くない場合は、bitwarden-serverの運用、維持などはオーバーに感じますね。危険性も高くなるので。\n以上です。\n","description":"","formated_time":"2021-08-14","href":"https://syui.github.io/blog/post/2021/08/14/bitwarden/","tags":["github","keepass","bitwarden","heroku"],"title":"bitwardenをself-hostで試してみた","utc_time":"2021-08-14T00:00:00Z"},{"categories":null,"contents":"原神の進捗です。一応、ストーリーは最新まで進めた。\n","description":"","formated_time":"2021-08-11","href":"https://syui.github.io/blog/post/2021/08/11/pokemas/","tags":["genshin","game"],"title":"原神、最近の進捗","utc_time":"2021-08-11T00:00:00Z"},{"categories":null,"contents":"役割が明確なキャラ引いてる気がする。\n","description":"","formated_time":"2021-08-10","href":"https://syui.github.io/blog/post/2021/08/10/pokemas/","tags":["pokemon","pokemas","game"],"title":"ポケマス、ライヤー引いた","utc_time":"2021-08-10T00:00:00Z"},{"categories":null,"contents":"twitter上でのやり取りが不便だったので、自分で使ってるtwgというclientをupdateしました。あと、imageをtweetする機能もつけました。\napp keyが入れてあるので、releaseからdlしてください。twitter apiのconsumer_key, consumer_secret_keyを持っている人は、srcをbuildして使えます。\nhttps://github.com/syui/twg/releases\nciはtravisからgh-actionsに移行しましたが、またハマりました。\ngoxでbuildする際に、darwin/386はunsuportのerrが出るので、optionで出力を指定してやらなければなりません。goは1.14からdarwin/386がunsuportされ、1.16では戻ったみたいですけど、errが出ます。\n--\u0026gt; darwin/386 error: exit status 2 Stderr: cmd/go: unsupported GOOS/GOARCH pair darwin/386 make: *** [build] Error 1 その他、tagからverを抜き出すのは、env: REF=${{ github.ref }}, ${REF##*/}がいいです。\non: push: branches: - master create: tags: - v*.*.* jobs: release: # job_id name: Build runs-on: ubuntu-latest steps: - name: Set up Go 1.16 uses: actions/setup-go@v1 with: version: 1.16 id: go - name: Check out code into the Go module directory uses: actions/checkout@master - name: Build env: GO111MODULE: on GOPATH: /home/runner/work/ GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} GITHUB_REPOSITORY: ${{ github.repository }} C_KEY: ${{ secrets.C_KEY }} REF: ${{ github.ref }} CS_KEY: ${{ secrets.CS_KEY }} run: | export CREATE_EVENT_REF_TYPE=$(jq --raw-output .ref_type \u0026#34;$GITHUB_EVENT_PATH\u0026#34;) go get -t -v ./... go get -u github.com/mitchellh/gox go get -u github.com/tcnksm/ghr $GOPATH/bin/gox -osarch \u0026#34;freebsd/arm linux/386 linux/amd64 linux/arm linux/mips64le linux/mips64 linux/mipsle linux/mips linux/s390x netbsd/386 netbsd/amd64 netbsd/arm openbsd/386 openbsd/amd64 windows/386 windows/amd64 darwin/amd64\u0026#34; -output \u0026#34;dist/{{.OS}}_{{.Arch}}_{{.Dir}}\u0026#34; -ldflags=\u0026#34;-X github.com/syui/twg/oauth.ckey=${C_KEY} -X github.com/syui/twg/oauth.cskey=${CS_KEY}\u0026#34; $GOPATH/bin/ghr --username syui --token ${GITHUB_TOKEN} --replace --debug ${REF##*/} dist/ ","description":"","formated_time":"2021-08-09","href":"https://syui.github.io/blog/post/2021/08/09/twitter/","tags":["twitter","golang"],"title":"twg v0.4.5 [twitter clinet on go]","utc_time":"2021-08-09T00:00:00Z"},{"categories":null,"contents":"ボックスにお気に入りのポケモンが増えてきたので、以下のページでスクショをスライドできるようにしてみました。\n/syui\n最近、全然プレイできてない。図鑑の分類とかフィールドとかアップデートがありました。\n","description":"","formated_time":"2021-08-01","href":"https://syui.github.io/blog/post/2021/08/01/pogo/","tags":["pokemon"],"title":"ポケモンボックスのスライドを作ってみた","utc_time":"2021-08-01T00:00:00Z"},{"categories":null,"contents":"私は、テリヤキチキンピザが大好きなので、自分でよく作る簡単レシピを紹介します。といっても、今回は材料がなかったので普通のピザです(正確にはピザですらない)。\nポイントは食パンの端を2角切って、それを4つ合わせ、レンジします。\n更に分割したい場合はお好みで。\n材料は、何でもいいですけど、今回はケチャップ、チーズ、ベーコンを基本とします。テリヤキチキンにする場合は、たこ焼きソース、チーズ、冷凍チキンとか使います。\n電子レンジは750wで4分ほどかな。あと、端にマヨネーズとソースかけてます。\n余ったパンの耳は、バター付けて、砂糖ふりかけて4分くらい焼きます。\n個人的には、手軽で美味しいのが好きです。なので、ハンバーガーとかピザとか大好きです。\n手軽さの基準は、材料がどこでも手に入ること、短時間で完成すること、面倒な作業がないことの3つを条件とします。\n美味しさの基準は、完全に個人的な好みですね。このレシピはピザっぽい味を簡単にできるので、好きです。(一応、自分で考えたやつだけど、探せばどこかにありそう)\n","description":"","formated_time":"2021-07-31","href":"https://syui.github.io/blog/post/2021/07/31/food/","tags":["private"],"title":"ピザを作ってみる","utc_time":"2021-07-31T00:00:00Z"},{"categories":null,"contents":"\n","description":"","formated_time":"2021-07-28","href":"https://syui.github.io/blog/post/2021/07/28/illust/","tags":["illust"],"title":"イラスト描いてみた91","utc_time":"2021-07-28T00:00:00Z"},{"categories":null,"contents":"原神では、ストーリーが第二章まで進みました。あれ、これって最新じゃ\u0026hellip;。\nストーリーを進めてて思ったんですけど、これはまずいです。間違いなく攻略がきつくなっていて、全滅しかける場面が何度かありました。\nというわけで、ここらへんで強キャラを引くしかないという状況です。\nまあ、配布キャラ育てればいいんですけど、後々、強化とかレベル上げ無駄になっちゃう気がするので。\nさて、今回、強キャラを引くしかない状況に前回よりさらに陥ってるため、どれを引くべきか。考察というか予測していきたいと思います。\n現時点で候補に挙がっているのが、雷電と八重神子です。\nもしかしたら、八重神子のほうが強キャラってこともあり得るじゃないかと思ってます。見た目も雷電より好みなので、同じくらいなら八重神子のほうを引くと思う。\nということで、もし八重神子がtier1、SSと呼ばれる強さだったら、個人的にはうれしいです。\n以上\n","description":"","formated_time":"2021-07-24","href":"https://syui.github.io/blog/post/2021/07/24/genshin/","tags":["genshin","game"],"title":"原神、八重神子","utc_time":"2021-07-24T00:00:00Z"},{"categories":null,"contents":"今回は、原神ってなんだろうという考察になります。\nといっても、そこまで大掛かりな考察をするわけでもなく、色々と思ってるところはあるものの、簡潔にポイントだけ述べたいと思います。\n原神、ゲームのタイトルですよね。\nでは、この原神ってなんだろうってことですけど、私は、パイモンなんじゃないかと思っています。\nこれは、このゲームを見て最初に思ったことなんですが、アイコンがパイモンですよね。原神という名のゲーム、そして、アイコンがパイモン。\nとすれば、原神ってパイモンなんじゃないかなって思いました。\nでは、原神ってなんだろうって話なんですが、原神の世界では、7つの元素があり、7つの国があり、七神がいるような世界です。\nこのような世界で原神といったら、それら7つの元素を生み出したのが原神なんじゃないかと私は予想してます。\n以上です。\n","description":"","formated_time":"2021-07-23","href":"https://syui.github.io/blog/post/2021/07/23/genshin/","tags":["genshin","game"],"title":"原神、パイモン","utc_time":"2021-07-23T00:00:00Z"},{"categories":null,"contents":"やっと冒険者ランク35になりました。これでストーリーが進められます。\nで、現在、どんな感じなのかというと、ほぼデイリーミッションしかやっておらず、かつクレーしか使ってません。というより、クレーしか頼れない\u0026hellip;。\nまずデイリーがつらい。忙しい日もあり、最後のほう、デイリーすらできない日もありました。\nそれでもなんとか、デイリーやってたらランク上がりました。\n次にクレーしか使ってない理由ですが、現状、クレーしか強いキャラ、強化しているキャラがいないのです。ガチャ回してないんで。\nですから、クレーしか使ってないし、言い換えれば、クレーしか使えないのです。クレーしか頼れるキャラがおらず、クレーでしか攻略できない状態です。\n確かに、私は「クレーを使いたい」って、最初にそう言いましたけど\u0026hellip;でも、ここまで使いたかったわけじゃないよっ！\n他のキャラも強化すればいいって話ですけど、やっぱり最終的に使うキャラを強化したいじゃないですか。そんな理由から、クレー以外のキャラは強化してないです。強化するのも大変ですから、強化するなら好きなキャラか、あるいは強キャラにしよう決めています。\nそんなこともあり、攻略がちょっとつらくなってきてる感じする。\n例えば、クレーは炎スライム、戦えないんですよね。なので、炎スライムが出てきたときなんか、戦闘時間が半端なく長くなってしまいます。\nクレーは好きなキャラですけど、でも、このままでは攻略がつらくなってくるだろうし(現在はそこまでではないけど)、早く強キャラが\u0026hellip;ほしい！\nで、強キャラの話に移るんですけど、原神のお話は大抵、飛ばしてみてるので、あまり詳しくもないですけど、でも、私が認識してる部分を少しだけお話しします。\n原神の世界には7つの元素があり、それぞれに国があります。\nそして、各国には神と呼ばれる「神の心」を持った人(キャラ)がいます。\n「神の心」は「神の目」の上位互換みたいなものなのかな。この世界では「神の目」を持つと元素の力を扱えるようになるみたい。\n元素の力というのは、魔法みたいなものですね。\n「神の目」は生まれ持つものらしく、しかし、旅人という名の主人公は例外だったと思う。なぜ「神の目」を持たず元素の力を使えるのか、みんなに不思議がられてた感じだったと思います。その理由については今後のストーリーで明らかになってくるのでしょう。\nとりあえず、原神の世界では、魔法である元素の力を扱える人がいて、それは生まれながらに「神の目」と呼ばれる器官を持っているからです。そして、元素は7つあり、それぞれに国があります。そして、その国を治めていた人が神と呼ばれ、その神は「神の目」の上位互換である「神の心」を持っている、そんな感じの設定だったと思います。\nちなみに、「神の心」は、他人に渡したり、あるいは奪われたりすることがあるらしい。そのため、「神の心」を集める集団が登場し、物語的には、そいつらをやっつけるみたいな話ですかね。\n長くなりましたが、強キャラの話です。\n原神では、どうやらこの神、あるいは元神が強キャラに設定されているようで、ガチャでピックアップされたときは狙い目だと思っています。\nもちろん、それ以外にも強いキャラはいますけど、基本的には、神を狙っとけばハズレは少ないはず。\n現在、実装済みなのは、風のウェンティと岩のショウリです。この二人は強キャラ認定されてる。\nちなみに、今、私がほしいのは、ショウリ、カンウですね。\nガチャというのはピックアップされないと引けないので、ピックアップされるまで待つ必要があります。\nしかし、次に来るのが雷の神、ライデンと予想されており、タイミング的に私がガチャをやるのはこの辺になりそう。\nなので、ライデンが最強キャラとかだったらうれしい。\n以上、原神の進捗報告でした。\n","description":"","formated_time":"2021-07-22","href":"https://syui.github.io/blog/post/2021/07/22/genshin/","tags":["genshin","game"],"title":"原神、ランク35","utc_time":"2021-07-22T00:00:00Z"},{"categories":null,"contents":"デスク周りの様子を記録しておきます。オタクグッズがちょっとずつ増えてきた。\n","description":"","formated_time":"2021-07-21","href":"https://syui.github.io/blog/post/2021/07/21/desk/","tags":["private","desktop"],"title":"デスクトップ写真2","utc_time":"2021-07-21T00:00:00Z"},{"categories":null,"contents":"\nUIメニューはwindows 10よりカチッとしててよいと思いました。\nおわり。\nwindowsはpowershellが来たvista以降、内部的にはあまり変わってないらしいです。\n参照 : https://japanese.engadget.com/windows-103000902.html\n","description":"","formated_time":"2021-07-16","href":"https://syui.github.io/blog/post/2021/07/16/windows/","tags":["windows"],"title":"windows 11にupgradeしてみた","utc_time":"2021-07-16T00:00:00Z"},{"categories":null,"contents":"最近、「最初から丁寧に描いたほうがよくない?」と思い始めてるので、最初から丁寧に描く絵が増えてる気がする。\n丁寧に描くと素材にも使える可能性が出てくるので、一石二鳥。\n雑に描いては修正するの、もう懲り懲りです\u0026hellip;。(n回目\n","description":"","formated_time":"2021-07-14","href":"https://syui.github.io/blog/post/2021/07/14/illust/","tags":["illust"],"title":"イラスト描いてみた90","utc_time":"2021-07-14T00:00:00Z"},{"categories":null,"contents":"以前、額縁が余ってるので絵を飾ろうとしたんだけど、失敗して、なぜかアイコンを飾る羽目になったんだけど、再挑戦してみることにした。\n前回はしっくりくる飾りたい絵がなかったので、今回はそれ用に作って飾ることに。\nなにやってんだという感じだけど、一応、満足。\nsrc : /img/yui_89.png\n","description":"","formated_time":"2021-07-13","href":"https://syui.github.io/blog/post/2021/07/13/illust/","tags":["illust"],"title":"絵を飾ってみた","utc_time":"2021-07-13T00:00:00Z"},{"categories":null,"contents":"漫画、描いてみました。以前のナンバリングを忘れてしまったので、これが1ってことにします。近々、続き書くかはわかりませんが。\n一応、スライドで読みやすくしてるやつはこっち(だけど、最初のページ探さないといけない)\n/manga\n漫画、一度経験しておきたかった戦闘シーンを以前書いたので、これからは普通に、日常とギャグ中心のストーリー展開をしていければとは思ってます。\nこれ2日くらいで書き上げたため、どうも下書きっぽくて、気が向けば後々修正入れるかもしれません。\n","description":"","formated_time":"2021-07-11","href":"https://syui.github.io/blog/post/2021/07/11/manga/","tags":["manga"],"title":"漫画描いた1","utc_time":"2021-07-11T00:00:00Z"},{"categories":null,"contents":"aospではdev modeでterminalが含まれるようになっており、local terminalという名前でterm appが使えるっぽいので試してみました。\nアイコンは公式なのでかっこいいんですけど、設定できないので使いづらかった。\n私はrootで使うことが多く、androidはrootの$HOMEを/に設定されており、これだとrootfsでinitramfsを採用することから、例えば、/.bashrcというファイルをtwrpとかremountとかして置いたとしても、再起動後に消えてしまうので、事実上、root shellの設定ファイルが使えないようになってます。\nしたがって、仮にroot shellをcustomするとなると、imgをbuildして、fastboot flash systemするしかありません。\n今まではandroid terminal emulatorの設定で色々と工夫して、aliasみたいなものを設定して使ってました。\narchlinuxのbootは、magiskでbusyboxのmoduleをinstallしたあと、/data/adb/magisk/busyboxから起動することにしました。busyboxを/system/binに入れても、そのうち消えるので。\nこのへん、もう忘れてしまってるんですが、supersuでは/system/bin/がrwでmountされてた気がする。magiskは一時的にpath解決するだけなのではないかと。\nこの回避策として思い浮かぶのは、chainfire氏のcf-auto-rootでexploitする際、imgにbusyboxを含めることで/system/binに書き込めそうだと思いましたが、magiskで管理したほうがbusyboxのupdateに対応しやすいので、こちらを採用しました。\n","description":"","formated_time":"2021-07-08","href":"https://syui.github.io/blog/post/2021/07/08/android/","tags":["android"],"title":"androidでlocal terminalを使ってみる","utc_time":"2021-07-08T00:00:00Z"},{"categories":null,"contents":"nexus7はかなり長く使っていて、はじめて体験するandroidとしては、とてもよい体験だったと思います。公式romはandroid 6.xがlatestで、私もそれを使用していました。\nしかし、nexus7は、custom romがandroid 10までありますし、lineage(android 11)もインストールが可能なので、最新のandroidを試してみることにします。\nlineage(android 11 base) 今回は、android 11ベースのlineageをインストールします。\ntwrp : https://twrp.me/asus/asusnexus72013wifi.html\nlineage os 18.1 : https://forum.xda-developers.com/t/rom-flo-deb-unofficial-lineageos-18-1-2021-06-10.3569067/\nsysrepart_1280_120.zip : https://forum.xda-developers.com/t/rom-flo-deb-unofficial-lineageos-18-1-2021-06-10.3569067/\nopengapps(android 11) : https://forum.xda-developers.com/t/rom-flo-deb-unofficial-lineageos-18-1-2021-06-10.3569067/\n$ adb reboot-bootloader $ fastboot flash recovery twrp.img $ fastboot boot twrp.img $ adb push sysrepart.zip /sdcard/ # twrp -\u0026gt; install -\u0026gt; sysrepart $ adb push lineageos.zip /sdcard/ $ adb push opengaaps.zip /sdcard/ # twrp -\u0026gt; install -\u0026gt; lineage, opengaaps magisk root root化は現在、magiskが一般的らしい。\n$ adb install magisk.apk # magiskでlineageのboot.imgにpatchを当てる $ adb pull /sdcard/Downloads/magisk_patched.img $ adb reboot-bootloader $ fastboot flash boot magisk_patched.img firewallとterminalがroot化されてる図。\nnexus7 usb接続の不具合 このnexus7は昔からusb接続の調子がよくありません。特にusbでデータ接続すると切断を繰り返すため、容量の大きいファイルをnexus7にuploadするのがストレスでした。\n昔からデータ通信、接続が不安定で、充電はできるんですが、データのほうは接続と切断を繰り返すため、コマンドも通る時と通らない時がありました。\nこれは、おそらくハード的な故障だと思われます。一度分解してusb基板を交換しており、交換直後は問題なかったのですが、最近、また調子が悪くなってきて、おそらく、また故障しています。\n# 接続切断が頻発するときのerror adb: error: failed to read copy response20210622-UNOFFICIAL_TEST.zip open_gapps-arm-11.0-pico-20210622-UNOFFICIAL_TEST.zip: 1 file pushed, 0 skipped. 29.1 MB/s (101391216 bytes in 3.323s) adb: error: failed to read copy response adb: error: failed to get feature set: no devices/emulators found 今回もusb接続が継続されることはほぼなくなり、adbでデータのやり取りが困難でやりづらかった。GUIの表示上は接続できているんですが、内部では接続と切断を繰り返している状態です。\nしたがって、端末に大きなファイルをuploadしたい場合、androidに入れてるarchにsshしてrsyncでuploadしていました。archでは/sdcard/という名のandroid root dirをmountしているので、特に問題ありませんが、このarchが壊れてしまうと、他にnexus7にデータをuploadする手段があまりないため、かなり不便になります。例えば、gitのprivate repoにpushして、androidでcloneする方法がありますが、このようなcloudを使った手法しかできなくなります。\n一応、分解した状態で接続すると、うまく継続されること多いんですけどね\u0026hellip;。\nしたがって、今回、androidをupgredeする際の注意点としては、主要なdir構造を保持すること(いくつかmountするため)とsupersuなどでterminal emulatorにroot権限を付与できること、busyboxをインストール可能であることが重要になってきます。\nなお、lineage osをインストールする際によく説明されているストレージの初期化は必ずしも必要ありません。\n今回、なぜかbusyboxを/system/xbinにインストールできなかったので、/system/binにインストールして、arch.bootを書き換えました。これはmagiskのroot名前空間の設定でglobalを選択するのだろうか。\n一応、lineage os(android 11)上でarch.imgまでは起動できました。sshも通る。\nnexus7 + android 11の感想 前よりもサクサク動くようになった気がしなくもない。\n","description":"","formated_time":"2021-07-07","href":"https://syui.github.io/blog/post/2021/07/07/android/","tags":["android"],"title":"nexus7をandroid 11にupgradeしてみた","utc_time":"2021-07-07T00:00:00Z"},{"categories":null,"contents":" /imgall/\n","description":"","formated_time":"2021-07-06","href":"https://syui.github.io/blog/post/2021/07/06/illust/","tags":["illust"],"title":"イラスト描いてみた88","utc_time":"2021-07-06T00:00:00Z"},{"categories":null,"contents":"追加した機能とかを簡単に紹介します。これくらい設定したら自分でも使うかも。こういうのは楽しければいいって思ってたんですが、まあまあ便利そうになってしまった気がする。\n# 通常検索、contentから $ search arch or $ / arch # タグ検索、shellの\u0026lt;tab\u0026gt;補完も付けてみた(タグ補完 $ search -t \u0026lt;tab\u0026gt;hugo # 最新記事 $ search -l # user ipでloginします(promptをipに変えてるだけ $ curl ipapi.co axios.get(\u0026#39;https://syui.ai/index.json\u0026#39;, { \u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39; }) .then(function (response) { index_json = JSON.stringify(response.data,null,\u0026#34;\\t\u0026#34;); origin_index_json = JSON.parse(index_json); origin_index_json.forEach(function(v,index) { if ( tags.indexOf(v.tags) == -1) { tags.push(v.tags)}; }); tags = tags.join(\u0026#39;,\u0026#39;).split(\u0026#39;,\u0026#39;); tags = tags.filter(function (x, i, self) { return self.indexOf(x) === i; }); }) var user_ip; if (inputs[0] === \u0026#39;curl\u0026#39; \u0026amp;\u0026amp; inputs[1] === \u0026#39;ipapi.co\u0026#39;){ $.ajaxSetup({async: false}); $.getJSON(\u0026#39;https://ipapi.co/json/\u0026#39;, function(data) { term.echo(JSON.stringify(data,null,\u0026#34;\\t\u0026#34;)); user_ip = JSON.stringify(data.ip,null,\u0026#34;\\t\u0026#34;).replace(/\\\u0026#34;/g, \u0026#39;\u0026#39;); });$.ajaxSetup({async: true}); this.set_prompt(\u0026#34;[[b;#d33682;]\u0026#34; + user_ip + \u0026#34;]@[[b;#6c71c4;]syui.ai] ~$ \u0026#34;); } if (inputs[0] === \u0026#39;search\u0026#39; \u0026amp;\u0026amp; inputs[1] === \u0026#39;-l\u0026#39;) { for (i = 0; i \u0026lt;= 5; i++) { s = origin_index_json[i].utc_time + \u0026#39;\\n\u0026#39; + origin_index_json[i].title + \u0026#39; \u0026#39; + origin_index_json[i].href + \u0026#39;\\n\u0026#39;; term.echo(s); }; } else if (inputs[0] === \u0026#39;search\u0026#39; \u0026amp;\u0026amp; inputs[1] === \u0026#39;-t\u0026#39; \u0026amp;\u0026amp; inputs[2] != undefined) { if (tags.indexOf(inputs[2]) != -1) { s = \u0026#39;tag : https://syui.ai/tags/\u0026#39; + inputs[2]; term.echo(s); } else { term.echo(\u0026#34;none tag!\u0026#34;); }; origin_index_json.forEach(function(v,index) { if ( v.tags != null \u0026amp;\u0026amp; v.tags.indexOf(inputs[2]) != -1) { term.echo(v.title + \u0026#39;\\n\u0026#39; + v.href); } }); } // login if (command == \u0026#39;login\u0026#39;){ term.login(function(user, password, callback) { if (user == \u0026#39;root\u0026#39; \u0026amp;\u0026amp; password == \u0026#39;root\u0026#39;) { callback(\u0026#39;SECRET TOKEN\u0026#39;); this.set_prompt(\u0026#34;[[b;#d33682;]\u0026#34; + \u0026#34;root\u0026#34; + \u0026#34;]@[[b;#6c71c4;]syui.ai] ~# \u0026#34;); } else { callback(null); } }); //} else if (term.token()) { //\tterm.echo(\u0026#34;token\u0026#34;); } ","description":"","formated_time":"2021-07-05","href":"https://syui.github.io/blog/post/2021/07/05/jquery-terminal/","tags":["jquery","terminal","hugo"],"title":"jquery.terminalで検索機能とか付けてみた","utc_time":"2021-07-05T00:00:00Z"},{"categories":null,"contents":"昨日紹介したvueを使った方法は、browserでjavascriptをdisableにしているuserには表示できないので、本来的にはhugoで解決したほうがいいかもしれません。\nvueは基本的にjsで出力されるのに対して、hugoはhtmlで出力されるますので。\nしたがって、hugoでの解決法も書いておきます。\n$ export IMG_YUI=`ls ./static/img/yui_*.png|wc -l|tr -d \u0026#39; \u0026#39;` $ hugo serve {{ $yuin := getenv \u0026#34;IMG_YUI\u0026#34; }} {{ $yuil := int $yuin }} {{ $yuil := sub $yuil 1 }} \u0026lt;p\u0026gt; \u0026lt;img src=\u0026#34;/img/yui_{{ $yuil }}.png\u0026#34;/\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; {{ range $index, $val := seq $yuin }} {{ if lt $index 10 }} \u0026lt;img src=\u0026#34;/img/yui_0{{ $index }}.png\u0026#34;/\u0026gt; {{ else }} \u0026lt;img src=\u0026#34;/img/yui_{{ $index }}.png\u0026#34;/\u0026gt; {{ end }} {{ end }} \u0026lt;/p\u0026gt; getenvで環境変数を取得後、最新の画像をトップに表示して、それ以降は順番通りに表示しています。\nvalは1から、indexは0からです。subする際にintで文字を数値に変換してます。\nただ、hugoでpreviewする際、環境変数を入れるのいつも忘れるので、この方法は使用しません。\n","description":"","formated_time":"2021-07-04","href":"https://syui.github.io/blog/post/2021/07/04/hugo/","tags":["hugo"],"title":"hugoで画像表示を自動化する","utc_time":"2021-07-04T00:00:00Z"},{"categories":null,"contents":"今まで新しい絵を追加するたびに、手動でhtmlを書き換えてたんですが、面倒だなあと思いつつ、しかし、載せるタイミングは操作できるので別にいいかと思っていたのですが、流石に枚数が増えてきたので自動化しました。\n\u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;chara\u0026#34;\u0026gt; \u0026lt;p\u0026gt; \u0026lt;a v-for=\u0026#34;(n,index) of cid\u0026#34; :key=\u0026#34;n\u0026#34; :href=\u0026#34;\u0026#39;/img/c_\u0026#39;+ ( \u0026#39;00\u0026#39; + index ).slice( -2 ) +\u0026#39;.png\u0026#39;\u0026#34;\u0026gt; \u0026lt;img :src=\u0026#34;\u0026#39;/img/c_\u0026#39;+ ( \u0026#39;00\u0026#39; + index ).slice( -2 ) +\u0026#39;.png\u0026#39;\u0026#34; /\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; var c = Number(process.env.VUE_APP_IMGNUMBERC); export default { data () { return { cid: c } } } \u0026lt;/script\u0026gt; import Vue from \u0026#39;vue\u0026#39; import App from \u0026#39;./App.vue\u0026#39; new Vue({ render: h =\u0026gt; h(App) }).$mount(\u0026#39;#app\u0026#39;) module.exports = { configureWebpack: { output: { filename: \u0026#39;[name].js\u0026#39;, chunkFilename: \u0026#39;[name].js\u0026#39; } }, css: { extract: { filename: \u0026#39;[name].css\u0026#39;, chunkFilename: \u0026#39;[name].css\u0026#39; }, }, } pngはstatic/img/c_0x.pngに置くと仮定して、自動化にはgh-actionsなどを活用してください。\n$ ln -s ./static ./src/public $ echo VUE_APP_IMGNUMBERC=`ls ./static/img/c_*.png|wc -l` \u0026gt;\u0026gt; .env $ yarn add vue $ yarn serve $ yarn build hugoに対応させるため、以下のファイルを用意します。\n$ mkdir -p static/img $ cp -r src/dist/*.js static/img/ $ cp -r src/dist/*.map static/img/ --- type: img --- \u0026lt;div id=app\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script src=/img/chunk-vendors.js\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=/img/app.js\u0026gt;\u0026lt;/script\u0026gt; なお、cssを追加したい場合、App.vueの\u0026lt;style\u0026gt;に追加してbuild後にsrc/dist/*.cssをhugoのdir、ここではstatic/imgですが、そこにcpします。読み込む必要があるのでapp.jsを読み込むところに追記すればいいでしょう。\n\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/img/app.css\u0026#34; /\u0026gt; 最後に、content/で指定した場所にsingle.htmlを用意します。なお、contentに書かず、こちらに直接書いたり、partialに置いて読み込んでもいいです。ただ、私の場合、なにか追加で載せたいことがあるので、こちらのほうがわかりやすいと思いました。\n{{ partial \u0026#34;head.html\u0026#34; . }} {{ partial \u0026#34;navbar.html\u0026#34; . }} {{ partial \u0026#34;header.html\u0026#34; . }} {{ .Content }} \u0026lt;/div\u0026gt; {{ partial \u0026#34;footer.html\u0026#34; . }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ hugo serve $ hugo 仮にhugoで厳格にやるとしたら、以下のほうがいいですね。\n{{ partial \u0026#34;head.html\u0026#34; . }} {{ partial \u0026#34;navbar.html\u0026#34; . }} {{ partial \u0026#34;header.html\u0026#34; . }} {{ partial \u0026#34;vue-img.html\u0026#34; . }} {{ .Content }} \u0026lt;/div\u0026gt; {{ partial \u0026#34;footer.html\u0026#34; . }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; \u0026lt;div id=app\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;link href=/img/app.css rel=preload as=style\u0026gt; \u0026lt;link href=/img/app.js rel=preload as=script\u0026gt; \u0026lt;link href=/img/chunk-vendors.js rel=preload as=script\u0026gt; --- type: img --- ![](/img/特別読み込みたい.png) gh-actionsは、以下のようにします。なお、envはgitignoreしてもいいですが、clone後に色々と面倒なのでpushしてtouch \u0026amp;\u0026amp; rmします。\nname: github pages on: push: branches: - src jobs: build-deploy: runs-on: ubuntu-18.04 steps: - uses: actions/checkout@master - uses: actions/setup-node@v1 with: node-version: 12 ref: src submodules: true fetch-depth: 0 - run: yarn install - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: # extended: true - name: Build env: TZ: \u0026#34;Asia/Tokyo\u0026#34; run: | touch .env rm -r .env echo VUE_APP_IMGNUMBERC=`ls ./static/img/c_*.png|wc -l` \u0026gt;\u0026gt; .env yarn build cp -rf ./dist/*.js ./static/img cp -rf ./dist/*.map ./static/img hugo - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_dir: ./public publish_branch: master .gitignoreも一応。\nsrc/node_modules src/dist public vueのindentはleafOfTree/vim-vue-pluginが便利。\nPlug \u0026#39;leafOfTree/vim-vue-plugin\u0026#39; let g:vim_vue_plugin_config = { \\\u0026#39;syntax\u0026#39;: { \\ \u0026#39;template\u0026#39;: [\u0026#39;html\u0026#39;], \\ \u0026#39;script\u0026#39;: [\u0026#39;javascript\u0026#39;], \\ \u0026#39;style\u0026#39;: [\u0026#39;css\u0026#39;], \\}, \\\u0026#39;full_syntax\u0026#39;: [], \\\u0026#39;initial_indent\u0026#39;: [], \\\u0026#39;attribute\u0026#39;: 0, \\\u0026#39;keyword\u0026#39;: 0, \\\u0026#39;foldexpr\u0026#39;: 0, \\\u0026#39;debug\u0026#39;: 0, \\} ","description":"","formated_time":"2021-07-03","href":"https://syui.github.io/blog/post/2021/07/03/vue-img/","tags":["hugo","vue"],"title":"お絵かきの枚数が増えてきたので自動表示してみた","utc_time":"2021-07-03T00:00:00Z"},{"categories":null,"contents":"/search\n記事を検索したい場合、自分はcontent/postをgrepするだけなので、あまり使わないのですが、一応、webにも検索フォームを付けてみました。\nhugo + vue + lunr.jsです。\nただ、日本語はおそらく対応してない。対応するには日本語対応するためのlibを追加で読み込む必要がありそう。\nlunrに渡すdataは、hugoがjson出力できるので、それを使います。\n[outputs] home = [\u0026#34;JSON\u0026#34;, \u0026#34;HTML\u0026#34;] jsはこんな感じで(要点記述だけですが)。\naxios(\u0026#39;/index.json\u0026#39;) this.searchIndex = lunr(function () { this.ref(\u0026#39;href\u0026#39;) this.field(\u0026#39;contents\u0026#39;) this.field(\u0026#39;title\u0026#39;) this.field(\u0026#39;tags\u0026#39;) documents.forEach(doc =\u0026gt; { this.add(doc) }) } ","description":"","formated_time":"2021-07-02","href":"https://syui.github.io/blog/post/2021/07/02/hugo-search/","tags":["hugo"],"title":"hugoでsearchするやつ付けてみた","utc_time":"2021-07-02T00:00:00Z"},{"categories":null,"contents":" あなたは、何者かになりたいと願ったことはありますか？\n今回はこの問について、自分なりに考えていきたいと思います。\n私は、何者かになりたいと願ったことはありませんでした。\nそう願う人を否定したいわけではなく、私には自分なりの考えがあったからです。\n何者かになりたい、というのは、その考えにそぐわない。\n私の考えは、主に存在について。\n私も存在であり、この世界に存在でないものは一つもありません。人も動物も虫も植物も、そのへんに転がっている石すらも、すべてが存在です。\n私の考えでは、人と他のなにかには違いがありません。本来的にはすべてが同じもの。\nですが、人であるうちは、それを認識することは難しいかもしれません。\n話を戻します。\n今回の問について考えると、私はこう問います。\n「あなたは、何者かになりたいと願ったことはありますか？」\n「あなたは、存在です。そして、存在はこの世界そのもの。それでは不満ですか？」と。\nしかし、この答えについては、実はとても難しい問題です。\n私の考えに基づくと、生というものは、往々にして苦痛であり\u0026hellip;といっても人であり、先進国にたまたま生まれたような人間にとっては理解が難しいかもしれませんが、しかし、我々が生を繰り返すのであれば、当然ながら、貧困国に住まう人々や出荷される豚、実験動物たち、その他の残酷な人生を送ることになるので、かつ、それが永遠に続くので、「存在であることは不満である」と答えても、なんら不思議ではありません。\nおそらく、現存する宗教のいくつかは、このような価値観を持つのではないでしょうか。\n例えば、反出生主義というものがありますが、あれも実のところ、正解を孕んでいる問題だと思われます。ただ、存在である以上は、非存在になることは不可能です。解脱や離脱が可能なら、それを輪廻や永遠とは呼びません。\n本当に永遠なんてものがあるのか、という点については、私なりの考えがあります。\nこれは以前にもお話した事があったと思うので、簡潔に説明すると、\n存在は存在している以上、永遠です。なぜなら、無から有は生まれないから。有から有が生まれるとしたら、この世界には最初から有があったということになります。そして、最初から有があったとしたら、それは、永遠です。なぜなら、始まりがあるものには終わりがありますが、始まりがないもの、つまり、最初からそこあったもの、有には、始まりがないので、終わりもありません。これが存在です。私の考えでは、これを最も小さいものと仮定します。最も小さい物質とか、あるいは、目に見えないけど、そこにあるものとか、呼び方は何でもいいですけど、それのことです。宇宙広しといえど、我々はそこにアクセスできない。おそらく、正体も掴めないものなのでしょう。そして、それが、おそらく永遠を構成しています。我々の、この世界そのものの、永遠の存在を。\n生が繰り返されることについても、ほぼ間違いないと思います。今この瞬間に存在している確率が低すぎるのです。これが偶然じゃないとすると、私は、みなさんもそうですけど、今まで姿かたちを変え存在し続けてきたのでしょう。これからもそうで、私は、今はたまたまこのような形で存在しているというに過ぎません。最終的には、もとの形、つまり、最初からそこにあったなにかに還ることになるのでしょう。これは私に限らず、世に存在するすべてがそうですけど、仮にそうであるなら、存在は、この世界そのものということになります。\n存在は存在であることをどうしようもない。\n私は私ですし、あなたはあなたです。本来的には同じものですけどね。\nですから、私は、何者かになりたいと願ったことはなかったかなと思います。\nしかし、私がこのように考えるのも、実はたまたまなんです。\nどういうことかというと、人生というのは、どういう星の下に生まれるかによって決まります。ですから、私はたまたまこの星のもとに生まれ、このような考え方を持つけれど、それは、たまたまに過ぎないのです。特に意味があるわけでもない。\nおそらく、私も、というか、そもそも私というものは本来ないんですけど、分かりづらいので私ということにしておくと、私も様々な星のもとに生まれ、色々な考えを持ってきたのでしょう。それはこれからも変わりません。\nつまるところ、「何者かになりたい」と願うこともあれば、願わないことも、そういった人生もあるのでしょう。\nですから、これについても、私の考えが特に意味をもつわけではないのです。\n","description":"","formated_time":"2021-07-01","href":"https://syui.github.io/archive/note/13/","tags":["note"],"title":"何者か","utc_time":"2021-07-01T00:00:00Z"},{"categories":null,"contents":"android上で動かしてるarch-armのupdateを怠っていたのでpacmanがupdateできない状態、もしくは無理にupdateすると壊れる状態になってしまってたので、ほぼ詰みかけてた話です。\n通常、archlinuxはpacmanが壊れてもpacman-staticのbinaryをdlしてくればいいんですけど、armにはそういうのがなかったので、pacmanが壊れると、ほぼどうしようもない感じだった。\nただ、armv7hのpackage-binaryを公開してくれてる人がいたので、とても助かりました。\nhttps://mirror.yandex.ru/archlinux-arm/armv7h/core/\nhttp://ftp.tku.edu.tw/Linux/ArchLinux-arm/armv7h/core/\n基本的に更新を怠ってたarch-armは、最初にpacman -Sy base-develします。これで一応、必要なpackageをupdateできるはずなんですが、今回はそれでもpacmanが壊れてる状態だったので、必要なものをftpから持ってきてbinaryを置き換えます。ちなみに、解凍とか面倒ならzarchiverってアプリを使いますが、便利です。\n$ pacman -Sy base-devel $ pacman --version error : archive_entry_digest # libarchive $ curl -sLO http://ftp.tku.edu.tw/Linux/ArchLinux-arm/armv7h/core/libarchive-3.5.1-1-armv7h.pkg.tar.xz $ aunpack libarchive-3.5.1-1-armv7h.pkg.tar.xz $ cp -rf ./libarchive-3.5.1-1-armv7h.pkg.tar/* / $ pacman --version error libraries : libarchive.so.13 file too short $ ls /etc/lib/libarch* $ ln -s /usr/lib/libarchive.so.13.15.1 /usr/lib/libarchive.so.13 $ pacman --version pacman v6.0.0, libalpm v13.0.0 $ pacman -Syu とりあえず直ったのでよかった。\nとはいえ、backup(2019)のarch-imgがあったので、次にやるなら、おそらく、それをadb pushすると思います。\n$ adb push arch-arm-back-2019.img /sdcard/ # 以下はあくまでイメージです、実際に実行できるコマンドではありません $ chroot /sdcard/arch-arm-back-2019.img $ pacman -S libarchive base-devel $ pacman -Syu ","description":"","formated_time":"2021-06-28","href":"https://syui.github.io/blog/post/2021/06/28/android-armv7-arch/","tags":["android"],"title":"androidで動いてたarch-armが壊れた","utc_time":"2021-06-28T00:00:00Z"},{"categories":null,"contents":"$USERではなく、whoamiで取るようにしました。\nherokuはUSERとPORTが変動しますので、仕組みに応じて環境変数を書き換える必要があります。今回もgiteaのdockerfileを使用します。\nhttps://git.syui.ai/syui/gitea\nbuild: docker: web: ./Dockerfile run: web: echo RUN_USER=`whoami` \u0026gt;\u0026gt; /data/gitea/conf/app.ini;mkdir -p /home/`whoami`;HOME=/home/`whoami`; echo \u0026#34;[server]\\nPROTOCOL=http\\nSSH_DOMAIN=git.syui.ai;DOMAIN=git.syui.ai\\nHTTP_PORT=$PORT\\nROOT_URL=https://git.syui.ai:$PORT\u0026#34; \u0026gt;\u0026gt; /data/gitea/conf/app.ini ;gitea web -p $PORT -c /data/gitea/conf/app.ini ちなみに、herokuは、1日おきに生成されたファイルをリセットしますので、例えば、webにpushするにしてもgitea/gitに生成されたファイルは時間が経つと削除されてしまうので、localにpushする必要があり、生成されたgitea/gitをgit-heroku-repoに含めてheroku-dockerにcopyしなければならず、herokuでのgitea運用は実用的ではありません。\n参照 : https://syui.ai/blog/post/2019/12/06/gitea/\n","description":"","formated_time":"2021-06-27","href":"https://syui.github.io/blog/post/2021/06/27/heroku-gitea/","tags":["heroku","gitea"],"title":"herokuでgiteaが動かなくなってた","utc_time":"2021-06-27T00:00:00Z"},{"categories":null,"contents":" /imgall/\n","description":"","formated_time":"2021-06-26","href":"https://syui.github.io/blog/post/2021/06/26/illust/","tags":["illust"],"title":"イラスト描いてみた87","utc_time":"2021-06-26T00:00:00Z"},{"categories":null,"contents":" /imgall/\n","description":"","formated_time":"2021-06-24","href":"https://syui.github.io/blog/post/2021/06/24/illust/","tags":["illust"],"title":"イラスト描いてみた86","utc_time":"2021-06-24T00:00:00Z"},{"categories":null,"contents":"最初の1週間は動作確認くらいでほとんどプレイしてなかったので、それを除いて、実際にプレイしはじめて1週間くらい経過しました。\n今回は、原神をはじめて1週間くらいでどんな感じなのかを記録することにします。\n現在、冒険者ランク27で、ストーリーは1-1あたりです。次に進むにはランク29が必要らしい。\nマップはすべて埋めています。現在はドラゴンスパインを制覇していて、頂上にビーコンを置くところまでやりました。というか、風でこれ以上昇れないんですが、どうすればいいのでしょう。風の道はあるみたいなんですが\u0026hellip;。\nそんなことは置いといて、現在のパーティーはクレー、ノエル、バーバラ、フィッシュルです。クレーだけ強化していて、LV50の武器LV50です。限界突破にはどちらも冒険者ランク30以上必要なので、これ以上は上げられません。\nクレーは、ダメージが最大3000ほど出せます。なので、耐久に気をつける必要はあるものの、ほとんどの敵は倒せてる感じ。\nその他のことは、まだ全然把握できていません。\n原石は5000ほど貯まっています。ガチャに使用するもので、最初に1000ほど使いクレーを1枚引いています。\n原石の使い道はすごく迷いましたが、新しいキャラに使う方針で貯めておくことにしました。\n本当はクレー2凸も目指したかったのですが、無課金では強キャラを引けないと詰みますので、続けたいなら強キャラを確実に引いたほうがいいと考えました。\n原神を続けるかどうかの判断ですが、このゲームは続けておいて損はないゲームだと感じました。オープンワールドで景色とかゲーム性とかキャラとか、きれいです。また、マルチがネトゲそのものですし、私はネトゲを本格的にやったことがなかったので、ネトゲは原神で体験していくことになりそう。原神は長続きしそうなゲームという雰囲気があります(運営が)。\nなので、みなさん、原神をはじめてみると、楽しいかもしれませんよ。\n","description":"","formated_time":"2021-06-20","href":"https://syui.github.io/blog/post/2021/06/20/genshin/","tags":["genshin","game"],"title":"原神をプレイしはじめて1週間が経過した","utc_time":"2021-06-20T00:00:00Z"},{"categories":null,"contents":"現在、冒険者ランク23です。6/15あたりからランク21で参加したんですが、6/17でランク23になってました。イベントすごい。\n武器、次の限界突破がランク25からとか言われたので、これ以上はできなかった。\n今回のイベント「真夏！島？大冒険！」に参加するのにちょっと手間取ったので、それについて。\n「本当の宝物」は「ルピカの意味」クリア後に受けられる イベント参加に冒険者ランク21であることが挙げられますが、これはなぜかというと、条件にクレーが登場する任務「本当の宝物」をクリアする必要があり、その受注がランク21からなんです(イベント期間のみ)。\nちょっと注意が必要なんですが、この「本当の宝物」任務は、「ルピカの意味」という任務をクリアしないと受けられません。\nこのへん、若干ハマりました。どこにも書いてなかったので。\n凸の意味とクレーを凸する意味 私は今まで、引いたカードの枚数で1凸、2凸だと考えていました。ですから初めて引いたのが1凸、重複したのが2凸というようにです。しかし、この表記は間違ってたみたいで、どうやら重複してから数えるっぽいのです。ですから合計2枚引いたら1凸、3枚なら2凸です。ポケマスでもボード開放は2凸からということになります。今まで3凸と表記してました、ごめんね。\nということで、現在、クレーは無凸、あるいは0凸です。クレーの2凸を目指そうか迷っています。\nというのも、今後のパーティーにもクレーを入れたいと考えていて、なぜかというと、現在強化してるのが武器含めクレーのみなので、せっかく強化したのが無駄になるのはもったいないという理由と、現時点で頼れるのはクレーのみなので、これからも強化していくことが予想されるためです。つまり、ストーリーを進めるにもイベントを攻略するにも現在はクレーがいないと何もできない状態。\nですが、クレーに関して、聞くところによると、最初は使ってたけど、強いキャラを引いたので使わなくなったという声をよく聞きます。\nそのため、今後、強いキャラを引いたときにもクレーをパーティーに入れるため、最低でも2凸はしておきたいと考えています。2凸だと防御デバフでサポート役に回れるので。\nですから、クレーの2凸を目指すか、あるいは原石をためて、次のピックアップを狙うべきか、悩んでます。\n現在考えているパーティーはクレー、甘雨、鍾離、アルベドです。こいつらを狙っていきたい。\nその他の感想 ストーリーやってると、ウェンティ、好きになってくる。最初は何だこいつって感じだったけど、いいやつだなって。考え方とかにある種の共感を覚えるので、よくできたキャラだと思う。こういう自然に好きになれるキャラ作れるの強い。\nクレー、エルフだったっぽい。アリスという破天荒な母親がいる模様。\nデイリー任務、すでにこなすのがつらくなってきている。\n","description":"","formated_time":"2021-06-17","href":"https://syui.github.io/blog/post/2021/06/17/genshin/","tags":["genshin"],"title":"原神、ドドコの物語","utc_time":"2021-06-17T00:00:00Z"},{"categories":null,"contents":"アオギリ\u0026amp;カイオーガは2回くらいで出た。\n余ってた数少ないダイヤ、おそらく600くらいだったと思うけど、それ使ったら単発で引きました。\nついでにグラードンが天井で1凸だったので、メダル使って3凸にしといた。現在のEXは以下のような感じ。\nよく使うやつはこんな感じ。\nポケマス、原神をプレイしてるときにオート回すくらいの範囲で続けていこうと思ってます。かなりの要素できなくなるけどね。\n","description":"","formated_time":"2021-06-11","href":"https://syui.github.io/blog/post/2021/06/11/pokemas/","tags":["pokemon","pokemas","game"],"title":"ポケマス、アオギリ\u0026カイオーガを引いた","utc_time":"2021-06-11T00:00:00Z"},{"categories":null,"contents":"現在、序章の第二幕あたりだったかな。冒険者ランク14です。ちょうどデイリーミッションを初クリアしたところなんですけど、祈願(ガチャ)を回したら、クレー出た。\n14回したところで来た感じだったと思います\u0026hellip;まさか出るとは。ちなみに、原神もポケモンGoやポケマスと同じく無課金でやるつもり。\n私、原神で一番使いたいキャラがパイモン(使用できない)で、二番目にクレーなので、これは嬉しい。\n今後の進め方なんですが、正直、武器とかキャラとかわかってないので、しばらくは原石ためて、使い所を判断できるようにしたい。ゲームについてなんとなくわかってきたら、必要そうなところで使う予定です。原石ためるには、デイリーをこなし、ストーリーを進めていく感じだと思う。\nそれ以外で自分が今できるのは、ドドコの物語っていう武器を手に入れることかなと思っていて、クレーが使える武器らしい。参加条件は以下の通り。\n冒険ランク21以上\n「魔神任務・序章第3幕」クリア\nクレー伝説任務「本当の宝物」クリア(イベント中は冒険ランク21以上で受注可能)\nなので、冒険者ランク21まで上げるのとストーリー進めるの頑張る。\n","description":"","formated_time":"2021-06-10","href":"https://syui.github.io/blog/post/2021/06/10/genshin/","tags":["genshin"],"title":"原神、クレーを引いた","utc_time":"2021-06-10T00:00:00Z"},{"categories":null,"contents":"今回は、原神をプレイしている環境の話をします。\nipad 7thは原神の推奨端末に含まれていませんが、祈願のところまでプレイしたところ、動作に問題は見られませんでした。なので、今の所は普通にプレイできている状態です。\nipadを固定するやつは、自転車ホルダーを使用しています。これが非常に便利なんですよ。机とかにそのまま置いても固定装置として機能しますし、本来の仕様通り自転車とか柱とかに固定しても使えます。\nコントローラーは、ps5のものを使用しています。タッチのほうが操作しやすいという人もいて、それはそうかもしれません。アイコンをタップできるので、タッチのほうが便利なんですよね。寝転がりながらできますし。\n原神 : https://apps.apple.com/jp/app/id1517783697\nipad 7th : https://support.apple.com/kb/SP807\n固定装置 : https://www.amazon.co.jp/dp/B091CF3QV3\nコントローラー : https://www.amazon.co.jp/dp/B08GG1QSRR\nクレーについて 原神ではクレーを使って冒険したいだけなので、クレー引きたいんですけど、原神のガチャってかなり渋いらしい。\nなので引けるかはわかりません。というか、おそらく引けない。\nとはいえ、祈願(ガチャ)は、冒険ランク10でコード使って、冒険ランク12からデイリーやって原石を集める感じだと思うので、期間中はストーリー進めながらやるつもりです。\n何をやればいいのか、まるでわからん。戦い方とかもわからん状態。\nとりあえず、ノエル引いて、連続攻撃+ジャンプ(キャンセル)して戦ってます。フィッシュル引いたので、それも使ってるんですけど、これでいいんだろうか。\nプレイしてると酔うので、ちょっとつらい。\nポケマスについて 関係ないですが、ポケマスで新イベントがあるので、それが落ち着くまではポケマスもやろうかなと思っています。\nポケマスはオートで回せるので、余ってるiphone seを引っ張り出してきて、ディスプレイを取り付け、バッテリーも取り付けて、これちょっと基盤がusb接続あたり壊れてるので接続しづらいんだけど、なんとかファームウェア入れて起動させました。ファームウェア入れるのも苦労しましたが、リカバリモードでファームウェアを選択して実行すると再起動後にインストールが失敗してしまうので、再起動直後にusbを再接続しないとうまくいかないところが難点でした。しかも接続が上手くいってるか確認する方法もないので無事を祈るしかないという。\n","description":"","formated_time":"2021-06-09","href":"https://syui.github.io/blog/post/2021/06/09/genshin/","tags":["genshin"],"title":"原神をプレイする環境を整えてみる","utc_time":"2021-06-09T00:00:00Z"},{"categories":null,"contents":"マツブサ\u0026amp;グラードンを天井で引きました。アメ(メダル)を使って凸強化などをしています。個人的には、レッド超えの最強キャラだと思うので、ポケマスやってる人は絶対に引いておいたほうがいいです。\nなんか大体のキャラは天井で無理やり引いてる気がするんですけど。レッドも天井だったし\u0026hellip;。\nということで、最難関も無事クリアです！\n話は変わりますが、ポケマスはこのへんで休止しようかなと思っています。\n理由としては、ポケマスのほうに問題があるわけじゃなくて、原神をプレイしたいからです。\nただ、マツブサ\u0026amp;グラードンは3凸しておきたいので、月曜日にヴィラをクリアして、カイオーガ10連して、赤アメをもらうとこまではやるつもり。これで3凸できる予定。\n","description":"","formated_time":"2021-06-06","href":"https://syui.github.io/blog/post/2021/06/06/pokemas/","tags":["pokemon","pokemas","game"],"title":"ポケマス、マツブサ\u0026グラードンを引いた","utc_time":"2021-06-06T00:00:00Z"},{"categories":null,"contents":"前から興味があった原神をプレイしてみました。\n現在、スマホゲーム(ガチャゲーム)は、どれをやっていこうか迷っている状態です。\nポケモンGoは決まりとして、あと一つがなかなか決まらない。\nちなみに、初めてプレイしたのがポケモンGoなので、これは確定です。それ以外にプレイしたものとしてはingress、魔法同盟、ポケマスがあります。もうポケモンGoだけでもいいかと思ったりもするんですけど\u0026hellip;。\n最大2つが限界なので、例えば、原神をやるなら、ポケマスを停止する必要があります。\nさて、今回プレイした原神ですが、なかなかよさそうでした。ipad 7thでプレイしたんですけど、普通にプレイできました。ただ、ipad 8th以降が推奨らしいです。\nmacbook(m1)でもプレイできるみたいですが、11.2以下にダウングレードする必要があるみたい。m1ではiosのアプリが動かせるので、それを使います。\nhttps://sekailab.com/wp/2021/05/04/downgrade-mac-osx-to-play-genshin/\n実は、原神を快適にプレイするためmacbookやipadの購入も検討してました。\nwindowsでやればいいんだけど、自分が持ってるのはデスクトップだし、原神をパソコンにインストールするのに抵抗があったので選択肢としては採用したくなかった。iosアプリならそのへんのプライバシー権限を把握しやすそう。\nそれに、やっぱゲームって携帯型でプレイしたいじゃないですか。あれ、違います？\nですが、手持ちのipad 7thでも動作することを発見、これはやるしかねえ、ということでプレイするに至る。\n(本当は原神に登場するクレーって子がかわいかったからなんですけどねっ！)\n","description":"","formated_time":"2021-06-05","href":"https://syui.github.io/blog/post/2021/06/05/genshin/","tags":["genshin"],"title":"原神をプレイしてみた","utc_time":"2021-06-05T00:00:00Z"},{"categories":null,"contents":"ポケマス史上最難関バトルをクリアx3しました。ちなみに、カイオーガもグラードンもどちらも持っていません。グラードンのガチャ、爆死中なんで。\n正直、無課金勢にクリアはきついと思う。私も無課金なので、ギリギリだったと思います。\nとはいえ、こういうイベントは否定的ではありません。そもそも最初はクリアしないつもりだったんだけど、ギリギリいけそうな感じもしたのでちょっとやってみただけなので。\nしたがって、本来的には「こういうイベントがあっても、まあいいんじゃない」という立場でした。\n今回、使用したのはハルカ\u0026amp;ラグラージ、アーティ\u0026amp;トゲピー、ツツジ\u0026amp;ダイノースです。タンクはダイノース。\nポイントだけ抑えると以下のとおりです。感触では下記のすべての条件を満たさないとクリアできなかった。\n最初は雨にする\nB技打てるとき相手が晴れにした上でソーラービーム打ってくるので、晴れにされた直後、雨に書き換える。そのため1ターンB技打つのを遅らせる。\n最初のB技は急所に当てる\nソーラービームを耐えたあと、回復する\n雨の回数回復が発動していること前提で、B技前に雨にする\n例えば、この条件が一つでも足りないとダメなので、例えば、最初のB技が急所に当たらなかった段階でやめるなどします。また、雨の回数回復が発動してないとだめだったり、条件が厳しいので、何度かやり直すことになりました。\n次は、カイオーガなんですけど、グラードンがもうすぐ天井なのでそれ引いたら倒せると思う。\n","description":"","formated_time":"2021-06-03","href":"https://syui.github.io/blog/post/2021/06/03/pokemas/","tags":["pokemon","pokemas","game"],"title":"ポケマス、グラードン","utc_time":"2021-06-03T00:00:00Z"},{"categories":null,"contents":" /imgall/\n","description":"","formated_time":"2021-05-30","href":"https://syui.github.io/blog/post/2021/05/30/illust/","tags":["illust"],"title":"イラスト描いてみた85","utc_time":"2021-05-30T00:00:00Z"},{"categories":null,"contents":"ドラクエの新作が発表ということで、ドラクエっぽい設定で描いてみた。といってもかなり適当で、毎回どんな絵にしようか、背景周りは割と悩むんで、あくまでコンセプトとして。\n「ドラクエだ！今度書くのはこんな感じにしてみよう」って感じの思いつき。実は、ドラクエは、昔は好きで全作プレイしてたんだけど、最近はプレイしなくなっちゃって、新しいやつほとんど追えてなかったりもする。\n/imgall/\nAはアタックの略で、まあ、与えるダメージ量でイメージしてもらえればと思います。これもドラクエ基準\u0026hellip;かな(適当)。11110とかの値は、ドラクエでいうと、かなり大きいと言うか、限界突破してますね\u0026hellip;。いわゆる「おれつえー」ってやつかも。とても痛いです、恥ずかしい。\nとはいえ、最初のキャラっていうのは、こうなっちゃうもんだと思う。痛くない感じの「おれつえー」したい。\nどうすればできるのでしょうか。\n","description":"","formated_time":"2021-05-29","href":"https://syui.github.io/blog/post/2021/05/29/illust/","tags":["illust"],"title":"イラスト描いてみた84","utc_time":"2021-05-29T00:00:00Z"},{"categories":null,"contents":"走ってるところを描いたことなかった気がするので描いてみた。あと、背景が地味だったので、適当にエフェクトでごまかしてる。\n/imgall/\nその他 この前描いたアナログ絵を再現してみた。\nここに掲載するイラストは、なかなかうまくかけなかったやつで何度か書き直してる。\n描けるときは一発なんだけど、それ外すと何度修正しても納得したものに仕上がらないというのがある。\n何が言いたいのかというと、うまく描けるときと描けないときがあって、後者の場合は、何度修正しても納得したものに仕上がりにくいってことだと思う。\nでも、懲りずに今回も過去絵をいくつか修正してる。\nもうこの辺でいいんじゃないというものには仕上がったと思ってるけど、修正に修正を重ねたイラストってのは、結局、最終的に納得できた試しがあまりない。\n","description":"","formated_time":"2021-05-28","href":"https://syui.github.io/blog/post/2021/05/28/illust/","tags":["illust"],"title":"イラスト描いてみた83","utc_time":"2021-05-28T00:00:00Z"},{"categories":null,"contents":"楽天モバイルの使用感は最高レベル 以前、楽天モバイルはすごくいいって書いたのですが、未使用だったので、使用してみた上で評価をしていきたいと思います。\nちなみに、私は現在、以前から使っていたso-netのnruoモバイル(旧0sim)を併用しています。実は、0simに移行する前もdocomoのパケホーダイを半年ほど併用した上で移行を決めたことがあります。\n普通はさっさとdocomoを切ればいいのですが、実際に半年間併用してみて、自分がどれほどパケットを消費するか、使用感など確認する目的がありました。結果、0simに移行しても全く問題ないと判断し、移行を決めた経緯があります。ですので、しばらくの間は一見して無駄のように思える併用をしています。\n楽天モバイルに話を戻すと、楽天モバイルはプランや様々な記事内容を見る限り、多少、使用感に問題があったとしても、私は最高レベルの評価をしたでしょう。将来的にこういうことをやる会社がユーザーを獲得してほしいという思いがありました。\nそのことを前提に評価しますが、実は、楽天モバイルを1ヶ月ほど使用してみると、使用感も素晴らしかったです。\nこれは住んでいる地域によるかもしれませんが、電波は常に良好で問題になることがありませんでした。また、料金などを確認するアプリも使いやすく、わかりやすいと思いました。\nインフラというジャンルにおいて、プラスよりもマイナスがないことのほうが重要なので、楽天モバイルは、使用感も最高レベルの評価をします。\n楽天モバイルの特殊事情、1年間無料期間後 次に、楽天モバイルの現在の特殊事情について少し書きます。\n私は現在、1年間料金無料のサービスが適用されている状態だと思います。私以外の多くのユーザーも同じようなサービスの適用を受けていると思われます。\n個人的な話になりますが、無料サービスの適用を受けても私は普段通り使うだけなので、1ヶ月/1GB未満の状態が3ヶ月続いています。\n私の場合、「どれだけ使っても1年間は無料なのでたくさん使おう」とはなりません。無料期間中も1GB以内に抑えようという気持ちのほうが強い。\nですが、他のユーザーも自分と同じように考えるとは限りません。ここでは、楽天モバイルを使っているユーザーの今後の動向を予想していきたいと思います。\nまず、「無料期間中はたくさん使って、期間が終わったら他に移ろう」と考えているユーザーがたくさん、あるいは一定数いることが予想されます。\nですが、私の予想では、実際に他に移るユーザーはごく少数にとどまると考えています。\nなぜなら、移る理由が見当たらないからです。楽天モバイルの料金プランは、サービス期間がなくとも非常に魅力的です。他社よりも圧倒的に有意と言っていいでしょう。ですから、わざわざ面倒な手続きをして他社に移る人は少ないと思います。\n次に、「無料期間中はたくさん使って、期間が終わったら1GB以内に抑えよう」と考えているユーザーもたくさんいると予想しています。\nですが、これらの人たちの試みは、それほどうまく行かないだろうと思います。\nここが楽天モバイルの本来の狙いなのかもしれませんが、人はそう簡単に生活習慣を変えることはできません。\n使わない人は使わないし、使う人は使い続けるでしょう。期間が終わったら習慣を変えよう、習慣をやめようなんてのは、ほとんどの場合は成功しません。\nですから、「無料期間中はたくさん使って、期間が終わったら1GB以内に抑えよう」というユーザーは結果としてはごく少数にとどまると予想します。\nつまり、楽天モバイルは、プランも使用感もすごくいいので、一度獲得したユーザーが離れることは少ないというのが私の予測です。\n他社に移るのもめんどくさい、習慣を変えるのもめんどくさい、ですが、楽天モバイルは問題なく使えて、プランも良心的となれば、移る理由、やめる理由が思い当たりません。\nなので、楽天モバイルは、国内において一強になるポテンシャルを秘めていると思っています。以上です。\n","description":"","formated_time":"2021-05-27","href":"https://syui.github.io/blog/post/2021/05/27/mobile/","tags":["ios"],"title":"楽天モバイルの使用感","utc_time":"2021-05-27T00:00:00Z"},{"categories":null,"contents":"ようやくレベル50チャレンジが終わりました。レイドx50のタスクが一番時間かかった(無課金勢)。\nL50チャレンジではポーズがもらえるわけですが、L48チャレンジのときにもらえるポーズが漫画版のレッドぽくて、L50のポーズはリーフ(ブルー)っぽいと勝手に思っていて、アバターを女性にしてみることに。\n原作は全プレイ済みで、主人公を女性にしたのは、剣盾のGEN8だけ。ポケモンGoでもやはり現実の性と一致させたいと思いつつ、ちょっとの間だけはこれでいこうと思っております。\nちなみに、コーディネートはこんな感じで、ニンフィアの靴、買いましたが、ちょっとでかい気がする。名探偵コナン感(コナンは靴がでかい印象)。\n","description":"","formated_time":"2021-05-25","href":"https://syui.github.io/blog/post/2021/05/25/pogo/","tags":["pokemon"],"title":"ポケモンGo、L50チャレンジ","utc_time":"2021-05-25T00:00:00Z"},{"categories":null,"contents":"ランニング、プラチナ取りました。1ヶ月160kを達成すると取れるらしいので、そこ目標にやってました。\n基本、ゆっくり走ってるので、余裕持って走れるペースはこれくらいらしいです。\n5/8くらいからアプリ始めた記憶があって、最初の頃は、スマホをポケットに入れてたんだけど、「ワークアウトを中断しています」とか言われ、14k走ったのに7kしかカウントされてなかったりだとか、その他も色々なアクシデントはあったけど、途中、ロックモードを発見して以降は問題なかったです。\n最終的な記録はこんな感じ。42kを走れたのもよかった。おそらく、アプリやってなかったら走っていませんでした。\nですが、日課のランニングにアプリ(スマホ)を持っていくのは、これで終わろうと思います。\n走ってるとき、スマホは結構邪魔になるし、割と重いし、持ってくの自体めんどいしで、割とモチベを下げる効果があるんです。\n日々のちょっとした障壁、たとえ些細なことでも、日課をやる上では必要ないので、取り除いがほうがいいのです。\nまた、アプリで計測していると、どうしてもいつもより頑張っちゃうと思うんです。今回だって普段は絶対に走らない21kや42kを走ったりして、めちゃめちゃ疲れちゃってます。\nということで、一旦、アプリは終了して、また、機会があれば、今回みたいに短期間だけアプリ入れて頑張っちゃうことはあるかもしんないけど、しばらくはなさそう。以上です。\n","description":"","formated_time":"2021-05-22","href":"https://syui.github.io/blog/post/2021/05/22/nike/","tags":["nike","private","running"],"title":"ランニング、プラチナ取った","utc_time":"2021-05-22T00:00:00Z"},{"categories":null,"contents":"そういえば、アナログ絵は全く描いたことがないなあと思ったので、ボールペンで描いてみました。\n正直、アナログは、やり直しができないのがつらすぎる。色を塗るのも大変ですし、多分、もうやらないと思う。\n","description":"","formated_time":"2021-05-21","href":"https://syui.github.io/blog/post/2021/05/21/illust/","tags":["illust"],"title":"イラスト描いてみた、アナログ編","utc_time":"2021-05-21T00:00:00Z"},{"categories":null,"contents":" /imgall\n","description":"","formated_time":"2021-05-20","href":"https://syui.github.io/blog/post/2021/05/20/illust/","tags":["illust"],"title":"イラスト描いてみた81","utc_time":"2021-05-20T00:00:00Z"},{"categories":null,"contents":" /imgall\n","description":"","formated_time":"2021-05-19","href":"https://syui.github.io/blog/post/2021/05/19/illust/","tags":["illust"],"title":"イラスト描いてみた80","utc_time":"2021-05-19T00:00:00Z"},{"categories":null,"contents":"やってみようかなという気分だったので、この前、42.2kmを走ってみました。\n42.195kmというと有名ですから、一度走ってみようと、そう思ったのです。\nただ、私、ランニングにはあまり興味がないので、今まで走ったことがありませんでした。\n私の場合は日課だからやってるだけのランニングなんですが、そんな中、たまにやる気になることもあって、アプリを入れたとか、そういうことがあると、少しの期間だけは頑張ることがあります。\nおそらく、今回もその類でしょう。すぐに飽きてやめちゃいますけどね。タイムとかもよくわからないし、興味もないので。他人がどれだけのタイムを出そうが、そんなことどうでも良くて、私は日課としてやるだけなので。\nですが、今回はたまたまアプリを入れたこともあって、ちょっと頑張ってみました。42kmは正直、きつかった。\n走り終わったあとは、頭の火照りは取れないし、足は吊るしで、なかなかしんどかった。でも寝たら治った。以上。\n","description":"","formated_time":"2021-05-14","href":"https://syui.github.io/blog/post/2021/05/14/nike/","tags":["nike","running","private"],"title":"はじめて42kmを走ってみた","utc_time":"2021-05-14T00:00:00Z"},{"categories":null,"contents":"vnc clinetは色々ありますが、個人的には、remminaが最もおすすめです。linuxでは主にこちらを使っています。\nremminaは、非常に柔軟性のあるvnc clientで、i3でも普通に動作すると思います。また、コマンドオプションも豊富です。\n$ sudo pacman -S remmina $ remmina -c vnc://${user}:${password}@192.168.xx.xxx https://wiki.archlinux.jp/index.php/Remmina\n","description":"","formated_time":"2021-05-13","href":"https://syui.github.io/blog/post/2021/05/13/vnc/","tags":["vnc","arch","linux"],"title":"i3でおすすめのvnc clientであるremmina","utc_time":"2021-05-13T00:00:00Z"},{"categories":null,"contents":"sixelを使えば、terminalに画像を表示することができるようになります。ただし、端末がsixelに対応していなければなりませんし、sixelはvte対応だったかな。vteの問題があるterminalでは難しかったと思いますので、注意。\n例えば、xtermでは、以下のような感じで画像を簡単に表示できます。\n$ yay -S libsixel $ xterm -ti vt340 $ img2sixel test.png ","description":"","formated_time":"2021-05-12","href":"https://syui.github.io/blog/post/2021/05/12/xterm/","tags":["terminal","arch","linux"],"title":"xtermとsixelでterminalに画像を表示する","utc_time":"2021-05-12T00:00:00Z"},{"categories":null,"contents":"初回にカバンの中身を紹介しましたが、その続編になります。ポケモンのミュウも最後にちょっとだけ登場します。中二病っぽい内容になっていますが、ご了承ください。\n","description":"","formated_time":"2021-05-11","href":"https://syui.github.io/blog/post/2021/05/11/pogo/","tags":["youtube"],"title":"動画を作ってみた3","utc_time":"2021-05-11T00:00:00Z"},{"categories":null,"contents":"mastodonって下の方に現在のverが表示されてますよね。ここに、commit-hashとrubyを表示するやつをzundaさんがpull-reqついでに開発してたので、それを使うといいでしょう。herokuではSOURCE_VERSIONからhashを取れるっぽい。\nhttps://github.com/zunda/mastodon/pull/27/files\nnamespace :source do desc \u0026#39;Record source version\u0026#39; task :version do hash = ENV[\u0026#39;SOURCE_VERSION\u0026#39;] # available on Heroku while build if hash.blank? begin hash = `git rev-parse HEAD 2\u0026gt;/dev/null`.strip # ignore the error: fatal: Not a git repository rescue Errno::ENOENT # git command is not available end end unless hash.blank? hash_abb = hash[0..7] File.open(\u0026#39;config/initializers/version.rb\u0026#39;, \u0026#39;w\u0026#39;) do |f| f.write \u0026lt;\u0026lt;~_TEMPLATE # frozen_string_literal: true module Mastodon module Version module_function def suffix \u0026#34; at #{hash_abb} on ruby-#{RUBY_VERSION}\u0026#34; end def repository \u0026#39;tootsuite/mastodon\u0026#39; end def source_tag \u0026#34;#{hash}\u0026#34; end end end _TEMPLATE end end end end task \u0026#39;assets:precompile\u0026#39; =\u0026gt; [\u0026#39;source:version\u0026#39;] rake assets:precompileでconfig/initializers/version.rbが生成される仕組みで、表示はこのversion.rbを参照します。形式は以下のような感じ。\nhttps://github.com/tootsuite/mastodon/blob/main/lib/mastodon/version.rb\n# frozen_string_literal: true module Mastodon module Version module_function def major 3 end def minor 4 end def patch 0 end def flags \u0026#39;rc1\u0026#39; end def suffix \u0026#39;\u0026#39; end def to_a [major, minor, patch].compact end def to_s [to_a.join(\u0026#39;.\u0026#39;), flags, suffix].join end def repository ENV.fetch(\u0026#39;GITHUB_REPOSITORY\u0026#39;, \u0026#39;tootsuite/mastodon\u0026#39;) end def source_base_url ENV.fetch(\u0026#39;SOURCE_BASE_URL\u0026#39;, \u0026#34;https://github.com/#{repository}\u0026#34;) end # specify git tag or commit hash here def source_tag ENV.fetch(\u0026#39;SOURCE_TAG\u0026#39;, nil) end def source_url if source_tag \u0026#34;#{source_base_url}/tree/#{source_tag}\u0026#34; else source_base_url end end def user_agent @user_agent ||= \u0026#34;#{HTTP::Request::USER_AGENT} (Mastodon/#{Version}; +http#{Rails.configuration.x.use_https ? \u0026#39;s\u0026#39; : \u0026#39;\u0026#39;}://#{Rails.configuration.x.web_domain}/)\u0026#34; end end end ","description":"","formated_time":"2021-05-10","href":"https://syui.github.io/blog/post/2021/05/10/mastodon/","tags":["heroku","mastodon"],"title":"mastodonでcommit-hashとdeploy-rubyをあわせて表示してみる","utc_time":"2021-05-10T00:00:00Z"},{"categories":null,"contents":"mastodon v3.4.0のpre-verがmasterにcommitされています。\nheroku-20はruby v3.0.1に対応していて、mastodon v3.4.0はruby \u0026lt; v3.1.0なので、heroku(deploy-server)のruby verを上げてみました。Gemfile.lockをheroku用に更新してdeployすればokです。\nHeroku supports the following Ruby versions and the associated Rubygems. A supported version means that you can expect our tools and platform to work with a given version. It also means you can receive technical support. Here are our supported Ruby versions:\n2.6.7, Rubygems: 3.0.3.1\n2.7.3, Rubygems: 3.1.6\n3.0.1, Rubygems: 3.2.15\nhttps://devcenter.heroku.com/articles/ruby-support#ruby-versions\n$ git clone https://github.com/tootsuite/mastodon $ cd ./mastodon $ heroku git:remote -a $app $ rm Gemfile.lock $ rbenv install 3.0.1 $ rbenv local 3.0.1 $ rbenv version $ gem i bundler $ bundle $ git add . $ git commit -m \u0026#34;update gemlock ruby3.0.1\u0026#34; # git push heroku master $ git push heroku main $ heroku run RAILS_ENV=production bundle exec rails db:migrate $ heroku run RAILS_ENV=production bin/tootctl cache clear $ heroku run RAILS_ENV=production bundle exec rails assets:precompile ","description":"","formated_time":"2021-05-09","href":"https://syui.github.io/blog/post/2021/05/09/mastodon/","tags":["heroku","mastodon"],"title":"mastodon v3.4.0をruby v3.0.1でdeployしてみた","utc_time":"2021-05-09T00:00:00Z"},{"categories":null,"contents":"久しぶりにランニングアプリを入れてみました。nike run clubというアプリなんですが、前に使ったことあるやつもこんな感じのアプリです。2017に登録とある。\nまずは、1kmくらい走ったんだけど、ちょっとハリキリすぎちゃって、日中だし、危ないかもと思ったので、そこで中断してる。\nその後、日課としていつものコースを走ったんだけど、最初と最後だけ、ちょっと頑張ってる。 1kmごとに記録見れるらしいので見てみた。高低差があるので、遅かったり早かったりしてる。また、単純にバテてるというのもある。\n自宅から自宅までなので、高低差は±ゼロ(記録精度上は知らない)。私が走ってるコースは、最初はちょっと下り坂なので楽だけど、帰りは上り坂なのできついっぽい。けど、感覚としてはそこまで変わらないし、意識してない。\n前はなかったけど、今はトロフィーとかあるらしいので、目指そうかどうか迷ってるんだけど、でも、データ保存はクラウド上、アカウント上でなされるのかわからず、あくまでスマホに保存する感じではないかなと思っていて、であれば、アプリを削除したり、スマホを変えたりした場合、トロフィーは消えるし、ランレベルも消えることが予想されるんだけど、どうなんだろうか。\nアカウント自体も結構厳しいっぽい。\nNikeでは、ナイキ メンバーのプライバシー保護に努めています。そのため、ナイキ メンバーシップがアクティブなお客様のデータのみを保存しています。NikeのWebサイトまたはアプリ上で過去2年以内にご自身のナイキ メンバープロフィールにサインインされたお客様は、メンバーシップのアカウントがアクティブであるとみなされます。アカウントを2年以上利用していない場合でも、ナイキ メンバープロフィールに再びサインインしていただくと、お客様の個人情報は現在も設定内に保存されています。ただし、ランやワークアウトの個別データは表示されず、代わりに集計情報が表示されます（以下の「個人のデータにどのような影響がありますか？」をご参照ください）。アカウントを利用していない期間が5年以上になると、お客様のプロフィールおよび関連するすべてのデータが削除され、いずれの情報も復元できません。\nhttps://www.nike.com/jp/help/a/nike-data-protection\n","description":"","formated_time":"2021-05-08","href":"https://syui.github.io/blog/post/2021/05/08/running/","tags":["private","nike","running"],"title":"ランニングアプリを入れてみた","utc_time":"2021-05-08T00:00:00Z"},{"categories":null,"contents":"stack:heroku-20でmastodon v3.3.0に対応する方法です。\nlibvpx5 以下のエラーが出てしまいますが、これは、heroku-20で使用されるubuntu 20.04がlibvpx6を使用するのに対し、mastodonはlibvpx5を使用するためだと思われます。\nremote: E: Unable to locate package libvpx5\nしたがって、mastodon/Aptfileを書き換えます。\n- libvpx5 + libvpx[5-9] 追記:zundaさんがpull-reqされていました。\nhttps://github.com/tootsuite/mastodon/pull/15591\nruby v2.7.3 heroku-20は、最も古いのがruby v2.5.9です。したがって、Gemfile.lockを変更する必要があります。\nhttps://devcenter.heroku.com/articles/ruby-support\n$ cd ./mastodon $ yay -S rbenv ruby-build $ rbenv init $ rbenv install 2.7.3 $ rbenv local 2.7.3 $ gem i bundler $ bundle # git push -f heroku main $ git push -f heroku master bundleを実行するのは何でもいいですけど、archで実行後にGemfile.lockをcpしてgit-pushしました。\nmastodon v3.3.0 SKIP_POST_DEPLOYMENT_MIGRATIONS=trueは特殊だけど、他はいつも通りのコマンド。\n$ heroku run RAILS_ENV=production bin/tootctl cache clear $ heroku run SKIP_POST_DEPLOYMENT_MIGRATIONS=true RAILS_ENV=production bundle exec rails db:migrate $ heroku run RAILS_ENV=production bundle exec rails assets:precompile https://github.com/tootsuite/mastodon/releases/tag/v3.3.0\n","description":"","formated_time":"2021-05-06","href":"https://syui.github.io/blog/post/2021/05/06/heroku/","tags":["heroku"],"title":"mastodon v3.3.0をstack:heroku-20に対応する方法","utc_time":"2021-05-06T00:00:00Z"},{"categories":null,"contents":"elixir+phoenixで作ってるappが古いstack:heroku-16で動いてて、versionを上げろと言われてたので、heroku-20にしてみた。\nThe Heroku-16 stack is end-of-life This app is using the Heroku-16 stack, which reached end-of-life on May 1st, 2021. Apps using Heroku-16 no longer receive security updates, and from June 1st, 2021, builds will be disabled. Please upgrade your app to a newer Heroku stack. Visit here to learn more\nhttps://help.heroku.com/0S5P41DC/heroku-16-end-of-life-faq\n$ heroku git:clone -a $app $ cd $app $ heroku buildpacks:set hashnuke/elixir elixir_version=1.9.0 release=true これでpushしても以下のエラーが出るけど、cacheを削除すると動きます。\n/app/.platform_tools/erlang/erts-10.6.4/bin/beam.smp: error while loading shared libraries: libtinfo.so.5: cannot open shared object file: No such file or directory\nhttps://github.com/HashNuke/heroku-buildpack-elixir/issues/197\n$ heroku plugins:install $ heroku plugins $ heroku builds:cache:purge $ git push heroku master ","description":"","formated_time":"2021-05-05","href":"https://syui.github.io/blog/post/2021/05/05/heroku/","tags":["heroku"],"title":"heroku stackをheroku-20に移行する","utc_time":"2021-05-05T00:00:00Z"},{"categories":null,"contents":"heroku redis 4,5が廃止になるらしい。6にupgradeしなければ、6/30に自動でupgradeされるらしいので、heroku redis 6にupgradeしてみます。\nUsers that do not proactively upgrade their add-on to version 6 will be automatically upgraded after the deadline of June 30, 2021.\nhttps://devcenter.heroku.com/articles/heroku-redis-hobby-deprecation\n# redis urlの取得 $ heroku config:get REDIS_URL -a ${app} # redis addonを作成 $ heroku addons:create heroku-redis:hobby-dev --fork `heroku config:get REDIS_URL -a ${app}` -a ${app} # 進捗の確認 $ heroku redis:info redis-xxxx -a ${app} # 完了すればappが使用するredisを変更 $ heroku redis:promote redis-xxxx -a ${app} # appを確認後に古いredisを削除 $ heroku redis:info -a ${app} $ heroku addons -a ${app} $ heroku addons:destroy redis-xxxx -a ${app} ","description":"","formated_time":"2021-05-04","href":"https://syui.github.io/blog/post/2021/05/04/heroku/","tags":["heroku"],"title":"herokuのredis 6に移行する","utc_time":"2021-05-04T00:00:00Z"},{"categories":null,"contents":" /imgall\n","description":"","formated_time":"2021-05-01","href":"https://syui.github.io/blog/post/2021/05/01/illust/","tags":["illust"],"title":"イラスト描いてみた78,79","utc_time":"2021-05-01T00:00:00Z"},{"categories":null,"contents":"基本的には、macbookでもbootできるarch usbの作成方法です。\ngrub まずbootですが、私はmacbook-airの内蔵diskにarchをインストールしてることもあって、そこから持ってくることになりました。\ngrub-installは成功するんだけど、なぜかうまく動かない。また、archのインストールディスクからgrubがなくなってるのと、現在のインストールディスクがmacbookで認識しなくなってました。supportはずされたのか、それ以外の問題か。なんにせよ最新のgrub-installで作成されるefiではbootできないし、最新のインストールディスクはmacbookから起動できません。(私の環境では)\nなので、基本的には、usbにlinuxをインストールして、archが動いてるdiskの/boot(linux-img以外)及び/dev/sda1のディレクトリ構成をコピーすればokです。\n$ pacman -S linux $ mount /dev/sdb2 ./mnt $ cp -rf /boot/efi ./mnt/boot/ $ cp -rf /boot/grub ./mnt/boot/ $ mount /dev/sdb1 ./boot $ mount /dev/sda1 ./boot2 $ cp -rf ./boot2/* ./boot/ $ grub-mkconfig -o /boot/grub/grub.cfg ちなみに、grub-installは以下のコマンドで成功(動かないけど)。\n$ arch-chroot ./mnt $ mount /dev/sdb1 ./boot/efi $ grub-install --efi-directory=/boot/efi /dev/sdb linux macbookは2台あるんですけど、archがすんなり起動したやつとしなかったやつがありました。\nmacbookによってはlinux起動時に以下のようなerrorが出てlinuxが起動しない場合があって、uuidが見つからないと言われてるんだけど、普通にusbのuuidは一致してるので、fstab, grubの問題ではなく、linux kernelの問題でした。\nERROR: device \u0026lsquo;UUID=xxx\u0026rsquo; not found. Skipping fsck. mount: /new_root: can\u0026rsquo;t find UUID=xxx. You are now being dropped into an emergency shell. sh: can\u0026rsquo;t access tty: job control turned off\nこれは、kernel更新する際、blockをautodetectの前に置くと起動するようになりました。\nHOOKS=\u0026#34;base udev block autodetect modconf filesystems keyboard fsck\u0026#34; $ mkinitcpio -p linux icns macのbootloaderはosを読み込む際にアイコンを設定できます。boot領域の/に.volumeicon.icnsを置きます。\n$ mount /dev/sdb1 ./boot $ cp .volumeicon.icns ./boot/ ちなみに、同じアイコンでも表示されないことがあって、権限等の可能性があるかも。正直、よくわかりませんし、icnsもめんどくさすぎる。\nhttps://qiita.com/syui/items/76aebb2e39f40d8cd1e9\nwifi wifi-deviceがない状態なのでdrive, kernelあたりの問題だと思われます。\nb43などmodprobeのblacklistに入れてkernelを更新すると、wifi-deviceが立ち上がりました。\nblacklist b43 blacklist b43legacy blacklist bcm43xx blacklist bcma blacklist brcm80211 blacklist brcmfmac blacklist brcmsmac blacklist ssb $ pacman -Syu linux-headers broadcom-wl-dkms $ mkinitcpio -p linux https://bbs.archlinux.org/viewtopic.php?pid=1862759#p1862759\nnetwork ip固定するので伝統的な名前、eth0とかにする。\n$ ln -s /dev/null /etc/systemd/network/99-default.link 今回はnetworkmanagerを入れることにしたんだけど、便利。ただ、自動設定とかは接続は、systemd-networkで書いてる。\nxorg ディスプレイがoffにならないようにする設定。よく忘れる。xset dpms force offが効かないことある。ただ、これらの設定によってi3が起動しなくなる事があるので注意。\nSection \u0026#34;Monitor\u0026#34; Option \u0026#34;DPMS\u0026#34; \u0026#34;false\u0026#34; EndSection Section \u0026#34;ServerLayout\u0026#34; Identifier \u0026#34;ServerLayout0\u0026#34; Option \u0026#34;StandbyTime\u0026#34; \u0026#34;0\u0026#34; Option \u0026#34;SuspendTime\u0026#34; \u0026#34;0\u0026#34; Option \u0026#34;OffTime\u0026#34; \u0026#34;0\u0026#34; Option \u0026#34;BlankTime\u0026#34; \u0026#34;0\u0026#34; EndSection https://wiki.archlinux.jp/index.php/Display_Power_Management_Signaling\nkeyboard xmodmapとかで設定するといいです。xevを使います。訳あってmacbook-airのusを使ってます。本当はjisのほうがいい。\nxmodmap: up to 4 keys per modifier, (keycodes in parentheses): shift Shift_L (0x32), Delete (0x3e) lock control Control_L (0x25), Control_L (0x42), Control_R (0x69) mod1 Alt_L (0x40), Alt_R (0x6c), Meta_L (0xcd) mod2 Num_Lock (0x4d) mod3 mod4 Super_L (0x85), Zenkaku_Hankaku (0x86), Super_L (0xce), Hyper_L (0xcf) mod5 ISO_Level3_Shift (0x5c), Mode_switch (0xcb) gtk gtk-themeはnumixを採用。\n$ yay -S numix-gtk-theme numix-icon-theme-git $ vim /usr/share/gtk-x.0/ $ cp /usr/share/gtk-2.0/gtkrc ~/.gtkrc-2.0 # GTK+ 2 : ~/.gtkrc-2.0 # GTK+ 3 : ~/.config/gtk-3.0/settings.ini) https://wiki.archlinux.jp/index.php/GTK\nその他の環境 その他の環境としては、i3, xterm, tilix, pcmanfm, chromium, fcitx, yayなどを採用。\nxtermも設定が面倒だけど、アイコンとかもフォントを指定すれば使える。\n.Xdefaults,.Xresourcesに書く。\nXTerm*termName: xterm-256color XTerm*locale: true XTerm*selectToClipboard: true XTerm*saveLines: 2000 XTerm*background: black XTerm*foreground: white xterm*faceName: ricomoon XTerm*faceSize: 13 terminalの透過は、picomで実現します。\n$ sudo pacman -S picom $ sudo cp /etc/xdg/picom.conf ~/.config/picom/ $ sudo vim ~/.config/picom/picom.conf opacity-rule = [ \u0026#34;90:class_g = \u0026#39;URxvt\u0026#39; \u0026amp;\u0026amp; focused\u0026#34;, \u0026#34;60:class_g = \u0026#39;URxvt\u0026#39; \u0026amp;\u0026amp; !focused\u0026#34;, \u0026#34;90:class_g = \u0026#39;xterm\u0026#39; \u0026amp;\u0026amp; focused\u0026#34;, \u0026#34;60:class_g = \u0026#39;xterm\u0026#39; \u0026amp;\u0026amp; !focused\u0026#34;, \u0026#34;90:class_g = \u0026#39;tilix\u0026#39; \u0026amp;\u0026amp; focused\u0026#34;, \u0026#34;60:class_g = \u0026#39;tilix\u0026#39; \u0026amp;\u0026amp; !focused\u0026#34; ]; $ picom \u0026amp; あとは、~/.xinitrcにでも書けばいいでしょう。\nvpn usbを外のパソコンに挿して、ssh先でvpnを起動し、local networkに入ってリモートすることはよくあるので、vpnの構築方法とclientでの接続方法を紹介。\nvpnはserverもclientもpritunlが便利すぎるので、そちらを使います。\nhttps://github.com/Fridus/docker-pritunl\n$ sudo systemctl start docker network: image: busybox ports: - \u0026#34;9700:443\u0026#34; - \u0026#34;1194:1194/udp\u0026#34; restart: always tty: true mongo: image: mongo volumes: - ./mongo:/data/db restart: always net: container:network pritunl: image: fridus/pritunl privileged: true environment: - MONGO_URI=mongodb://127.0.0.1:27017/pritunl restart: always net: container:network https-portal: image: steveltn/https-portal:1 ports: - \u0026#39;443:443\u0026#39; environment: STAGE: \u0026#39;local\u0026#39; DOMAINS: \u0026#39;localhost =\u0026gt; https://0.0.0.0:9700\u0026#39; $ sudo docker-compose up -d で、設定方法は、https://localhost:9700にアクセスしてwebから行います。user,passwordはpritunlです。\n基本的にはorg,userを作成して、start serverすればokです。userからはprofile(example.vpn)をダウンロードできますが、それを使います。これはopenvpnでも使用できる形式のものです。ただし、localで構築してることもあって、使用する際はdefaultのip,portが異なります。settingから変更した上で、profileをダウンロードすればいいのですけど、.vpnを修正したほうが早いです。\nここでは、vpn serverのlocal ipを192.168.11.4とし、global ipを207.97.227.253とします。wan(外部)からserverにアクセスするにはrouteでポートフォワーディングなどを設定すればいいでしょう。\n- remote 192.168.1.4 1194 udp + remote 207.97.227.253 ${routeで設定した192.168.11.4:1194に繋がるwan側のport} udp 次に、pritunl clientの話になります。mac,linux,windowsがあります。cliもありますが、cliはちょっと壊れている気がするし、そこまで柔軟でもないので、gotunlを使います。\nhttps://client.pritunl.com/\nhttps://docs.pritunl.com/docs/command-line-interface\n基本的には、GUIでprofileをimportしたあと、gotunlで接続操作すればいいでしょう。\n$ sudo tee -a /etc/pacman.conf \u0026lt;\u0026lt; EOF [pritunl] Server = https://repo.pritunl.com/stable/pacman EOF $ sudo pacman-key --keyserver hkp://keyserver.ubuntu.com -r 7568D9BB55FF9E5287D586017AE645C0CF8E292A $ sudo pacman-key --lsign-key 7568D9BB55FF9E5287D586017AE645C0CF8E292A $ sudo pacman -Sy $ sudo pacman -S pritunl-client-electron $ sudo pacman -S pritunl-client-electron-numix-theme $ pritunl-client-electron # ここでprofile(example.vpn)をimport $ git clone https://github.com/cghdev/gotunl.git $ cd gotunl $ go install $ ./${GOPATH}/bin/gotunl -l $ ./${GOPATH}/bin/gotunl -c 1 ","description":"","formated_time":"2021-04-30","href":"https://syui.github.io/blog/post/2021/04/30/arch/","tags":["arch"],"title":"usbにarchをインストールする方法","utc_time":"2021-04-30T00:00:00Z"},{"categories":null,"contents":"輪を持ってるのも必要になったので描いた。\n/imgall\n","description":"","formated_time":"2021-04-28","href":"https://syui.github.io/blog/post/2021/04/28/illust/","tags":["illust"],"title":"イラスト描いてみた77","utc_time":"2021-04-28T00:00:00Z"},{"categories":null,"contents":"今まで挑戦してなかったんですけど、バディーズも揃ってきたので取りました。リーリエ\u0026amp;アブリボンがMVPでした。最後一人でアデク倒した。\nアデクはアイリスを当てればよかったんですけど、使ってしまってたので、ビオラを使いました。アデクが一番苦戦した(主にバディーズ不足で)。それ以外は楽でした。\nダイヤないので、次に来るバディーズはガチャ回せないなあ。\n","description":"","formated_time":"2021-04-27","href":"https://syui.github.io/blog/post/2021/04/27/pokemas/","tags":["pokemon","pokemas","game"],"title":"ポケマス、チャンピオン7500","utc_time":"2021-04-27T00:00:00Z"},{"categories":null,"contents":"今回は正面から描く回なので正面で描いたんだけど、ついでに素材にも使えそうだということで、素材にストックすることにしました。\n素材で使うとなると、微妙な部分が気になり出して、ピースを人差し指に変えたり、服のヒラヒラを修正したり、輪を修正したりと、いつもより丁寧になってしまった。\nイラストも番号を入れ替えたため、既に見たことある人いるかも。76番\n/imgall\n","description":"","formated_time":"2021-04-26","href":"https://syui.github.io/blog/post/2021/04/26/illust/","tags":["illust"],"title":"イラスト描いてみた76、番外編","utc_time":"2021-04-26T00:00:00Z"},{"categories":null,"contents":"今回は定規を使ってみました。最初から定規使ったほうが良かったんじゃないか疑惑。\n/imgall\n","description":"","formated_time":"2021-04-25","href":"https://syui.github.io/blog/post/2021/04/25/illust/","tags":["illust"],"title":"イラスト描いてみた75","utc_time":"2021-04-25T00:00:00Z"},{"categories":null,"contents":"キラカードっぽい絵、いつか書こうと思ってたので。ちょっと丁寧(いつもよりは)。\nちなみに私、定規使わないのでちょっとずれてる。こういうときくらいは使ったほうがいいのかも。\n/imgall\n","description":"","formated_time":"2021-04-23","href":"https://syui.github.io/blog/post/2021/04/23/illust/","tags":["illust"],"title":"イラスト描いてみた74","utc_time":"2021-04-23T00:00:00Z"},{"categories":null,"contents":"ポケマスでダイヤが貯まったので、ミヅキを引こうかどうしようか、私は迷っていました。(無課金勢)\nというのもミヅキは性能的には普通なので本来は引かないんですけど、でも、好きなキャラなんですよね。ちなみに、ミヅキというのはGEN7(SUN/MOON)の女主人公。\n私がポケモンキャラで好きなのって、男性はレッドですけど、女性はアセロラ、リーフ、ユウリ、ミヅキあたりで、大抵の作品は、この子って決まってるんですけど、ポケモンでは決まってなかったりするんです。\nとはいえ、これについてはレッドかなあ\u0026hellip;。でも女性キャラで一人に決まらないのも珍しい。\nそんなこともあり、ミヅキを引こうかどうしようか迷ってたわけです。一人に決まってたら確実に引いたと思うけど。\nで、今回、なぜかアーティ\u0026amp;トゲピーを引いてた。聞くところによると強いらしいし、実際、強いと思うのでおすすめ。ミュウと組ませたいね。\n","description":"","formated_time":"2021-04-21","href":"https://syui.github.io/blog/post/2021/04/21/pokemas/","tags":["pokemon","pokemas","game"],"title":"ポケマス、ミヅキを引こうとしたらトゲピーを引いてた話","utc_time":"2021-04-21T00:00:00Z"},{"categories":null,"contents":"実はこの子の服は特殊で、内部は濃い霧が発生しており視界ゼロという便利設定。なので、下からの視点で描いても通常は問題ないようになっています。\n今回は上からの視点で輪っかを書いてみたかったんだけど、前回のイラストが上視点だったので、今回は下視点から描いてみました。無理やりだけど輪っかは書きたいようにかけた気がする。\n正直、自分でも何を書いてるのかわからん。\n/imgall\n","description":"","formated_time":"2021-04-20","href":"https://syui.github.io/blog/post/2021/04/20/illust/","tags":["illust"],"title":"イラスト描いてみた72,73","utc_time":"2021-04-20T00:00:00Z"},{"categories":null,"contents":"レインボーロードです。\n/imgall\n","description":"","formated_time":"2021-04-19","href":"https://syui.github.io/blog/post/2021/04/19/illust/","tags":["illust"],"title":"イラスト描いてみた71","utc_time":"2021-04-19T00:00:00Z"},{"categories":null,"contents":"これは正直、言及する価値もなさそうな話だと思ったのですが、話題になってたので、一応、個人的な考えを書いていきたいと思います。文章を書くリハビリも兼ねて。\nこの前、「弱者男性に女をあてがえ」という主張があって、たくさんの賛同というか同意がありました。\nですが、個人的には、こういった主張はありえない。正直、ちょっとピキピキしました。\nまず第一に、男であれ女であれ、個人の自由意思は最も尊重されなければなりません。\nにもかかわらず、弱者男性は悲惨な目にあっているんだから、大変な目にあっているんだから、女をあてがえ、というのは、ふざけるなとしか言いようがありません。\n女性は人間であり、物でもなければ献上品でもない。というか本気でそんなことを言ってるんだろうかと私は少し疑問に思いました。ここまでデタラメな主張というのは、もしかしたら藁人形かもしれない。\nですが、ちょっと前にある芸能人が「不景気になると上物が風俗にやってくるので、そこが狙い目だ」みたいな趣旨の発言をして話題になったことがありました。\nなので、こういう考え方をする人も多いのかもしれないと考え直すことになりました。\n私は、より多くの人々の幸福を願っていて、人の自由意思は最大限に尊重されるべきと考えています。\nですから、貧困でそういう仕事をやらざるを得ないような状況を個人的には容認できません。そういった人たちには給付金なりなんなりで政府がその生活を保障すべきだと感じています。\nですが、こういった当たり前のことことが実現されないのも、貧困から抜け出されると都合の悪い人がいるからなのかもしれません。\nある弱者女性の主張 ある弱者女性(未婚)が「子づれが離婚して自業自得なのに政府が支援するのが許せない、ムカつく」みたいなことを書いてて、それもおかしいと思ったので、自分の考えを書きます。\nあなたも、その困ってる人も、どちらも救済されるべきというのが私の考えです。\nより多くの人々が幸せになれる社会がいいです。弱者が自分とは立場が異なる弱者の足を引っ張っても、世の中はよくはならないと思います。\nこういった主張は、弱者男性のイカれた主張と同じくらい、個人的にはピキピキします。\nあなたはモテなくていい ここからはあまり関係ない話になりますが、私は常々、「あなたはモテなくていい」と思っています。\n世間一般には「あなたはモテなければいけない」と言われるばかり。「モテるためにはどうすればいいのか」みたいなことが論議されています。\nそこで、誰も言わないので、私が言うことにしました。\n「あなたはモテなくていい」と。\nまずは、モテるというのが具体的にどういうことかを考えてみたいと思います。\nモテるとは、不特定多数の異性に好意を寄せられることを指します。\n考えてもみてほしいのですが、あなたが本当にほしいものは「不特定多数の異性に好意を寄せられること」でしょうか。\nもちろん、それがほしいという人もいます。ただ、それは私が欲しいものではないです。\nじゃあ、あなたは何がほしいのかと聞かれると、「私は、私が認める人に好かれるなら、それでいい」と答えます。\n少し曖昧な書き方ですね。なぜかというと、どっちでもいいと考えているからです。\n私は、私が認める人が幸せなら、それでいいです。好かれてようが、嫌われていようが別にいいと思う。\nもちろん、自分が認める人に認められたい、好かれたいと頑張ることは、素晴らしいことだと思います。\n結論としては、あなたはモテなくてもいいし、モテてもいい。どちらでもいいと思います。\n最初に「あなたは、あなたが認める人に愛されればいい」という趣旨の話をしましたが、仮にこの論法で行くと「もしあなたが認める人が、未だ現れていないのなら、あなたは、誰からも愛されなくていい」ということになります。\n本当に大切なものを見失わないように、とは思っていて、なので書きました。\nまあ、沢山の人を認めて、沢山の人から認められるような人生のほうが楽しいと思います。でも、どっちでもいいですよ、がっはっはっ！\nあなた、モテないでしょ このような考えを書くと「あなた、全然モテないでしょ」と瞬時に見抜かれてしまうかもしれませんね。それは間違いなく正しい。私はモテません。\nよくクズほどモテるとか、面白い人がモテるとか聞きますけど、私は、私と同じような考え方をする人がモテるとは到底思えませんよ。面白くないもんね。\nただ、クズほどモテるとはよく聞きますけど、別にそれで良くないですか。クズはモテちゃいけないんですか。\n私の考えでは、人というのは、同じような人間で集まるようになっている。\nなので、本物がいるとしたら、本物には見抜かれると思います。ですから、そういった人には寄り付かないと思うなあ。\nこれを聞いた一部のその人は、おそらく、こう思うでしょう。\n「は？女なんて年収やステータスを偽装して、やさしくすれば、どんなやつでも落とせるよ、女にそんな見抜く能力ないぞ、夢見てんじゃねえ」と。\nですが、私は、後述しますが魔法使い(笑)なので、わかるのです。\n\u0026hellip;夢を見ることが仕事とも言いますが。\nさて、最後に、仮に自分がモテた場合の話(想像)でも少ししてみましょうか。夢物語のお話です。\n私がモテても、実は、あまり意味がないです。\nどういうことかというと、まず、性欲が満たされることはないからです。\n私、ずっと童貞を目指してるんで。\n\u0026hellip;いや、ちょっとまってください。帰らないで！少しだけでも私の話を聞いていってくださいっ！\n童貞は希少価値だ！ステータスだ！ この年齢にもなると、童貞、つまり、セッ○スしたことがないというのは、恥ずかしいことだと考えられています。\nしかし、私の考え方はちょっと異なるので、それについてお話していければと思います。\n私、実は「童貞は希少価値だ！ステータスだ！」と思っていて、これ、どこかで聞いたセリフですが(貧乳？)、できれば捨てたくないのです。\n\u0026hellip;いや、ちょっとまってください。帰らないで！少しだけでも私の話を聞いていってくださいっっ！\nその理由はいくつかあって、一つが一度捨てたら取り戻すことができないからです。\nただ、これについては、相当の意志力を要するとも思っており、一般的に勧められるようなものではありません。\n私に関しても、おそらく、一度落ちたらそこで終わりだと思っています。\n例えば、お酒でもタバコでも薬物でも、最初は些細なことだったと思うんです。好奇心とか周りの価値観とか常識とかがあって、流されて、一度やったあとはもうやめられなくなってしまい、中毒者として、それが当たり前になっていく。自分の考えとか信念とか、そういったもの関係なく、ただ欲望に従って、従っていることにすら気づかない。\nもちろん、それでいいと私は思います。それが自然で、成り行きで、自然の流れです。当たり前のことです。\nですが、私は、ちょびっとだけ、それに抗っちゃおうかな\u0026hellip;と思っておるのです。\nうん、頭おかしいと思う。一般的に。\nですが、本当はどうなんでしょうね。最初はみんなどう思っていたのでしょう。今となってはわかんないですけどね。\nちなみに、私、気分は上々。自分で決めたこと、やってるだけですし(やってないだけですし)。\nしたことある人はご存知かもしれませんけど、実際そこまでいいものでもないというのが実感するところではないですか。夫婦間でも最初だけで、そのうち相方が兄弟姉妹や戦友のような存在になっていくものだと思っていて、気分になれないのが普通だと思っています。\nしかし、童貞というのは、夢を見ていられるので、その点では強いと思っていて、「30歳まで童貞だと魔法使いになれる」みたいな考えがあったりするんだと思う。もちろん、これは本物の魔法使いではなく、(笑)のギャグにちなんだものですが、私自身、そういった魔力を失いたくないという気持ちも、実はちょっとだけあったりする。\nとはいえ、最終的には個人の意志力の問題だと思っていて、通常は並大抵のことではありません。ですが、初動こそ間違わなければ、なんとか行けるんじゃないとも思っていて、例えば、薬物なんかもそうだと思うけど、一度も手を出さなければ欲しくならないのと似てると思っていて、そういった原理を応用しながら、なんとかかんとかやっていければと。がんばります(なにをか)。\n今回、こんな話をしたのは、私のバカ話を読んで少しでも気が楽になれた人がいればと思って書きました。以上です。ありがとうございました。\nあ、彼女、募集中ですっ！\n","description":"","formated_time":"2021-04-18","href":"https://syui.github.io/blog/post/2021/04/18/archive/","tags":["private","archive"],"title":"弱者男性に女をあてがえ論のおかしさ","utc_time":"2021-04-18T00:00:00Z"},{"categories":null,"contents":"この前、ある小学生youtuberが「中学は登校しない」みたいな趣旨でニュースに取り上げられており、本人や親御さんに対して、猛烈な批判がありました。\nこの件について、自分はどのように考えたのかを書いていこうと思います。\nまず私が思ったのは、彼が中学校に登校したほうがいいのか、あるいは、登校しなかったほうがいいのか、それはわからないということです。\n先のことはわかりません。\nなぜなら、ひと一人の人生というのは、運によって決まるからです。偶然の要素がほとんどを占めます。学校に通っていれば、よりよい人生が送れるとは限らない。不運にもいじめにあい自殺してしまうより、登校しないほうがよかったのかもしれない。それはわかりません。\n人生の偶然性については、例えば、私が尊敬するリンカーンで考えてみたいと思います。リンカーンはアメリカの大統領にもなった人物で有名です。シュミレーションの一環として、このリンカーンを黒人に、限界集落の母子家庭で生まれ育ったことにしてみます。なお、DNAは黒人であること以外、同一とします。\nすると、このリンカーン、大統領にはなっておらず、全く異なった人生を辿ることになりました。\n私もそうで、私が今までなんとかやってこれたのは、周りの人たちが助けてくれたからであり、私個人の力では全くありません。一言で言えば、ただ運が良かっただけです。\nこのように、人生というのは、運や縁で占める割合が非常に大きく、これは単なる事実です。\n仮にこれが事実でなければ、こういう事はあまり言いたくはありません。というのも、人というのは、広い視野で物事を考えることができず、局所的にしか物事を把握した気になれないので、全部自分の努力と行動の賜物であると誤認していたいものなのです。ですが、それは事実とは異なりますので、今回はただの事実を書きました。\n人生がどう転ぶかは運次第。これは成功者も一般人も変わりません。\nほんの少しの現実認識能力を持ち、かつ数字がわかるなら、統計を少しでも読めるなら、この程度の事実は把握できます。\n話を戻すと、人生がどう転ぶかは運次第なところがあるので、先のことはわからないということです。\nそんな中、彼の発言に対して、大人たちの罵声があまりにひどく、逆にそちらの方が気になってしまったというのが正直な感想でした。\nでは、どういった批判が多かったのでしょう。\n一つは、「義務教育を放棄するとはけしからん、後の人生は悲惨で凄惨なものになるだろう」というものです。\nこの意見は、私の考え方や目的とは全くかけ離れたものだと思いました。\n私は、より多くの人々の幸せを願っています。そういった社会を形作っていくことが望ましいと考えています。私は、その目的のために投票や発信することがたまにあります。\n例えば、彼のように中学には登校しないと言ってる人もそうじゃない人も幸せな人生を送れる社会を願っています。\nそれを中学に行かなければ不幸になる、悲惨になる、貧困になるというのは、目指すべき場所が違うと言わざるを得ない。\nあなたの目的はなんですか。あなたの願いはなんですか。自分たちの言うとおりにしない人たちの人生を悲惨なものにすることですか。\nそれよりも、いくつになってもやり直せるような、学び直せるような社会のほうがよくないですか。\n私は、そのほうがいいと思っています。\nここで、少し私のことを書いておくことにします。\n私は大学までストレートで来ており、留年も浪人も経験なし。大学は心理学科、教員免許2つ、心理士の免許を持ち、他にもちょっとあるけど、ここで紹介が必要なのはこの3つ。(あまり書きたいことでもないし)\n教育実習に行きましたが、教えることとできることは全く違います。自分ができるからと言って、その人が教育者としてふさわしいとは限りません。\n教えることにも、ある種の技術が必要です。生徒にも色んな人がいたりしますので。\nそして、例の小学生youtuberの人を見るに、彼は、他の子達より多くの選択肢を持ちます。\n批判している多くの人は、少しでも彼について知ろうとしましたか。理解しようと努めましたか。反射的にニュースのタイトルだけ見て否定するのではなく、少しは調べてみてはどうでしょう。そんなことを思いましたが、話を戻します。\n多くの親は、自分の子供により多くの選択肢を用意してあげたいと思うものです。一般的には。\nこのことを前提とすると、彼の親は意図してか意図せずか、わかりませんが、より多くの選択肢を用意できている状況です。\n親ではなく彼自身の力だよというのは、確かにそのとおりかもしれませんが、最初に述べたように、やはり環境でもあるのです。\nそんな中、彼の親に対して、全く知らず、調べもせず、無礼な意見を飛ばしている人を見かけましたが、そういうの、私は良くないと思いました。\nもちろん、彼が平凡な学生に戻り、配信をやめるのがいいのか、あるいは、このまま学校に行かず動画を作り続けるほうがいいのか、どちらのほうが良い結果につながるのかはわかりません。ちなみに、動画を毎日のように作るのは大変な作業です。\nただ、現時点で彼は、他の子達より多くの選択肢を持つというのは事実です。そして、親御さんの態度というか、行動というか、影響あってのことなのかもしれません。\nなので、私は、この件について、あまり否定的な意見を持ちません。\n話をまとめると、私は、より多くの人達の幸せを願っています。彼のように理由あって中学に行かない人にも幸せな人生が送れるといいなと思います。そういう社会を目指す、それが目的なんじゃない、と考えています。ですから、一部の学校に行かなければ不幸になる、転落する、悲惨な目に合うという批判はおかしいと思いました。もしそういうことがあるなら、まずはそれを変えていくほうがいいと思いました。\n次に、人生の多くは運や縁で決まります。人気youtuberの彼は縁に恵まれる可能性が非常に高く、平凡な学生より選択肢が多い気がします。先のことはわかりません。何が良かったのか、あるいは悪かったのか、それがわかる日すら来ないことも多いのです。なので、彼が自分なりに考えてのことなら、外野が偉そうに説教する必要性を私は感じません。\nただ、もし彼の行動に触発され「登校拒否だ」、「youtuberに俺はなる」みたいな人がでてきた場合、それはまた別の問題だと思います。個人的には「やめておけ」あるいは「登校しながら試してみたら」と思いますよ。ですが、現時点で、登校拒否をことさらに煽るような行動は見られないと思うので、特に問題ないと思ってます。\n今回、登校しないって言った人より、それに罵声を浴びせてる人のほうが気になりました。以上です。ありがとうございました。\n大学で自分がなにしてたかというと、ずっと遊んでた気がする。免許取ったりとか。学校、教習所のことだけど、行きたくなかったので行かずに直接受験(M普通車)して取ったりしてた。また、教育や心理で技術力を聞かれると、そういうの全く無いので、当てにならないと思う。\n","description":"","formated_time":"2021-04-17","href":"https://syui.github.io/blog/post/2021/04/17/archive/","tags":["private","archive"],"title":"小学生youtuberの登校拒否をどのように考えるか","utc_time":"2021-04-17T00:00:00Z"},{"categories":null,"contents":"今回は「頭がいい」とは何を指すのか。哲学的な問題として自分なりの考えを書いていきたいと思います。\n私の回答では、「頭がいい」とは「心がいい」ことを指します。具体的には「よい心を持つこと」を指し、私にとって頭がいい人というのは、良い心を持った人のことです。\n「いやいやいや、意味がわからない」というのは、たしかにそのとおりです。\nなので、まずは私がこのように考えるに至った経緯を説明していきたいと思います。最後に定義的な問題についても説明します。\nでは、はじめましょうか。\nまずは皆様、今よりも発達した文化や文明、技術などに思いを馳せてほしいと思います。\nできましたでしょうか。もし難しければ、未来人や宇宙人と遭遇した場面などを想像してみるといいかもしれません。\n例えば、現代人の文化や技術、演算が全く通用せず、圧倒的な文明力、技術力、演算能力を持った存在と相対するとき、あなたならどうしますか。何が重要だと思いますか。何をすべきだと思いますか。何ができるでしょう。何が残されていると思いますか。\n少し状況を説明すると、今の人間になすすべはなく、どうしようもない、仮に相手が人類を支配し、あるいは滅ぼそうとしたときは間違いなくそうなるというような状況だと想定してみてください。\nそんなとき、どうすればいいと思いますか。なにをすべきでしょう。あるいは、何ができますか。\n私はこのようなとき、人間に残されたのは「心」しかないと思っています。\nよい心を持つことでしか戦えない。いや、本来は勝負ではないのですけど、でも、最終的に目指すところは、心しかないと、私はそう考えているのです。\n今まで人類の文明が発達してきたのも、世の中が良くなってきたのも、実は、「良い心を持つこと」が大きく寄与してきたと思います。そして、これからも間違いなくそうなっていく。より良い心を持つ人が増えれば増えるほど、加速度的に、世の中もより良くなっていくと考えられます。\n文明の発展、よりよい社会の構築、より多くの人達の幸福の実現に、心が関係していることを人間が知ったとき、人は、その尺度で物事を判断する方法を模索します。\nより発展した文明や社会では、おそらく、このような仕組みが機能している可能性が極めて高いと私は考えています。\nですから、このような仮定を前提に、私は「頭がいい」とは「良い心を持つこと」だと考えているのです。\nとはいえ、そのまま読むと、普通は全く意味がわかりません。\n意味がわからない理由の一つとして、まず定義の問題があります。\n今回は個々人が考える頭がいいとはどういうことかを回答しました。\nこれには各人、様々な回答があると思います。\n例えば、「頭がいい人」を「人に合わせたレールで話ができる人」と答える人もいれば、あるいは「普段は頭がいいと思わせない人」と答える人もいます。\n人それぞれ色んな意見があって、とても面白いですね。\n哲学的な回答としては、それでよくて、答えなんてありません。\nですが、仮に、個々人の考えがにじみ出ないような回答をしてしまうと、私の場合、単純に「演算能力」と回答することになるでしょう。\nこのように回答する場合、もう一つの条件があって、それは現代人が考える「頭がいい」の価値観が変化したときです。\n現在、頭がいいというのは、非常に重要なことだと考えられています。最も重要なことだと考えられている節があります。\nこのような前提に立った場合、私は「頭がいい」とは「よりよい心」だと回答します。\nしかし、「頭がいい」の価値観が変化したとき、つまり、人類にとって「頭がいい」ことがそこまで価値を持たなくなった場合は、これに関しては、AIの発展やその他の事情によって有り得ることだと考えられますが、その場合は、「頭がいい」を「演算能力が高いこと」と回答することになるでしょう。\n以上、「頭がいい」ってなんだろう、というテーマで話しました。ありがとうございました。\n","description":"","formated_time":"2021-04-16","href":"https://syui.github.io/blog/post/2021/04/16/archive/","tags":["private","archive"],"title":"「頭がいい」ってなんだろう","utc_time":"2021-04-16T00:00:00Z"},{"categories":null,"contents":"躍動感ある絵がたまに書きたくなって、書いてみるんだけど、いつも失敗してる。\n/imgall\n","description":"","formated_time":"2021-04-15","href":"https://syui.github.io/blog/post/2021/04/15/illust/","tags":["illust"],"title":"イラスト描いてみた69,70","utc_time":"2021-04-15T00:00:00Z"},{"categories":null,"contents":"ポケモンのオオタチが好きなので作ったアイコンとか。\n","description":"","formated_time":"2021-04-14","href":"https://syui.github.io/blog/post/2021/04/14/icon/","tags":["youtube","pokemongo"],"title":"youtubeのヘッダーやアイコンを作ってみた","utc_time":"2021-04-14T00:00:00Z"},{"categories":null,"contents":"チャンネル開設後、まず第一弾として動画を上げました。面白かったら幸いです。\nなぜこんなことをやり始めたのか なぜこんなことをやり始めたのか？後に動画内でも説明することがあるかもしれませんが、一言でいうと、撮影や配信できるようになるためです。\n私はipadで撮影してるんですけど、こうやってipadさえあれば、外に出て撮影や編集して、気軽に配信できるようになれたらいいな、という思いがありました。\nしたいときにできる、それが自分にとって大切なこと。\nまた、撮影とか編集も難しいんですけど、それ以外にも障壁はいくつかあって、その一つがyoutube恐怖症だと思います。\nyoutubeは見てるだけなら楽しいのですけど、実際に自分が映り込む動画をyoutubeに上げられたりするのは、私を含む一般人からすると「恐怖」ではないでしょうか。\n今回、動画を作ったのは、そういった恐怖の克服という意味も少しあった気がします。\nもちろん、「気軽に撮影や配信できるようになるため」という理由が一番ですけどね。\nポケモンGOの動画を作る上でのポイント ポイントは2つあると思っていて、1つは「面白い」、もう1つは「役に立つ」だと思います。\nで、今回は「面白い」に全振りして作っています。なぜかというと、2つも考えてる余裕がないからです。\nですから、最初は一つの要素に絞りました。\n今後は、「面白い」と「役に立つ」の2つの視点で作っていきたいと考えています。\nただ、日によって変わったり、同時だったりすることはあるかもしれません。\n例えば、目ぼしいイベントがない場合は、「面白い」に比重を置くほうが良いかもしれませんし、逆に注目のイベントがあったりすると、「役に立つ」最新情報をわかりやすく伝えていくほうがいいかもしれません。\nもちろん、この2つを同時にというのがベストなんですが、毎回は難しそう。\nipadがすごい ビデオカメラなんて持ってないので、ipad(7th)で撮影してるんですが、ipadは本当にすごい。\nまずマイクですが、イヤホンやbluetoothを使わずに、かなりの音を拾うことができます。\nまた、画質も思った以上にすごい。\nただ、難点もあって、例えば、横置きで撮影すると、視点を合わせるのが難しいです。\n縦置きだとカメラと画面を同時に見ることができるので、視点を合わせるのは比較的容易ですが、横置きだと、カメラと画面を同時に見ることができず、視点が合わないんですよね。\n","description":"","formated_time":"2021-04-09","href":"https://syui.github.io/blog/post/2021/04/09/pokemongo/","tags":["youtube","pogo"],"title":"ポケモンGoのチャンネルを開設してみた","utc_time":"2021-04-09T00:00:00Z"},{"categories":null,"contents":"リーフのボード開放が来たので6EXにしてみました。現在の6EXは以下の通り。\nボードは回復型です。\nvs ラティアス ついでに今まで6EXにしたキャラを評価していきたいと思います。\nMレッド 最強のアタッカー。説明は不要だと思います。\nMリーフ 好みの問題。マサラ組は6EXにしておきたかった。\nMグリーン 好みの問題。マサラ組は6EXにしておきたかった。\nフウロ 確かイベントで。\nメイ 確かイベントで。ただ、あまり使ってない。\nSリーリエ 状態異常無効や回避バフで希少な役割を担える。急所バフもあり、B技後に回復帯付与できる。6EXにすると、それに加えて気迫バフ。地味に使ってる。\nダンデ Mレッドのように直接的に目立って強いとは感じないけど、地味に強い。負けそうだったのに、なぜか勝ってるみたいな試合が多かったりする。\nAアイリス 最近でいうと、最も引いておくべきだと思ったのがAアイリスです。強すぎる。最初はここまでとは思ってなかった。自分の中でバフとデバフの評価は等しく、どちらにも弱点はあると思っていて、バフでも例えばステータス上昇無効化されるとかで封じられたり、または、デバフで相殺されたりする。デバフも同じでダウン無効化されるとダメ。つまり、対策可能性はいくらでもある。バフもデバフも変わらない。バフは一体で全体の効果を発揮すると反論されるかもしれないけど、それは全体技に限っての話。デバフも同じ全体技でAアイリスのように全体に撒ける。例えば、防御ダウンが撒かれたとすると、攻撃アップと同じ効果を発揮する。Aアイリスの場合、「バフればバフるだけ威力上昇」と同等の評価。多くの人は「デバフで威力上昇？あまり強くないな」と感じ、「バフで威力上昇？強いな」と感じてしまいがちだけど、それは違う。バフとデバフの価値は同じ。Aアイリスは現環境、バトルヴィラ、チャンピオン、レジェンドでMレッドより活躍できている。現環境はMレッドが一体いればいいというものではなくなってしまった。アタッカーが即死する環境にある。逆にAアイリスのほうが耐久があるので活躍できている。防御ダウンは攻撃を上げているのと同じだし、攻撃ダウンは防御を上げているのと同じ効果を発揮する。T技ではないため、制限がない。制限がないので、持続のヴィラやレジェンドで威力を発揮する。\n","description":"","formated_time":"2021-04-05","href":"https://syui.github.io/blog/post/2021/04/05/pogo/","tags":["pokemon","pokemas","game"],"title":"ポケマス、リーフ6EX","utc_time":"2021-04-05T00:00:00Z"},{"categories":null,"contents":"youtuberの人はすごいなーと前から思ってたので、今回は自分でも動画を作ってみることにしました。\nおそらく、はじめての撮影や動画編集には、様々な困難が予想されるはずです。また、完成した動画の質の違いにも驚かされることになるでしょうね。\nで、自分でもやってみると、結果的に予想通りだったので、それを踏まえ、良かった点や悪かった点を挙げていければなあと思います。\nトークの重要性 ジョークやギャグを交えたトークの重要性や基本的な声質やトーンなど考えるべき部分が非常に多く、それが自分にとってかなり難しい要素でした。\n一度、声を入れてみたんですけど「これだ」というものにはならず、トーク一切を消し去ることにしました。\nむ、むずかしい\u0026hellip;！！\n外の世界が好き 私は、自然や街なかをウロチョロしているだけの動画がとても好きです。\n毎日同じ場所を撮影したとしても、季節や天候によって、いつも違った顔を見せてくれます。\nその点では、ポケモンGoでおなじみの場所で撮影するのは、理にかなっていると思っていて、それに楽だしね。とてもいいと思ってる。\n撮影と動画編集 たいへんだと思う。ただ、慣れればそうでもないのかな。いや、そんなことないかな。\niPad 7thの画質がすごくよかったので、これは使えるって思いました。今回、iPadのみで撮影しています。\n動画編集はiMovieを使っていて、扱いづらくもないんだけど、これも色々大変かな。\nサムネイル作るのだって、みんなちゃんとしたものを毎回作ってて本当にすごい。\nあれも大変そう。\n曲とか効果音もつけないといけないし、トークを含む今後の課題。\n正解は楽しむこと 動画を作ってみて、一つの正解は楽しむことだと思います。\n正確には「ポケモンGoを楽しくプレイしている様子をお届けすること」です。\nこのような視点で動画づくりに取り組めば、きっと色々なものが見えてくるはず\u0026hellip;だと思う。あと色々やりやすいような気がするなあ。\nでも今回は、撮影してるとゲームどころじゃなかったし、慣れない場所で歩き回ってると撮影どころじゃなかった\u0026hellip;。\n撮影しながらゲームしながら歩き回るとか、結構難しかったというか、できてない！\n理想的な流れ 理想的な流れとしては、楽しい自己紹介からはじまって、\n最新情報をジョークでも交えながら伝えたあと、\n実際にプレイして、楽しくプレイしている様子を動画にすること、だと思いました。\nこの際、外の景色やら風景って以外に重要。ただし、必須ではない。\n主にこの4点だと思う。\n今回作った動画に入ってるのは、最後の必須でもない風景のみなので、改善すべきところは多い。\nただ、個人的かつ、根本的な問題点としては「\u0026hellip;しゃべりたくねえ\u0026hellip;一体、どうすりゃいいんだ」ということ。\n自分が話してる動画、今回撮ってみたんですけど、全カットしましたよ。きらいです。\nいや、やるべきこと、方向性はわかってるつもりなんです。具体的には「おちゃらけながらもハキハキしたトーンで解説(説明)を行った後、ダラッとした感じ普段口調(トーン)に戻ってプレイしている様子を伝える」ということ。この方向性がベストだと思う。\nでも、自分の声質からトーンから、何から何まで気に入りません。これ、頑張ってどうにかなる問題なのかどうか正直わからない。\n一応の解決策 一応の解決策としては、口パクあるいはマスクでモゴモゴやって、音声をあとから入れることと、あとは声質を調整することかな。\nただし、非常にめんどくさいと思うし、それでもうまくやる自信はあまりなかったりする。\n","description":"","formated_time":"2021-04-03","href":"https://syui.github.io/blog/post/2021/04/03/pokemongo/","tags":["youtube","pogo"],"title":"はじめての撮影とポケモンGo","utc_time":"2021-04-03T00:00:00Z"},{"categories":null,"contents":"最近、イラスト描いてなかったので描いた。\n/imgall\n黒髪に黒背景は未だにどうしようか迷う。通常は周りを白で塗るんだけど今回はやらなかった。ただ、周囲の青をもう少し明るくしたほうが良かったかも。\n","description":"","formated_time":"2021-04-01","href":"https://syui.github.io/blog/post/2021/04/01/illust/","tags":["illust"],"title":"イラスト描いてみた68","utc_time":"2021-04-01T00:00:00Z"},{"categories":null,"contents":"最近、イラスト描いてなかったので描いた。\n/imgall\n","description":"","formated_time":"2021-03-30","href":"https://syui.github.io/blog/post/2021/03/30/illust/","tags":["illust"],"title":"イラスト描いてみた66,67","utc_time":"2021-03-30T00:00:00Z"},{"categories":null,"contents":"スマブラSPでセフィロスを使ってみた。\n前回、Bをうまく打てばいいみたいなことを書いたので、それについて。\nBを予知的に打ってると相手は死ぬ！\n技は一つ一つ強力で、当たればでかい。ただ、隙も大きく、個人的には扱いづらい印象。\n","description":"","formated_time":"2021-03-29","href":"https://syui.github.io/blog/post/2021/03/29/ssbu/","tags":["game"],"title":"スマブラ、セフィロスを使ってみた","utc_time":"2021-03-29T00:00:00Z"},{"categories":null,"contents":"スマブラSPで新キャラと戦ってなかったので、まとめて戦ってみました。ちなみに、私は昔からゼルダ使い。ゼルダしか使えないとも言う。\nちなみに、マリオのときからそうだったけど、コントローラーが勝手に動く現象が再発してるので、稀におかしな動きがあります。\nゼルダが一番強い 真面目な話、スマブラでどのキャラが一番強いとかないと思う。\nどのキャラも調整されているので、同じくらいの強さだと思う。\nただ、自分が使ってて一番使いやすいキャラ、つまり、合っているのが、私はたまたまゼルダだった。\nつまり、ゼルダが一番強いと思ってる(自分にとって)。\n実はゼルダのことはよく知らないし、別に好きでもない。\nというのも、私は「ゼルダの伝説」をあまりプレイしたことがなかった。\nただ、情報によると素晴らしいゲームだと聞いてるし、そう思うので、いつかプレイしてみたいと思ってる。\nセフィロスの使いかた セフィロスは気になってたので、ちょっと使ってみましたが、B技をタイミングよく打てれば割といける。\nただ、結構先を見ないといけないと思うので、難しい人には難しいかもしれないけど、簡単な人には簡単かもしれない。\n","description":"","formated_time":"2021-03-28","href":"https://syui.github.io/blog/post/2021/03/28/ssbu/","tags":["game"],"title":"スマブラ、セフィロスとか","utc_time":"2021-03-28T00:00:00Z"},{"categories":null,"contents":"「最近のマリオは難しい」とか書いたけど、スーパーマリオ3DワールドってWiiUの移植だったんですね。知りませんでした。\nと、そんな話は置いといて、検索して出てきた攻略サイトがあまり参考にならない感じだったので、今回も難しかったコースを自分なりに解説してみます。\n今回は、ワールドクラウンのミステリーハウスです。\nキャラはロゼッタを選択してネコで入ります。\n途中、フラワーをゲットし、それを駆使しながら、ネコと入れ替えたりして進みます。\nここでフラワーをゲット。大切に使おう。 オバケは横をずっと押してれば大丈夫。おそらく、カメラ視点を入れ替えれば間が開いてるんじゃないかな。 ドッスンのところでネコに入れ替えます。 ここが最難関だと思う。はじめからネコじゃないときつい。 ここでフラワーに入れ替え。 ウサギは火の玉一発で停止する。 ここでネコに入れ替え。 正直、ここはダメージ前提で突っ込んだ。あとで他の攻略動画見てみる。 追記:結局、攻略動画は見てないけど、左から番号をつけたとして、1,3,5,4の順で踏んでいけば行けそうな気がした。4のときだけはAボタンを離しておくといいかもしれない。あくまで仮説なのでダメージ前提で突っ込み推奨。\nやっとマリオ3Dワールドをクリア。やったぜ！ ","description":"","formated_time":"2021-03-20","href":"https://syui.github.io/blog/post/2021/03/20/mario/","tags":["game"],"title":"マリオが難しかったので解説してみる2","utc_time":"2021-03-20T00:00:00Z"},{"categories":null,"contents":"マリオ3Dワールドを2,3日プレイしてたんですけど、最近のマリオ、ちょっと難しすぎません？\nと、そんなどうでもいい話は置いといて、検索しても有効な攻略法が見当たらなかったので、難しかったコースを自分なりに解説してみます。\n簡単そうに見えるかもしれませんが、意外と難しいかもしれない。\nステージ1 最初は少し右にずれると砲弾をかわせる。詳しくは動画にて。\nこの細切れの橋は、タヌキで滑走すると乗れる確率が高い。ただし、自信がある場合は任意のタイミングで離してもOK。 ステージ2 消える台は、どこに乗るか決めておく。階段の連なりは、一つ目をジャンプ後にタヌキで空中に留まる。ピーチを使うと長く留まれる。 ステージ3 魔法使いは、三角形を描くように、真ん中を中心にジャンプしながら倒す。 黄色い台は、乗った直後にジャンプ、着地後にしゃがむ。 縦線を意識、その直線上に待機して、タイミングが合えばジャンプ。 トゲトゲが通り過ぎた直後にダッシュしてジャンプ。黒虫も飛び越えられる。 黄色い台が来るまで待機。待機場所も予め決めておく。 黄色い台は一つ乗れば、あとはタヌキで飛び越えられる。 ステージ4 壁虫はジャンプして目視しないと通りてこない。 パックンは、ジャンプ後に踏みつけたあと、Bボタンを離して、Aを押しっぱなしにする。 水のところは、2秒待ってから入る。すると、透明ドカンに入りやすい。 ステージ5 熱線が手前で消えたあと、2秒を数えてから入る。すると、熱線を避けてジャンプしやすい。大体どの部分を走り、どの部分に着地するのか決めておくといい。\nグリーンスターのところは熱線が交差する直前になるので、取ったあとにギリギリのところでジャンプ。すると、しばらく熱線が来ない。この時間を利用して中央のハテナを取る。ちなみに、熱線は中央が一番危険なので、長く待機しない。\nあとはタヌキとピーチで空中にとどまりつつ、ハテナを取っていくとクリア。奇跡的にノーダメでクリアしました。\nただ、この熱線地帯、ダメージ後の無敵状態を利用してハテナを取っていく方法も考えてた。もしタヌキが余ってる場合は中央に置いとこうかなとかも考えてた。(試してないので有効かわからないけど\n","description":"","formated_time":"2021-03-19","href":"https://syui.github.io/blog/post/2021/03/19/mario/","tags":["game"],"title":"マリオが難しかったので解説してみる","utc_time":"2021-03-19T00:00:00Z"},{"categories":null,"contents":"最近、ポケマスが楽しい。\n配布バディーズ、アカギ(パルキア)のボード開放とかがありまして、ちょっとずつでも強くなっていく実感があって、ワクワクしてます。\n今回は、アイリス(アナザー)、つまり、アイリス(チャンピオン)を引くべきかの話をします。以下、Aアイリスと略します。\nダイヤの使い所 2周年に向けてダイヤは貯めておいたほうがいいと思います。つまり、一般的には引くべきではないタイミングだと思う。\nでも、Aアイリスは面白そうなバディーズなので、個人的には引いておきたいと思っています。サザンドラも割と好きだし。\n主な理由は2つあって、一つはテクニカルで火力を出すバディーズを持っていなかったことです。Aアイリスは後述しますが、かなりの火力を期待できます。\nもう一つはデバフ要員もあまり持ってなくて、最近はデバフが活躍する場面も増えてきて、ちょっと困っていたこと。Aアイリスはデバフ効果が2倍なので、それが面白そう。\n追記 : Aアイリスを引きました。予想以上に強いと感じています。ダイヤを全部使って、天井で2凸でした。アメ(19/20)で3凸する予定。また2周年に向けてダイヤ貯めないとなあ\u0026hellip;。\n現在、6EXしてるバディーズです。\nクッキーで防御ダウン 今回のAアイリスには、クッキーで防御ダウンのポテンシャルを取ると、その効果も2倍になるので、全体攻撃デバフ+ドラゴンダイブと組み合わせれば、かなり強そうです。ドラゴンダイブが高火力な物理技なので。\nAアイリスができること 全体こうげき-2\n全体とくこう-2\n70%で単体すばやさ-2 (3凸), 20%でひるみ\n攻撃時まれにぼうぎょ-2 (ばりばりクッキー銀)\nB技は相手の能力が下がってるほど威力上昇\nなお、ドラゴンダイブですばやさ-2できるのは大きいので、3凸しておきたい。\n全体攻撃と全体デバフが打てるのは強いと思います。全体で計算して1回につき最大-12で、これは相当大きいです。しかも、B技の威力まで上がります。Aアイリスは、誰と組ませても活躍してくれそう。\n組み合わせは、B技バフのプラターヌ、リーフと組ませたり、デバフのマジコスリーフと組ませたり、耐久火力上昇でマジコスグリーン、さらに、圧倒的スピードでフウロなどと組ませたりしても強そう。\nただ、レッドとの組み合わせは微妙ですね。なぜならとくぼうダウンがないから。\n個人的におしかったと思うのは、例えば、ボードに攻撃時まれにとくぼうダウンとかあったら最高なんですけど、この辺、上方修正が来たりしないかなあ\u0026hellip;。これがあれば完璧でした。\n配布バディーズの強化 最近、配布バディーズであるアカギ(パルキア)のボード開放がなされました。これは、非常によい方針だと思います。\n強くなっていく実感があって、めちゃくちゃ楽しいし、ワクワクしてます。\n私は、ヒガナ(レックウザ)がクッキーで特攻ダウン無効をとっていて、りゅうせいぐんをリスクなしに打てるんですが、こいつにもボード開放とかメガシンカが来たら嬉しいですね。\n","description":"","formated_time":"2021-03-18","href":"https://syui.github.io/blog/post/2021/03/18/pogo/","tags":["pokemon","pokemas","game"],"title":"ポケマス、アイリス(アナザー)とクッキー","utc_time":"2021-03-18T00:00:00Z"},{"categories":null,"contents":"ポケマスでは、ダンデのガチャ回したんですけど、運良く22連で2凸できたので、アタッカーのアメを使って3凸しました。\nダイヤに余裕があるのにアメを使ったのですが、残る1凸を狙って爆死する危険があるので貴重なアメを使いました。\nここはダイヤを貯めておこうという判断で、現在は30,000ほど貯まってます。つまり、今回のガチャはダンデのため取っておいたダイヤをほぼ使わず済んだのでよかった。\n次はアイリス(チャンピオン)を狙う予定。\nそれ以外でポケマス関連の話題を2点ほど書きます。\nプレイ時間 まずはポケマスのプレイ時間の話です。\nポケマスは、ほとんど時間を使わずにプレイしてますし、できると思います。\n時間を使ったのは初期の頃くらいだった記憶で、今は1日5分くらいでしょうか。大体はポケモンGoのリモートレイドとかの待ち時間にでもやれば終わります。\nただ、1週間に1度とか1ヶ月に1度とかヴィラとチャンピオンがあったりするので、それぞれ30分ほどプレイすることになります。\nコラボ そういえば、なぜポケマスをやってるのかいうと、一つはポケモンが好きだし、レッドも好きだしというのがありました。\n他にはポケモンGoとのコラボなんかも期待してたことが少しあったかな。\nポケモンGoには色々とコラボが入ることがあって、例えば、switchのピカブイを半分以上進めるとメルタンを受け取れるようになります。これは結構大きかった(今もでかい)。\nせっかく強くなったポケマスも何かコラボがポケモンGoにあるとうれしいなと思っています。また、ポケマスやってる人はポケモンGoやってる人も多そう。\n仮にコラボが来るとしたらアバターとかポーズ関連とかありなのでは。例えば、ポケマスで星4エンブレム20個持ちなら、この衣装とポーズが手に入るみたいな。\nちなみに、ポケマスは、モデルとかが非常に優秀ですごいです。あと、キャラもしっかり作られてて、ああいう風に違和感ないように作るのほんとすごい。\n","description":"","formated_time":"2021-03-12","href":"https://syui.github.io/blog/post/2021/03/12/pogo/","tags":["pokemon","pokemas","game"],"title":"ポケマス、ダンデと展望","utc_time":"2021-03-12T00:00:00Z"},{"categories":null,"contents":"TL50に必要なXP176はヤヤコマのコミュデイのときに到達しました。\n最近の進捗も軽く紹介。ランドロスはハマりまくりました。リモートパス全消費と他のパスも半分くらい持っていかれた。逆にトルネロスは一発で出てくれた。\n","description":"","formated_time":"2021-03-09","href":"https://syui.github.io/blog/post/2021/03/09/pogo/","tags":["pokemon"],"title":"ポケモンGo、TL50","utc_time":"2021-03-09T00:00:00Z"},{"categories":null,"contents":"「ソフトとハードの未来を探求」ということで以下の記事が出ています。面白そうだったので、ちょっと紹介します。\nWe’re thrilled to collaborate with @microsoft \u0026amp; @hololens on new experiences that will weave together the digital and physical world. Check out this proof-of-concept demo, built on our planet-scale platform, and the amazing possibilities that could await. https://t.co/ig0bQUIQ8b pic.twitter.com/gGk5djVayC\n\u0026mdash; Niantic, Inc. (@NianticLabs) March 2, 2021 https://nianticlabs.com/blog/microsoft-ignite-2021\nhttps://www.businessinsider.jp/post-230729\n動画を見てみると、現実の空間を把握した上でゴーグルにコンテンツを配置する技術を使いARを実現するものかなって思いました。\nこの場合、ゴーグルがハードで、ゴーグルに内蔵されるソフトを通じて動く感じになりそう。\nまた、動画の終盤では、ゴーグルの前に手を掲げると、ゴーグル装着者しか見えない操作ウィンドウが開き、手の動きで操作しているように見えます。\n操作ウィンドウを出すには、まず人の手のひらの形、あるいは手相、もしくは指紋をカメラで読み取りソフトが認識するのかわかりませんが、とりあえず一定の手順を踏むと操作ウィンドウが表示できるようです。\n操作ウィンドウを表示したあとは、手の動きに応じ、選択・決定のフェイズに移行するみたい。空中で手を動かすだけでゴーグルに内蔵されているソフトを操作できるように見えます。\nポケモンGoを運営するNianticは、結構前からこのような技術を率先して開発していて、これからの変化がとても楽しみです。\n興味がある人は、今のうちにポケモンGoをプレイしてポケモンを捕まえとくといいかもよ。\nもちろん、将来的にポケモンGoと連動するかはわかりませんし、こういったものがリリースされたとしても最初のうちは「え？こんなもん？」と感じるような、言ってしまえばあまり出来が良いとは思えないものかもしれませんが、さらにそこから数年後は、結構すごいことになってたりするかもしれませんよ。\nポケモンGoには、たくさんの可能性があってワクワクしてます。\n","description":"","formated_time":"2021-03-06","href":"https://syui.github.io/blog/post/2021/03/06/pogo/","tags":["pokemon"],"title":"ポケモンGo、今プレイしておくといいかもしれない理由","utc_time":"2021-03-06T00:00:00Z"},{"categories":null,"contents":"ランドロス、トルネロス、ボルトロスの色違いが来ます。\n基本は無料パスで頑張りますが、出現期間は短いので、リモートパスのストックは2枚を残し、消費していく予定。\n例えば、リモートパスx3の配布が3/2までで、ランドロスが3/1からなので、ランドロスの出現までパスの受け取りを待つようにするのがおすすめです。\n","description":"","formated_time":"2021-03-02","href":"https://syui.github.io/blog/post/2021/03/02/pogo/","tags":["pokemon"],"title":"ポケモンGo、リモートパスの使い所","utc_time":"2021-03-02T00:00:00Z"},{"categories":null,"contents":"この前、ポケモンGoで好きなyoutuberさんが生配信されてて、貰ったものか買ったものかわかりませんが、部屋に絵が飾ってあったんですよね。\n「うわー、いいなー、かっこいいなー」と思ったので、自分も好きな風景画でも印刷して飾ってみることにしたのです。\nしかし、自分が描いた背景画を印刷して額(縁)に入れてみたのですが、どうもしっくりこなくて。\nというのも、A4以上のサイズを印刷する印刷機がなく、A4だと額に入れたとき周りが白くなっちゃうんですよね。\nなので、背景が白で構成されたものしか使えなくて、結局、アイコンを使う羽目になってしまったという。\n一応、飾ってみたのですが、どうなんでしょうね、これ\u0026hellip;まあ、いいか。\nいくつかデスクの写真撮ったので、載せときます。私も他人のデスク写真を見るの好きなので。\nちなみに、絵はデジタルじゃないと死にます。アナログで描くのはきつすぎる。\n","description":"","formated_time":"2021-03-01","href":"https://syui.github.io/blog/post/2021/03/01/photo/","tags":["photo"],"title":"絵を飾ろうとして失敗した話","utc_time":"2021-03-01T00:00:00Z"},{"categories":null,"contents":"\nこういう構図で一度描いてみたいなあと思ってたやつ。輪っかが体の周りぐるっとしてる感じの。\n背景は色々考えてみて、結局、そこまで描けるものもないし、ネタもないしで、宇宙好きなので、いつも通り。でも個人的には気に入ってる。\n","description":"","formated_time":"2021-02-28","href":"https://syui.github.io/blog/post/2021/02/28/illust/","tags":["illust"],"title":"イラスト描いてみた65","utc_time":"2021-02-28T00:00:00Z"},{"categories":null,"contents":"この記事は、「楽天モバイルを応援しよう」という目的で書かれたものです。\n執筆依頼を受けてるわけでもないんですけど、個人的に楽天モバイルを応援したいと思ったので、書くことにしました。\nまずは、楽天モバイルがなんなのか、その特徴と料金プランについて紹介します。\n楽天モバイルとは、単純に1GBまで無料で使えるSIMのことであり、ネットワーク回線契約のことです。使用容量によって月額が変わってきます。段階的に上がっていく料金プラン。2980円が上限で無制限に使えます。\n正確には、Rakuten UN-LIMIT Vが自動でRakuten UN-LIMIT VIにアップグレートされたときの料金プランということになり、Rakuten UN-LIMIT VIがプランの名称だと思います。\nさて、ここで、1GBまで無料というのは随分と思い切ったな、最悪じゃないか、悪いことだ、大丈夫なのか、という声があります。\nしかし、私にとって、1GBまで無料というのは不思議でもなんでもなく、ごく普通で、本来ならあたりまえのことだったんじゃないかと思っているということです。\nもちろん、当たり前を実現するのは並大抵のことではありません。楽天さん、随分と頑張られた、すごいな、という感想です。\n世の中、いろんなサービスがあります。みんなが当たり前のように使っている当たり前のサービスの数々。そんな中、日本国内のネットワーク回線契約、通称、キャリア契約は、私の感想でいうと、ずっとおかしかった。むしろ、おかしいのは楽天モバイルではなく、キャリア契約(料金プラン)のほうだった気がします。\nドコモであれ、ソフトバンクであれキャリアと呼ばれる大企業は、国から特別な許可を与えられ、通信規格を独占しています。これは悪いことではなく、公共的な事業を行うためのものです。\n公共的な事業は、その独占権を受け事業を展開することができます。そのため経営はすごく楽で、あれ程の権限と許可を得て行う事業、誰がやっても絶対に失敗しません。絶対成功するような内容であるため、その代わりに公共のために仕事をしなければなりません。営利追求、つまり、どんなことをしても金さえ儲けりゃいいんだ、ということはできませんし、やってはいけません。\n本来ならそうですが、今までのキャリアが行ってきた行い、例えば、料金プランや契約方針などを見ていると、これはおかしいと思うことが多々ありました。\n例えば、両親がドコモショップから帰ってくると、決まって不要なオプションを山盛りで契約させられ、高すぎる基本使用料、高すぎる違約金、そして、端末やSIMカードにもよくわからないアプリが大量にインストール、制限が付け加えられており、SIMロックされていました。\nわけがわからないよ。\n通常、あまり使わないような人が月額で7千円も1万円も払っている状況は、やっぱりおかしいと思っていました。\nまた、他にもおかしいところはたくさんあって、私は、このような国から特権を与えられた国営企業のようなところが、国内最大の利益を生み出す状況は良くないと考えています。国際競争力の観点からもそうですし、また、今までのキャリア3社を見ていると、競争しているようには見えず、談合をしているように見えます。\nこういった企業が国内最大である事実は、他の経営者のやる気を削いでしまって、非常に良くない。\n「この国では、どうせ国から特権を与えられた特別な国営企業しか勝てないんだ」、「談合して価格を下げないよう不正することでしか勝てないんだ」と既に感づかれてしまっており、新しいイノベーションは生まれず、これではアメリカ企業などに勝てるはずありませんし、世界に通用する企業など出てくるはずありません。\n日本では、なぜアップルやグーグルのような企業が生まれないんだ、という疑問は、私からすると、現環境からの当然の帰結だと思っています。\nこのような視点から、私は今までの状況はよくない、なにかがおかしいと思っていました。\nそこで、今回の楽天モバイル、三木谷氏の意見を見てみることにします。\n三木谷氏は、「人間の社会生活に必要な社会インフラ」とし、「経済的な理由でスマホが使えなかったり低速でしかスマホが使えなかったりする人もおり、楽天グループとして何ができるかを真剣に考えた」とコメント。スマホを持てない人を一人でも減らすために、これまでの常識にとらわれずにあらゆる人に安価で高品質なネットワークサービスを提供していく。\n「これまでの常識をひっくり返す」というのは、楽天創業時からやってきたことという三木谷氏は、楽天創業時に触れ、「楽天創業時は、ネットでモノを買うという常識はなかった。当時のネット回線は14.4kbps～28.8kbpsだったが現在は（超高速大容量の）5Gの時代。楽天はチャレンジし、携帯業界の常識をひっくり返す」と、楽天の携帯電話事業に対する意気込みをみせた。\nhttps://k-tai.watch.impress.co.jp/docs/news/1303500.html\n私は、素直に応援したくなりましたよ。これが今後のデフォルト、スタンダードになればいいなと思っています。\n例えば、今現在、他社契約で特に困っていない人も、特に不便していない人も、乗り換えるのが面倒な人も、大金持ちの人も、みんな楽天モバイルに乗り換えるといいと思う。\n楽天モバイルも契約者が増えて悪いことはないはず。\nただし、回線が入るかはエリアを確認しておきましょう。\niosでは、モバイル通信 \u0026gt; ネットワーク選択にて、自動を解除すると、しばらく電波を収集しますが、Rakutenまたは440 11がある場合は、一応、電波を拾えているらしい。\n楽天モバイルのような理念のあるところが、今後、圧倒的に強くなり、その影響で他社も変わってくるといいなと願っています。\n仮にそうなった場合でも、先駆者である楽天モバイルはかなりの恩恵を受けられる気がする。\nとりあえず、楽天モバイル、応援してます。がんばえー\n","description":"","formated_time":"2021-02-27","href":"https://syui.github.io/blog/post/2021/02/27/rakuten/","tags":["sim"],"title":"楽天モバイルをオススメする理由","utc_time":"2021-02-27T00:00:00Z"},{"categories":null,"contents":"skeb.jpが買収された話をきっかけに、skebとかに登録してidを取ってみました。\n「自身がコミュニティに属しているプレイヤーであることが重要です。例えば、イラストレーターさん向けのサービスが作りたいなら、自身もイラストレーターになる必要があります。僕も同人作品だけで相当作りました。だからこそ問題点が見えてきたし、僕のことを知っているコミュニティの人がたくさんいるので、『この人がやっているなら信用できる』とプロダクトを使ってくれました。この分野で事業をやりたいからコミュニティを作ろう、そういう人が集まる場を作ろうというのは失敗します」。\nスケブに関しても、喜田氏がいかにイラストレーターの立場になってサービス作りをしているかが窺える。クリエイターとクライアントに打ち合わせをさせないのは、クライアントの過度な要求からクリエイターを守る意味合いもあるという。\n「日本では、お金を出す方が偉いとなりがちです」と喜田氏。「クライアントは後になってやっぱりここを変えてとか、無制限にリテイクを求め、クリエイターが直さないといけなくなる。そういうトラブルも多かったので、それをどうにかしたいという思いがありました」。\nhttps://jp.techcrunch.com/2021/02/19/skeb-buyout\nskebのユーザーページで404が表示される場合 idを取れたのが特にうれしかったです。手遅れかもとちょっと思ってました。\nただ、skebでは、twitterからログインして、ユーザーページを作成するんですけど、idをsyuiに変更して、一応、ページはできたように見えるのですが、リロードすると404になってしまい、つまり、publicにページが作成されていない状態でした。\ndocsなどを読んだんですけど、あまり仕様が把握できなくて、よくわからなくて、放置してたら、いつの間にか、ページができていました。\nつまり、デプロイ処理されてなかっただけなのかもしれません。コスト等の関係で、h1やh2で回るようにしてるのかもとか思いましたが、実際のところはわかりません。\nしたがって、登録したあとは、ユーザーページが公開されるまで、404でもしばらく待つとよいかもしれません。\nこの辺、検索してもなかなか情報が出てこなくてハマりました。\nskebとfanbox 個人的には、skebの方針のほうが好きです。\nhttps://skeb.jp/@syui\n依頼について あまり、いらっしゃらないと思いますが、もし依頼したいと考えてくださる人がいた場合の文章です。\nskebでは依頼を受け付けています。\n一次創作しかやりませんので、こんなキャラを描いてと言われた場合、新しいキャラを作成することになります。\nまた、私が気に入れば、後に自分の作品で使われる可能性があります。\n名前は私がつけますので、クライアントは命名できませんが、別に名前の要望があっても気にしません。\nどんな依頼があっても、気にすることはないと思うので、気軽に依頼してください。どんな依頼をしてもらっても構いません。\nただ、完全に要望に答えられるわけではなく、あくまで要望に答える努力をしながらも、自由にやるつもりです。\nまた、依頼を受けたときの個人方針として「画力向上のため、できる限り努力して仕上げること」を目標にしたいと思っています。\nよって、今まで描いてきた絵とは多少異なってくる可能性があるかもしれません。\nとはいえ、イラスト自体の特徴や方向性を変えるつもりはなく、変わるのは、おそらく、微妙な線の入れ方や塗り方とかかなと思われます。\nとりあえず、もし依頼があれば、がんばります。\n以上です。\n","description":"","formated_time":"2021-02-26","href":"https://syui.github.io/blog/post/2021/02/26/illust/","tags":["illust"],"title":"skebとfanbox(pixiv)でidを取ってみた","utc_time":"2021-02-26T00:00:00Z"},{"categories":null,"contents":"現在の強さはこんな感じ。えっ、弱いって？\nまあ、無課金だと使ってるバディーズ見てわかるとおり、結構、きつかったりすると思う。一応、攻略は出来てるけど。\n今までガチャを引いたのって、0.5周年でレッドのときと1.0周年のマサラ組のとき、そして、正月リーリエ(アブリボン)のときくらいだった記憶。\n正月リーリエのときは完全に外したと思っていて、今思うと、これは引かなくてよかったかも。\n当初の狙いは、回避運ゲーができるようにすることでした。\n私は、回避、つまり、攻撃が当たらないことが最も有効な攻略手段だと考えていて、バフ、デバフに関しても、最強なのは回避+命中下げだと思っています。\n例えば、睡眠にしても、その他妨害異常にしても、相手は耐性をつけて、どんどん効かなくなってきます。また、行動を阻害するときって、相手はゲージが溜まっていく状態なんですよね。また、トレーナー技は普通に打たれます。\nしかし、相手の攻撃が当たらないとなると、相手のゲージも減らした上で、ダメージが0になる。\n絶対的に勝てないような相手、圧倒的にレベル差があるような相手に対して、これが最も有効な戦略だと思います。\n原作でもそうでしたが、レベル差が圧倒的で、どうしても勝てないときって、相手の命中を下げれば、勝てる可能性がでてきませんでした？\nそのような理由から、私は無課金でやってるわけなので、どうしても攻略が難しいタスクが来た場合、回避運ゲーができるよう正月リーリエを引いたという経緯がありました。\nしかし、今思うと、引くべきだったのって、レッド、マサラ組、そして、今回登場するダンデだったんじゃないかと。\n正月リーリエは、爆死してしまい4万ダイヤを使って、天井で1回引きましたが、本来なら貯めておくのが正解だったかもしれません。\nまあ、正月リーリエのおかげで、チャンピオンエリートを何度もクリアしてきましたので、いいこともたくさんありましたが。\nということで、今回、1.5周年のダンデは確実に引いておきたい。\nのびしろも星5アメもありますので、引いたときの準備は一応できてる。\nちなみに、アイリス(チャンピオン)も気に入ってるので、できればほしい。でも、回すかどうかはやっぱり内容(性能)によるかも。\n","description":"","formated_time":"2021-02-25","href":"https://syui.github.io/blog/post/2021/02/25/pokemas/","tags":["pokemon","pokemas","game"],"title":"ポケマス、注目の1.5周年でやるべきこと","utc_time":"2021-02-25T00:00:00Z"},{"categories":null,"contents":"\n/imgall\n気をつけてること 好き勝手描くのはやっぱり楽しい。\n毎回違う構図で描くよう心がけています。\nしかし、描く人と見る人の印象は異なるので、客観的にどう見えているのか、わかりません。もしかしたら、全部同じ絵に見えてるかも。\n同じ人が描いた絵が全部同じに見えてしまうことがあって、よくよく見ると全然違ったりもするんですけど、私もそういうことがたまにあります。\n全身を描くようにしてて、一部より全身のほうが圧倒的に難しいと思うので。\nあと背景に関して、実は、人間より背景のほうが好きで、背景を考えたり描いたりするの大変だけど、そこに面白さもあると思っていて、一応、頑張ってます。\nただ、背景を考えるの、ホント大変で\u0026hellip;見るのは好きなんですけどね。\n","description":"","formated_time":"2021-02-21","href":"https://syui.github.io/blog/post/2021/02/21/illust/","tags":["illust"],"title":"イラストを描いてみた62,63","utc_time":"2021-02-21T00:00:00Z"},{"categories":null,"contents":"ポケモンGoでカントーのイベントが開催されます。カントーといえば、原作のGEN1の舞台で、日本の関東地方がモデル。ポケモンは現実の地域がモデルになることが多く、最新のGEN8はイギリスだったかな。\nで、このイベント(有料)では赤と緑のどちらかを選んで参加するんですけど、どちらを選んだらいいか、迷っている人もいるかと思います。そこで、自分がどちらを選んだのか、その理由とともに解説していければと思います。\n私が選んだのは赤です。\n理由はメダルがかっこいいから。つまり、受け取れるメダルで決めました。\n選択によって受け取れるメダルが変わってくるんですよね。赤ならリザードン、緑ならフシギバナです。\n原作では基本的に赤系を選択してプレイしてきました。ちなみに、原作は全部クリア済み。\nファイアレッド、ハートゴールド、ルビーをプレイしており、DSは持ってなかったのでダイヤモンドを借りてプレイし、その後、3DSでパール、ホワイト、ブラック2、サンをプレイ。switchでソードをプレイしています。\nなので、今回の選択も当然といえば当然です。また、リザードン好きであることも関係しています。たとえ緑のほうに色違いがあったとしても、おそらく赤を選択したでしょう。\n今回のイベントでは赤と緑で登場する色違いが違います。自分が持っていない色違いが登場するほうを選択する人が多いかもしれません。\nですが、色違いは後で取れる可能性はありますが、メダルは可能性がほぼありません。\nしたがって、私はメダルで決めました。あるいは色で。\nまあ、緑で出てくる色違い、実は全部持ってるんですけどね。逆に赤はベロリンガを持っていないので、私は色違い要素でも赤を選択するほうがいいのです。\nみなさまは、どちらを選びましたか？私のオススメは、メダルです。\nProud of the version you chose, #PokemonGOTour Kanto ticket holders? Good news! Completing the event’s Special Research will reward you with a hat avatar item styled after your selected version! pic.twitter.com/PdvODmvyol\n\u0026mdash; Pokémon GO (@PokemonGoApp) February 19, 2021 ","description":"","formated_time":"2021-02-19","href":"https://syui.github.io/blog/post/2021/02/19/pogo/","tags":["pokemon"],"title":"ポケモンGo、カントーは赤緑どちらにすべきか","utc_time":"2021-02-19T00:00:00Z"},{"categories":null,"contents":" 本当の意味で「正しいこと」とはなんでしょう。 今回は、意外と難しい、この問いかけについて考えてみます。\nすべてが終わるとき、あらゆる存在だったものは、一つの存在だったものは、この世界そのものだった\u0026hellip;これが私の考え方です。\nですが、この場合、正しさというものは、非常に扱いが難しいものでもあります。\nなぜなら、例えば、世の終末(終焉)を望む者がいたとして、その思想や価値観は、長い目で見ると、正しいことのようにも見えるから\u0026hellip;。\nしかし、私の考え方と感情は別物です。\n私はただの人間です。ただの人間というのは、自分が生き延びるために有利な思想や価値観を選択するもの。\nですから、例えば、世の終末を望まないし、大量虐殺なども間違いです。正しくない。そのように考えるではなく、そう感じるしかないのです。\n世の中の多くの作品は、人が作ったもので、人が作ったものとは、人にとって、人間社会にとって、その生存に有利なほうを正義とし、不利なものを悪とします。\n主人公の前には、社会や人々を消し去ろうとする最強の悪、最後の敵が立ちふさがります。そして、主人公は、その価値観を否定し、悪を打ち破る。\nですが、私の考え方からすると、敵の考えや価値観は、間違いでもないことが多い。あるいは、主人公側も敵側もどちらも正しい。\n世を消しさろうとする者も正しければ、主人公たちの振る舞いや行動も正しい。どちらも正しいし、間違いではない。\nしかし、先程も述べたように、私はただの人です。\nただの人とは、主人公側の価値観のみを正義とし、破壊や終末、消失の価値観を悪とみなす。\n私も同じです。\n","description":"","formated_time":"2021-02-19","href":"https://syui.github.io/archive/note/12/","tags":["note"],"title":"正しいこと","utc_time":"2021-02-19T00:00:00Z"},{"categories":null,"contents":"クレセリアは、ギーマ、プラターヌ、正月リーリエでクリアしました。\nゼルネアスのムーンフォースのダメージが結構入ります。これ、途中まで気づいてなかった。\nダイヤ貯めてる無課金勢ですが、配布されたプラターヌがすごく強いので、今回取っとくといいかも。\nあとは、チャンピオン(エリート)は毎回クリアしてます。\n","description":"","formated_time":"2021-02-18","href":"https://syui.github.io/blog/post/2021/02/18/pokemas/","tags":["pokemon","pokemas","game"],"title":"ポケマス、クレセリア討伐","utc_time":"2021-02-18T00:00:00Z"},{"categories":null,"contents":" この前、「私たちは、この世界そのもの、ですから」と本音が漏れてしまったことがありました。 完全に頭のおかしい人ですね。 今回は、この考えについて話します。\n他人の口から「私たちは、この世界そのものである」と聞けば、「何を偉そうに」と思われるでしょう。私もそう思います。\nですが、このような考えはどこから来ているのでしょうか。\n私は、何かが終わる(死ぬ)とき、それは、その母体に還るというような考え方をします。\n個々の存在は、例えば、人だとか動物だとかをイメージしてもらえばわかりやすいですが、その母体である環境がありますよね。この場合の母体は、この星、地球に当たります。\nですから、私が死ねば、私は地球に還ります。星も同じく、寿命が来ると、その母体である宇宙に還ります。\nここでそれぞれ別々だったものが一つになると考えており、「もともと一つだったものが、元の姿に戻るとき、あるいは最終フェーズを迎えるとき、それ、そのものだったことを知る」というような考え方をします。\nつまり、はじめから別々でも個別でもなかったわけですが、それを認識するには、終わることが必要なのだと思います。\nそして、全てが終わり、最終フェーズを迎えるとき、つまり、宇宙も終わり、その外の世界も終わり、さらにその外の世界も終わって、最終的に世界が元の姿に戻るとき、この世界のすべての存在は、この世界そのものだったことを知るのだと思います。\nですから、私のような考えを持つ者からすれば、争いごとなどを見ると、つい「私たちは、この世界そのものなのに\u0026hellip;」とつぶやいてしまうことがあります。\n争って、殺し合って、でも、もともと一つで、同じ存在なのに、自分で自分を傷つけ合っているように見えてしまうのです。\nとはいえ、これは仕方のないことで、他にどうしようもなかったのでしょう。\n生まれ変わりはほぼ確実に起こります。星も生まれ変わりますが、人も、宇宙も同じです。\n話を戻すと、私は、上記の理由から、自分はこの世界そのものだと思ってる節があったりします。\nですから、何もかもが同じに見えてしまうことがある。\n「私は、この世界そのものだったから\u0026hellip;」\nこれを聞いたとき、私は「なんで、知ってるんだろう？」って思いました。\nこのことは、終わるとき、あるいは終わったあとにしか知ることができないものなのに。\n人が死ぬとき、はじめて、この星に生きたすべての者達と一つになります。そして、何万回も繰り返し、やがて星が終わるとき、星は宇宙そのものだったことを知り、宇宙が終わるとき、その中に在ったすべての存在は、その環境、それ自体だったことを知ります。\nここは存在の世界。\n存在は、この世界そのもの。\n","description":"","formated_time":"2021-02-17","href":"https://syui.github.io/archive/note/11/","tags":["note"],"title":"この世界そのもの","utc_time":"2021-02-17T00:00:00Z"},{"categories":null,"contents":"イラストをたくさん修正しました。前回修正したのが2020/11/03です。\n気になる方は、以下のリンクから。\n/imgall\nちなみに、物語やゲームは進捗ゼロです。どうすればいいのか、わかりません。とりあえず書いてみればいいのかな。\n","description":"","formated_time":"2021-02-07","href":"https://syui.github.io/blog/post/2021/02/07/illust/","tags":["illust"],"title":"イラストを修正してみた4","utc_time":"2021-02-07T00:00:00Z"},{"categories":null,"contents":"最近、ポケモン剣盾をyoutubeで見ることがあって、久しぶりにプレイ。他の人のコーディネートを見るのが好きなので、自分のコーディネートを紹介します。見た目を変えて冒険してると、グッと来るものがありますね。\n面白味に欠けるかもしれませんが、やっぱり、シンプルが一番好き。\n","description":"","formated_time":"2021-02-03","href":"https://syui.github.io/blog/post/2021/02/03/pokemon-sword/","tags":["pokemon"],"title":"ポケモン剣盾、お気に入りのコーディネート","utc_time":"2021-02-03T00:00:00Z"},{"categories":null,"contents":"13:00からと16:00のドラゴンタイプの時間におこうを使うとドラゴンタイプが稀に出るらしいので、捕まえて、交換して、進化させることを目指します。ドラゴンタイプのプラチナメダルを取るにはチャンスかもしれません！\nとはいえ、ドラゴンタイプ自体はそこまで出ないかもしれないので注意。ドラゴンタイプの時間には1/6の確率でミニリュウが出てくる感じのイベントで、ほかはドラゴンタイプではありません。また、お香は確か、5分に1回の割合でポケモンが出てくる感じだと思います。そのうちの1/6がドラゴンタイプだとして、1時間で2匹、2時間で4匹くらいになりそう。ひ、ひでえ\u0026hellip;。\nとりあえず、がんばります。\nhttps://pokemongo-get.com/pokego03592\n","description":"","formated_time":"2021-01-24","href":"https://syui.github.io/blog/post/2021/01/24/pogo/","tags":["pokemon"],"title":"ポケモンGo、おこうの日にやるべきこと","utc_time":"2021-01-24T00:00:00Z"},{"categories":null,"contents":"たくさん作ってると、その中で納得できないものとか出てくるので、作り直してます。\n頭の上の輪っか、実は色々な形にできます。\n","description":"","formated_time":"2021-01-23","href":"https://syui.github.io/blog/post/2021/01/23/illust/","tags":["illust"],"title":"素材を作り直してる","utc_time":"2021-01-23T00:00:00Z"},{"categories":null,"contents":" macbook air 11-inch (intel) ","description":"","formated_time":"2021-01-21","href":"https://syui.github.io/blog/post/2021/01/21/badge/","tags":["macbook","make"],"title":"ステッカーを作ってみた1","utc_time":"2021-01-21T00:00:00Z"},{"categories":null,"contents":"最近、いろいろな作品を見てて、私は、自分が作った物語を自分の好き勝手書いてきただけだけど、もっと読んでる人も楽しめるような作品にしたいなあとか思って、その過程で、衣装とかも普遍的なものにアップデートしなきゃとか思ったので、そのへんを少し考えてみました。\nでも描くのが楽で、かつ面白いのは、過去バージョンなんだけどなあ、と思いつつ、でも、衣装はいずれ変更修正しなきゃとは思ってたので、この機会にやろうかなと思ってます。\nちなみに、靴の色とか、ちょっと悩んだけど、キャラクターのテーマカラーが白系なので、白で。\nでもなあ、靴要素は、意外とめんどくさいよ、やっぱり。壊れたらどうするのとか、どこで買ったのかとか、色々。\nこのキャラのコンセプトが「何も持たない」なので、当然ながら靴も持ってなかったわけですし、必要もなかったわけですが、あ、絵本は持ってたか。なので、色々と面倒な要素ではあります、靴は。\n物語のほうは、主要な出来事はそのままで、主に演出方面で書き直したいなあと考えております。\n色んな作品を見て、どれもすごく面白いんですが、やっぱり、「楽しい」とか「面白い」って思う作品には、それまでの前準備とかパターンみたいなものがあると思って、次はそのへんを意識して作ってみたい。\n最初は完成させること第一でしたが、今後はそういうこともできるようになれればなあとか思っています。\n","description":"","formated_time":"2021-01-20","href":"https://syui.github.io/blog/post/2021/01/20/illust/","tags":["illust"],"title":"衣装を考えてみた","utc_time":"2021-01-20T00:00:00Z"},{"categories":null,"contents":"coreutilsになかったのですが、gnu-timeでインストールできます。\nmac標準は、/usr/bin/timeにありますが、ほとんどのオプションが機能せず、あまり使えません。\n$ brew install gnu-time $ gtime -f \u0026#34;%e\u0026#34; read これによって、ストップウォッチとして使えますし、任意のタイミングで実行時間を計測して記録できるので、色々と便利です。\n例えば、任意のコマンドを指定した間隔で実行してみます。\n#/bin/zsh time=time.txt json=command.json echo \u0026#34;[s]ave, [l]oad\u0026#34; case $1 in s) if [ -f $json ];then rm $json fi echo \u0026#34;[\u0026#34; \u0026gt;\u0026gt; $json while : do echo \u0026#34;command?, [s]top\u0026#34; read key case $key in s) echo \u0026#34;{\\\u0026#34;command\\\u0026#34;:\\\u0026#34;\\\u0026#34;,\\\u0026#34;time\\\u0026#34;:\\\u0026#34;\\\u0026#34;}]\u0026#34; \u0026gt;\u0026gt; $json exit ;; *) echo \u0026#34;time enter\u0026#34; gtime -f \u0026#34;%e\u0026#34; -o $time read cti=`cat $time` echo \u0026#34;{\\\u0026#34;command\\\u0026#34;:\\\u0026#34;$key\\\u0026#34;,\\\u0026#34;time\\\u0026#34;:\\\u0026#34;$cti\\\u0026#34;},\u0026#34; \u0026gt;\u0026gt; $json ;; esac done ;; l) if ! cat $json|jq;then exit fi n=`cat $json|jq length` n=$((n - 2)) for ((i=0;i\u0026lt;=$n;i++)) do command=`cat $json|jq -r \u0026#34;.[$i].command\u0026#34;` time=`cat $json|jq -r \u0026#34;.[$i].time\u0026#34;` zsh -c \u0026#34;$command\u0026#34; sleep $time done ;; esac 例えば、このスクリプトをcommand.zshで保存したとして、ls, which catを一定の時間間隔で実行してみます。\n$ mkdir -p ./tmp $ cd ./tmp $ chmod +x command.zsh # まずは処理を保存します # 時間間隔も保存しますので、`time enter`のところで任意のタイミングでetnerを押し、記録します $ ./command.zsh s [s]ave, [l]oad command?, [s]top ls time enter command?, [s]top which cat time enter command?, [s]top s # 呼び出してみます $ ./command.zsh l [ { \u0026#34;command\u0026#34;: \u0026#34;ls\u0026#34;, \u0026#34;time\u0026#34;: \u0026#34;5.63\u0026#34; }, { \u0026#34;command\u0026#34;: \u0026#34;which cat\u0026#34;, \u0026#34;time\u0026#34;: \u0026#34;7.08\u0026#34; }, { \u0026#34;command\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;time\u0026#34;: \u0026#34;\u0026#34; } ] command.json command.zsh time.txt /bin/cat 指定したコマンドが記録された間隔で実行されました。\nもし永続化したいなら、zsh repeatを使うか、新しいオプションを付けてみてください。\nll) if ! cat $json|jq;then exit fi n=`cat $json|jq length` n=$((n - 2)) while : do for ((i=0;i\u0026lt;=$n;i++)) do command=`cat $json|jq -r \u0026#34;.[$i].command\u0026#34;` time=`cat $json|jq -r \u0026#34;.[$i].time\u0026#34;` zsh -c \u0026#34;$command\u0026#34; sleep $time done done ;; ちなみに、こういうのもあるらしいので、gtimeに当ててやると、時間が測りやすいと思います。(面倒なのでやらないけど\nhttps://raw.githubusercontent.com/coryfklein/sw/master/sw\n","description":"","formated_time":"2021-01-19","href":"https://syui.github.io/blog/post/2021/01/19/shell/","tags":["mac","shell"],"title":"macでtimeコマンドを使ってみる","utc_time":"2021-01-19T00:00:00Z"},{"categories":null,"contents":"今回は、TL50の要件のうち、推測される要件の一つであるプラチナメダル40個をどのように達成するかを考えていきたいと思います。\nプラチナメダルの数はTL2ごとにx2倍が要求されてきました。このままいくと、TL50ではプラチナメダル40個を必要とするのではないか、というのが私の推測です。\n私は現在、38個です。残り2つですが、ドラゴンタイプが2400/2500なので、カントーイベントでミニリュウが大量に湧くということで、ここで、ドラゴンタイプを一気に捕まえちゃおう、と思っています。\nもう一つは交換距離のメダルです。タマゴ産を交換することで、交換距離を稼げます。\nストックしてあるタマゴ産を、できればアメx2のとき、かつTL49の要件の一つが500km離れたポケモンを何度か交換するなので、そのときに一気にやりたいなと思っています。(それでもちょっときついぞ\n相変わらずギリギリちゃんです。XPも現在、166/176でギリギリですし\u0026hellip;。\nとりあえず、TL50を目指して頑張ろう！\nプラチナメダルがTL49ではなくTL50に要求されると考える理由 今までのパターンでは、TL2ごとにメダルを要求されたので、このまま行くとTL49に要求されると思いますが、TL49は友情のタスクです。TL49は、ギフト、キラ、交換というタスクが予想されますが、残りの一つは親友(大親友)になるというのが私の予想です。\nトレーナーレベル49：相棒との友情と同じくらい大切なものは何でしょう？もちろん、他のトレーナーとの友情です！『Pokémon GO』で出会ったトレーナーは人生に多くのものをもたらしてくれます。そしてその友情を育むことが、素晴らしいポケモントレーナーになるうえで重要なことです。交換でキラポケモンを手に入れたり、ギフトなどを贈ったりしてトレーナーレベル49になりましょう。\n反対に、TL50ではすべての要素をマスターと記されているので、こちらでプラチナメダルが要求されると予想しています。\nトレーナーレベル50：ついに最後のレベルです！『Pokémon GO』の新たな最高レベルに到達するには、ゲームのすべての要素をマスターしなければなりません。エクセレントスローを投げることから伝説のポケモンの捕獲、1500CPを下回るポケモンでGOロケット団のリーダーを倒すなど、『Pokémon GO』の最終レベルに到達するトレーナーとして相応しいかどうかを試す究極の試練が待っています。リワードには最後レベルに相応しい、驚くような着せ替えアイテムが受け取れます！\nhttps://9db.jp/pokemongo/data/10566\nhttps://www.reddit.com/r/TheSilphRoad/comments/l073pi/making_a_plan_earn_40_platinum_medals/\n","description":"","formated_time":"2021-01-18","href":"https://syui.github.io/blog/post/2021/01/18/pogo/","tags":["pokemon"],"title":"ポケモンGo、TL50のプラチナメダル40個","utc_time":"2021-01-18T00:00:00Z"},{"categories":null,"contents":"カイリキーをPL50まで上げました。あと、プルリルを3匹ほど捕まえました。私は、ちょっとだけGBLをやっていたのでよかったのですが、こういうのは絶対にやめたほうがいいです。GBLにはいかなる報酬も与えるべきではありません。今回、嬉しかったのは、やっとスコルピが光ったことでした。\n","description":"","formated_time":"2021-01-17","href":"https://syui.github.io/blog/post/2021/01/17/pogo/","tags":["pokemon"],"title":"ポケモンGo、ワンリキーのコミュニティデイ","utc_time":"2021-01-17T00:00:00Z"},{"categories":null,"contents":"レイアウトを変更したり、個別ページの文章を書き直したりしてました。\nこのブログと言うか、webサイトのタイトルって、syui.aiなんですよね。あまり知らなかった人、多いかもしれません。\n今までタイトルは表示しないようにしてきたんですが、過去ブログを整理したタイミングとかで、やっぱり、タイトルは文字で表示しといたほうがいいと思ったので、表示することにしました。\nまた、コピーしやすいようspanで囲ったりしてね。タイトルをコピーすること私もたまにありますので。\n逆にプロフィールページへのリンクがアイコンになったので、わかりにくくなっちゃった部分はあります。これ、トップページへのリンクと勘違いしやすそう。\n普通に文字でプロフィールってすればいいんですけど、項目が多いので個人アイコンの形にしています。\nこれ、分かりづらいよなあと思いつつ、個人アイコンとブログのロゴが同一なので\u0026hellip;.。昔は分かれてたんですが、面倒なので統一したことがあって、それ以降、syui個人のアイコンとブログのアイコンが同じなんですよね。わかりづらい。\n今回、過去ブログのmbahack.syui.ai, mbahack2.syui.aiを閉じて、移転のお知らせのみを表示することにしました。過去ブログはメンテ、運用してなくて、これ以上、放置しておくのもよくないので。\nあと、google-adsの広告とかをこっちに持ってきました。このサイトでは、収益になるはずもないんですけど、今、審査を通過するのって結構難しいらしいじゃない\u0026hellip;そんな理由で一応貼っておこうかなと。もちろん、収益になれば嬉しいんですけどね。アフィリエイトで収益って今の時代、かなり難しいんじゃないかな。ほとんどの人は、adblockしてますし、私も、してますし\u0026hellip;。\n","description":"","formated_time":"2021-01-16","href":"https://syui.github.io/blog/post/2021/01/16/web/","tags":["web","hugo"],"title":"webサイトの変更","utc_time":"2021-01-16T00:00:00Z"},{"categories":null,"contents":"ダイヤがなくなっちゃったので、引けませんけど、引くべきですね。強いから。\nただ、恒常キャラなので、続けてればそのうち出るかもとは思ってます。期間中もダイヤが貯れば回すけどね。\nで、今回は、ポケマスのガチャがどういう方向なのか予想します。\n私の予想では、次に来るのはアタッカー最強クラスだと思っています。\n理由としては、1月からテクニカル、サポーターと続けて最強クラスのキャラが来ました。具体的には、正月リーリエとハルカです。正月リーリエに関しては評価が分かれると思いますけど、私の考えでは、正月リーリエはMグリーン枠だと思っています。\nですから、次に来るのは最強アタッカーだと予想します。来るのは、ちょうど1.5か2周年のタイミングかな。\nまた、上記はどちらも女性なので、今度は男性キャラで来そうな気がしています。今までの最強キャラは、Mレッド、Mグリーン、Mリーフで、男性x2、女性x1の組み合わせでした。なので、今度は女性x2、男性x1なのかなって思います。\nよって、個人的には、正月リーリエ、ハルカ、そして、次に来ると予想する最強アタッカー枠の男性キャラ？は、引いておきたいし、強化していきたいなあと思ってます。\nハルカと組ませるのは、今の所、私なら正月リーリエ、Mグリーンかな。リーリエで全体回避上げて、ハルカで全体命中下げて、ハルカがアタッカー、Mグリーンで回復。なお、予想のアタッカーが来たらMグリーンの代わりに入れる感じ。\nとはいえ、正月リーリエはメガシンカがないし、ちょっと怪しいかも。今後、もっと強いサポーターが実装される可能性もあります。来るとしたら、草系の御三家のうちのどれかでしょうね。また、主人公枠だと思います。\n以上\nちなみに、最強アタッカーが誰なのか、私の予想では、ダンデ\u0026amp;リザードンが来る可能性が高そうと予想しています。理由はいくつかありますが、GEN1とGEN最新での兼ね合い、どちらもリザードン使いであること、男性キャラであること、性格的にアタッカーだと考えられること、ユウリの実装から権利的に可能そう、などの理由から、そのように考えています。あ、私の予想は基本的にめちゃめちゃ外れるんで、あまり気にしないように。\n","description":"","formated_time":"2021-01-15","href":"https://syui.github.io/blog/post/2021/01/15/pokemas/","tags":["pokemon","pokemas","game"],"title":"ポケマス、ハルカは引くべきか","utc_time":"2021-01-15T00:00:00Z"},{"categories":null,"contents":"天井(400/400)で引きました。ギリギリで天井に届いたのでよかった。これホントギリギリで、1/13にもらったダイヤで400/400ですから、あと1日でも遅かったら天井を引けなかった。\n1回につき2%の確率なので、11連で22%として、大体、150/400あたりで1凸くらいのはずなんだけど、400/400まで1凸も来なかった。\n強化のほうは青メダルが集まりそうなので、そちらでやっていこうかなと思ってます。\nあと、チャンピオンバトルのエリートモード、クリアしました。毒が最強だったので、Mリーフは6EXするのもありかと思います。\nポケマスは初期よりも遥かに楽しいゲームになっていて、頑張ってるなと思います。\nですが、今回は、これがあれば嬉しいのになってのを要点だけ書いていこうかなと思います。\n配布バディーズのエンブレムは4つあったほうが嬉しい 現在、ホウオウでもレックウザでもエンブレムは一つで、内容が使い回しで簡単なので、そういう理由からだと思います。ですが、これは4つ集められるようにしたほうがいいと思います。なぜなら、そっちのほうがうれしいからです。これくらいのことは形式にとらわれず、プレイヤーが喜びそうな方向でやってもいいのではと思いました。\n配布バディーズが再び登場するイベントでは新しい要素を追加すると嬉しい ボードの追加、パッシブスキルの追加など、あったほうがいいのでは。\n6EXでポケモンが色違いになると嬉しい これに関しては権利関係から使えるかどうかわからないし、使うには新たに契約や資金が必要かもだけど、ある程度の広範な裁量が認められててできるなら、6EXにしたときのポケモンが色違いになると、とても嬉しい。例えば、ダイゴのメタグロスとか、正月ワタルのギャラドスとか。\n","description":"","formated_time":"2021-01-14","href":"https://syui.github.io/blog/post/2021/01/14/pokemas/","tags":["pokemon","pokemas","game"],"title":"ポケマス、正月リーリエを天井で引いた話","utc_time":"2021-01-14T00:00:00Z"},{"categories":null,"contents":"ピカチュウとかが来たのでうれしかった。\nただ、コスプレのポケモンは、基本的にうれしくなくて、通常の進化、メガシンカができないので、例えば、ヤドンでも、普通の色違いが来たほうがうれしいというのはある。自分はまだ色違いヤドキングの図鑑が埋まってないので、ヤドキングに進化させたかったけど、できなかったので、残念。\nなお、こういう進化先がないポケモンならコスプレはあってもなくてもどっちでもいいと思う。あるいはコスプレが通常の進化できるならいいんだけど、最初はできたものが、いつの間にかできなくなってて、例えば、今回のクマシュンでもコスプレは進化できないので、つらかった。\n三大希少ポケモンの一つであるテッシードが光りました。これはすごく嬉しい。ちなみに、今現在、一番希少なのは色違いのワシボンだと思います。\nTL上げてるうちにメダルも集まってきた。ロケット団とかリトレーンとか。あと、期間限定メダルも。\ngucciのコラボ衣装をゲット。現実にもあそこに行かなければ買えない服とかあると思うので、いいと思う。その後、プロモコードが発行されたので、誰でもゲットできるようになりました。\nhttps://pokemongo-get.com/pokego03568/\nその他、ちょっと昔に光ったやつとか、最高の相棒とか。色違いレジスチルがうれしかった。残すところ伝説(幻)はデオキシスのみ。\n欲しいポケモン\n","description":"","formated_time":"2021-01-08","href":"https://syui.github.io/blog/post/2021/01/08/pogo/","tags":["pokemon"],"title":"ポケモンGo、最近の進捗","utc_time":"2021-01-08T00:00:00Z"},{"categories":null,"contents":"この前、youtubeを見てて、うまく音声変換してる人を見かけたんですが、すごいなあ、どうやってやるんだろうとちょっと思ったので、やってみることにしました。\n結論から言うと、voidolとかより、macのgaragebandを使ったほうがうまく変換できました。\n入力にマイクを当て、\nプラグインのpitch -\u0026gt; vocal transformerを追加。\n音声を自然にするには、プラグインのChannel EQが役立ちます。VoiceのFemale Vox 01, Clear Vocalsなどを試してみてください。\nこのとき、音声にブツ切り音などが入ってる場合、削除するといいかもしれません。具体的には、オーディオ放射部分の画面をダブルクリックで編集できます。\n最後に、音声ファイルを書き込むには、共有 -\u0026gt; 曲をディスクに書き出すからできます。\nこれをimovieなどを使って動画に挿入し、適時、文字を入れていくと、動画の完成。(いうほど簡単ではないと思う\nyoutuberって、案外、バカにされがち？な気がするんですけど、トークも動画編集もすごくて、すごいクリエイターなのだと思います。やってみると難しいことって意外と多い。\n","description":"","formated_time":"2021-01-07","href":"https://syui.github.io/blog/post/2021/01/07/voice/","tags":["mac"],"title":"マイクと音声変換","utc_time":"2021-01-07T00:00:00Z"},{"categories":null,"contents":"昨日、big surでstudio one2(+piapro studio vsti)が激重とか書きましたが、いつの間にか、問題が解決していて、そこまでの遅延が発生しない状態になってたので、そのことについて。\nまず、よくわからない用語の解説です。\nmac osのbig surと、studio oneはDTMアプリのことで、piapro studioというのはstudio oneのプラグインのこと。vstiはstudio oneのプラグイン表記、piapro studioがどのようなプラグインかというと、vocaloid editorのようなもので、私が使ってる音声ライブラリはvocaloid3、と理解しておけば良さそう。\n正直、私もよくわかってません。DTM関連もややこしい。\nここでは、わかりやすさ重視のため、タイトルにはvocaloid3を使用。また、studio one2もアプリ名はstudio one2ですが、私が使ってるのは正確には、studio one artist OEMというらしい。\nさて、この前、作曲しててアプリもプラグインも重かったんですが、プラグインのほうが重かった感じでした。\nで、アプリ自体はbig surの日本語入力、起動遅延の問題からクリーンインストール(windowsでいうリカバリ相当)後にバックアップから復元したものを使い、プラグインは新しくインストールしたものを使いました。ここで復元アプリからファイルを作って、それを編集していました。\nしかし、激遅いなあとか思って、復元アプリを消し、イチからアプリをインストールしてみます。\nですが、やっぱり激遅い。\nしかし、今回、アプリで新しいファイルを開き、それを編集してみると、この問題は解消していました。そこまでの遅延は見られない状態です。\nこの状況から察するに、復元アプリでファイルを作成したのが良くなかったような気がしてる。イチからアプリを再インストールした上でファイル作成、編集すべきでした。\nよくわからんが、たすかった。これで普通に作曲できるぞー！(能力的にはできない\nなお、私が使っているpiapro studio(vocaloid3)はかなり古く、すでにサポートされてない感じで、現在サポートされているpiapro studio NT(vocaloid5)を使ったほうがいいかもしれません。\nPiapro Studio 2.0.4.10\nPiapro Studio NT 3.0.1.3\nmacOS11 Big Sur への対応につきまして\n","description":"","formated_time":"2021-01-06","href":"https://syui.github.io/blog/post/2021/01/06/vocaloid/","tags":["vocaloid"],"title":"big surとvocaloid3","utc_time":"2021-01-06T00:00:00Z"},{"categories":null,"contents":"今回作ったのはこちら。ボカロでミクが歌います。\n一覧 : /music/\nこれだけでもなんなので、今回もなにか書きます。\nきっかけ この前、夢を見たのですが、夢の中で、昔、どこかで聴いて、ずっと探していた曲を見つけることができたので、作曲やってみようかなと思ったのがきっかけです。\n探していた曲というのは、とても小さい頃、どこかで聴いた音楽なので、タイトルはもちろん、歌詞すらもわかりません。誰が歌っているのかとかも、単に流れてただけなので知る由もありません。ですが、メロディだけは覚えていたという状況。\nそれがまさか夢の中で見つけられるとは思ってもみませんでした。\n夢って知らないことがでてくることもあるんでしょうか？\nただ、これについてはいろいろな解釈があると思う。例えば、記憶の奥底に眠ってたとか、忘れていただけとか。\nですが、私が持ってる情報からその曲を見つけられるとは到底思えませんでした。\n寝てても意識がはっきりしてて、見つけた瞬間、「見つけた！」とか思って、急に起きだし、検索をかけて、その曲を聴いています。\n正直、私にも何がなんだかよくわからない\u0026hellip;。\nその曲、昔の曲ですが、いい曲ですよ。(タイトルは伏せておきます\nで、こういう曲、書きたいなあと思って始めたのですが、出来上がった曲は、ジャンルからして全然違うものになってしまったという\u0026hellip;。\nbig surでstudio one2が激重になっていた件 big surにしてからDTMをやってませんでしたが、今回やってみると、アプリが激重になっており、色々つらかったりした。\nとはいえ、曲が下手なのはこのせいではなく、あまり関係ないと思います。\nが、今後、big surでのDTM、どうしよう。これはまともに作曲できるレベルの遅さじゃないです。\n","description":"","formated_time":"2021-01-05","href":"https://syui.github.io/blog/post/2021/01/05/music/","tags":["mac","music","vocaloid"],"title":"作曲してみた9","utc_time":"2021-01-05T00:00:00Z"},{"categories":null,"contents":"upgrade後に日本語入力と起動が遅くなっていたので、macのbig surをクリーンインストールしてみました。\n原因を調べましたが、どうやら過去にapfsフォーマットに変更された人の端末にこの不都合が多く出ている印象。したがって、内蔵ディスクをapfsに再フォーマット後、macをインストールするれば直るんじゃないかと考えました。\n実は、macは、過去に一度、osのupgradeでhfs+からapfsへディスクのフォーマットを変更しています。フォーマットをどうやって強制的に変更したんだと思われるかもしれませんが、これは様々な方法が考えられます。例えば、空き領域をボリュームABに分けて、片方をapfsフォーマット後、元のボリュームからバックアップを復元し、その後、分けられていた領域を統合(拡張)したのかもしれません。\nそれは置いといて、hfs+からapfsに変更された人が遅くなってるんじゃないかと思ったので、内蔵ディスクをapfsに再フォーマット後、macをインストールしてみたところ、この症状が治りました。具体的には、起動が早くなり、日本語入力の遅延がなくなりました。\nあと、auto-loginされない問題も解消してました。\nインストール中はパソコンいじれないので、絵を描いてました。アイキャッチのやつがそれ。\n","description":"","formated_time":"2021-01-04","href":"https://syui.github.io/blog/post/2021/01/04/mac/","tags":["mac","illust"],"title":"mac big surをクリーンインストールしてみた","utc_time":"2021-01-04T00:00:00Z"},{"categories":null,"contents":"描きました。今回はちょっとした小話があるので少しだけ。\n/imgall\n創作しているとよくある話 今回の絵、どう思いました？\nいつもより簡素な感じで、いやまてよ、適当書いてんじゃない？そう思った人もいるかもしれません。\nその見方は概ね正しい\u0026hellip;ですが、間違ってもいます。\nなぜなら、この絵、完成するまでに最も時間がかかっているのですから。\n今回は、このことについて少し話したいと思います。失敗談みたいなもんですね。\n私は、絵を書いていました。今回のテーマは、街頭、雪道、足跡です。\nどんどん書いて、最初に完成した絵を見て、なにか物足りないなあと思うのです。\nそこで色々な要素を追加してみるものの、なにかぱっとしない\u0026hellip;。\nこうなってしまうと泥沼に足を突っ込んでるようなものです。時間ばかりかかって、全然だめ。\nこれはよくあることですが、上手くいくときは一発、上手くいかないときは、なにをどう修正してもうまくいかないことがあります。\nこれによって、いつもは30分から1時間もあれば完成する絵が、なかなか完成しませんでした。\nそして、あるとき「これはもうだめだ、イチから書き直し！増やした要素も全削除じゃあああ！！」と言い、やっと完成した絵がこれというわけです。\nですから、めちゃくちゃ簡素で適当に見えるんですけど、実は、いつもより遥かに時間がかかってしまったというわけです。\nこのように、よりシンプルな絵のほうが、結果として時間がかかってしまったことも多かったりします。\nみなさまも気をつけましょう。これはちょっと\u0026hellip;と思ったときは最初から書き直したほうが早いかも。\n","description":"","formated_time":"2021-01-03","href":"https://syui.github.io/blog/post/2021/01/03/illust/","tags":["illust"],"title":"イラスト描いてみた60","utc_time":"2021-01-03T00:00:00Z"},{"categories":null,"contents":"性能としては、全体回避+2, 全体急所+2, 全体状態異常無効, 回避時HP回復など。\n個人的に、引いておいたほうがいいと思います。\n無課金なので爆死する可能性は十分あるんですけど、引くべき(回すべき)と判断。\n正月限定リーリエは、マジコスグリーンには届かないものの、似たような性能を有していると思われます。使用感や役割も似てるんじゃないかな。また、6EXも検討してる。\n運用方法としては、リーフ\u0026amp;イーブイ, オーキド\u0026amp;ミュウと組ませると活躍してくれそう。\n実は、イーブイとミュウって、かなり相性良くて、例えば、こおり弱点の相手に当てるんですが、イーブイB技で命中上げたあと、ミュウでB技後にふぶきを連発するっていう戦略です。\nこれにリーリエを組み込むと、全体バフ、全体デバフ、回避ができるようになり、相手の弱点もつきやすいので、かなり強いんじゃないかな。それ以外と組ませても強い。\nということで、今回の正月リーリエは、引いておく(回しておく)ことにします。目指せ3凸+6EX！\nhttps://www.reddit.com/r/PokemonMasters/comments/kmz8l7/now_that_lillie_has_been_officially_announced/\n","description":"","formated_time":"2021-01-02","href":"https://syui.github.io/blog/post/2021/01/02/pokemas/","tags":["pokemon","pokemas","game"],"title":"ポケマス、正月リーリエは引くべきか","utc_time":"2021-01-02T00:00:00Z"},{"categories":null,"contents":"あけましておめでとうございます。今年もよろしく！\n/imgall\n","description":"","formated_time":"2021-01-01","href":"https://syui.github.io/blog/post/2021/01/01/illust/","tags":["illust"],"title":"イラスト描いてみた59","utc_time":"2021-01-01T00:00:00Z"},{"categories":null,"contents":"無課金勢(仮)ですが、TL47になりました。課金すれば1日で終わるTL41が1ヶ月ほどかかりましたが、その間に色々と準備できたので、TL41からTL47までは割とスムーズでした。なんとか年内に到達できてよかった。\n現在のXPは16,000で、TL50までに17,600必要なので、あと1,600です。\nTL48に絶対日数で2ヶ月かかり、その間に1,600は貯まりそうな気がするので、XPはギリギリいけそう。\n順調に行けば、2/21にカントーイベント、2/22にTL48。\nやったこと TL45チャレンジのタスクにレイドx45がありますので、同時進行すると効率的です。タスクが始まる前日には無料パスを保存しておくと日数を1日短縮できます。\nまた、チャレンジのタスクは最後のところで保存し、スポットレイトアワーなどでしあわせのタマゴと同時に使うと効率的。\nhttps://9db.jp/pokemongo/data/10676\n","description":"","formated_time":"2020-12-31","href":"https://syui.github.io/blog/post/2020/12/31/pogo/","tags":["pokemon"],"title":"ポケモンGo、TL47","utc_time":"2020-12-31T00:00:00Z"},{"categories":null,"contents":"今回は正月っぽいのを描いてみました。\n/imgall\n今年やったこと 今年はあまり何もできなかったなあという感じでした。何をやったかとかあまり覚えてすらいなかったり。\nipadを買ったので、こうやってお絵かきすることは増えましたが、振り返ってみると、全く上達していません。\n私は、描きたいように描いてるだけで、別に練習で描いているわけではないので、そのへんが原因かも。\nとはいえ、絵を描くのに練習なんて必要ない\u0026hellip;と思っています。\nということで、自分の絵を描こう、他を見て、これいいなと思ったときは素直に取り入れよう、そんなことを思ったのでした。\nこれからも楽しく描けるといいな。\n","description":"","formated_time":"2020-12-30","href":"https://syui.github.io/blog/post/2020/12/30/illust/","tags":["illust"],"title":"イラスト描いてみた58","utc_time":"2020-12-30T00:00:00Z"},{"categories":null,"contents":"ついに来ました、マジコスリーフ6EX！\n無課金勢なので結構時間かかっちゃいましたが、最初のEXはこの3人になりました。\n","description":"","formated_time":"2020-12-28","href":"https://syui.github.io/blog/post/2020/12/28/pokemas/","tags":["pokemon","pokemas","game"],"title":"ポケマス、マジコスリーフ6EX","utc_time":"2020-12-28T00:00:00Z"},{"categories":null,"contents":"imovieは、mp4のオーディオを読み込めないらしいので、movに変換して読み込みます。なん度目だ、これハマるの。\n$ ffmpeg -i input.mp4 output.mov で、iosで画面収録した動画はそのままだとmp4で保存されますが、一度編集するとmovで保存されます。\nなので、imovieで編集したい場合は、一度、iosのほうで写真アプリから編集しましょう。\n","description":"","formated_time":"2020-12-17","href":"https://syui.github.io/blog/post/2020/12/17/mac/","tags":["mac"],"title":"imovieでmp4を読み込んだとき音が出ない解決法","utc_time":"2020-12-17T00:00:00Z"},{"categories":null,"contents":"最近の進捗とプレイスタイルを再考してみた話。\nポケモンのレベル上げ ポケモンのレベル上げは、ほぼ不可能な領域に突入しています。\nそんな中、どのポケモンのレベルを上げていくかですが、私は、色違いでメガシンカがあり、かつXLアメを獲得しやすいポケモンを優先しています。\nまた、最大までは強化せず、その一歩手前で止めるようにしています。これは、何らかのタスクがあったときなどに使うためです。\n私の場合、ギャラドス、スピアー、ピジョットがそれに当たります。限定技も覚えているので、おすすめです。\nワシボンにパスを使ってはいけない 色違いワシボンはかなり確率を下げられている模様。\nワシボンを出すまでに大体、2万5000円かかる計算です。\ntwitterなどであまりに報告が少なすぎるときは気をつけましょう。\nhttps://9db.jp/pokemongo/data/10721\nhttps://rocketnews24.com/2020/12/16/1440819/\nちなみに、ワシボン1匹を最大まで強化するには、アメが248+29600が必要なので、1レイドにつきアメx6もらえるとして、1匹強化するのに4974レイド、最低でも49万7400円が必要な計算になります。(実際はもっと多い、パスx1=100円で計算していますが、120円なので)\nなので私は、12/19のレジスチルにパスを使おうと思ってます。TL41(レイドx30)のついでに。\n課金について 色違いミュウのチケット(1480円)を買いました。あと、12月コミュニティデイのチケット(120円)も買いました。\n後者は必要ありませんでしたが、通常なら1日限定で1480円で売られるわざマシンが2つ付いて、120円だったので。\nここまでお買い得だと、無課金ユーザーもたまに出動することがあります。\nなお、ここで言う無課金ユーザーとは、基本的には無課金でプレイしているという意味。\nちょっと前まで完全無課金だったのに、最近はチケットを買わされております\u0026hellip;。\nボックスや道具の拡張 ボックスや道具の拡張は、今まで通り無課金で、ジムコインを貯めて拡張する方向。\nこういうのは、結構、楽しいですよ。\nやっぱりゲーム内で頑張って、少しずつ拡張していくほうが面白かったりするんです。\nまた、やむなくボックス整理するみたいなことも、たまには必要だと思う。\n検索テクニック よく使う検索テクニックです。\n0*,1*,2*,3*\u0026amp;日数0\u0026amp;!伝説のポケモン\u0026amp;!色違い\u0026amp;!しゃどう ピカ\u0026amp;色違い\u0026amp;とくべつ 相棒を選ぶ2-4 https://niantic.helpshift.com/a/pokemon-go/?s=finding-evolving-hatching\u0026amp;f=searching-filtering-your-pokemon-inventory\u0026amp;l=ja\u0026amp;p=web\n最近の進捗 ","description":"","formated_time":"2020-12-16","href":"https://syui.github.io/blog/post/2020/12/16/pogo/","tags":["pokemon"],"title":"ポケモンGo、プレイスタイルの再考","utc_time":"2020-12-16T00:00:00Z"},{"categories":null,"contents":"今回のスポットライトアワーの内容は下記のようになっています。\n2020年12月15日(火)18時~19時 : ポケモンを捕まえたときにもらえる「ポケモンのアメ」が2倍, 「パイルのみ」「ぎんのパイルのみ」使用でさらに2倍\n個人的におすすめする立ち回りを紹介します。やるべきことはシンプルで、以下の二点です。\n保存しておいたセレビィを捕まえる\nふしぎなはこを開けて、メルメタルを捕まえる\nまた、場合によっては、はがね, くさタイプのポケモンをメガシンカしておくといいかもしれません。アメ+1\nそれ以外の時間は、ピカチュウでもタップしておきましょう。\nなお、ムサシ\u0026amp;コジロウは、時計の針が12と6を示すときに登場する模様。\n参照 https://pokemongo-get.com/pokego03113\n","description":"","formated_time":"2020-12-15","href":"https://syui.github.io/blog/post/2020/12/15/pogo/","tags":["pokemon"],"title":"ポケモンGo、12/15のスポットライトアワー立ち回り","utc_time":"2020-12-15T00:00:00Z"},{"categories":null,"contents":"今回もポケマスの話を少し。\nバトルヴィラやチャンピオンバトルはやってますでしょうか？私は、なんやかんやで楽しいので、毎回やってます。\n今回もエンブレムがもらえるということで、最初ちょっと確認して、終わらせたんですけど\u0026hellip;\nごちそうをミスってる\u0026hellip;\nごちそうを使うとき、どうやら一つタップし忘れたっぽい。5つずつもらえるので、1つだけ足りないのは通常ありえない。\nとはいえ、次回の楽しみが増えましたので、これはこれでよし！\n関係ありませんが、マジコスリーフがあと3つで\u0026hellip;EXです！\n","description":"","formated_time":"2020-12-14","href":"https://syui.github.io/blog/post/2020/12/14/pokemas/","tags":["pokemon","pokemas","game"],"title":"ポケマス、痛恨ミスした話","utc_time":"2020-12-14T00:00:00Z"},{"categories":null,"contents":"今回は、個人的におすすめする2020年のコミュデイの立ち回りについて紹介します。やるべきことはシンプルで、以下の二点です。\n12/11にわざマシンでシャドウポケモンの「やつあたり」を忘れる\n12/12にシャドウポケモンを進化させ、限定わざを覚える\nおすすめのシャドウポケモンは、ミズゴロウ、タネボー、ビードル、ヒトカゲ、コイキングあたりを進化させ、限定わざを覚えさせるのがいいでしょう。\nその他、シャドウのケーシィ、エレブー、ブーバー、ナックラー、ナエトル、ラルトス、タツベイ、メリープを集めておくといいですね。\n参照 https://pokemongolive.com/post/the-game-awards-2020\nhttps://pokemongolive.com/post/communityday-dec20\nhttps://9db.jp/pokemongo/data/6872\nTLレベルアップとの同時進行 課金していれば、早い人なら現在、TL45あたりだと思われます。\nよって、ロケット団のタスクと同時進行することで、これらを効率的に片付けることが可能です。\nhttps://9db.jp/pokemongo/data/10566\n","description":"","formated_time":"2020-12-11","href":"https://syui.github.io/blog/post/2020/12/11/pogo/","tags":["pokemon"],"title":"ポケモンGo、2020年コミュニティ・デイの立ち回り","utc_time":"2020-12-11T00:00:00Z"},{"categories":null,"contents":"レジロックもマジコスカントー組で一発クリアでした。リザードンが何度か死にかけましたが、カメックスのこらえるで耐えますので、なんとか生き残った感じでした。\n今回は、マジコスカントー組をどのように使っているのかの紹介です。さまざまなバディーズと組ませていて、ちょっと変則的です。例えば、マジコスリーフ+アンズだったり、マジコスグリーン+アタッカーだったり。\nなので、独立してもある程度戦えるボードを構築しています。\nマジコスリーフは、どく構成\nマジコスグリーンは、次回急所、回復\nマジコスレッドは、バディーズ技威力、晴れ\n基本的には、レッドのバディーズ技をグリーンの次回急所で当てます(それまでリザードンで攻撃しない)。こうすることで、全体バディーズ技が急所に当たります。これにより、周りの敵は一撃で落ちます。\n実は、グリーンのボードは次回急所か登場時特防かで迷いましたが、速効性を考え、次回急所を選択しました。\n2回目のバディーズ技はカメックスで気迫+こらえるです。\nそれでも敵が粘るようなら、3回目をフシギバナで毒威力上げます。だいたいそんな感じのことをやってると、敵はいつの間にか死んでることが多い。\nトゲキッスは引くべきか ついでに今回登場したトゲキッスは引くべきかの話について。\n無課金勢の場合、5万(天井狙える)ダイヤがなければ、引くべきではないと判断します。\nひるみ攻撃の命中率が95であること(ひるみ自体は60%)、バディーズ技で威力を狙っていくタイプであることがネックだと思っていて、あなたが本当に欲しいのは、ひるみでしょうか。バディーズ技で高火力を出すことでしょうか。\n私が今欲しいのは高火力アタッカーなので、今回のトゲキッスとはちょっと違うかなと。\nそれに、ひるみとか、ねむりとかを狙う戦い方、あまり好きではないのです。\nまた、フウロのクリスマス限定衣装というのも日常的に使いたいものではなかったので、今回は、引くべきではないと判断します。\n無課金勢は、回すからには確実に当てていかないとダメで、迷いがある以上、引くべきではありません。\nすごく魅力的に映るトゲキッスですが、今回は引くべきではないと判断し、ダイヤは貯めておくことにしました。\n","description":"","formated_time":"2020-12-10","href":"https://syui.github.io/blog/post/2020/12/10/pokemas/","tags":["pokemon","pokemas","game"],"title":"ポケマス、カントー組の使い方","utc_time":"2020-12-10T00:00:00Z"},{"categories":null,"contents":"最近、ポケマスではランキングイベントが実装され、報酬も増えました。\n今回のランキングイベントは、まあ、いいんじゃないでしょうか。\nポケマスは売り上げが厳しいという話も聞いていますので、こういった形での集金も仕方なかった側面があるのではないかと思います。\n私は、なんとかランキングを12000位以内で終えることができました。めぼしい報酬は12000までなので、ギリギリのところを狙ってました。あまり無駄なスタミナは使いたくないですし。\n具体的な内容については、ダイゴもミカンも持っていないなか、残ってた少数のダイヤを全部注ぎ込んで、ユウリを当て、それで回してた感じです。スタミナは、2度ほど回復しましたが、あとは自動回復+配布のみ。\nこれでギリギリ12000に入れましたが、6000以内を狙うには、おそらく、ユウリ3凸は必要だったのではないかと思います。\nで、6000位に入れなかった要因は、私がダイヤの使い所を間違えたことに尽きます。\n私のような無課金プレイヤーは、ダイヤの使い所が非常に重要です。それをミスってしまうと詰みます。\nこのイベントの少し前、私は、貯めていたダイヤをマジコス・カントー組、主にマジコス・グリーンにつぎ込み、爆死しておりました。\nこれがまずかった。完全な判断ミスです。\n今となっては、あの時点でこうなることを予期し、ダイヤを貯めておけばよかった。\nつまり、ここをやめていれば、ダイヤは貯まっていて、ユウリ3凸できる確率は上がり、6000位を狙えたのではないかと思われます。\nとはいえ、今回、残ってるダイヤを全て使い、なんとか12000位をキープすることができました。多少は投資したかいがあったかなと思います。\nこれにより、星5のアメがもらえますので、ポケマスで2つの目標を達成できるかもしれません。\nポケマス2つ目の目標 ポケマスで私の最初の目標は、レッドを引く、というものでした。\nこの目標は、レッドが実装されていない頃からの目標、目的でもありました。\nレッドは好きなトレーナー、メガリザードンXは好きなポケモンだったからです。\nレッドに関しては、パッケージに載っているので、いずれ実装されるだろうと予想してました。\nそれまでずっとダイヤを貯めており、いざレッドが実装されると、全部使って、天井でレッドを引きました。\nここから私のポケマス快進撃が始まります。\nそれまで相当きつかった攻略が楽になり、初登場のエンテイを含む全てのレジェンドバトルをクリアしていきました。\nしかし、当初のレッドを引くという目標を達成してからは、次の目標はありませんでした。\nそんな折、今度は、マジコス・カントー組が実装。\nここで、次の目標はマジコス・カントー組の強化だと決めました。具体的には、6EX化とボード解放です。\n私の場合、今回の報酬ではカメックスのボード解放ができます。それにマジコス・リーフものびしろ金x5で6EX化ができる予定。\nリーフはもともとお気に入りのトレーナーで、おばさんっぽさ?が割とツボだったりします。また、カメックスは超強いので。\nポケマスをプレイしていて、好きなトレーナーは、女性キャラ限定で、\nユウリ、マジコス・リーフ、アセロラの順に好きです。\nユウリのカレー好き、腹ペコ属性に萌えました！\n","description":"","formated_time":"2020-12-09","href":"https://syui.github.io/blog/post/2020/12/09/pokemas/","tags":["pokemon","pokemas","game"],"title":"ポケマス、最近の進捗","utc_time":"2020-12-09T00:00:00Z"},{"categories":null,"contents":"\n/imgall\n","description":"","formated_time":"2020-12-08","href":"https://syui.github.io/blog/post/2020/12/08/illust/","tags":["illust"],"title":"イラスト描いてみた55-57","utc_time":"2020-12-08T00:00:00Z"},{"categories":null,"contents":"\n/imgall\n","description":"","formated_time":"2020-12-07","href":"https://syui.github.io/blog/post/2020/12/07/illust/","tags":["illust"],"title":"イラスト描いてみた52-54","utc_time":"2020-12-07T00:00:00Z"},{"categories":null,"contents":"近くポケモンGoで開催されるイベント情報や攻略情報など。\n色違いのセレビィ 日本時間12月14日（月）8時からスタート\nhttps://pokemongolive.com/post/movie2020/\nこれはすごく嬉しい。色違いは確定だと予想していて、達成者全員に配布する形だと思います。\nこの形式はセレビィ系のポケモンに引き継がれるものと考えられ、例えば、ミュウやジラーチも近いうちに色違いで登場すると思われます。\n私がGBLに否定的なのは、一つにこのような限定ポケモンの問題も含まれており、その問題が少しは解消されるのではないかと期待しています。\nGBLにおける小さな問題の一つ GBLが登場する前まで、このゲームには非常にわかりやすい図式がありました。\nそれは、「ポケモンを育てること、強化することはよいことである」という図式です。\nポケモンGoは、アイテムや素材を集めてポケモンを育て、強化していくゲームでもあったわけですね。\nしかし、GBLの登場によって、そのシンプルな図式が一気に崩れ去ります。\nつまり、「ポケモンを育てることは、必ずしもよいこととは限らない。場合によっては、強化してしまうと取り返しがつかないものである」という形になってしまったのです。\n私の場合は、ミュウやジラーチがそれに当たります。\n私は、すでにミュウもジラーチも強化してしまっていたので、GBLに参加させることができなかったのです。\nとくにミュウはGBLが少し発展してからスーパーリーグで流行り始め、とてつもなく強いポケモンです。こいつが使えないというのはかなり痛かった。他にもメルメタルを持ってるか、持ってないかでランクやレートに大きすぎる影響を及ぼしている問題もありました。\nですから、今回の再登場によりスーパーリーグで使用する選択が可能となります。\nとはいえ、この問題にしてもGBL周辺にある小さな問題の一つに過ぎず、以前も書きましたがGBLは根本的な部分で多くの問題がありますので、この問題が多少緩和されたところで、GBLの評価が変わるものではありません。\n「ポケモンを育てること、強化することはよいことである」を「ポケモンを育ててしまうと取り返しがつかない」とねじ曲げてしまったのは、このゲームにおける設計ミスの一つだったと思います。\n例えば、色違いミュウをゲットして、それを強化したいと思っていても、GBLがある限り、その選択が取れないのです。\n本来なら色違いミュウを強化し、色々な場面で使いたかったのに、それができない。GBLはこのような形で、いたるところに不自由をもたらしてしまっていると思います。\nコミュデイ総括 日本時間12月12日（土）と12月13日（日）に開催\nhttps://pokemongolive.com/post/communityday-dec20/\n毎年の終わりに開催されるコミュデイで、その年に出たポケモンが全部出るようになります。私は取り逃がしがないため、今回は巨大コイキング狙い。あとちょっとでプラチナなんですよね。\nコスプレ・ピカチュウ 日本時間12月15日（火）18時から19時まで\n今回もスポットライトアワーで登場するようです。\nワシボン 日本時間12月14日（月）8時から12月17日（木）22時まで\nワシボンの色違いかあ。これTL41の条件と連動させて狙うか迷ってる。\nBGMの変化 全体に新しい音が混じっていますが、特にスタート部分に変化がありました。\n個人的には、カントーの街とカロスの街のBGMを混ぜ合わせたようなイメージで、ポケモンぽくてすごくいいなって思いました。または、カントー街がカロス街にアレンジされ、それがさらにGoにアレンジされた形かもしれません。\nポケモンを感じるBGMとなってます！\n相棒のハート ハートがバトルで1から3まで溜まるようになっています。これにより最速交代して1体につき6つのハートをゲットできます。前は4つだったかな。\n大喜びまでの時間も短縮されているようです。私はそこまでやりませんが、やりたい人はどうぞ。\nhttps://pokemongo-get.com/pokego03043/\nおやつ+なでる+撮るとバトルを約15分ごとに繰り返す感じで。 なお、バトルはロケット団逃げか、リーダー負けで得られると思います。登場させなくてもメンバーに入っていればOK。\n最高の相棒、メガシンカと連動してくれないかなあ。(メガシンカは毎回コストがかかる時点で使わない)\nTL50への道 現在、TL40です。基本は無課金なのでレイドx30で停滞中。\nやりたいレイドもないですし、そのうち上がるだろうと思ってたので、とくにレベル上げはしていませんでした。\nですが、12/14にワシボンが来るので、課金して狙ってみるのもいいかもしれないと少し思っています。\n下記のTL要件を読むと、TL41,47のレイドx30を課金すればレベルアップを早めることが可能です。課金なしなら2ヶ月かかります。\nhttps://pokemongo-get.com/pokego03487/\nTL50まで+2000万XP必要なのですが、TL48の2ヶ月で、TL50のXP要件をちょうど満たせそうなんですよね。\nこれが無課金でTL48まで4ヶ月以上かけるとなると、XPは少しオーバーしてしまう感じだと思う。\nさっさとTL50にしたい欲が増してる。\nプラチナメダルとか あと\n大親友x15, リトレーンx200, ロケット団x300, コイキングx30, ドラゴンx200\nあたりレベル上げしてるうちにいけそうな気もする。\n","description":"","formated_time":"2020-12-06","href":"https://syui.github.io/blog/post/2020/12/06/pogo/","tags":["pokemon"],"title":"ポケモンGo、最新情報と攻略情報","utc_time":"2020-12-06T00:00:00Z"},{"categories":null,"contents":"今回は、ポケマスでユウリが実装されたことと、そのイベントについての感想になります。\n内容を見た時、正直、これはひどいなって思いました。イベントを要約すると、課金してランキング上位に入らないと報酬がもらえないよ、という内容でした。\n私は無課金勢なので、ここらへんで引退しようと思ったんですけど、どうせなら楽しんだほうが得だと思いなおし、ちょっとだけ参加してみることにしたのです。そうすると、意外にも面白かったので、今回はそれについて考察したいと思います。\n私はまず貯まっていたダイヤを全部使ってガチャを引きました。20,000くらいありました。\nですが、これはちょっと危ないんですよね。\n今後、ポケマスがこういうゲームになっていくとして、仮にここで大当たりしてしまうと沼に引きずり込まれる危険があるのです。\nこの前はせっかく当たったのに、ここで落とすのは勿体無いとか思っちゃうんですよね。\nしたがって、本来はこのゲームはもうだめだなと思った時点で、貯まってたダイヤなんか全部捨ててやめちゃうのが最も合理的な判断だと思います。\nしかし、私はどうせなら最後まで楽しもうと思い、ガチャを引き、ユウリを1凸当て(かわいいので1枚は引いときたいというのもある)、ダイゴもミカンも持っていない中、できる限りポイントを上げてみることにしたのです。\n結果、初日は3000位くらいでした。ですが、おそらく最終日には6000位に入れるかどうか、かなり怪しいでしょう。予想では、12000位にも入れないと思う。めぼしい報酬は12000位までなんですよね。\n話を戻すと、今回のイベント、わりと面白いかもしれないと思いました。\nなぜなら、これまであまり使い道がなかったし、課金もされなかった要素が総動員で必要になったためです。具体的には、スタミナや装備、5凸、6EXなどなど。\nですから、今回のイベントは、楽しんでる人もそれなりにいるのではないかと思っています。これまで虚無マスとか言われていましたから。\n私の感想では、予想外だが面白い、でしょうか。\n売り上げ、増えるといいですね。\nあ、エンブレムは上書きするのがいいと思いますよ、ランキングのやつ。今の形式では重複してるみたいで見栄えも良くないですし、欠けが出るとモチベが下がりますし、上書きすることで上位者の栄誉も守れますからね。\n","description":"","formated_time":"2020-12-01","href":"https://syui.github.io/blog/post/2020/12/01/pokemas/","tags":["pokemon","pokemas","game"],"title":"ポケマス、ユウリの実装とイベント","utc_time":"2020-12-01T00:00:00Z"},{"categories":null,"contents":"新しいやつ描いてたのと、過去絵も納得いかないやつ修正とかしてた。\n/imgall\n","description":"","formated_time":"2020-11-30","href":"https://syui.github.io/blog/post/2020/11/30/illust/","tags":["illust"],"title":"イラストを描いてみた50,51","utc_time":"2020-11-30T00:00:00Z"},{"categories":null,"contents":"前回に引き続き、最近のポケモンGoはどんな感じなのか、最新の変化を踏まえ、うれしかったことなど書いていきたいと思います。\n今回はポジティブな内容となっております。\n交換範囲、最大40km以内に拡大(11/30までテスト) https://pokemongo-get.com/pokego03473/\n実は私、交換に関してだけはすごく運がいいんです。図鑑を埋められているのも、ほぼ交換によるものと言っても過言ではないでしょう。\n最近では、交換可能範囲が広がり、40km以内にいる相手(フレンド)との交換が可能となっていました。\n私の運がよかったのは、主に、交換相手。とてもいい人と当たる確率がすごく高かった。\nいや、高すぎると言っていいくらいで、現時点では100%の確率で、とてもいい人たちでした。\nこれは、掲示板などをみていると、私は運が良かっただけなのでしょう。うまくいかないことも結構多いらしい。\nポケモンGoでは、交換掲示板みたいなものがいくつかあって、そこに書き込んで、会ったりまたは非対面で交換したりするんですよね。\n私の交換相手になってくれた人は、運良くどの人も親切で、圧倒的にスムーズに交換を完了できることが多いんです。\nそういった関係で、今回の交換範囲の拡大期間でも、非常に良い体験でした。\nまあ、交換というのは、ちょっと疲れたり緊張したりするんですけど、例えば、相手に渡すポケモンちゃんといるよなと何度も確認したり、時間確認したりだとか。ですが、欲しいものも手に入り、相手もいい人で、そこまで大変というわけではありません。\n最近は、UEA(湖の神話)などの伝説ポケモンが海外フレンドとのリモート招待でゲットできたりとか、そういったうれしいことが多かったです。\n四季の実装 今回のアップデートで、私が最も期待しているのは、四季の実装です。\n春夏秋冬が3ヶ月ごとに設定されるらしい。これによってフィールドではどのような変化が訪れるのでしょうか。とても楽しみにしているのです。\n今までのフィールドの変化、天候もすばらしかったのですが、私は必ずしも現実と一致させる必要はないんじゃないかと思っていて、例えば、現実は夏でも、ゲーム内は冬で雪が降っているみたいなことがあっても面白いんじゃないと考えていました。\nまた、常にお天気APIから取得して反映するのも負担が大変そうですから、半分くらいランダムで決められた天候を表示するのもいいと思っています。\n今回の四季の実装は、必ずしも現実と一致させる方向でもないので、その辺で多少アバウトなフィールド体験をしてみたい。\n四季の実装では、道路や地面の色がちょっと変わったりするんでしょうか。秋だったら茶色やオレンジとかになるのかな。\nあと、雪や虹はほとんど見たことなかったので(現実に合わせるため)、発生頻度増えるとうれしい。\nすべて選択 ボックスで全て選択ができるようになりました。便利。\n私の場合は、nを日数0にキーボード登録して使っています。\nただ、誤爆の可能性が多少あるので気をつけましょう。\nまた、タグが実装される予定なので、さらに便利さが増しそうな予感。\n","description":"","formated_time":"2020-11-29","href":"https://syui.github.io/blog/post/2020/11/29/pogo/","tags":["pokemon"],"title":"ポケモンGo、最近うれしかったこと","utc_time":"2020-11-29T00:00:00Z"},{"categories":null,"contents":"前回に引き続き、最近のポケモンGoはどんな感じなのか。評価していきたいと思います。\n今回は少し厳しい意見を書いています。人によっては読まないことをお勧めします。\n育成 TL50が来るので、ポケモンの育成に関しても変化があります。アメXLなるものが実装されるらしい。\nしかし、最近のポケモンGoは完全におかしくなっちゃってるので、これについても、おそらく最悪なものになるだろうと考えています。\n詳しい理由は以下で説明しますが、メガシンカとGBLは完全な設計ミスでした。\nしたがって、ポケモンの育成についても、連動して最悪なものになると予想しています。\nメガシンカ メガシンカは様々なテコ入れ修正がありましたが、いまだにほとんど使われてないので、完全な失敗だったと思います。\n原作ポケモンのメガシンカといえば有名ですし、人気もあります。普通にやれば成功したはずの内容ですが、まさかここまで失敗しちゃうなんて\u0026hellip;。失敗するほうが難しいといえなくもない。\n個人的には、メガシンカは盛り上げてこそ、使われてこそだったと思います。\nこの問題を解消するには、ポケモンGoでも原作と同様、コストなしの条件、選択肢を追加する必要があります。\nそれでやっと使う人もでてくるでしょうね。\nGBL GBLで当初目標だったランク10に到達したので(といっても、シーズン5は勝利数で到達可能)、率直な感想を書きます。GBLとは、簡単にいうとPvPです。\n少し不快に思われるかもしれませんが、このGBL、客観的に評価すると、ここまでつまらないゲーム、ここまで深刻バグが多すぎる対戦ゲームはこれまでプレイしたことがありません。\n逆に質問しますけど、ここまでバグってる対人ゲーム、やったことあります？私はないです。おそらく、ほとんどの人がないでしょう。\n私もそれなりにバトル回数は重ねた上で評価しています。そうでないと正しい評価はできませんから。\nある程度、プレイした上でいいますが、GBLは、ポケモンGoのゲーム性に合っていません。これは、完全に設計ミスです。\n例えば、開発者のインタビューではこんなことが書かれています。\n記者:シーズン中に突然レートが変更される事態が発生しました。\nアレックス:シーズン3で低迷する状況が多発した結果、シミュレーションよりもランク10になる人の数が下回ってしまった\nhttps://app.famitsu.com/20201103_1719132/\nこれはありえないことですし、下手な嘘だと思います。シーズン3では誰もランク10に到達できず、シーズンの最後に突如レートが変更されることがありました。これによって何人かがランク10に到達。開発者のアレックスは「シュミレーション結果と異なり予想外だった」と述べているようです。しかし、そこまでバカな人間は存在しません。したがって、これは単なる思想の違いだったと私は思います。GBLは管理者権限を持つアレックスを頂点に、そのアレックスに認められた一部人間のみ褒賞を得ることができる仕組みで作られているのだと思います。そういった思想が垣間見える。根拠はいくつかありますが、数が減らされていたこと、レート操作されたこと、インタビューを読むとそのようなことが書かれていたことでしょうか。\n反対に下記のようなあつ森の開発者の素晴らしいインタビューがあります。とても良い内容なのでぜひ読んでみてください。\n『どうぶつの森』というゲームが特異なのは、そのような「機能性」でゲームを満たしていくだけではなく、その膨大なリソースの多くが、ほぼ「無機能」であるという点にある。\n『どうぶつの森』の大半の要素は「無機能」だからこそ良いのである。\n何故なら「無機能性」によって得られる「自由」があるからだ。\n「無機能性」、つまりはゲームにおいて何もできなくすることによって「自由」が得られる。\nhttps://news.denfaminicogamer.jp/column01/201013a\nこれは哲学であり、設計です。ポケモンGoも似たところがあり、本来は個人のライフスタイルや生活に溶け込むよう設計されていて、それが非常に良かった。私がポケモンGoを選択し、プレイしている理由です。\n逆に、バトルロイヤルのレート戦でずっと戦い続けるみたいなのは、このゲームに合いません。常にプレイヤー同士を戦わせ続けるというのは、個人の生活に馴染まない。ようは疲れちゃうんですよ。また、毎日のようにGBLの結果に感情を左右され、ストレスを受け続けるというのも感心しません。どう考えても不健康。\nですから、初期のポケモンGoにおいて、それぞれの要素は、そこまで意味を持ちませんでした。個体値もそうですが、個体値が結果に結びつく場面はほとんどありません。影響を及ぼさないよう設計されていました。\nそれでも、みんな高個体値を目指しました。そして、これは各人の意思で自由に決められたものでした。\nGBLのようにドーミラーがいなければ勝てないのでドーミラーを捕まえて育てたいとは思ってないけど育てるしかない、という状況とはまるで違います。\n相棒が拾ってくるアイテムなんかもそうですよね。意味がないからこそ、そこには自由がありました。このゲームは、その点がとくに優れており、すばらしかった。その意味で、ポケモンGoは、今までにないゲームでした。\n反対に、GBLのようなどこにでもあるレート対人ゲームは、最初は面白がって参加する人も多いのですが、次第に参加者が減り続け、最後には一部の人間だけのゲームになってしまいます。\n大多数のプレイヤーは養分に過ぎず、全体の0.001%に満たない特別なプレイヤーを崇めるためだけの仕組みであることに気づいてしまうからです。普通ならそれでいいんですけど、ポケモンGoは本来そういうゲームじゃないというのが私の考えです。\nこれまでのGBLは完全に設計ミスだったと私は思います。\nGBLは、最低限、レートを廃止し、勝利数でランクを決めるほうがいいでしょう。今のままでは不自由ですよ。\n私が考えるベストは、ランクも廃止して、GBLはマッチング処理のみを行い、勝利数のみを記録する方式です。\n","description":"","formated_time":"2020-11-28","href":"https://syui.github.io/blog/post/2020/11/28/pogo/","tags":["pokemon"],"title":"ポケモンGo、最新アップデートの評価","utc_time":"2020-11-28T00:00:00Z"},{"categories":null,"contents":"気になったことを適当に。\nTL50 ポケモンGoでTL50が解放されます。これまで最大はTL40でした。TLというのはトレーナーレベルのことで、ポケモンのレベルも同等に上げられるようになります。\nhttps://pokemongo-get.com/pokego03487/\n私は基本、無課金なので、レイドバトルで30回勝つは30日必要です。そのほか、ポケモンのGOスナップショット写真を7日間連続で撮る, 伝説ポケモンを5匹捕まえるなどを含めると、絶対日数がかかるものも多いので、頑張っても2,3ヶ月かかりそう。\nプラチナメダルに関しては、ジョギング, タマゴは振り子使うしかなさそう。コイキングはコイキング捕まえるしかないし、アイドル、ロケット団、リトレーンはTLタスクをやりながら頑張る。\nTL50とプラチナメダルの条件については、私はいいと思っています。少々厳しすぎる気もしますが、このゲームは年単位で達成する目標に設定しているのでしょう。個人のライフスタイルや生活に溶け込むよう設計されているゲームですから、このような目標は適切だと思います。\n私はエンジョイ勢ですから、基本的にはダラダラとサボりながら\u0026hellip;ごほん、コツコツとちょっとずつ続けてきましたが、1億XPは少しずつでも続けていれば達成できる経験値だと思います。\nもちろん、常にサボってるわけではなく、たまに頑張ること、特にイベントとかではありますけど、日頃は数分プレイしてるだけです。\nなので、今から始める人はきついかもしれませんが、ちょっとずつでも続けてきた人にとっては、到達可能な範囲だと思います。\nその他の進捗 ","description":"","formated_time":"2020-11-27","href":"https://syui.github.io/blog/post/2020/11/27/pogo/","tags":["pokemon"],"title":"ポケモンGo、TL50への道","utc_time":"2020-11-27T00:00:00Z"},{"categories":null,"contents":"私は、モンエナとかコーラが好きでよく飲んでたんだけど、体に良くないと思ってたので、3週間やめてみました。\nモンエナは1週間に1,2缶で、コーラは3,4缶くらい飲んでたかな。コーヒーも飲んでた時期が少しあったけど、今は飲まないようにしています。\nしかし、これでもかなりの我慢が必要だったので、別の方法を探しました。\nそこで、養命酒がいいという話を聞いたので、さっそく試してみたのですが、養命酒を代わりにすることで、やめられそうだなと、数週間やってみてそう感じたので、この記事を書いています。\nお酒は飲まないと決めている私ですが、養命酒は薬だからという理由でOKにしました。\n養命酒は、おいしいし、酔わないし(容量守ってれば普通は酔わないと思う)、特に問題ありません。また、実感として、モンエナやコーラより体に悪くなさそうに思います。\n私がジュースを飲んでたのは、ほっと一息ついたとき、コーヒーや紅茶やジュースなど、なにかが欲しくて、その穴をうまく埋めてくれたのかなあと思っています。\nなので、養命酒、いいですよ。\nあ、運転とかする人は気をつけて(飲まないように)。\n","description":"","formated_time":"2020-11-26","href":"https://syui.github.io/blog/post/2020/11/26/private/","tags":["private"],"title":"ジュースをやめられたかもしれない話","utc_time":"2020-11-26T00:00:00Z"},{"categories":null,"contents":"「5分おきに30秒の全力疾走」をはさむと最強コスパのトレーニングになるよ！ pic.twitter.com/ZO3B2ZzQuy\n\u0026mdash; ココロジー＠心が軽くなる心理学 (@Cocologyinfo) November 21, 2020 おもしろそうだったので、日課のランニングに30秒の全力疾走を取り入れて何日かやってみた。\n結構きついんだけど、終わった後はなんか気持ちいいので、ちょっとだけ続くかも。\nなお、自分は毎日6kmくらい走るんだけど、その中で4回全力疾走してる。5分おきかどうかは気にもしてないけど、できる範囲で全力疾走入れるようにした。\n","description":"","formated_time":"2020-11-25","href":"https://syui.github.io/blog/post/2020/11/25/private/","tags":["private"],"title":"ランニングに30秒の全力疾走を取り入れてみた","utc_time":"2020-11-25T00:00:00Z"},{"categories":null,"contents":"今回、ちょっと変わった方法(プロモーションコード)で衣装を受け取らないといけないので、早めにゲットしといたほうがいいかも。\nThe new Verizon mask and jacket avatar items are now available to ALL Trainers! Learn how to get yours here: https://t.co/zOC8t70l14 pic.twitter.com/FzVLRTsRgO\n\u0026mdash; Verizon (@Verizon) November 23, 2020 基本的には上のリンクを踏んで、ログインして、ゲームアカウント選ぶと衣装がゲームに送られる仕組み。企業とのコラボらしい。\n","description":"","formated_time":"2020-11-24","href":"https://syui.github.io/blog/post/2020/11/24/pogo/","tags":["pokemon"],"title":"ポケモンGoで特別な衣装をゲットしてみた","utc_time":"2020-11-24T00:00:00Z"},{"categories":null,"contents":"\ndelete : ~/Library/Developer/CoreSimulator\ninstall : command line tool for xcode 12.2\nbig surの不具合 現在確認してる不具合\n外部ディスプレイを一度でも接続すると日本語入力が激重になる 通常でもかなり遅く、SMCリセットなど様々な方法、設定を見直してみるものの直らない。Google日本語入力の再インストールも試してみた。\nこの現象は、以前のOSにアップグレードしたときに発生した起動がうまく行かなかったとき、再起動すると日本語入力が遅くなる現象に似てる気がする。なお、また再起動をかけると以前は直ってた。\n追記:Google日本語入力を消して、Appleのだけにして、再起動したあと、起動から15分くらい経過するとちょっとは快適になる模様。\nauto loginできなくなってる auto loginできなくなってる。\n追記:SMCリセット後に、なぜかauto loginできるようになった。ただし、SMCやったあとに本体が熱暴走するようになったので、もう一度、SMCをやると、熱暴走は収まったんだけど、再びauto loginされなくなった。\n管理者としては自動ログインできなくなってるのかもしれない。\nプライバシーの懸念など https://okuranagaimo.blogspot.com/2020/11/blog-post_14.html\nhttps://okuranagaimo.blogspot.com/2020/11/apple_15.html\nhttps://applech2.com/archives/20201116-about-apple-privacy-issue.html\nいろいろな意見はあるものの、個人的には、macにプライバシーは存在してないと思ってる。\nこれはxcodeを触ってる人ならわかるかもしれないけど。\nmacbook proで文鎮化 するらしいので、やめといたほうがいいみたい。\nvlcが動かない vlc 3.xの最新では、次の動画を再生するときに大音量で音がブツ切りされる不都合があるので、2.xにダウングレードしてたんだけど、それが動かなくなってる。\nインターフェイスにはTUIのncursesを使用してた。\nしたがって、動画もmpvに移行してみた。mpvは動画の倍速再生でオーディオの品質が悪いのであまり使いたくないのです。\n$ mpv -speed 3.5 --af=rubberband --audio-pitch-correction=yes $directory ","description":"","formated_time":"2020-11-13","href":"https://syui.github.io/blog/post/2020/11/13/mac/","tags":["mac"],"title":"macをbig surにupgradeした","utc_time":"2020-11-13T00:00:00Z"},{"categories":null,"contents":"microsoftの2FAアプリはinport, exportができるのでいいですね。\nhttps://support.microsoft.com/ja-jp/office/microsoft-authenticator-9783c865-0308-42fb-a519-8cf666fe0acc\nhttps://support.google.com/accounts/answer/1066447\n","description":"","formated_time":"2020-11-12","href":"https://syui.github.io/blog/post/2020/11/12/app/","tags":["ios"],"title":"2FAをgoogleからmicrosoftに移行した","utc_time":"2020-11-12T00:00:00Z"},{"categories":null,"contents":"\n/imgall\n","description":"","formated_time":"2020-11-11","href":"https://syui.github.io/blog/post/2020/11/11/illust/","tags":["illust"],"title":"イラストを描いてみた46-49","utc_time":"2020-11-11T00:00:00Z"},{"categories":null,"contents":" https://news.denfaminicogamer.jp/column01/201013a\nhttps://app.famitsu.com/20201103_1719132/\n","description":"","formated_time":"2020-11-08","href":"https://syui.github.io/blog/post/2020/11/08/pogo/","tags":["pokemon"],"title":"ポケモンGo、最近の進捗","utc_time":"2020-11-08T00:00:00Z"},{"categories":null,"contents":"過去のイラストを見て納得いかないところの修正してました。また、アイデア自体がよくないと思った場合、完全にイチから構築したやつも少しあります。\nちなみに、自分が一番気に入ってるのは、月のやつかな(どれだよ\n/imgall\n","description":"","formated_time":"2020-11-02","href":"https://syui.github.io/blog/post/2020/11/02/illust/","tags":["illust"],"title":"イラストを修正してみた3","utc_time":"2020-11-02T00:00:00Z"},{"categories":null,"contents":"ポケモンGoをプレイしている人にも、していない人にも向けたポケモンGoは最近どんな感じなのかを紹介する記事。\nプロフィール画像をちょっと差し替えた話 まずは、プロフィール画像をちょっと差し替えました。ポケモンGoをやってるよと書いてるんですけど、古くなってたので、ボックスでいい感じのポケモンをピックアップ。\n古い 新しい 図鑑の話 最近のポケモンGoは、pokemon gen6(第六世代)、つまり、XYZのポケモンが追加されはじめました。\nレイドアワーとコミュニティデイ 帽子のピカチュウが10/13で、ヒトカゲが10/17です。\nhttps://pokemongo-get.com/pokego02416/\n期間中にヒトカゲを進化させるとりゅうのいぶきを覚えます。おそらく、メガシンカXするとドラゴンタイプになるのでその辺。\n個人的には、メガリザードンX用に、わざマシンスペシャルを使って、ブラストバーンを覚えさせようと思っています。\nりゅうのいぶき, ブラストバーン, ドラゴンクロー\nメガリザードンYの場合は、昔からボックスにいるブラストバーン覚えたやつを使うことになりそう。こっちはりゅうのいぶきじゃないほうがいい。\nほのおのうず, ブラストバーン, ドラゴンクロー\n","description":"","formated_time":"2020-10-11","href":"https://syui.github.io/blog/post/2020/10/11/pogo/","tags":["pokemon"],"title":"ポケモンGoは最近どんな感じなのか","utc_time":"2020-10-11T00:00:00Z"},{"categories":null,"contents":"ポケマスにエンテイが復刻してたりとか色々あったので、少し感想を書きます。\nエンテイ自体は割と楽に勝てました。ただ、カメックスが1凸でかつEXではないので、そのへん強化したいと思ってます。EXだった場合は気迫+こらえるなのでとてもいいです。また、3凸だと全体回復できるので性能的にかなり変わってきます。天井まで351/400なので、無課金でたどり着けるかギリギリのところ。\nエンテイの復刻と報酬について エンテイのエンブレムは古参の証みたいな感じで機能していましたので、少し寂しい気もします。ですが、途中参加だった場合、取れるチャンスがあるというのは嬉しいですし、また、運営も使いまわしができるので、単純にいいことだと思いますね。\n復刻に関しては以上ですが、報酬に関しては問題があります。\nこれは、再び攻略した人も報酬を受け取れるようにしたほうがいいです。古参も気持ちよくプレイするために、ノビシロくらいはもらえるようにしたほうがいいと思います。\n星5確定チケット 新しいイベントに星5確定チケットというものが登場しています。これは必要ないと思います。\n以前の報酬だったノビシロのほうがいいでしょうね。ノビシロは普遍的に使えるアイテムですし。\nただし、星5確定チケットの内容にレッドやハロウィンアセロラなどが含まれるというなら話は別です。また、使いどころによって、その期間中の星5を含まれるというなら意味はあるかもしれません。\nしかし、現在の内容では、あまり意味があるとは思えませんね。よくないでしょう。\nゼニガメ事件 ゼニガメ事件というものがありました。\n私の意見ですが、こういうことはあり得ることですし、特に気にしていません。\n私は、ポケモンGoをプレイしていますが、ずっと何かしらバグっています。修正される気配はありませんし、補償も報告も全く無いですから、これくらいのミスは仕方ないと思います。頻度的に見ても問題があるとは思えませんね。\n","description":"","formated_time":"2020-10-08","href":"https://syui.github.io/blog/post/2020/10/08/pokemas/","tags":["pokemon","pokemas","game"],"title":"ポケマスにエンテイが復刻してる件","utc_time":"2020-10-08T00:00:00Z"},{"categories":null,"contents":"\n","description":"","formated_time":"2020-09-29","href":"https://syui.github.io/blog/post/2020/09/29/illust/","tags":["illust"],"title":"イラスト描いてみた45","utc_time":"2020-09-29T00:00:00Z"},{"categories":null,"contents":"最近、カメックスを狙ってガチャを回してるんだけど爆死中。それは置いといて、ハロウィンは、アセロラ\u0026amp;ミミッキュが来るという情報があって、これは嬉しい。\nただ、衣装がやっぱりなコスプレなので\u0026hellip;ダサい！と思ってしまった。やっぱり、難しいんでしょうね、ハロウィンとかクリスマスに合わせるの\u0026hellip;。\nあと、チャンピオンリーグなんかは毎回クリアしてるけど、自分は楽しんでます。\n簡単にクリアできるからつまらないっていう人もいますが、バトルヴィラでもリーグでも私は毎回、なんやかんやで面白がってクリアしていて、つまらなくはないかな。\nこれについては、ちょっと思ってることがあるのでそれについて書いていきたい。\n上級者に焦点を当ててしまってはいけない 簡単すぎてつまらない、もっと難しくて上級者でも楽しめるコンテンツを、という意見があります。\nしかし、私は、そこを基準にするとゲームは終わると思ってたりしますので、もちろん、そのゲームの性質にもよりますが、ポケマスでそれをやると、ダメだろうと思っています。どんどんプレイヤーが減り、終了するでしょう。\nなので、基本的には上級者のいうことは無視してかまわない。誰でも楽しめるゲームを作るほうがいいと考えています。\n上級者は文句を言いながらも楽しみ方を見つけ続けるものですし、ほうっておいても大丈夫だと思います。そういうもんです、ポケモンGo見てても。\nそんな感じなので、上級者を基準にゲームを作ってしまうといけません。\nただし、そんな人達も遊べるような場所は一つくらいあってもいいかもとは思っていて、次はそれについて。\n最難関マルチを1日1回 具体的にあるといいなと思っている仕組みは、最難関の協力プレイを1日1回だけ挑戦できるという内容のものです。\nなお、やり直しはできないようにします。中止したところでその日は終了。これは今までのバトルとは少し違いますね。今まではやり直しができました。\nまず、最難関をどうやって定義すればいいのでしょう。\nこれも簡単な話で既存の内容を使えばいいです。それを組み合わせるだけ。\n私なら「ソウリョクバトル + ソウリョクバトル + レジェンドバトル」を連続するという内容にします。\n所感で「これは流石にクリアできないでしょ」というレベルのものを設置して放置。\nすると、しばらく誰もクリアできない日が続きます。しかし、気にする必要はありません。やがて誰かが糸口を見つけるでしょう。クリアすると思います。これは1ヶ月スパンで見るのがいいかなと思います。1ヶ月クリアできなければ「ソウリョク + レジェンド」にします。\n報酬は特別なものを用意せずダイヤx10とかノビシロ銀とかにします。\nそんな感じのものをマルチに一つだけ置いておくといいんじゃないかと考えています。\nこれは長く回せる仕組みであり、ソウリョクバトルもレジェンドバトルもすでにあるものを使っており、報酬も継続可能だと思われます。\nもちろん、マルチってサーバーの負担にもなりますからお金がかかったりして大変かもしれません。ということで1日1回という制限をつけます。\nこれによってマッチングできない問題が発生するかもしれませんが、そこはプレイヤーが工夫すべき部分でしょう。\nなお、マッチングしない場合はNPCを与えるのではなく、マッチングを一度キャンセルする処理を行うのが妥当かと思います。1日1回の挑戦は貴重なので。\nこういうものが一つ用意してあるといいかもしれませんね。\n衣装を変更、設定する 次に同じキャラ間の衣装が変更、設定ができるようになるといいなと思っています。\nアセロラのハロウィン衣装を見て思ったんですが、個人的には、通常のアセロラ+ミミッキュの組み合わせで使いたいんですよね。\n6EXの衣装は素晴らしい仕組みですし、変更もできてカッコいいです。とはいえ同じキャラで変更できるバリエーションが増えるとさらに嬉しい。\n例えば、カミツレ\u0026amp;ロトムを使いたいけど、衣装があまりにいかがわしすぎるので、使いづらい。変更できないのだろうかみたいなことはあると思います。\nそういうケースも想定して、同じキャラに限り変更できるようになるといいなと思っています。\nまあ、私の場合、通常衣装のアセロラでミミッキュを使いたいってだけなんですけどね。\n","description":"","formated_time":"2020-09-28","href":"https://syui.github.io/blog/post/2020/09/28/pokemas/","tags":["pokemon","pokemas","game"],"title":"ポケマス最近の進捗と思ったこと","utc_time":"2020-09-28T00:00:00Z"},{"categories":null,"contents":"zennという投稿サービスが流行ってて、本形式の記事とかも販売できるようなので、とりあえずやってみました。\n最初に目指したのは、(1)最速で作ること、(2)表紙だけはそれっぽくすることの2つ。\nなので、直近に書いた技術系の記事をそのまま利用する形になったのと、あとは実験のために作曲というコードとは直接関係ないジャンルを投稿してみることにしました。\nで、今回もっとも挑戦的だったのが表紙の作成です。\n本形式の投稿というなら昔からgitbookを使ってたし、そこまで初体験でもないけれど、本の表紙みたいなものを作ったのはこれが初めてだったんじゃないかなと。\n作った表紙はこちら。\nコピーライトはいらないんじゃないかと思ったんだけど、そのままではそれがなにか分かりづらいし、「著者」とか入れるのもなんだしということで入れといた。\nそれぞれに工夫した点を挙げると、タイトルを考えるの割と大変でした。\n幅的なものを調整したりとか色々なんだけど、「コマンドラインツール」でいくか「CLIツール」でいくか「コマンドライン・インタフェース・ツール」でいくか、様々な選択肢がある中で、見栄えの良さを考慮した結果、「コマンドツール」になりました。\nで、上の部分と下の部分を分けて入力し、それぞれに幅を変えていますので、しっかりと長方形に収まっているというか一致するようになっています。\nボカロのほうは、そのまま書くと「で」だけうまく入らなかったので、スペース空けて丸で囲むことで、あくまでパッと見なんだけどいい感じになったんじゃないかなと。\nあと、フォントの囲みを白にしたのと、背景にちょっと被せる形にしたのが一番しっくり来た。\n背景については、それぞれ端末と音階を表現しています。色についても難しくて、うん、難しかった。\nボカロは初音ミクの緑っぽさを使った感じで、rustは、はじめ青で行こうと思ったんだけど、zennで見てみるとなんか違うってなったので、赤に変更。\n気になった方はちょっと覗いてみてくだされ。\nhttps://zenn.dev/syui\n","description":"","formated_time":"2020-09-23","href":"https://syui.github.io/blog/post/2020/09/23/zenn/","tags":["github"],"title":"本と本の表紙を作ってみた","utc_time":"2020-09-23T00:00:00Z"},{"categories":null,"contents":"興味ある人、いるかわからないけど、作品の設定資料を作ったので置いときます。\n/gamedoc\n","description":"","formated_time":"2020-09-20","href":"https://syui.github.io/blog/post/2020/09/20/game/","tags":["game"],"title":"秘密の設定資料を作ってみた","utc_time":"2020-09-20T00:00:00Z"},{"categories":null,"contents":"twitterとかyoutubeを見ていると、ポケマスの難易度について誤解が生まれ、それが新規参入の障壁になっていると思うので、少し語ってみることにします。\nポケマスの難易度については、それほど簡単ではないと思う。\n特にいま始めたばかりの人や無課金でやっている人だと、結構きついんじゃないかな。\n私自身は、簡単にクリアできているけれど、でもそれは単に昔からプレイしてて強いキャラがそろってたり、強化できてたりするからであって、基本、無課金勢や新規で始めたばかりの人は、レジェンドバトルのエクストラなんて難しいと感じるんじゃないかなと思います。\nだから、アグノムが難しい、クリアできないってのは別に恥ずかしいことではありません。\ntwitterやyoutubeを見ていると、あんなの簡単だよ、誰でもクリアできるよ、みたいな雰囲気があって、そういうのよくないと思います。\nそもそも、始めたばかりの人でも簡単に最高難易度をクリアできるってこと自体が普通じゃないです。それは、おかしいですよ。\nですから、難しい、クリアできない、という感覚が普通なのであって、簡単だという感覚のほうが間違っています。\n私も、エンテイのときとかめっちゃ苦戦した覚えがあって、当時は盾役で使えるのってミュウくらいしかいなかったので、マジできつかった思い出があったりします。\nエンテイのときは、1組でやらないとこちらがやられるみたいな状況で、2組目以降、一発で即死みたいな感じだった記憶があって、当時はバディズドロップとかもなかなか貯まってなくて、手持ちも今よりもっと少なかったと思うので、それが苦戦の要因でした。\n昔からプレイしてて、課金で強いキャラを当て、強化できている人にとっては簡単なのかもしれませんが、そうでない場合は、往々にして苦戦するもんなんじゃないかと思います。\nでも続けていればそのうちエンブレム星x4とかも取れるようになってくると思うので、めげずに頑張っていきましょー。以上です。\n","description":"","formated_time":"2020-09-18","href":"https://syui.github.io/blog/post/2020/09/18/pokemas/","tags":["pokemon","pokemas","game"],"title":"ポケマスの難易度について","utc_time":"2020-09-18T00:00:00Z"},{"categories":null,"contents":"ハロウィンでアセロラでも来たらダイヤ使おうかなと思っていましたが、グリーン\u0026amp;カメックスが上方修正されるようなので、方針転換して、3凸を目指そうかなと思います。期間中はこれにダイヤを使う予定。現在は1凸です。\n無課金でやってるので当たるのかはわかりませんが、1枚でも来れば、あとはメダルを集めて3凸は実現可能だと思う。\nそうすると、もしハロウィンでアセロラが来てもダイヤが貯まってないので引けませんけど、これがイベントでゲットできるやつであることを願う\u0026hellip;。\n以前は全部レッドにつぎ込んでいて、私のような無課金だと1年で1人強化するのが限界です。この1周年でレッドを強化できたので、次はグリーンにしようかなと思います。全部グリーンにノビシロとか6EXとかもつぎ込む予定。\nグリーンの6EXは、1度限りB技で気迫x2になるというもの。気迫とはB技後の威力上昇のことで、B技を打つごとに全体の威力が上がりますよね、あれのことです。\n運営はおそらく、このマサラ組を最強枠にするつもりだと思います。よって、マジコスのレッド、リーフ、グリーンを優先するのが正解だと思う。\nこの上方修正にあまり疑問はなく、グリーンってそこまで強くないなって感じでしたから、アイコンの表紙にもなってるので、これくらい強くてもいいんじゃないって思います。\n上方修正の内容について見ていきましょう。\n主に2凸で攻撃時30%で全体回復、3凸でダメージ時30%で全体回復が目玉でしょう。\nただし、これらの併用ができるかはわかりません。ボードの状況にもよるでしょう。おそらく、併用は無理なんじゃないかと。攻撃時全体回復にするか、ダメージ時全体回復にするかでタイプが分かれるのではないかと考えています。\nまた、フシギバナと組むのであれば、フシギバナで全体リジェネをかけ、カメックスでダメージ時全体回復+攻撃時ゲージ回復というタイプも考えられます。\n引いておきたい優先順位 Sランク : レッド\nAランク : リーフ、グリーン\nBランク : フウロ、セレナ、カミツレ(ロトム)、ナツメ、リーフ(イーブイ)、オーキド、グラジオ\n","description":"","formated_time":"2020-09-17","href":"https://syui.github.io/blog/post/2020/09/17/pokemas/","tags":["pokemon","pokemas","game"],"title":"ポケマス、方針転換でマジコスグリーンを狙ってみる","utc_time":"2020-09-17T00:00:00Z"},{"categories":null,"contents":"\n私は、セレナ、レッド、リーフ(イーブイ)の構成でいきました。\nレッド(リザードン)のボードでフレアドライブのダメージ軽減x2をとり、アグノム一回目のHP半分超え当たりのところでフレアドライブを打ちます。\n全体の流れとしては、セレナで睡眠、リーフでB技x2してバフしたあと、メガリザードンXにしてフレアドライブする感じで攻略しました。\n","description":"","formated_time":"2020-09-16","href":"https://syui.github.io/blog/post/2020/09/16/pokemas/","tags":["pokemon","pokemas","game"],"title":"ポケマス、アグノムの攻略法","utc_time":"2020-09-16T00:00:00Z"},{"categories":null,"contents":"\n","description":"","formated_time":"2020-09-15","href":"https://syui.github.io/blog/post/2020/09/15/illust/","tags":["illust"],"title":"イラスト描いてみた44","utc_time":"2020-09-15T00:00:00Z"},{"categories":null,"contents":"重い腰を上げてエンブレム取ってた 星1とかのエンブレムは取ってなくて、放置してたんだけど、このゲーム、続きそうな気がしたので、重い腰を上げてエンブレム取ってた。\n富豪(コイン)は道具交換で進化の石を売りつけたりするといいよ。\nワタル持ってないんで、カイリューのはかいこうせんのやつだけ取れてないんだけど、取得する手段はあるので、こういうのは否定的ではない。\nこういう遊び心はゲームにあったほうがいいので、ポケモン好きな人が好き勝手作ればいいと思ってたりするので、この程度のことは許容範囲内だと思う。(ワタル持ってない人は基本取れないので否定的な意見もある\n取得する手段は、twitterとかでマルチの協力を得て、はかいこうせんを打ってもらうというのが考えられる。\nなので特に気にしてない。\nガチャの天井でセレナを引く 私は無課金でやってるんだけど、基本的にはガチャを引かない。\n引いた覚えがあるのはレッドのときとかレッドのときくらいかな。\n大半はイベント時にゲットできる限定バディーズを使ってクリアしてきた。ミュウとかミュウツーとかパルキアとか。\nただし、ここぞというときは貯めてたダイヤを放出することがあり、今回も1周年で登場したマサラ組に全部使ってしまった。\n後悔はしてないし、目標は達成したので、すごく嬉しかった。\nで、今回はリーフとグリーンを当てることが目的だったんだけど、それを達成したあと、リーフがもう少しで天井だったので、天井を使ってリーフを凸しといたほうがいいかもと思い、追加で10連を回してみた。\nすると、リーフが連続で当たり、リーフ凸3になるという強運。\nしかも天井に到達したので、そこで初セレナを引くことにした。楽しい。\nここからまたダイヤの貯蓄に移行。\nレッドの次にお気に入りのアセロラでも来たら使おうかなと思ったりしてる。\nスタミナ制度のおかげで毎日ログインしてるんだけど、ちょっとした作業で80ダイヤがもらえるのでそれをやってる。\nあとバトルヴィラをクリアしとくと貰えるので毎回クリアするといいよ。\nメイの6EX メイを6EXにした。今回のイベントでできるようになってるので、こういうときはやっとかないとね。\n6EXは何か特別感があっていいね。今後の6EXが楽しみ。\nタマゴの色違い 50くらい割ったんだけど、色違いは一匹も出てなかったりする。\n色違いは低確率なのが普通だし、特に気にしてない。\n毎回、色違いが出るか否かのドキドキを楽しませてもらってるよ。\nポケマスはプレイしてて普通にたのしい。\nこのゲーム、人気出てほしいな。\nちょっと思ってること さて、このゲームでちょっと思ったことを適当に書いていきたい。\nこのゲーム、私がガチャを当てたことでも分かる通り、かなり高確率であたりが出るようになっているんじゃないかと思っている。\nつまり、今回のイベントで脱落する人も比較的少なかったのではないかと予想している。\nそして、バトルヴィラやチャンピオンリーグなどの素晴らしい仕組みがある。ここで、強い当たりキャラを腕試しできる機会が定期的にやってくるわけだ。\n強いキャラを使い、勝てる、楽しい、となるので、その時点でゲームとして成功していると思う。\nまた、コンプ要素のあるエンブレム、タマゴ、6EXなどが揃っていて、これらは課金要素を含む。\nつまり、長続きしそうな要素があると思う。\nなので、このゲーム、思った以上に長続きするかもしれないと思いはじめている。\n","description":"","formated_time":"2020-09-14","href":"https://syui.github.io/blog/post/2020/09/14/pokemas/","tags":["pokemon","pokemas","game"],"title":"ポケマス、最近の進捗","utc_time":"2020-09-14T00:00:00Z"},{"categories":null,"contents":"\n","description":"","formated_time":"2020-09-13","href":"https://syui.github.io/blog/post/2020/09/13/illust/","tags":["illust"],"title":"イラスト描いてみた43","utc_time":"2020-09-13T00:00:00Z"},{"categories":null,"contents":"\n","description":"","formated_time":"2020-09-12","href":"https://syui.github.io/blog/post/2020/09/12/illust/","tags":["illust"],"title":"イラスト描いてみた42","utc_time":"2020-09-12T00:00:00Z"},{"categories":null,"contents":"\n","description":"","formated_time":"2020-09-11","href":"https://syui.github.io/blog/post/2020/09/11/illust/","tags":["illust"],"title":"イラスト描いてみた41","utc_time":"2020-09-11T00:00:00Z"},{"categories":null,"contents":"\n","description":"","formated_time":"2020-09-10","href":"https://syui.github.io/blog/post/2020/09/10/illust/","tags":["illust"],"title":"イラスト描いてみた40","utc_time":"2020-09-10T00:00:00Z"},{"categories":null,"contents":"好きなトレーナーやポケモンを使って好きに進めればいいんじゃない、楽しむことが重要。\n\u0026hellip;と、思いますが、何をやったらいいのかわからない人向けにポケマスの進め方を解説してみます。\nエンブレムを取ろう とりあえず星4のエンブレムを目標にやっていくのがいいですね。\n育てよう まずは、オーキド(ミュウ)とフウロ(スワンナ)を育てましょう。最強キャラです。\nレベルを上げ、ボードを埋めればいいでしょう。\nポケマスは、盾役と回復役、攻撃役にタイプが分かれます。というよりこのように役割を当てはめてパーティーを組んだほうがいい。\n例えば、ミュウは盾役で使うと強いです。サポート、攻撃にも使えますが、ミュウと互角の盾役はグリーン(カメックス)くらい。また、スワンナは回復役として優秀です。\n次に、ガチャを狙いましょう。狙うのはマジコスのレッド、グリーン、リーフです。\nこいつらを育てれば間違いありません。\n構成として初心者におすすめなのは盾役にオーキド、攻撃役にレッド、回復役にフウロです。これで最低限の安定はするはず。\n上記ほどではありませんが、他におすすめなのはリーフ(イーブイ)、ナツメ(フーディン)、カミツレ(ロトム)です。\nただ、ガチャが当たらなかった、無課金でやりたいという人は、他のキャラでも攻略可能です。限定キャラが配布される期間があって、その期間にゲットできるやつは強いですね。例えば、この前まで配布されてたパルキアとか。\n続けること 続けることが重要です。\n私は、過去にレッドを確定で当てました。\nレッドが出てきたときのためにずっとダイヤを貯めていたのですが、時が来てそれを全部使っても、ガチャでレッド(当たり)を引くことができませんでした。\nしかし、ポケマスには期間限定の上限が設定されており、期間中これだけダイヤを使うと好きなカードを1枚選べるよ、となっていたので、そこでレッドを引きました。\nしかし、このときレッドは凸1です。凸は重複のことで、カードを重複するとボードを開放できます。3枚重複すると最大まで強化できる仕組み。\nつまり、私のレッドは確定で当てた1枚だけだったので、レッドの中では一番弱かったのです。\nその後も続けていると、アメというアイテムがもらえることがありました。アメを使うと一つのカードを重複できるようになります。\nこれを使って今ではレッドを凸3にまで強化できています。\nということで、このゲームは結構良心的なので、続けていればきっといいことあります。ガチャを当てられたり、強化できたりとか。\nスタミナの可否 スタミナ制度が導入され、否定的な意見が目立ちます。しかし、私はこの制度には肯定的なので、個人的な意見を述べます。\nまずスタミナがなぜ導入されたかというと、スキップできるようになったからでしょう。\nそして、スキップできるようになったのは、私のようなユーザーにとって非常にありがたいものでした。\n私はそれほど熱心にプレイしているユーザーとは言えず、過去には一気にレベル上げをしてそのまま放置、ログインしない状態が長く続きました。\nそれを変えたのがスタミナ制度の導入です。\nスタミナが導入されてからは、毎日のようにログインするようになりました。\nそれに、1日でレベルMAXにできるようなゲームはよくないんじゃない、ということです。仮にスタミナが廃止された場合、簡単にMAXにできてしまう。\nしかし、それはゲームとしてちょっとおかしい。毎日やってるうちに強くなっていくほうがいいんじゃないかな。\nということで、スタミナには賛成ですし、良かったと思ってます。\nチャンピオンバトル2回目 新しいチャンピオンバトルが来てたのでクリアしてみました。この仕組みはある程度運営が放っておいても回せそうなのでいいと思います。楽しいし。\n今回追加できたの3タイプくらいでした。あと7タイプ！\n6EX 6EXの仕組みはすごくいいです。欲しくなりますが、そこまで課金圧が強いわけでもありません。そのことについて思ったことを書いてみます。\n今は収益はどうなのかわかりませんが、将来的にこれは増えていくんじゃないかと思っていて、仕組みが非常にいいんですよ。よく考えられている。\n6EXの仕組みとしては、衣装なんですよね。今までにない衣装ということで例えばお気に入りのトレーナーがいるとして、どんなのが来るのかワクワクしません？あと必殺技が強くなったりもしますが、やっぱり衣装だと思う。これもとに戻せるんですが、マルチでやるとやっぱりEXの人が多い。\nこういったちょっとだけ他の人に見せびらかせるというのもポイントで、プロフィールに載せられたりとかするんですよね。あとエンブレムも載るのでこれもすごくいい仕組みです。\n6EXにする大変さとかもちょうどいい感じで、あとゲーム攻略には少しだけしか関係しないというのも大きい。B技が強くなるというのはちょっとだけ関係しますが、でもオリジナルの衣装に課金を組み込むのは正解で、これはすごく欲しくなるなって思うのです。\n今後はEXとかタマゴの色違いを集める人が増えてきて、そういうのを狙う人が多くなるんじゃないかな。それはおまけみたいな要素ですけど、継続した収益化につながるんじゃないかと思います。\nただまあ個人的にはすごく嬉しいEXですが、収益化としてはちょっと弱い部分はあるかもとは思っていて、それについて解説します。\n例えば、私なら6EXにした時点で1/20のガチャを組み込むと思います。6EXの素材を集めて6EXにします、そのとき抽選が行われ個体値が20段階でランダムで決まります。ここで個体値20(MAX)ならポケモンのステータスに+20、個体値が1なら+1されるというようにするかもしれません。仮にトレーナー個体値ぽい何かが実装されたとしてその場合の具体的な仕組みはポテンシャルを引用するでしょうね。書き換えますか？みたいな。\nこれなら例えば私のようなレッドさえ6EXにしたらあとはいいか、と思っているような人も、何度かレッドを6EXにしてよい個体値をゲットしようとするかもしれませんよね。または一人6EXにしたら次のキャラにいこうっていう人もいるでしょう。ちなみに20段階の個体値は5段階でもいいし、10段階でもいいですが、少ないほうが良心的と言えるでしょう。\n今のポケマスは非常に良心的でいいゲームです。が、収益化にはちょっと弱いかも。その場合はトレーナー個体値ぽいものを実装するといいかも。今後、EXを増やしていくんでしょうけど、でも人気のキャラは限られているし、コンプ勢はそこまで多くない気もするので。\nですが、今の6EXの仕組みがイコールで悪い結果になるとは限りません。多くの人が納得するよい仕組みでとりあえず遊んでもらって興味を持ってもらう、それを損なわないような設計のほうがよい結果になるかもしれません。とりあえず、現状では6EXは欲しくなるし非常にいい仕組みだと思います。関係ありませんが、今の6EXはカードの裏に引いたときに出てくる風景が載せられてるのとかもカッコいい。\nあと、細かいかもしれませんが、6EXを使った場合、登場時に何らかのエフェクトがちょっと欲しいかもって思いました。色違いエフェクトっぽい何か。\n","description":"","formated_time":"2020-09-09","href":"https://syui.github.io/blog/post/2020/09/09/pokemas/","tags":["pokemon","pokemas","game"],"title":"ポケマスの進め方","utc_time":"2020-09-09T00:00:00Z"},{"categories":null,"contents":" 何かの記念日等に使用したい変身アイコン。1日だけちょっとアイコンが変化したりするの。\nクリスマスとか正月とか、あとは作品キャラの誕生日とかに1日だけ設定しようかなって思ったりしてます。\nキャラ、プロフィールが決まってるのもあれば決まってないのもありますが、ちょびっとだけ紹介すると\n月見唯 : 身長 123cm, 誕生日 1/23\nポンタ : 身長 166cm, 誕生日 6/6\nキョウスケ : 身長 171cm, 誕生日 7/1\nとなってます。というか忘れそうなので、どっかに設定資料作りたい\u0026hellip;。\n","description":"","formated_time":"2020-09-08","href":"https://syui.github.io/blog/post/2020/09/08/icon/","tags":["icon"],"title":"特製のアイコンを作ってみた","utc_time":"2020-09-08T00:00:00Z"},{"categories":null,"contents":"\n","description":"","formated_time":"2020-09-07","href":"https://syui.github.io/blog/post/2020/09/07/illust/","tags":["illust"],"title":"イラスト描いてみた39","utc_time":"2020-09-07T00:00:00Z"},{"categories":null,"contents":"何かのはずみでランク9に到達しちゃいました。\nこれ運ゲーなので運が良かっただけなんですけどね。\n","description":"","formated_time":"2020-09-06","href":"https://syui.github.io/blog/post/2020/09/06/pogo/","tags":["pokemon"],"title":"ポケモンGo、シーズン3","utc_time":"2020-09-06T00:00:00Z"},{"categories":null,"contents":"\n","description":"","formated_time":"2020-09-05","href":"https://syui.github.io/blog/post/2020/09/05/illust/","tags":["illust"],"title":"イラスト描いてみた38","utc_time":"2020-09-05T00:00:00Z"},{"categories":null,"contents":"\n","description":"","formated_time":"2020-09-04","href":"https://syui.github.io/blog/post/2020/09/04/illust/","tags":["illust"],"title":"イラスト描いてみた37","utc_time":"2020-09-04T00:00:00Z"},{"categories":null,"contents":"\n","description":"","formated_time":"2020-09-03","href":"https://syui.github.io/blog/post/2020/09/03/illust/","tags":["illust"],"title":"イラスト描いてみた36","utc_time":"2020-09-03T00:00:00Z"},{"categories":null,"contents":"ポケモンGoをプレイしてて思ったことや最新の話題など。\nGBLについて 今シーズンは、初期レート1900で始まりました。あまりやる気がなかったのですが、2400に到達後、2300に下がり、このあたりでやめようという結論になりました。色々と問題はありすぎますが、面白くないという一言に尽きます。\n少し前まで誰もランク10に到達できない状況でしたが、Nianticがこれはまずいと思ったのでしょう。レートの上がり下がりの値がなぜか変更され、その直後、ランク10の到達がちらほら出ました。現在は4-1や5-0で上下幅がアップしています。シーズン中に基準を変更するのありえない。\nPokemon CompanyがNianticに与える影響 Pokemon CompanyがNianticに与える影響について話題になっていました。\nhttps://www.reddit.com/r/TheSilphRoad/comments/ika0qa/whats_the_pokemon_company_relationship_with/\n私の考えでは、Pokemon Company(以下、pokec)は、Niantic(以下、nian)にキャラクター等を使用する許可を与え、それをどのように使うかは、ある程度の裁量をもってnianが行うものだと考えています。\n根拠は色々ありますが、例えば、Pokemon Mastersというゲームがあります。どちらもpokecが関係していますが、仮にすべてをpokecがコントロールしているのなら、メガシンカにも両者に違いはでなかったはずではありませんか？\nしかし、メガ進化は両者で大きく異なります。\nまた、nianの人がインタビューに応じていて、内容は下記になります。\nhttps://www.vg247.com/2020/08/26/pokemon-go-mega-evolutions-mega-raids-mega-energy/\n“We don’t think it’s a good experience if there’s like 10 different Raids that you want to do all at once – we’ve seen that in the past with Legendaries,” Matthew Slemon, senior product manager at Niantic, said.\n“So we figured the best way to do that was start with a smaller batch and continue rotating in different Mega Pokemon.”\n彼らはある考えを持っており、その考えがゲームで実装されているようです。\nこれはnianの社員さんですよね？pokecの人ではないと思います。仮にpokecがすべてを管理しコントロールしてポケモンGoのメガシンカを実装したのであれば、このインタビューはかなり矛盾しているようです。\nポケモンGoのメガシンカはnianの人が考えたと思います。\nメガが炎上しまくってる件 メガ進化の話題は、あらゆる意味で炎上しまくってます。9月のメガイベントもメガ炎上中です。\nhttps://www.reddit.com/r/TheSilphRoad/comments/ikmuzo/there_is_no_way_to_know_the_value_of_the_mega/\nhttps://www.reddit.com/r/TheSilphRoad/comments/ihso8d/the_limits_on_mega_evolutions_makes_them/\nメガシンカは、2回目以降、ノーコストにするのが望ましいでしょう。そもそも初回はコストがかかり課金要素です。2回目以降ノーコストになる条件は何でも良いですけど、最も適切なのが相棒度をMAXまで上げることだと思います。これは原作の設定に基づいてること、MAXにあげるまで相当期間がかかること、短縮するには課金要素が存在することなどから、このように考えます。\nこれは今すぐにでも実装できると思います。今のメガレイドやシステムを変更する必要はなく、2回目以降50コストになっていた部分を条件付きで0コストに変更するだけです。条件は相棒度MAXであること。これも容易に取得できるはず。\nこの程度の案はすでに出ていたはずだと思いますけどね\u0026hellip;。一応、下記にフィードバックを送れるようです。\nhttps://www.reddit.com/r/TheSilphRoad/comments/iifbw8/trainers_we_are_excited_that_we_were_able_to/\nhttps://www.reddit.com/r/TheSilphRoad/comments/iic3mg/for_everyone_giving_their_magic_fixes_to_the_new/g36b8we/\n個人的な改善案の問題点 メガシンカは、2回目以降、ノーコスト。条件は相棒MAX\n私の案の利点は、単純かつ明快であることです。簡単に実装可能でしょう。今のシステムを変更する必要もありません。\n次に、私の案の問題点は、現在のメガシンカに4時間制限があることです。現在、メガシンカすると4時間維持され、その後もとに戻ります。\nつまり、ノーコストでもそうなのか？という問題です。\n答えとしては「はい」あるいは「どっちでもいい」です。初回は複雑なことをやるべきではありません。要点のみ修正すべきです。要点とは、2回目以降のコストをゼロにすることです。\nですから、4時間制限はどっちでもいいのです。そこは問題ではありません。\nですが、その後において、つまり、最低限修正すべきところを修正したあとは、この4時間制限について考え直してみてもいいかもしれません。1時間にするとかですね、色々。\nただし、時間を短くするにしても大切なことがあって、それは「プレイヤーがメガシンカをコントロールできているという感覚を損なわないようにすること」です。\nプレイヤーにとっては、メガシンカしたいときにでき、メガをコントロールしているという感覚がなにより重要になってきます。\n本来はバトルのためのものですから、バトルにおいてメガシンカしたいときにできる、そういう仕様でなければいけません。\nバトルのためということで、大体のバトル時間である5分とか10分でもいいかもしれませんね。ボックス上で確認できたりする時間はおまけみたいなもんでしょう。\nプレイヤーはバトルに入る前にメガ進化させる。バトルする。少しの間、ボックスとか相棒で外での姿が見れる。メガ進化がもとに戻る。このような流れが自然です。ですから、時間制限はバトル時間以上であれば、どうでもいいのです。\nどうせバトルではメガポケは1匹しか使えない仕様ですし、相棒MAXも相当大変ですからね。メガポケモンすべてを相棒MAXにできてる人なんてほとんどいないでしょう。\n","description":"","formated_time":"2020-09-02","href":"https://syui.github.io/blog/post/2020/09/02/pogo/","tags":["pokemon"],"title":"ポケモンGo、最近の動向について語ってみる","utc_time":"2020-09-02T00:00:00Z"},{"categories":null,"contents":"ポケモンGoのメガシンカの問題点を簡潔にまとめます。\nまず原作やアニメを知らない人のために原作やアニメでのメガシンカはどういったものだったのか説明します。\nメガシンカは、メガストーンというアイテムをポケモンに持たせると、バトル中にメガシンカできるようになります。これは何度でもできますし、コストはかかりません。バトル中のみということで、主に、バトルのための進化であると考えられます。アニメでは、色々な人が相棒のポケモンをメガシンカさせています。原作にある伝承によると「ポケモンとの絆が重要」と書かれています。\nまとめると、メガストーンという道具が必要、何度でも行える、バトルのための設定である、ポケモンとの絆が重要らしくアニメでは相棒ポケモンに限られている、あたりがポイントです。\nポケモンGoのメガシンカはどうなったかというと、メガエナジーというものを集める必要があり、レイド(1回120円)を何度も行うことで集められます。一度進化すると200個や50個のメガエナジーが消費され、時間経過でもとに戻ります。なお、元に戻ったらまたメガエナジーを集め、それを消費しなければメガシンカできません。さらに、メガエナジーはポケモンごとに存在するため、当該メガエナジーは当該レイドでしか得られません。\nすべての要素が当てはまってないじゃないか\u0026hellip;どうしてこうなった。\nこれのどこが問題なのか簡潔に説明します。\nまず、ポケモンGoでは、メガシンカ1回ごとにとてつもないコストがかかってくるということです。\nそのため多くの人は、図鑑を埋めることくらいにしかメガシンカを使わないだろうと思います。本来、バトルのためのメガシンカですが、ポケモンGoでは、図鑑を埋めるために2,3回実行されるだけのものになるでしょう。\n次に、メガシンカのコストについて説明します。単純計算ですが、最初に200、次から50のコストがかかるとしましょう。1レイドに付き30集められます。時間経過でもとに戻ることを考慮して、仮に1週間メガシンカを堪能したとしましょう。メガシンカできるポケモンは48種類です。メガ進化できるポケモンを1週間メガシンカ維持したとして7+2x6x6x48=3463のレイドが必要になります。最初の7回のレイド、次からは一回につき2回のレイドで、それが6日。さらに4時間で元に戻るため24時間維持するとして、24/4=x6、メガ進化できるポケモンは合計で48種類なのでx48。つまり、1週間メガシンカを堪能する場合、ポケモンGoでは、3463のレイドをこなしメガエナジーを集める必要があります。レイド一回に付き120円なので、かなり大雑把ですが、多めに見積もると1週間で3463x120=415560の費用がかかってくる計算です。約41万円ですね。計算違いかもしれませんが、Nianticのことなのであり得ると思います。ちなみに、1ヶ月なら166万円。\nつまり、メガシンカを常用しようとすると、ありえないほどのコストがかかってくるということです。これでは誰もメガシンカを使わないし、楽しめないと思うよ。\nメガエナジーはポケモンごとに存在するため、全部で48種類のレイドを何度もこなす必要が出てきます。しかし、一斉に全種類ということはないでしょう。期間に分けてレイドを開催するはずです。すると、その期間中にしかそのポケモンのメガエナジーを集められないため、そのポケモンしかメガシンカできないということになります。仮にエナジーを貯蓄している人がいたとしても、使ったらなくなるし、貴重だし、数時間で解除される進化のためにはもったいないので使えませんし、普通、使いません。\nとすると、最初に述べたように「図鑑を埋めることくらいにしかメガシンカは実行されず、最高でも2,3回実行されて終わりだろう」ということになります。\n原作と比較しても、普通に考えても、ポケモンGoのメガシンカは、ありえないほど不自由で面白くない設計になっています。これを修正するには、一度メガシンカしたポケモンは、ノーコストでメガシンカできるようにしてください。\n今のままでは、メガシンカは面白くありませんし、使われることもないでしょう。Nianticにとっては金儲けのためのメガシンカですが、正直、この設計ではまずいと思います。\n個人的な話 個人的には、メガシンカは、図鑑を埋めるためにやって終わります。\n本来ならバトルに使えるはずだったはずのメガシンカですが、ポケモンGoではバトルで常用するなんてできませんね。メガエナジーは取っておく選択になるでしょう。今後レイドが入れ替わるタイミングで集めることすらできなくなります。ポケモンごとに違いますからね。\nさて、私は、一応、メガシンカさせるポケモンを相棒ポケモンに限定してやっていくつもりです。\n何故かと言うと、まだ相棒ポケモンの線は消えていないと考えるからです。\n現在のメガシンカの仕組みはおかしすぎるので、修正される可能性はあると思っていて、その場合、誰もが納得できる形でとなると、やはり原作やアニメにも沿った相棒ポケモンが絡んでくる可能性は高い。今後、最高の相棒はノーコストみたいになる可能性はあると思います。なので一応、最高の相棒をメガシンカするつもり。\n参考 : https://pokemongo-get.com/pokego03342/\n","description":"","formated_time":"2020-08-29","href":"https://syui.github.io/blog/post/2020/08/29/pogo/","tags":["pokemon"],"title":"ポケモンGoのメガシンカの問題点","utc_time":"2020-08-29T00:00:00Z"},{"categories":null,"contents":"今回は、ポケマスがすげー楽しかった話。\n私はそれほど熱心にログインしてるユーザーではありませんが、レッドが出るぞとか、あるいは1周年だとか、そういったときにはログインしてプレイしてるユーザーです。\n今回は、1周年ということで、すごく楽しかった。運が良かったというのもありますが、ポケマス1周年のプレイ日記です。\nレジェンドチームを1発1組で突破した 一番最初は、レジェンドチームのバトルがあったんで、何気なしにやってると、まさかの1発、1組、しかも誰も死なずに突破しました。\nこれは気持ちよかった。毎回この1組で突破してる気もするんですが、1発で突破というのはなかった気がする。\nいつもと同じくリーフ+レッド+オーキドの構成です。スピードスターで回避上げて、リーフのB技で能力アップやってました。\nチャンピオンバトル チャンピオンバトルは、説明とか読んでなかったので、初っ端からリーフ+レッド+オーキドをカンナにぶつけてしまって、すごく苦戦しました。一度使ったやつは使えないらしい。\n私は、これ以外のバディーズ、あまり使ってないし、育ててなかったので、正直、きつかった。今回、急遽育てたのもいくつかありました。シバが一番手こずったかな。\nそれにしても、「殿堂入りおめでとう」ってのがなんか嬉しいもんだね。楽しかった。\nリーフとグリーン(海外ではブルー)が当たった ダイヤは3万貯まってたので全部使っちゃったけど、狙いのリーフとグリーンが結構早めに出てくれたので嬉しかった。\nというか1万ほどで出たんだけど、ボード開放するため重複したかったので残りの2万も使ったけど、重複は来なかった。\nいやいや、1枚出ただけでも十分です。\nレッドがEXバージョンになった レッドがEXバージョンに強化できました。今まで素材は全部レッドにつぎ込んでたのがよかったらしい。\nというわけで、今日はポケマスをプレイしてましたが、めちゃくちゃ楽しかった。\n","description":"","formated_time":"2020-08-28","href":"https://syui.github.io/blog/post/2020/08/28/pokemas/","tags":["pokemon","pokemas","game"],"title":"ポケマスが楽しかった","utc_time":"2020-08-28T00:00:00Z"},{"categories":null,"contents":"\n/imgall\nお絵きをはじめて35枚目のイラストとなりました。描き直したやつとかも入れるともっとですが、ナンバリングでは35枚目らしい。かなりの数になったなあと少し感慨深いです。\n全部の絵は、自由に好き勝手に描いてきました。\nこれからもそんな感じになると思いますが、よろしくお願いします。\n","description":"","formated_time":"2020-08-27","href":"https://syui.github.io/blog/post/2020/08/27/illust/","tags":["illust"],"title":"イラスト描いてみた35","utc_time":"2020-08-27T00:00:00Z"},{"categories":null,"contents":"\n/imgall\n","description":"","formated_time":"2020-08-26","href":"https://syui.github.io/blog/post/2020/08/26/illust/","tags":["illust"],"title":"イラスト描いてみた34","utc_time":"2020-08-26T00:00:00Z"},{"categories":null,"contents":"\n/imgall\n","description":"","formated_time":"2020-08-25","href":"https://syui.github.io/blog/post/2020/08/25/illust/","tags":["illust"],"title":"イラスト描いてみた33","utc_time":"2020-08-25T00:00:00Z"},{"categories":null,"contents":"\n/imgall\n","description":"","formated_time":"2020-08-24","href":"https://syui.github.io/blog/post/2020/08/24/illust/","tags":["illust"],"title":"イラスト描いてみた32","utc_time":"2020-08-24T00:00:00Z"},{"categories":null,"contents":"パッと見たとき、うーんと思ってたやつで、最近、一枚絵を描いてなかったので描き直してみた。新しいの描けよって話なんだけど、ほぼ全部書き直しなので、新しい一枚絵のようなもんだと思う。次からは新しい数字で更新できそう。\n","description":"","formated_time":"2020-08-22","href":"https://syui.github.io/blog/post/2020/08/22/illust/","tags":["illust"],"title":"イラスト30を描き直した","utc_time":"2020-08-22T00:00:00Z"},{"categories":null,"contents":"新しいイラストを描いてみた。\n","description":"","formated_time":"2020-08-22","href":"https://syui.github.io/blog/post/2020/08/22/illust2/","tags":["illust"],"title":"イラスト描いてみた31","utc_time":"2020-08-22T00:00:00Z"},{"categories":null,"contents":"以前描いた漫画をrewriteしててやっと既存の3話まで完成しました。\n読み直してみて、完璧に納得してるわけではないですけど、前よりはいいものに仕上がったのではないかと思います。\nこれからはもう少し丁寧に描こうと思ったのでした。以上。\n","description":"","formated_time":"2020-08-22","href":"https://syui.github.io/blog/post/2020/08/22/manga/","tags":["manga"],"title":"やっと3話まで完成した","utc_time":"2020-08-22T00:00:00Z"},{"categories":null,"contents":"ポケマスをちょっとだけやってて、今度、1周年みたいで、レッドを強化できるみたいな話があって、楽しみです。\nhttps://pokemonmasters-game.com/ja-JP\n現在、エンブレム(星4)は全部持ってて、今回はパルキアのやつが来て、悪い気はしませんよね。\nこのゲーム、ネット見てると批判が多いんですけど、なんか批判するところあった？と個人的には思ってます。昔と比べても今の方が遥かに面白くなってると思いますよ。\nスタミナという要素が実装されましたが、こういうスマホゲームは、一気にクリアされないよう工夫が必要だと思うので、いいんじゃないでしょうか。\nさて、個人的には、レッド目当てでこのゲームを始めたんで、もし強化できるのなら狙っていきたい。\n現在は、リーフ、レッド、オーキドの構成を好んで使ってます。いや、現在というか前からか。\n大体がミュウのスピードスター連発で回避上げて、イーブイでB技やって能力アップ、リザードンで攻撃というパターンかな。なんやかんやでミュウ強いのでどの構成にも活かせるという感想。\n最近、リーフのイーブイでポテンシャルの急所無効を引けたのでうれしかった。\n改善案なにかあるかというと、正直特にありません。\nあえて挙げるなら、マジコスやらを一つのトレーナーに統合して欲しさはちょっとある。具体的には、衣装、ポケモンの切り替え、ボードの共有とかかな。別々だとなんかこうコンプ欲がそそられないというか、やっぱり好きなトレーナーがいた場合、それを別々に所持し別々に使うというより、一つをカスタマイズしたり切り替えたりして使いたいかなって。\n","description":"","formated_time":"2020-08-19","href":"https://syui.github.io/blog/post/2020/08/19/pokemon/","tags":["pokemon","pokemas","game"],"title":"ポケマス、最近の進捗","utc_time":"2020-08-19T00:00:00Z"},{"categories":null,"contents":"ポケモンGoの最近の進捗とゲームの感想を書きます。\nまず、ポケモンGoは非常に良心的なゲームだと思っています。他のスマホゲームのことはあまり知りませんが、これは客観的な事実です。\n例えば、みんなが欲しがる色違いについて考えてみましょう。色違いがゲットできないからと言ってゲーム上で不利に扱われることはありませんよね。色違いは単なるおまけというか、ピカピカ光ってカッコいいという要素でしかありません。ですから、色違いを求めて課金するにしてもそれはあくまで個人的な好みというか、自由意志によるところが大きい。\nしたがって、このゲームは非常に良心的なゲームと言えるでしょう。\nまた、図鑑が素晴らしく、全部完璧にコンプしましょうみたいな仕様ではなく、色違いを一つ取れば他の種類も埋まったりするのでいいですね。つまらないコンプ作業を延々とやらせるようなゲームではないということですが、これが非常によい。完璧を目指す人はそれでも集めたりしますが、それはやはり趣味枠にすべきでしょう。(ただアンノーンはどうかと思う)\n以上を踏まえて最近の個人的な進捗を書いていきたいと思います。\nイベント まず、チケットを購入したイベントに関して、私は、2000匹くらい捕まえ色違いはハリーセンx1, コロモリx2の合計3匹だったと思います。その後の補償イベントも参加しましたが、このときは色違いゼロでした。\n例えば、こちらにイベント時の進捗が紹介されています。こういうのと比較するに、確率的にも、運がとてつもなく悪かったっぽい。まあ、そういうこともある。\nhttps://rocketnews24.com/2020/07/27/1396542/\nですが、最初に述べたようにこのゲームは客観的に見て非常に良心的な設計になっています。よって、色違いがでなかったからと言って文句を言える筋合いではありませんね。\nデオキシス その後のデオキシスですが、そのうち出るやろとか思って楽観視してたら、最終日に「あれ今日まさか最終日じゃない」って気づいて、慌ててリモートレイドやりまくって、課金して60回くらいやったけど出なくて、レイドが終了してしまいました。ちなみに、確率は1/20。まあ、こういうこともある。\nとはいえ、これは完全にミスったなと思っていて、ずっとこのゲームを続けてきて現在の色違いコンプは96%くらいになってるんです(多めに見積もっている)。伝説で持ってないのはレジスチルだけ。\nですから、今回のデオキシスも頑張って取ろうと思っていて\u0026hellip;でも、私のプレイスタイルって当初は、取れたら嬉しいくらいに思ってたはずで、取れなかったら取れなかったで別にいいやって思ってたはずなのに、いつの間にか色違いが揃ってきて、執着してしまったのがよくなかった。\nということで、今後は当初のスタイルに戻ってのんびりやってこうと思い直したのです。\nゲノセクト デオキシスが全く出る気配なくて、これ突っ込んでもダメなんじゃという予感がしてたけど、突っ込んでしまい大失敗した反面、ゲノセクトはすごい出た。\n1/4くらいの確率で出たので、さっさと上がれて嬉しかったし、精神衛生上も良かった。\nサザンドラとか 運良くサザンドラ、スターミー、ギガイアスも埋められました。うれしい。\n","description":"","formated_time":"2020-08-18","href":"https://syui.github.io/blog/post/2020/08/18/pokemon/","tags":["pokemon"],"title":"ポケモンGo、最近の進捗","utc_time":"2020-08-18T00:00:00Z"},{"categories":null,"contents":"漫画を2話まで書き直してみました。2話は戦いの話です。\n/manga\n全部で44ページになりました。ページ数は少し増えた気がする。ブログを見ると8/5から書き直しを開始、8/14で44ページほぼ全部を書き直したので、少し多めに見積もって9日間で約40ページあげた計算になります。\nもちろん、元になる下書き？あってのことですが、気に入らなくて下書き全削除した箇所も結構多かった。\n感想としては、楽しかったのと、きつかったの半々くらいかな。\n","description":"","formated_time":"2020-08-14","href":"https://syui.github.io/blog/post/2020/08/14/manga/","tags":["manga"],"title":"漫画を2話まで仕上げてみた","utc_time":"2020-08-14T00:00:00Z"},{"categories":null,"contents":"最近、漫画をrewriteしていたのですが、やっと1話をそこそこ納得できる形に書き直すことができました。作業は主に絵に関してなので、お話は同じです。\n/manga\n改めて以前描いた2話(戦いの話)、3話(伝説の剣の話)を見てみると、これはあまりにも納得できない、書き直さなきゃと思ったので、一旦、非公開にしてrewriteし、終了した段階で改めて公開という形になりそうです。\n以下、rewriteで思ったことなど書きます。\nきっかけ 私がrewriteをはじめたきっかけは、なんとなく「上手くできそうな気がするのでやろうかな」とか、「仕上げの練習になりそう」と思ったのでやってみることにしました。\n仕上げをどうしていくかあまり決まってなかったし、よくわかってなかった。もちろん、今でもよくわかってませんが。\nまた、漫画の絵柄についても固定できず曖昧なところがありました。\nよって、今回のrewriteで絵柄やその方向性をある程度決め、仕上げについても練習するつもりでした。\nrewriteをやるべきか、またはタイミングの問題 私の場合は、rewriteをやってよかったです。また、タイミング的にも最適だったと思います。\nrewriteをやるべきかは人によって考えが異なると思います。なので、私の考えを紹介します。\nこの問題は、最初から完璧なものを仕上げるべきか否かの問題でもあります。\n私は、今回、rewrite作業で大変な目にあっています。しかし、最初から完璧なものを目指すべきではないので、これでよかったと思っています。\n初めて漫画を描いて公開したとき、それはそれは雑なものでした。\nしかし、最初から完璧な仕上げでやろうと思っていたら、多分、続いていません。完成すらしなかったと思います。\nということで、最初は、雑でもいいからとりあえず完成させてみることが大切だと思います。\n私は48ページ(全3話と仮定)を描いた時点でrewriteやってみるかという気分になり、やりはじめましたが、これくらいがちょうどよかったのでは、と感じています。\nおそらく、早すぎても遅すぎても、うまくできなかった気がする。早すぎるとそこまで上手くできないし、遅すぎるとページ数が大変です。\n絵柄の方向性 簡単で上手く見せる表現を模索しています。\n私は、とにかく楽がしたい。面倒な作業も大変な作業もやりたくないのです。\nということで、今回は、その方向性も同時に模索しました。\n大体、こんな感じでやればいいんじゃないって組み合わせができてきたような気がします。\nこれも一つ良かった点かな。\n今後のrewriteについて 今後は、もう書き直すのやりたくないので、1話1話丁寧に(最低限は納得できるように)仕上げていこうって思いました。\n雑にやると後々大変なことになりますので\u0026hellip;。\nとはいえ、雑に描いてしまった3話までは書き直す予定。\n","description":"","formated_time":"2020-08-09","href":"https://syui.github.io/blog/post/2020/08/09/manga/","tags":["manga"],"title":"漫画のrewriteを継続中","utc_time":"2020-08-09T00:00:00Z"},{"categories":null,"contents":"以前、漫画を描いてみたんだけど、どうにも下書きっぽくて、でもめんどくさいから放置してて、でも仕上げを上達したいなってちょっと思ったので、以前描いたページで納得いかないやつ、rewriteしてみようかなと思います。\n/manga\n","description":"","formated_time":"2020-08-05","href":"https://syui.github.io/blog/post/2020/08/05/manga/","tags":["manga"],"title":"漫画をrewriteしてみる","utc_time":"2020-08-05T00:00:00Z"},{"categories":null,"contents":"最近、漫画を少し描いてたのとゲームの物語は週更新なので続きを書いたりしてました。\n漫画は40ページからなんですが、ちょっとわかりにくいなあ。でも、面倒なので放置。\n/manga\n/imgame\n追記 : 現在、1話を除いて公開を停止しています。書き直しが終われば改めて公開される予定です。\n","description":"","formated_time":"2020-08-04","href":"https://syui.github.io/blog/post/2020/08/04/manga/","tags":["manga"],"title":"漫画とゲームの続きを作った","utc_time":"2020-08-04T00:00:00Z"},{"categories":null,"contents":"イベントが複雑化してるので整理してみた。\n2020年8月8日(土)のコミュデイではボックスを購入する コミュニティデイでコイキングが出てくるらしい。とりあえず色違いを進化させて終わる予定。\nショップに特製ボックスが出てくるのですごいわざマシンスペシャルが入ってるやつを購入して、シャドウ・ミュウツーにサイコブレイクを覚えさせる。\nhttps://pokemongo-get.com/pokego03313/\n2020年8月8日(土)～デオキシス 色違いのデオキシスをゲットすること。あと、色違いのヒトデマン。\nhttps://pokemongo-get.com/pokego03304/\n2020年8月15日(土)～ゲノセクト 色違いのゲノセクトをゲットすること。ゲノセクトはまだ捕まえてなかったりするので一石二鳥。\nあと、色違いのダンゴロ。\n2020年8月16日(日)のGO Fest 2020補填 前回のフェスでは、色違いがほとんど取れなかったので、アンノーン、クイタラン、チョンチー、ソーナンスの色違いを狙います。\nアイアントは出てこないのかな、これもまだゲットしてないのです。\nリモートレイドパスをもらえるので、余ってるやつをゲノセクトに使っておくこと。(3枚しか持てないらしい)\nhttps://pokemongo-get.com/pokego03316/\n","description":"","formated_time":"2020-08-02","href":"https://syui.github.io/blog/post/2020/08/02/pokemon/","tags":["pokemon"],"title":"ポケモンGoで8月にやることをまとめてみる","utc_time":"2020-08-02T00:00:00Z"},{"categories":null,"contents":"#pokemongofest2020のシャドウ・ミュウツーは普通のシャドウと少し違います。\nこの違いは限定的なものになるのか不明。したがって、大切にとっておくことをおすすめします。リトレーンは絶対におすすめしません。リトレーンした人の画像を確認しましたが従来の効果と同じもののように感じました。\nシャドウ・ミュウツーは数カ月後に再登場すると思う\nしかし、再登場したシャドウ・ミュウツーは従来のシャドウ表現を持つ可能性がある(つまり、バチバチはなくなっている可能性\nこのように考える理由はいくつかあります。\n一つは、スクリーンショットでわかりますが、今回の表現効果はかなり特殊なもののように感じます。\nミュウツーだけが他の伝説でも持たない特殊な表現効果を持つというのは、通常プレイでは想定しづらい。\n例えば、対戦するにしてもシャドウ・ミュウツーだけこのような特殊効果を見せるのでしょうか？\n私は違うと思います。通常プレイにおいてミュウツーも他のポケモンと同じようにシャドウならシャドウ効果を見せるようにするはずです。\nつまり、#pokemongofest2020で捕まえたミュウツーは少し特別なものになるかもしれないと思っています。\n私は、現時点ではミュウツーだけが持つこの特殊な表現効果をとても気にいってます。と同時に、これが一般的なものになるとはちょっと考えづらいとも思っています。\n仮に、これがチケット限定のものだった場合、チケットを購入して本当によかった。\nシャドウ・ミュウツーの育成方針ですが、私は、やっぱカッコいいの使いたいので個体値は低いですけどMAXまで育成し、サイコブレイク覚えさせ、技開放するつもりです。\nまた、最高の相棒にもするつもりで、バチバチしたメガミュウツーYを見てみたい！\nとはいえ予想は外れるかもしれないので、注意。\n","description":"","formated_time":"2020-07-27","href":"https://syui.github.io/blog/post/2020/07/27/pokemon/","tags":["pokemon"],"title":"シャドウ・ミュウツーの育成方針","utc_time":"2020-07-27T00:00:00Z"},{"categories":null,"contents":"今回は、チケット(JPY 2000くらい)を購入して参加しました。これがはじめてのフェスです。\n#pokemongofest2020\nコロナの影響もあってリモートで開催されました。\nイベントは色々と工夫されててよかったと思います。\n以下、フェスの内容をざっと紹介していきます。\n演出が良かった ロケット団の気球からかみふぶきが落とされ、相棒ポケモンがお土産のかみふぶきを拾ってくれたりします。これ地味に嬉しい。\nまた、夜になると花火が上がります。いいね。\n色違い 私を含むほとんどのプレイヤーは色違い狙いです。\nつまり、色違いが来れば満足だし、来なければ不満でしょう。したがって、こういったフェスでは「プレイヤーが求めているもの」を提供すると喜ばれると思います。\n今回は、\nアンノーン、ザングース、ハブネーク、クイタラン、アイアント、フカマルの色違い狙いの人が多かったのではと思います。\nその他、モンジャラ、ハリーセン、コロモリが新実装です。\nビクティニ ビクティニは\u0026hellip;嬉しいのは嬉しいんだけど、でも\u0026hellip;いらん！\nという感想。\nロトム ロトムも\u0026hellip;嬉しいのは嬉しいんだけど、でも\u0026hellip;いらん！\nという感想。\nシャドウ・ミュウツー 今回はチケットありだとシャドウ・ミュウツーが手に入ります。\nサンダー、フリーザー、ファイヤーもついてきますが、正直、シャドウをもらっても基本嬉しくなくて「シャドウ？いらねー」と思ってました。\nですが、シャドウ・ミュウツーが現れた瞬間\u0026hellip;カッコええじゃねえか！！\nそうなんです。ミュウツーだけ演出効果がちょっと違うんですよ。\nこのバチバチあるから最高ーーー！って評価ですが、もし、これがなかったら\u0026hellip;どうなってたかわからん(あくまで個人感想\nバチバチは正義。\nやつあたりを変更できるというのも大きかったと思います。\n","description":"","formated_time":"2020-07-26","href":"https://syui.github.io/blog/post/2020/07/26/pokemon/","tags":["pokemon"],"title":"pokemongo fest 2020に参加した感想","utc_time":"2020-07-26T00:00:00Z"},{"categories":null,"contents":"iphoneに付属しているイヤホンなんですが、右側が聞こえなくなったりする症状が頻繁に発生しています。\nよくわからない症状で、抜き差しすると直ったり、サウンド設定で右寄りにしたあと音を鳴らすと直ったりする場合があります。\nmacで接続してもipadで接続しても発生する症状なので、おそらくイヤホンに不具合があるのだと思われます。また、可能性は低いですが、ソフトウェア、OS関連のバグの可能性もあるかも。\n新古品で購入したもので、包装が新品だったので、おそらく使われたことがないのだと思います。\n前に新品で購入したiphoneのイヤホンにも同様の症状が発生したことがあり、たまたま自分がハズレを引いているだけなのか、かなりの確率で不良品が混じっているものなのかはわかりません。\nふとした瞬間に直ってくるといいんですけどねえ。\n追記 : なんか調子良くなった(また悪くなりそうな気もする\n","description":"","formated_time":"2020-07-25","href":"https://syui.github.io/blog/post/2020/07/25/iphone/","tags":["iphone"],"title":"付属イヤホンが故障している気がする","utc_time":"2020-07-25T00:00:00Z"},{"categories":null,"contents":"最近、たくさんのイラスト描いてたので、その時に思ったことでも書きます。\nテーマは、どうすれば絵が上達するかです。今回はこれについて考えていきたいと思います。\nなお、私が描く絵は全然上手くないんですが、それを前提に話をします。\nとはいえ、上手くはないけれど、私は、自分の絵柄を気に入ってます。そこがポイントかも。\n模写について 私は昔、模写をしていた時期がありました。絵が上達すると思ってやってみたわけですが、模写はおすすめしません。\n模写をしてた期間は短かったのですが、私の場合、模写では絵がうまくなりませんでした。\n自分の絵を好きになること じゃあ何をすればいいのでしょう。\n私は、自分が好きなものを好き勝手に描くことが一番おすすめだと思います。同時に自分の絵を好きになることです。\nでは、どうすれば自分の絵を好きになれるのでしょう。\nこれは、自分が納得できる絵を描くことだと思います。\nもちろん、あとで見返すと正直あれだったりすることが多いんですが、その時その時の自分が納得できる絵を描いていけばいいのだと思います。\nでも自分が納得できる絵って難しいですよね。\n何度も修正して自分が納得できるまで描かなければならないわけですから、大変です。\nただそうやって自分が納得できる絵を書いて、それを続けていけば、自然に上達するものだと思っています。\nまとめると、「自分が納得できるまで描き、それを続けること」が上達のコツだと思います。\n色々な上達法がありますが、これが一番の近道だと思います。\n楽しく描くこと ただ、絵を描くことが楽しくないと続けるのは難しいと思います。\nそこで、自分の好きなものを好き勝手に描くことをおすすめします。\nまた、好きに書くというのは、自分で考えるということでもあります。この絵はどうしようと自然に考えることができます。模写ではそういったことが難しい。\n好き勝手に絵を描くのは楽しいです。あるいは、楽しめる可能性が非常に高い。\n楽しいと続けられますよね。\nもし楽しくないなら、それは自分の絵柄ではないか、もしくは不必要に目標を高くしている可能性があると思います。\n誰かになろうとする必要はありませんし、あなたが尊敬する絵師のような絵を書く必要もありません。あなたは、あなたの絵を自分が納得するまで描けばいい。\n自分の絵を描くこと では、自分の絵ってなんでしょう。\nこれは、自分が最も描きやすい絵柄のことを指します。人によってどのような絵柄が描きやすいかは異なります。\nですから、それを見つけて伸ばしてやればいいと思います。\nと偉そうなことを書きましたが、私が上達してないんですけど、どうしましょう。\nとりあえず、使えそうな表現手法を見かけたらそれを取り込んで、次の絵を描きましょうか。\n","description":"","formated_time":"2020-07-24","href":"https://syui.github.io/blog/post/2020/07/24/illust/","tags":["illust"],"title":"どうすれば絵がうまくなるのか","utc_time":"2020-07-24T00:00:00Z"},{"categories":null,"contents":" 今回の修正にあたって 過去のイラストを載せてるページがあるんですけど、それを見たとき「これはなあ\u0026hellip;」という絵が何枚かありました。\nゲームで使う背景とかを修正したとき、やっぱり自分で納得できる絵を載せたいと思い、今回の大修正が始まりました。\n目指したのは「これならいいか」とトップに載せられる程度にすること。\nいくつかの絵は原型を留めないほど修正してしまったのもあります。これは、nexus7で描いたやつが多いかな。\nとりあえずイラストのページはこれでいいかという感じになったので、修正はこのへんで落ち着きそうです。\n/imgall\n","description":"","formated_time":"2020-07-23","href":"https://syui.github.io/blog/post/2020/07/23/illust/","tags":["illust"],"title":"イラストを修正してみた2","utc_time":"2020-07-23T00:00:00Z"},{"categories":null,"contents":"iphone seのバッテリーがおかしいので、何度か新しいバッテリーに付け替えてみたのだけど充電してるのに増えない現象が直らなかった。原因はバッテリーでもコードでもなく、本体やソフトウェアかなと思ってる。\n増えたり、増えなかったり、充電してても減ったり、と状態がすごく不安定。\nそして、何度も分解してると、両面テープが剥がれてきて、それが原因でディスプレイの細いコードが切れてしまって、ディスプレイが映らなくなってしまった。\n使っていないiphone 5sのディスプレイに付け替えてみたら、互換性があったようで、seのディスプレイが直った。\nseと5sは互換性のある部品を使い回せるのはいいね。\nとはいえ、バッテリーは直ってないので、新しいスマホを注文することにした。\n結果として、5sは使えない状態になり、seは使えるけどバッテリー問題ありの状態になってる。\nhttps://jp.ifixit.com/Teardown/iPhone+5s+Teardown/17383#s52361\n","description":"","formated_time":"2020-07-22","href":"https://syui.github.io/blog/post/2020/07/22/iphone/","tags":["iphone"],"title":"iphone seを修理した","utc_time":"2020-07-22T00:00:00Z"},{"categories":null,"contents":"過去のイラストを整理したついでに、納得いかないイラストを書き直したりしてた。\n/imgall\n","description":"","formated_time":"2020-07-21","href":"https://syui.github.io/blog/post/2020/07/21/illust/","tags":["illust"],"title":"イラストを修正してみた","utc_time":"2020-07-21T00:00:00Z"},{"categories":null,"contents":"\n/img\n","description":"","formated_time":"2020-07-19","href":"https://syui.github.io/blog/post/2020/07/19/illust/","tags":["illust"],"title":"イラスト描いてみた29","utc_time":"2020-07-19T00:00:00Z"},{"categories":null,"contents":"またアイコンとか追加してた。\n/icon\n","description":"","formated_time":"2020-07-18","href":"https://syui.github.io/blog/post/2020/07/18/icon/","tags":["icon"],"title":"アイコンを追加してみた","utc_time":"2020-07-18T00:00:00Z"},{"categories":null,"contents":"\n/img\n","description":"","formated_time":"2020-07-17","href":"https://syui.github.io/blog/post/2020/07/17/illust/","tags":["illust"],"title":"イラスト描いてみた28","utc_time":"2020-07-17T00:00:00Z"},{"categories":null,"contents":"久しぶりに書いてみた。\n/img\n","description":"","formated_time":"2020-07-16","href":"https://syui.github.io/blog/post/2020/07/16/illust/","tags":["illust"],"title":"イラスト描いてみた27","utc_time":"2020-07-16T00:00:00Z"},{"categories":null,"contents":"最近、TLで胃の調子が悪いみたいな話が結構流れてきたので、ビオフェルミンを紹介してみる。\nもちろん、本物の万能薬では全く無いのだけど、薬嫌いで薬は絶対飲まないような人間が、ビオフェルミンだけは飲むので、それなりに信頼してくれてもいいと思う。\nとはいえ、効果は人それぞれだし、合う合わないはあると思う。\nそれを前提に話をすると、ビオフェルミンは、副作用の危険があまりない。単なる乳酸菌の類(たぶん)だと思うので飲みやすいと思う。\n私はこのビオフェルミンを知ってから二ヶ月ほど特に理由なく飲み続けたことがあった。その頃に胃腸関連で全般的に体調が改善されたように感じたことがあったりする。\nもちろん、これは気のせいかもしれない。けど、人によっては、ビオフェルミンを知っているか知らないかは大きいかもしれないと思ったので、一応、紹介してみることにした。\nなお、プラスか通常版か、どちらがいいのかは知らない。\n新ビオフェルミンS+ 薬嫌いだけど、唯一、ビオフェルミンだけは飲むという。\n最初の二ヶ月ほど特に理由なく飲み続け、体調が改善されたように感じている。\nついでにアイテムのページを作ってみた。\n/item\n","description":"","formated_time":"2020-07-13","href":"https://syui.github.io/blog/post/2020/07/13/amazon/","tags":["amazon"],"title":"あなたはビオフェルミンSを知っているか？","utc_time":"2020-07-13T00:00:00Z"},{"categories":null,"contents":"久しぶりにポケマスにログインしてみると、レジェントバトルにコバルオンが追加されていたのでクリアしてみました。\n私は、ウツボットの人とレッド、リーフで構成、ラストのHP50%まで削りました。\nなお、コバルオンは大ダメージが通るときと通らないときがあって、通らないときは全然ダメージが入りません。したがって、「ここは大ダメージが通るな」と思ったとき一気に連続攻撃(ねっぷう)することが重要だと思います。\n基本は眠らせて、B技を貯めます。B技は最初リーフでバフして耐久を上げています。\nコバルオンは、HPの半分を超えるタイミングが特に重要。これを超えたときねむりを当てること。そして、ここでねっぷうを連発しなければなりません。いざというときのためB技が使える状態だと良いでしょう。また、それが大ダメージが通るときじゃないと一気に倒すことができずやられてしまいます。\nこのような条件を満たすとこのメンバーだけでクリアできると思います。が、私はいくつか失敗して、次のメンバーに引き継ぎました。\n次のメンバーでは、相手がB技を打ってくるタイミングだったので一人メンバーのバインド使いLV1を出撃させました。バインド当ててB技を食らい無事死亡。\n次が本命でアチャモ、シルバー、アセロラでやりました。ひるませて、バフして、シルバーで攻撃というパターン。ここで無事撃破という感じ。\nポケマスは、メダルが実装されてからなんか面白くなってる気がします。レジェンドバトルもいいですね。\n","description":"","formated_time":"2020-07-10","href":"https://syui.github.io/blog/post/2020/07/10/pokemas/","tags":["pokemon","pokemas","game"],"title":"ポケマスのコバルオンをクリアしてみた","utc_time":"2020-07-10T00:00:00Z"},{"categories":null,"contents":"github profile(readme)を使用するには、githubで$userのrepositoryを作成してreadme.mdを置くとgithub.com/$userで表示できるようになるかもしれない。\nこの機能のテストに当選した人は、リポジトリを作成するとき以下の表示が出るようです。\nここでsvgを再生したいなあと思ったのですが、このブログで使用しているsvgは少し複雑過ぎるので、新しく作り直してみました。\nurlはrawを引用したほうがいいようです。\n他にもカウンターを使ってみたりできそう。\nhttps://github.com/brentvollebregt/hit-counter\n\u0026lt;img src=\u0026#34;https://hitcounter.pythonanywhere.com/count/tag.svg?url=https%3A%2F%2Fgithub.com%2Fsyui%2Fsyui\u0026#34; alt=\u0026#34;Hits\u0026#34;\u0026gt; ","description":"","formated_time":"2020-07-09","href":"https://syui.github.io/blog/post/2020/07/09/github/","tags":["github"],"title":"github profile(readme)にsvgを付けてみる","utc_time":"2020-07-09T00:00:00Z"},{"categories":null,"contents":"ポケモンGoが4周年を迎えます。なので、今回は、過去を振り返ってみたり、現状を評価したり、思ったことを書いていきたいと思います。\n最初に書いた記事を見てみよう ポケモンGoを始めたばかりに書いた記事が見つかりました。当時こんな事を言ってたようです。\n2016/08/04\n私は今までスマホゲームは一切というほどプレイしてきませんでしたが、ポケモンはやってみようかなと思いました。\n大流行したということで、末永くアップデートされるかもしれない。したがって、初回にプレイしておいたほうが良いかなと思いました。\nアップデートされても初期攻略が早ければ、その後も有利になるかもしれません。\n変な理由かな。\nゲーム自体は面白いです。\nhttps://syui.ai/blog/post/2016/08/04/pokemon-go/\n実は、私がはじめてプレイしたスマホゲームはポケモンGoでした。理由も長続きしそうなので今のうちにプレイしておこうかなという軽い気持ちでした。\nポケモンGoの設計思想はすごかった ポケモンGoの設計思想はすごいものでした。私はそれまでスマホゲームにあまり良い印象を持っておらず、おそらく一生プレイすることはないだろうと思っていたのですが、ポケモンGoには手を出しています。\n自分で言うのもなんですが、これはちょっとしたイレギュラーでした。\n私がポケモンGoに手を出した主な理由としては、その設計思想にあったと思われます。\n仮想現実でポケモンを捕まえ、それを保有するゲームなので、プレイするほど価値を高めていくことができること\nポケコインというゲーム内の共通通貨をジムで作り出すことができる。現金でポケコインを買うこともできるが、無課金でも同様の通貨を作り出せるという画期的なシステムであること\n課金アイテムのルアーを使うことで周りのプレイヤーに恩恵を与えることができるシステムであること\nとくにこれらの設計が素晴らしいものだったと考えています。\n通常、課金アイテムを使うと自分だけが強くなったり、自分だけが恩恵を受けたりするのですが、ポケモンGoでは自分を含む周りのプレイヤーに「与える」ことができるようになっているのです。具体的には、課金するとポケストップというところにプレイヤー名が30分程度表示され、30分の間はその近辺に花びらが舞い、たくさんのポケモンが出現する仕組み。非常に良くできたこの名誉システムは、非常に長い間、有効に動作しています。\n伝説のポケモン レイドの実装もすごかったなあ。以下は当時のプロモーションビデオですが、とにかくすごかった。\n現在のポケモンGoはちょっとおかしい気がする しかし、今のポケモンGoはちょっとおかしくなっていて、昔ほどにおすすめするわけではありません。\nまずポケコインが無料で得たものと有料で得たものに分けられました。\nこれによって特定のアイテムを有料で得たコインのみでしか買えないような仕組みに変更されてしまったのです。\n例えば、レジギガスの有料チケットあたりからポケモンGoは本格的におかしくなっていったなあと感じています。しかし、売上という結果が出ているので誰も文句を言えないような状況なのだと思います。\nまた、このような変化が見られたのは、Nianticがハリーポッター魔法同盟のwizardsuniteをリリースし、大コケした時期だった記憶があり、関係はあるのかもしれません。\n今更ですが、私は、wizardsuniteがおそらく流行らないだろうと考えていて、やめたほうがいいのではと心配していた気がします。これ、どこかに書いた気がする。\nまた、現在のポケモンGoには、GBLという闘技場(コロシアム)が建設され、レート・ランキングありの対人ゲームになりましたが、個人的には、不自由さが増した気がしています。\nこのようにちょっとおかしくなったポケモンGoですが、それでも、素晴らしいゲームであることに変わりはありません。個人的には、初心に戻れるかどうかが重要だと思っていて、そのあたりを見ています。\n図鑑 嬉しかった図鑑の更新です。\nGBLをやめるといったな？あれは嘘だ GBLをやめるといいましたが、なぜか続けています。「GBL、やめる」と言ったときの画像。\nそして、なぜか続けることになったときの画像。\n前後の画像では、残り日数が11日だったのに、なぜか21日に増えています。わけがわからん。\n11日でレートを上げるのは不可能との判断でしたが、21日であれば不可能ではないと判断、続けることに\u0026hellip;。\n次は、GBLの攻略について書きます。\n今まで私は、個体値を全く気にせずポケモンを育ててきました。今でも個体値を調べるのが面倒なので重複ポケモンは調べずに全部はかせに送っています。\nしかし、1000試合もすると個体値が勝率に影響してくる可能性があると思います。まさかここまでの回数バトルすることになるとは思っていませんでした。個体値で特に重要になるのが先鋒のポケモンです。ミラーのときに勝てるようにしたほうがいいでしょう。とはいえ、やはり、バグ、不正を食らわないこと、マッチング運に恵まれることのほうが遥かに重要ですが。\n私の場合、クレセリア、ギラティナ、カビゴン、ディアルガ(最高の相棒)は、個体値厳選したほうが勝率は少し上がるかもしれません。なお、最強のポケモンは？と聞かれたら、おそらくクレセリアと答えるでしょう。\nとはいえ、やはり好きなポケモンを好きなように育ててバトルすると思います。例えば、カビゴンはメガシンカがないので、最高の相棒にする気はありませんし、色違いがあれば、色違いを使います。\n以下、すべてのリーグで私が使用するポケモンです。\nスーパー ハイパー プレミアム これは、カビゴンを最高の相棒にしたほうが良いパターン。\nマスター 攻略サイトの情報やYouTubeは全く見ません。リーグ中は使用するポケモンをほぼ変更しません。\n色々なパーティーがありますが、使い慣れているポケモンを使ったほうがいいと考えるからです。\nもちろん、あまりに勝てないようなら変更を考えますが、環境が変わることはほとんどありません。5連勝した5分後に5連敗するようなゲームですから、連勝したときも連敗したときも大体の場合、運が良かった悪かったの話に過ぎません。とはいえ、ポケモンの流行り廃りは多少あるように思います。\nよかったところ 相棒ポケモンのシステムは素晴らしいですね。面倒だという人もいますけど、自分のお気に入りポケモンがフィールドに姿を現すというのは、とてもいいと思います。\n天候がすごい。こういうの普段あまり意識されないけど大きいと思います。\nまた、ロケット団、フレンド、ボックス整理なども実装されました。便利になったり、楽しくなったり。\nバトルができるようになったのもよかったです。が、レート制度は過剰なのでいらないと思います。過剰な競争要素を加えるより、このゲーム、やっぱりゆるふわがいいですね。\nメガシンカも実装予定で、楽しみです。キュレムも登場します。\nフュージョンであるホワイトキュレム、ブラックキュレムはどうなるのでしょうか？やっぱり、二体を合体させるのかな。その場合、個体値は平均になるのか、ランダムになるのかも気になりますね。\n進化していくポケモンGo、これからも目が離せません。\n","description":"","formated_time":"2020-07-08","href":"https://syui.github.io/blog/post/2020/07/08/pogo/","tags":["pokemon"],"title":"ポケモンGo、4周年","utc_time":"2020-07-08T00:00:00Z"},{"categories":null,"contents":"\n#nianticsocial, #pokemongo\nポケモンGoにNiantic Socialというプロフィールが追加されていました。(プライバシーのためニックネームは非表示にしています)\nもしかしたらPokémon GO Fest 2020に関係があるのかもしれませんね。\n今回はイベントがリモートで開催されますが、過去のイベントでは実地での交換会などがあったようです。こういった機能で、そういったことを実現しようとしているのかも。\nイベントの日に回数限定のリモート交換とかできたら面白そう。\nなお、ingressアカウントはingressで一旦ログアウトしてログインすれば表示されるとの情報があります。\n","description":"","formated_time":"2020-07-07","href":"https://syui.github.io/blog/post/2020/07/07/pokemon/","tags":["pokemon"],"title":"ポケモンGoにNiantic Socialが来た","utc_time":"2020-07-07T00:00:00Z"},{"categories":null,"contents":"こちらのノベルゲームあるじゃないですか。それを週刊連載にしてみたら面白いかもしれないと思ったので、やってみることにしました。\n毎週月曜日に1話ずつ更新する予定です。\nまた、最近、「クリエイターはお金もらえ」みたいな話があったりするので価格を設定してみることに。\nお支払いはgithub sponsorsから月に$1となっております。作者のスポンサーという形になります。\ngithub sponsorsとは microsoftが運営するgithubの開発者支援サービスです。githubアカウントを作成すると登録されているユーザーに課金できる仕組み。\nhttps://docs.github.com/ja/github/supporting-the-open-source-community-with-github-sponsors/about-github-sponsors\n","description":"","formated_time":"2020-07-06","href":"https://syui.github.io/blog/post/2020/07/06/game/","tags":["game"],"title":"ノベルゲームの週刊連載はじめました","utc_time":"2020-07-06T00:00:00Z"},{"categories":null,"contents":"何曲かボカロを聴いてみたので、個人的に一番良かった曲を紹介。\nその結果、\n【初音ミクDark】　she　【 keeno 】に決定しました！\n聴いてみた曲の一覧 [ { \u0026#34;url\u0026#34;: \u0026#34;https://www.nicovideo.jp/watch/sm37104384\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;【初音ミクDark】　she　【 keeno 】 - ニコニコ動画\u0026#34; }, { \u0026#34;url\u0026#34;: \u0026#34;https://www.nicovideo.jp/watch/sm36177919\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;シックス・フィート・アンダー / Flower - ニコニコ動画\u0026#34; }, { \u0026#34;url\u0026#34;: \u0026#34;https://www.nicovideo.jp/watch/sm36187141\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;神様の庭/ミク - ニコニコ動画\u0026#34; }, { \u0026#34;url\u0026#34;: \u0026#34;https://www.nicovideo.jp/watch/sm36237863\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;sasakure. UK - QUI feat.初音ミク MV - ニコニコ動画\u0026#34; }, { \u0026#34;url\u0026#34;: \u0026#34;https://www.nicovideo.jp/watch/sm36243343\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;【初◯ミク】Convenient Singer【オリジナル】 - ニコニコ動画\u0026#34; }, { \u0026#34;url\u0026#34;: \u0026#34;https://www.nicovideo.jp/watch/sm36271857\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Penguin\u0026amp;#039;s Detour / 初音ミク - ニコニコ動画\u0026#34; }, { \u0026#34;url\u0026#34;: \u0026#34;https://www.nicovideo.jp/watch/sm36274388\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;【オリジナル曲】 オバジ・シュンプチー 『自分騙し』 feat.初音ミク - ニコニコ動画\u0026#34; }, { \u0026#34;url\u0026#34;: \u0026#34;https://www.nicovideo.jp/watch/sm36279033\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;\u0026amp;quot; ね？風味,,,R E M E M B ヰ R \u0026amp;quot; - ニコニコ動画\u0026#34; }, { \u0026#34;url\u0026#34;: \u0026#34;https://www.nicovideo.jp/watch/sm36320501\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;「ひと」-nao/to　feat.初音ミク - ニコニコ動画\u0026#34; }, { \u0026#34;url\u0026#34;: \u0026#34;https://www.nicovideo.jp/watch/sm36322436\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;クリーム入り今川焼き／虎音ココ - ニコニコ動画\u0026#34; }, { \u0026#34;url\u0026#34;: \u0026#34;https://www.nicovideo.jp/watch/sm36353531\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;花色 / 香椎モイミ feat. KAITO - ニコニコ動画\u0026#34; }, { \u0026#34;url\u0026#34;: \u0026#34;https://www.nicovideo.jp/watch/sm36369187\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;雨に浸る / 雨歌エル - ニコニコ動画\u0026#34; }, { \u0026#34;url\u0026#34;: \u0026#34;https://www.nicovideo.jp/watch/sm36375608\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;My Dear, My Muse ……　feat. 初音ミク - ニコニコ動画\u0026#34; }, { \u0026#34;url\u0026#34;: \u0026#34;https://www.nicovideo.jp/watch/sm36400155\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;【IA】Movin\u0026amp;#039; Girl【オリジナル】 - ニコニコ動画\u0026#34; }, { \u0026#34;url\u0026#34;: \u0026#34;https://www.nicovideo.jp/watch/sm36459491\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;UNSTOPPABLE FEAT.MEIKO - ニコニコ動画\u0026#34; }, { \u0026#34;url\u0026#34;: \u0026#34;https://www.nicovideo.jp/watch/sm36470545\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;GUMI『マスクがない』オリジナル曲 - ニコニコ動画\u0026#34; }, { \u0026#34;url\u0026#34;: \u0026#34;https://www.nicovideo.jp/watch/sm36506282\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;◈*_命ひとつしかないもんで - ニコニコ動画\u0026#34; }, { \u0026#34;url\u0026#34;: \u0026#34;https://www.nicovideo.jp/watch/sm36584432\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;[初音ミク] 夜を飼う / TOKOTOKO（西沢さんP） - ニコニコ動画\u0026#34; }, { \u0026#34;url\u0026#34;: \u0026#34;https://www.nicovideo.jp/watch/sm36599714\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;薄翅の国へと至る道 / 重音テト - ニコニコ動画\u0026#34; }, { \u0026#34;url\u0026#34;: \u0026#34;https://www.nicovideo.jp/watch/sm36619621\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;甘い病／なつめ千秋 feat.GUMI - ニコニコ動画\u0026#34; }, { \u0026#34;url\u0026#34;: \u0026#34;https://www.nicovideo.jp/watch/sm36643372\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;カゼヒキ - 最初の言伝 - ニコニコ動画\u0026#34; }, { \u0026#34;url\u0026#34;: \u0026#34;https://www.nicovideo.jp/watch/sm36666361\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;ど～ぱみん -「サイケデリックによろしく」feat.初音ミク - ニコニコ動画\u0026#34; }, { \u0026#34;url\u0026#34;: \u0026#34;https://www.nicovideo.jp/watch/sm36669843\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;蟲 【初音ミク オリジナル】 - ニコニコ動画\u0026#34; }, { \u0026#34;url\u0026#34;: \u0026#34;https://www.nicovideo.jp/watch/sm36685545\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;ワンダーランド / higma feat.初音ミク - ニコニコ動画\u0026#34; }, { \u0026#34;url\u0026#34;: \u0026#34;https://www.nicovideo.jp/watch/sm36691187\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;FRONTIER ／ 初音ミク - ニコニコ動画\u0026#34; }, { \u0026#34;url\u0026#34;: \u0026#34;https://www.nicovideo.jp/watch/sm36731216\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;ボッカデラベリタ / 柊キライ feat.flower - ニコニコ動画\u0026#34; }, { \u0026#34;url\u0026#34;: \u0026#34;https://www.nicovideo.jp/watch/sm36818941\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;ユダ / 虻瀬 with 初音ミク - ニコニコ動画\u0026#34; }, { \u0026#34;url\u0026#34;: \u0026#34;https://www.nicovideo.jp/watch/sm36820823\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;氷上に駆ける／雨歌エル - ニコニコ動画\u0026#34; }, { \u0026#34;url\u0026#34;: \u0026#34;https://www.nicovideo.jp/watch/sm36845017\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Eden/歌愛ユキ - ニコニコ動画\u0026#34; }, { \u0026#34;url\u0026#34;: \u0026#34;https://www.nicovideo.jp/watch/sm36850023\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;こぬか雨/雨歌エル　- ニコニコ動画\u0026#34; }, { \u0026#34;url\u0026#34;: \u0026#34;https://www.nicovideo.jp/watch/sm36851417\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;昆虫図鑑／鏡音リン \u0026amp;amp; 鏡音レン - ニコニコ動画\u0026#34; }, { \u0026#34;url\u0026#34;: \u0026#34;https://www.nicovideo.jp/watch/sm36865458\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;rorero - 黄金に急かされて／IA - ニコニコ動画\u0026#34; }, { \u0026#34;url\u0026#34;: \u0026#34;https://www.nicovideo.jp/watch/sm36904226\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Conslo - 不可逆的にさようなら feat. 水音ラル, 樹人 - ニコニコ動画\u0026#34; }, { \u0026#34;url\u0026#34;: \u0026#34;https://www.nicovideo.jp/watch/sm36943926\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;p.h. / flower - ニコニコ動画\u0026#34; }, { \u0026#34;url\u0026#34;: \u0026#34;https://www.nicovideo.jp/watch/sm36982435\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;「森の哲学」- CiderPlanet - ニコニコ動画\u0026#34; }, { \u0026#34;url\u0026#34;: \u0026#34;https://www.nicovideo.jp/watch/sm37020733\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;ochatime - ft.初音ミク - ニコニコ動画\u0026#34; }, { \u0026#34;url\u0026#34;: \u0026#34;https://www.nicovideo.jp/watch/sm37092156\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;SO HOW? / ソーホー and シメサバツイスターズ - ニコニコ動画\u0026#34; } ] $ cat nico.json|jq length 37 $ cat nico.json|jq -r \u0026#34;.[].url\u0026#34; ","description":"","formated_time":"2020-07-05","href":"https://syui.github.io/blog/post/2020/07/05/vocaloid/","tags":["vocaloid"],"title":"2020年上半期ボカロ曲1位の発表","utc_time":"2020-07-05T00:00:00Z"},{"categories":null,"contents":"phantomjs curlではjavascriptを有効にしたブラウザと同じHTMLソースの取得が難しいことがあります。このような場合、phantomjsを使用すると便利です。\n$ npm i -g phantomjs phantom 公式サイトにてバイナリも配布されてるので、nodeでのインストールが依存関係などで失敗する場合、こちらをダウンロード、解凍して実行権限を与えると良いでしょう。\nhttps://phantomjs.org/download.html\n$ curl -sLO https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-2.1.1-linux-x86_64.tar.bz2 $ aunpack phantomjs-2.1.1-linux-x86_64.tar.bz2 $ cd phantomjs-2.1.1-linux-x86_64/bin/ $ chmod +x phantomjs $ ./phantomjs --version var system = require(\u0026#39;system\u0026#39;); var page = require(\u0026#39;webpage\u0026#39;).create();argument var url = system.args[1]; page.open(url, function () { console.log(page.content); phantom.exit(); }); $ phantomjs set.js https://google.com domcurl domcurlというツールがあり、webscrapingに非常に便利です。phantomjsなどで要件を満たせない場合におすすめです。\ndomcurlはPuppeteerを使う小さなNodeJSアプリケーションで、 npm i domcurlコマンドを発行することでインストールできます。 curlコマンドのように、簡単なdomcurl [url]を発行してリソースを取得し、JSをページ上で実行することができます。\nhttps://paul.kinlan.me/domcurl/\n$ npm i domcurl $ ./node_modules/domcurl/index.js --url https://example.com ","description":"","formated_time":"2020-07-04","href":"https://syui.github.io/blog/post/2020/07/04/curl/","tags":["curl"],"title":"コマンドラインからjavascriptでレンダリングされたHTMLソースを取得する方法","utc_time":"2020-07-04T00:00:00Z"},{"categories":null,"contents":"新しいキャラを描いたり、エピソードを書いたりした。エピソードはまだ非公開だけど。\n","description":"","formated_time":"2020-07-03","href":"https://syui.github.io/blog/post/2020/07/03/illust/","tags":["illust"],"title":"新しいキャラ描いた","utc_time":"2020-07-03T00:00:00Z"},{"categories":null,"contents":"一応、シーズン2でもランク9には到達しています。が、ここでGBLをやめようと思います。以降は単なる愚痴ですので、嫌いな人は読まないように！\nGBLをやめる理由はいくつかありますが、一番は、GBLが面白くないからです。これほど面白くないゲーム、初めてかも。\n勝っても嬉しくなく、負けたときは悔しいだけなので、ストレスしかありませんでした。\nハッピーはゼロでストレスだけが蓄積されていく仕組み。これでは健康も損ないますし、プレイする意味が全くないと判断。ランク10に到達可能ならプレイするのもありですが、初期レートの差が大きすぎてそれも不可能。よほどの強運に恵まれない限り難しいでしょう。\n仮に初期レートが2300で現在レートが2800とかだったら続けてたかも。私の初期レート2000なので。\nそして、バグや不正か何かはわからないけど、あまりに理不尽が多すぎたという点も大きかったと思います。対人戦ゲームでこれはあまりにもひどい、ありえない。\n最後に、私が現在把握している(と思っている)GBL事情を少しだけ書いていきたいと思います。\nGBLが停止された件 まず、シーズン2の半ばでGBLが停止されました。理由は、世界ランク1位だった人が不正なテクニックを使っていたことが発覚したためです。\nこれがチートと呼ばれるものかどうかは難しい問題ですが、通常のバトルではありえない抜け道を利用して、ランキングやレートを独占しました。そのプレイは公正と呼ばれるものではなかったということでしょう。\n私自身、チートを使ったり、作ったりすることはあります。しかし、対人戦においては、チートまたは、それに類するテクニックを使うことは絶対にありません。\n実は、プレシーズン、シーズン1、そして、シーズン2、そういった類のものはあるんだろうなと予想していましたが、探すことはしませんでした。探せばおそらく見つけられたと思いますが、対人戦では使わないと決めていますので探す必要はありません。また、知ってたら使いたくなるものなので、あえて探しませんでした。\nしかし、その情報がどこで共有されているのか大体の目星はついていました。それは、あるコミュニティで共有され、多くの人が使っているのだろうなと予想していました。\nそういった人達が過去、または現在ランク10に到達し、リーグボードのバトル数または勝利数などからもおおよその検討はつきます。前に確認した限り、あくまで印象ですけど、約半数はあれを使い、残りの半数はバトル数または勝利数から推測が難しいけど、別のあれを使っていた人もかなりいたのではないかと思います。この件の具体的な情報は後述します。\nもちろん、これについてはずっと否定の意見が根強く存在していたのも知っています。つまり、「バグや不正なんてものは存在しない」と言い続けていた人達です。\nこのような発言や隠蔽を行っていたのは、現にチートを使っていた人達なのか、Nianticの回し者なのか、GBL開発の社員さんだったりするのか、または、それ以外の人達なのか、それはわかりません。\nしかし、「バグや不正なんてものは存在しない」と言い続けていた人達がいなければ、もっと早くに問題が明らかにされていたかもしれません。現に「バグや不正」は存在していました。\nその証拠に、GBLの世界ランクで1位だった人も不正テクニックを使用していたことが判明。これによって、GBLが停止されました。\nhttps://www.reddit.com/r/pokemongo/comments/h7wz7f/pvp_down_due_to_gbl_exploit/\n私の推測ではNianticはずっとこの事実を把握しており、わざと放置していたのだろうと考えています。\nその証拠に、プレシーズンもシーズン1もずっとおかしい動きがあることは報告されていたはずです。redditやtwitterでもたくさんの声がありました。私もブログでいくつかのおかしな動きについて言及しています。以下は2月に書かれた文章です。\nギラティナと戦ったとき、ピクシーが為す術なくやられてしまうことが何度かありました。これも相手がギラティナなので、これは勝ったぞと思っていました。しかし、相手のギラティナがあまりに強すぎたので、ピクシーがタイマンで負けてしまったのです。\n相手のギラティナは4回連続でげんしのちからを放ちました。正確には、3回連続で放ったあと、1秒ほど間をおいて最後の一発を放ち、計4回です。このとき、ギラティナのHPは半分も削ることができませんでした。こちらのシールドも虚しく、これほど強いギラティナには勝てないなあと私は思いました。\nしかし、果たしてギラティナはあそこまで早くチャージが撃てるものなのだろうか。私は、ロケット団を相手にギラティナを使って試してみたところ、やはり、あれほど早くチャージ攻撃が打てるというのはありえない。しかも、どれだけ貯めても2回が限度ではないでしょうか。\nこの現象は、相手がグリッチ(不正)を使ったのか、それとも通信の問題だったのか、もしくは相手が強かっただけなのか、わかりません。これも、そこそこの確率で遭遇する現象の一つです。\n/blog/post/2020/02/20/pokemon/\nつまり、最低でも2月から、そして、おそらくそれよりも昔から存在していたテクニックがなぜ今になって問題とされたのでしょう。\nおそらくその理由は、有名な人がこの不正テクニックを大々的に取り上げてしまったためではないかと考えられます。\nNianticは対処する気がなかったこの問題ですが、ある有名な人がこの不正テクニックを取り上げてしまったのです。それに加えて、チートを使ったことが明らかなランク1位が存在し、もしこの二つの要素がなければ、おそらく対処されなかったのではないかと思います。これは非常に恐ろしいことです。レートありの対人ゲームにおいて、あってはならない態度だと思います。\n上記の不正テクニックは、チャージ攻撃を速く打つためのものですが、他にも様々な不正テクニックが存在します。\n例えば、5の倍数と呼ばれるもので、これは、簡単にランク10に到達するテクニックです。過去ボードのバトル数または勝利数を見ればこのテクニックを使用していると思われる人は数多く存在していました。\nhttps://www.reddit.com/r/TheSilphRoad/comments/het3o5/gbl_how_i_became_the_first_to_get_to_rank_10_in/\n私はこのテクニックを使用した人のことをあまり信用しておらず、その理由としては、不正テクニックを知っている人の多くがそれを使ってしまうだろうと考えているからです。\nつまり、現在のリーグにおいてこういったテクニックを使用した人は、おそらく過去のリーグにおいても他の不正テクニックをバレないように使用していたのではないかと考えられるからです。\n例えば、リーグ初期から存在していたであろうチャージ攻撃を速く打つ不正テクニックも慎重に使っていればバレることはなかったと思います。\n今回は警告のためか大げさに使ったために有名人が取り上げて大きな問題になりました。しかし、そうでもない限り、対処されることはなかったでしょう。その証拠に、今までずっと対処されてこなかったという事実があります。\nまた、リーグ初期から「バグや不正なんてものは存在しない、負けたのが悔しいだけだろ」みたいな投稿や隠蔽工作が今も昔もずっと続いています。\nこういった投稿は、この問題が長い間ずっと対処されてこなかったことと関連があるように感じます。\n吸われたレートが行き着く先 次は、不正テクニックにより吸われたレートの行き着く先の話をします。\nたまに「不正テクニックに当たるなんて確率的には1/10でしかないはずだ、問題にならない」という人がいます。\nでもそれは違います。\nたとえ1/10であっても、バトル数を重ねるごとに取り返しのつかない数値になります。例えば、1000試合すれば、100試合は不正テクニックにより負けさせられていることになります。これがレート(評価)に及ぼす影響は計り知れません。\nまた、考えなければならないのが、不正テクニックを使われた場合のレートが行き着く先です。レートが行き着く先がどこになるのかという視点でも考えなければなりません。\n不正テクニックを使われた場合、一人ひとりの損害はたった1/10であっても、知らない間にレートが吸われ、そのレートが最終的に行き着く先は\u0026hellip;わかりますよね。\nそれは、ランク10であったり、高レートだったりということになります。\nしかも、GBLは1勝するか1敗するかがレートに大きな影響を及ぼします。それが続けばどれほどの損害を受けるかが明らかでしょう。\nゲームのシステム上、それを個人の実力で覆すのは不可能です。断続的にそういうバトルを食らってしまうと、なかなかその遅れを取り戻すことはできません。その理由については後ほどお話します。\nその他のおかしな動き その他にもおかしな動きはまだあります。これはバグか不正かはわかりませんが、私がミラーマッチになったときにはっきりと確認できる現象で、通常、ミラーだと同時攻撃になるはずなのですが、最初は1回余分にこちらが攻撃しなければチャージがたまらないようになり、次には2回とどんどん遅れていく現象がかなり頻繁に発生しています。ミラーになったときは、約半分の試合にこの遅れが発生し、おそらく、ミラー以外にも発生し続けているのだと思われます。\nその他、シールド3枚、シールドすり抜け、フリーズしてタコ殴りにされる、バトルが開始したのに画面が移行せず負けたことになっている、など私が今シーズンで体験した出来事です。これは過去シーズンにおいても発生していましたし、今シーズンにおいても発生し続けています。\n追加で、同時チャージ攻撃なのに相手だけ先に打って交代するという問題、残り2体が一発で落ちる状態なのに相手が交代せずにタイムアップが進んで負けるなどの問題があります。\n私は、GBLを半年間プレイし、改善されるのを待ちましたが、改善される気配はありません。したがって、これ以上ストレスを溜めるのもなあ、と思ったのでGBLをやめることにしました。\nそもそもが運ゲーである プレイヤーには実力の差はほとんどありません。GBLの勝負は運と不正、あるいはバグによって決まります。その割合が非常に大きい。レートも同じです。\nその証拠に、シーズン2においても、世界ランク1位だった人が不正テクニックを使用していたことが判明しています。また、ランク10に到達した人の何名かも不正テクニック(5の倍数を含む)を使用していたことが判明しています。もし不正なんかで勝負は決まらないのであれば、不正テクニックの使用者が世界ランク1位になるということは起こらなかったはずです。\nまた、GBLシステムは完全におかしいです。プレシーズン、シーズン1ともにランク10に到達した多くの人たちがいますが、シーズン2においては全体のスピードが遅いようです。\nその理由の一つは、初期レートの差です。今までは1000ほどのレート差が初期についていることが珍しくありませんでした。しかし、シーズン2においては、その差が小さくなりました。したがって、シーズン2ではランク10に到達する人も少ないというわけです。初期レートでランク10に到達可能か否かが決まっていたシステムは絶対におかしかったわけです。\nその証拠に、過去のボードでは、ランク7にもかかわらず3200ものレートを獲得している人が確認されています。下記の画像は初期レートが3200だったことを意味します。\nhttps://imgur.com/r/TheSilphRoad/U8RMFOL\nhttps://www.reddit.com/r/TheSilphArena/comments/ghfr5l/3202_mmr_with_41_battles_rank7_and_number_6_in/\n例えば、このときの私の初期レートが1900ですから、スタートから1300ものレート差があったことになります。この差を公正なバトルで埋めるのは不可能です。プレシーズンとシーズン1では、どんなに頑張っても大体の最終評価が初期レートにより決まっていた印象があります。ランク10の到達可能範囲についても、大体はある初期レート数値以上を得たものに収束したのではないかと考えられます。\n私は、運ゲーが苦手ですし、GBLも好きではありませんでした。不正テクニック(5の倍数を含む)も使用する気はないので、ここでやめることにしました。\n\u0026hellip;疲れました。\nチーターを責める気はない とはいえ、このバグゲーム、設計がダメなので不正テクニックの使用者を責める気は全くありません。\nGBLのシステムがつまんないので、つまんないというだけの話です。\nポケモンGoは素晴らしい設計ですが、そこに入り込んできたGBLの設計があまりにひどかったというのが私の意見です。\nGBLは単純に「不正やバグが蔓延した部屋にプレイヤーを閉じ込め、さあ殺し合え」ってだけのシステムです。そこには革新性もなければ創造性もありません。むしろ個人のそれを低下させる要素でしかない。\n昔からある人々を依存させるシステムですが、中毒性こそあれ、それは本来、面白いものでもなければ、楽しいものでもありません。ただ戦わされ、評価され、中毒にされているってだけの話です。\nポケモンGoが、こういったどこにでもあるような劣悪な評価システムに依存し、どこにでもあるような対人ゲーム(バグ具合からみるとそれ以下)に成り下がっていくのは、長期的に見て、このゲームが本来持つゲーム性やシステムを破壊すると思います。\nGBLは、できれば設計し直すことをおすすめします。\nこのようなバグが多いゲーム、修正する能力がないであろうゲームにおいて、プレイヤー同士を一律に評価するシステムを構築すべきではありません。\n本来なら笑って見過ごされていたバグや不正も評価が絡んでくるとなると、見過ごすことができない。\nここまでバグが多い修正されないゲームは、このような評価システムを採用すべきではありません。バグが発生することを前提に構築する必要があるのです。\nまた、GBLのシステムは、ポケモンGoの本来のゲーム性に反していると思います。\n誰が持ち込んだのかは知りませんが、私は、GBLの設計は非常によろしくないと考えています。\n","description":"","formated_time":"2020-07-02","href":"https://syui.github.io/blog/post/2020/07/02/pogo/","tags":["pokemon"],"title":"ポケモンGoのGBLをやめた話","utc_time":"2020-07-02T00:00:00Z"},{"categories":null,"contents":"昔のアニメで見てなかったやつをいくつか見てみたんだけど、七星のスバルというアニメが意外にも面白かったので紹介。\n1話を見た瞬間、「はあ\u0026hellip;面白くねえ\u0026hellip;いつの時代のアニメだよ」って思ったのは内緒ですよ。\nでも2話以降、普通に面白かった。まあ、戦闘シーンとかは、正直あれなんですけど、でも、ストーリーが良く出来てるし、普通に楽しめました。\nまず、ヒロインがかわいい。好き。\n次に、ツンデレの子がいいツンデレなのもポイント高いです。(悪いツンデレは過激すぎる子です)\n他にもゲームオーバーになるとアカウント抹消とか緊張感がありましたし、ヒロインが生きてるんじゃないかって謎が面白いですし、三角関係っぽいのも面白いですし、センスが現実に及ぼす影響、それをゲームによって引き出す陰謀みたいなのも面白いですし、よかったですよ。\nこのアニメ、評判は良くないみたいなんですけど、個人的には普通に面白かったし、2期やってほしいな。続きが気になる。\nhttps://www.reddit.com/r/anime/comments/9hh0gy/shichisei_no_subaru_episode_12_discussion_final/\n","description":"","formated_time":"2020-07-01","href":"https://syui.github.io/blog/post/2020/07/01/anime/","tags":["anime"],"title":"七星のスバルが面白かった","utc_time":"2020-07-01T00:00:00Z"},{"categories":null,"contents":"アイコンをいくつか作ってみました。\ntrace こちらは、ny-aさんに提供したやつで、traceというファイル名。動物は難しそうだったので足跡なら簡単なんじゃないと思って作り始めたんだけど、いらない部分を削ぎ落としていったら、色々あってこんな形になった。\n一応、いろんな角度から見てもそれなりにいろんなものに見えるようなってる。私の場合だと、上からは石、斜め右は爪、左は箱、下は鐘など。\n実は、私は、アイコンを移行したばかりのとき、違和感だらけで、「うーん、やっぱりなんか違うよなあ」みたいなことを思ったりしたんだけど、今は慣れたという経験があって、逆に複雑なアイコンに戻すのはちょっと無理ってなったりするので、最終的には、シンプルに落ち着くのではという考えがあったりするので、一番シンプルにしてみた。なお、シンプルさの指標として、一つは使用されている色の数かな。\nrobot 以前、ロボットのアイコンを作ったんだけど、あまり納得いってなかったので、作り直して、やっと完成したと思う。\nmoon 月のアイコン。絵文字とかにもあるけどね。でも、線の大きさや色が結構違ってたりするんだよ。よく使いそうだから、自分でも作っとくかとか思って。\ncloud 雲のアイコン。よく自分のイラストに登場している。\nowl フクロウをイメージして作ったアイコン。心理テストをやったらフクロウだったので作ってみた。\n目をつけるとかわいくなったりするなあとか、色々な学びがあったアイコンだった。\nフクロウぽくないというのは確かにそのとおり。\nただ、目を大きくすると、強調が強すぎて個人的にはNGでした。最初は、緑一色にしようかと思ったくらいなので、強調は抑えていきたい。また、くちばしを小さくするのはわかりにくいし、人に見えるので、大きくしてみた。\nフクロウから考えはじめたアイコンなんだけど、最終的には、普通の鳥っぽい。\n実はアイコンを作ってるとこういうことはよくある。最初のイメージと出来上がったものが違ってくる。\nただ、私の場合は、出来上がったものに納得してればOKだし、いくら最初のイメージ通りでも、納得できないならNGなので、最初のイメージにこだわりはあまりない。\nとはいえ、名前は最初のイメージにすることが多いかな。出発点がわからなくなるし。\nsword ソードのアイコン。私は、図形をこねくり回してアイコンを作ることが多くて、owlもswordも、元はtraceのアイコンに使った図形を使用している。それを伸ばしたり、狭めたり、回転させたり。\ntraceの図形自体も一つ作って、複製し、色を白とオレンジにして重ね合わせ、白の部分を透過するという作りになってる。\n/icon\n","description":"","formated_time":"2020-06-23","href":"https://syui.github.io/blog/post/2020/06/23/icon/","tags":["icon"],"title":"アイコンをいくつか作ってみた","utc_time":"2020-06-23T00:00:00Z"},{"categories":null,"contents":"\ntwitterなどで使ってるヘッダー画像、NASAが提供してるものを使ってたんですが、自分が描いたものに変更してみました。\n前のやつが地球だったので今回も同じ。\nあと、フィールド画像とかアイテム画像で納得いってなかったやつ修正してみたりです。\n","description":"","formated_time":"2020-06-22","href":"https://syui.github.io/blog/post/2020/06/22/illust/","tags":["illust"],"title":"ヘッダー画像を変えてみた","utc_time":"2020-06-22T00:00:00Z"},{"categories":null,"contents":"\nポケモンGoのメガシンカはこんな感じになるのではないかと期待しています。わざわざ画像作りました。\nレイドでメガシンカしたポケモンとバトル\n終了後に元の姿に戻る、ゲットチャレンジ\nメガシンカしたポケモンとのバトルは報酬に稀に石が入ってることがある\n最高の相棒と石とアメでメガシンカできるようになる、なお、開放できるのはXYのうちどちらか一方のみ\nメガシンカが開放されたら、1バトルにつき1回のみメガシンカが可能となる\nボックスでもメガシンカの姿を確認できるボタンが付く、なお、ボックスを閉じると元の姿に戻る\n「最高の相棒」条件は付くのか？ この条件は付けるのが最も適切だと思います。理由はいくつかあります。\n一つに、この条件がつかないとすぐにメガシンカできてしまうので、なるべく攻略されるのを遅らせたい運営としては、この条件をつけると思います。\nまた、攻略を遅らせる理由でメガシンカできるポケモンを限定する方法を採用した場合、そこにプレイヤーの個性が反映されないという問題があります。例えば、今回はスピアーだけメガシンカできるよと、これでは、楽しくありません。みんなスピアーを一度だけメガシンカさせてそれで終わりです。\n「最高の相棒」条件をつけることで、これはクリアするためにかなりの日数がかかりますし、自然とプレイヤーが選択するポケモンがバラけ、攻略も遅れるでしょう。\nまた、相棒メダルが厳しすぎるという理由の動機づけにもなります。現在、相棒メダルは100という途方もない数字です。しかし、メガシンカの条件に入れることで、自然に数を稼げるよう誘導できます。\nしたがって、相棒メダル、攻略速度、プレイヤーの個性の反映などの観点から「最高の相棒」条件は付くと思います。\n","description":"","formated_time":"2020-06-19","href":"https://syui.github.io/blog/post/2020/06/19/pogo/","tags":["pokemon"],"title":"ポケモンGoのメガシンカはどうなるのか","utc_time":"2020-06-19T00:00:00Z"},{"categories":null,"contents":"今回は、ポケモンGoは早いうちからやっておいたほうがいいという話をします。\nポケモンGoは、Nianticが出しているARアプリで、2016年07月にリリースされ、未だに人気のゲームです。\nポケモンGoをやっていると、いろんな年齢の人がプレイしています。まさにお年寄りから子供までという感じです。中には本当に小さな子もプレイしていて、親子連れで幼稚園くらいの子も結構やってたりします。\nでは、このような年齢からポケモンGoをプレイするのは、良いことなのでしょうか？\n私の考え方からすると、これは非常に良いことです。\nなぜなら、その子は、幼稚園の頃から投資を始めていることになるからですね。\nなんでポケモンGoが投資につながるんだという話ですが、これにはいくつかの理由があります。\n一つに、ポケモンというコンテンツはみなさんが生まれたときから当たり前のように存在し、小さい頃はアニメも見ていたでしょう。それほど一般的なものです。初めて投資するようなときは、どこぞの新興株なんかより、古くからある一般的な企業の株が最適です。\n次に、ポケモンGoのゲーム性です。ポケモンGoというゲームのコンセプトは「いつも持ち運べるあなたのポケモン」です。ゲームが現実とリンクしていて、仮想世界と現実世界の融合、つまり、現実に行った場所でポケモンを捕まえ、それを保有する。これがポケモンGoのコンセプトです。非常によく考えられています。これを超えられるゲームはあまり存在しないでしょう。もちろん、ポケモンというIPの強さによる部分も大きい。しかし、いくら巨大IPとはいえ、このようなコンセプトなしに、このゲーム価値はありえなかったでしょう。\nしたがって、巨大IP x Nianticのコンセプトが組み合わさったからこそのゲーム価値だったと思います。\nこのゲームには、他のゲームにない価値が存在します。\n通常のゲームは、一度遊んだら終わりというものが多いですが、ポケモンGoは、ずっと続いてきて、これからも続いていくことが予想されます。そして、それは現実の行動と深く結びついています。早くからはじめた人ほど、たくさんのポケモンを保有することになります。\nそのため、今始めたばかりの人は、初期から続けてきた人に追いつけません。もちろん、新しい要素が次々に出てきて、今始めても楽しいわけですが、始めるなら早いほうがいいゲームです。\nそれにこのゲームは、どの年齢層でも楽しめる、実際に楽しんでいるという点が圧倒的に強い。強すぎる。\n例えば、一部の若い人たちの間だけで流行っているようなゲームや、子供の中だけで流行っているようなゲームは、時間経過とともにやめてしまうことが多い。中学生になったとき、あるいは、大学、社会人。そこでやめてしまうのが通常です。\nしかし、ポケモンGoは、おそらくそうはならない。\nですから、投資先としては、非常に優良です。\nこのゲームは、現実と結びついた形で、自分が主人公となり、ポケモンを保有するゲームです。そこには、他のゲームにはない価値があり、その価値は、現実の行動によって日々、高めていくことができるのです。\nなので、ポケモンGoを早いうちから始めるのは、とても良いことだと思います。\n学校でもポケモンGoが流行る時期が何度かあるでしょう。また、大人になってからも色々と役立てられる場面があるはずです。ポケモンGoがきっかけで結婚しましたみたいな人がいたり、海外で友だちができたという人もいれば、営業で役にたったみたいな話があったり。\nしかし、これらは、単なる副産物に過ぎません。ポケモンGoは、それよりもっと大きな、あなたのルーツになりえる、そんなゲームだと思います。\n","description":"","formated_time":"2020-06-18","href":"https://syui.github.io/blog/post/2020/06/18/pogo/","tags":["pokemon"],"title":"ポケモンGoは早いうちからやっておいたほうがいい","utc_time":"2020-06-18T00:00:00Z"},{"categories":null,"contents":"69話から74話が最新となっております。\nPLAY : https://game.syui.ai\nゲーム紹介 : https://syui.ai/imgame/\n補足小説 : https://syui.ai/novel/\nくいなちゃんが隠れキャラとして登場 たまにあるじゃないですか、他の作品のキャラがゲストとして登場したりするの。ああいうの一度やってみたいなあ、面白そうだなあと思ったので\u0026hellip;\n今回は、くいなちゃんをゲストとしてちょろっと登場させてみました！\nくいなちゃんは、隠れキャラなので探してみてください。登場するのは今回の一度きりですが。\n(それに二次創作で一度絵を描いたことがあってキャラ絵を用意するのが楽だったというのもある)\nその他 今回のテーマは、恋愛\u0026hellip;みたいなものでしょうか。一度やってみっか、とか思ったので。\nセニョールことセニルですが、実は、自分が一番苦手なタイプと言うか、あまり好きではないタイプです。あえてそうしました。\n普通、なんで苦手なタイプで書くんだよ！って感じですけどね。なんとなくです。\nストーリー的には漫画の方につながるよう構成されています。\nしかし、漫画の続きを書くかどうかがわかりません！\nまんが、かくの、たいへんなんだよなあ\u0026hellip;。\nなお、セニョールという言葉が登場しますが、スペイン語の意味はなく、単なるキャラの口癖です。\n","description":"","formated_time":"2020-06-17","href":"https://syui.github.io/blog/post/2020/06/17/game/","tags":["game"],"title":"ノベルゲームを更新してみた69","utc_time":"2020-06-17T00:00:00Z"},{"categories":null,"contents":"ホウオウ以来、プレイしてなかったのですが、twitter見てるとエンテイが来てるぽいので、クリアしてみました。\nポケマスはもしかしたら長続きするゲームになるかもしれないと思いました。こういったメダルの実装はいいですね。こういうのがあると、課金してでも集めたいような、または継続するための要素になりそうな気がする。\n難易度は、正直、難しかったです。ちょっと難しすぎるんじゃないって思いました。脱落者がすごく出そう。これが良いのか悪いのかわかりません。難しいゲームがいいのか、簡単なゲームがいいのか。\n今回、アセロラ、レッド、リーフでクリアしました。アセロラでひるませて、リーフでB技を繰り返します。アセロラはLV100なのですが、かなり役に立ちました。というか、アセロラがいなかったらクリアできなかったな。\nポケマスのエンテイねむりバグ また、ねむりバグなるものがあって、以下のようにするとクリアできるようになっています。おそらく、これはバグではなく救済の類だと思いますが。\n画面に表示されている技の順番を見ながらやります。ねむりは全部当てなければなりません。\n相手のB技カウントが1のとき、かえんほうしゃを打ってくる\n相手がかえんほうしゃ、こちらは、ねむり、攻撃、攻撃の順にそれぞれのメンバーが打つ\n相手がB技を入れる\nそこで、再度、ねむりを打つ\nこちらがB技を食らう\n相手が眠りを食らう\nすかさず、ねむりを打つ\n相手はスピードスターを打つ前にねむりを食らうが、すぐに目を覚まし、スピードスターを打つ\nこちらがスピードスターを食らう\n相手がねむりを食らう\n相手が起きるが、動かなくなる\nそれまでの手順が正しければ、相手のB技を食らったあとは、スピードスター前後で眠りを連発しとけば大丈夫です。うまく眠りが入ったら相手は動かなくなります。\n","description":"","formated_time":"2020-06-13","href":"https://syui.github.io/blog/post/2020/06/13/pokemas/","tags":["pokemon"],"title":"ポケマスのエンテイをクリアしてみた","utc_time":"2020-06-13T00:00:00Z"},{"categories":null,"contents":"現在、iphone5sでsignedなiosのfw 12.4.7がjailbreak(脱獄)可能なので、checkm8のexploitを利用してjailbreakしてみました。\niphone5sは、現在、放置になってて、楽しい使い方ができてなかったので、これを期に活用していきたい。\ncheckra1n 実行にはcheckra1nというツールが便利です。jailbreak後はcydiaもinstallが簡単にできます。\nただし、checkra1nの実行は、少しの工夫が必要でした。iphone5s(12.4.7)の場合、通常は、error -21が出てきてjailbreakができません。exploitが走っていない模様です。\nhttps://github.com/checkra1n/BugTracker/issues/1389\n私の場合ですが、dfu-modeになったときにもホームボタンを離さず、次のステージに進んだ時点でホームボタンを離すとうまくrebootしてexploitが走ったような気がする。usb接続の抜き差しはやっていません。何度かやると成功するぽいので、何度か実行してみてください。\naltstore altstoreというものがあり、app(.ipa)に自己署名して起動するものらしいです。\naltstore-serverをmacで起動し、mail.appにて、pluginを有効にします。そして、deviceとusb接続し、当該deviceを信頼した上で、altstoreをinstallします。なお、installの際には、apple id, passwordが必要になります。完了すると、deviceにaltstoreのアイコンがあります。また、ファイアウォールをoffにするといいという情報もあります。\nhttps://github.com/rileytestut/AltStore/issues/83\nreprovision 自己署名の自動化(再署名)を可能にするreprovisionが便利です。\nunc0ver 脱獄ツールぽいunc0verですが、github-releasesから.ipaをdownloadしてaltstoreで開きます。\nなお、12.4.7はまだサポートされてないぽい。\n","description":"","formated_time":"2020-06-10","href":"https://syui.github.io/blog/post/2020/06/10/ios-jb/","tags":["ios"],"title":"iphone5s(ios 12.4.7)をjailbreakしてみた","utc_time":"2020-06-10T00:00:00Z"},{"categories":null,"contents":"60話から68話が最新となっております。\nPLAY : https://game.syui.ai\nゲーム紹介 : https://syui.ai/imgame/\n制作秘話 制作に関して、つぶやいたことなど、覚えている限りで適当に書いてみます。\n各キャラクターに一つは弱点を入れるようにしてる。例えば、アイならボロ、キョウスケならハゲ、ポンタなら犬など。完全無欠のかっこいいキャラというより、主人公だろうがなんだろうが、どこかツッコミどころのある弱点があるようなキャラを心がけてるみたいなとこある気がする。\nなんでアイは肩を出してるの？これは個人的な好みです、という理由と、もう一つは、手足が内部でつながっているかをイメージしやすくするためかな。絵って、裸から書いて、服を着せてという書き方する人もいるんですけど、私はそんな面倒なことやりませんから、全部一発書きしたあと想像でつながってるか視るんですよね。いや、エッチな感じではなく純粋にこの絵は大丈夫なんだろうかという視点で。それやるのに肩を出してたほうが見やすいのです。興味ある人は、ぜひ試してみてくだされ。\n今回の話は、シリアスっぽく、でもシリアスになりすぎないように注意して作りました。どこか笑えるような、救いようがあるような、そんな雰囲気に仕上げたかったし、この作品では、そこは譲れないところだと思ってる。なんか残虐でショッキングな単語も出てきますが、それを和らげる工夫を頑張ってみた感じ。\nストーリー上の矛盾点については、直近しか読み直していないので、存在しているかもしれないけど、また読み直す機会とかあれば、あとからその理由をでっち上げたりとか、そういったことを含めて楽しんで作っていけたらと思ってたりする。とはいえ、軸となる部分はあまり間違えないと思うんだけど、細かい部分、ふんわりした部分なんかは、書いていて、多分、こんな感じだっただろうみたいなところがあるので、若干の不安を感じてたり\u0026hellip;。\n次の話は、既に頭の中にぼんやりあって、でもそれをいつ書き出すかは未定。気分が乗ったら書くことはあるかも。マンガも数ページ書いてあって、こっちも構想はあるんだけど、区切りまで書けてないので今のところ出さないと思う。\n今度は、少し内容に関することを適当に。\nまず、絵本のタイトルは？「月と雲」(仮)。どんな話なのかというと、まあ、これは本編で出すことがあるかもしれんので、内緒にしとこう。とはいえ、今のところ予定ないので、一生でないかもしれんけど\u0026hellip;。\n","description":"","formated_time":"2020-06-06","href":"https://syui.github.io/blog/post/2020/06/06/game/","tags":["game"],"title":"ノベルゲームを更新してみた60","utc_time":"2020-06-06T00:00:00Z"},{"categories":null,"contents":"GBLは楽しんでいますか？シーズン2のハイパーリーグが始まりましたね。\n現在のレートは2400あたり。初期レートは2000です。今回は少しハイパーの感想とか書きます。\nランク1からランク8まで経験して、プレシーズンや高レート帯も経験してきた感想からいうと、相手の強さは、ランク1でもランク8でも全く変わりませんでした。今は変わると思います。遅れて参加したほうが良かったんじゃないかという気持ちも少しあります。\nただ、私の場合でいうと、2000でも2400でも相手の強さは変わらない印象です。みなさん、同じスキルを持ち、似たようなポケモンを使われますので。\n少しだけハイパーをプレイした感想ですが、タイムアップになることが増えたような気がします。\n相手も私も防御重視のポケモンを使っているということでしょう。\nポケモンGoは、レイドは攻撃力、ジムはHP、バトルは防御力という優先順位があると思っていて、GBLは、防御力重視です。\n","description":"","formated_time":"2020-06-03","href":"https://syui.github.io/blog/post/2020/06/03/pogo/","tags":["pokemon"],"title":"ポケモンGo、GBL S2ハイパーリーグがはじまった","utc_time":"2020-06-03T00:00:00Z"},{"categories":null,"contents":"windowsがWSL2, terminalなどリリースしてたりしたので、色々とupdateしてみました。\n$ scoop install curl 7z # powershell 7.0.1 # https://github.com/PowerShell/PowerShell/releases $ curl -LO https://github.com/PowerShell/PowerShell/releases/download/v7.0.1/PowerShell-7.0.1-win-x64.msi $ msiexec.exe /package PowerShell-7.0.1-win-x64.msi /quiet ADD_EXPLORER_CONTEXT_MENU_OPENPOWERSHELL=1 ENABLE_PSREMOTING=1 REGISTER_MANIFEST=1 # openssh v8.1.0 # https://github.com/PowerShell/Win32-OpenSSH/releases $ curl -LO https://github.com/PowerShell/Win32-OpenSSH/releases/download/v8.1.0.0p1-Beta/OpenSSH-Win64.zip $ 7z x OpenSSH-Win64.zip $ cp OpenSSH-Win64/* \u0026#39;c:\\programfiles\\OpenSSH\\\u0026#39; or $ robocopy .\\OpenSSH-Win64\\ \u0026#39;c:\\Program Files\\OpenSSH\\\u0026#39; # terminal 1.0.1 # https://github.com/microsoft/terminal/releases $ curl -LO https://github.com/microsoft/terminal/releases/download/v1.0.1401.0/Microsoft.WindowsTerminal_1.0.1401.0_8wekyb3d8bbwe.msixbundle $ Add-AppxPackage ./Microsoft.WindowsTerminal_1.0.1401.0_8wekyb3d8bbwe.msixbundle robocopyは例えば、sshdというprocessが起動していても上書きするので便利です。\nwinget 今までは、scoopを愛用してたけど、wingetが公式で提供され始めたので、よさそうだったら使っていきたい。\nhttps://github.com/microsoft/winget-cli\n$ curl -LO https://github.com/microsoft/winget-cli/releases/download/v0.1.4331-preview/Microsoft.DesktopAppInstaller_8wekyb3d8bbwe.appxbundle $ Add-AppxPackage Microsoft.DesktopAppInstaller_8wekyb3d8bbwe.appxbundle $ winget なお、ssh経由では、wingetは使用できない感じでした。アクセス権関連ぽい気がする。これは採用しづらい\u0026hellip;。\n$ scoop install which $ which winget c:\\Users\\syui\\AppData\\Local\\Microsoft\\WindowsApps\\winget.EXE issue : https://github.com/microsoft/winget-cli/issues/256\n参照 https://docs.microsoft.com/ja-jp/powershell/scripting/install/installing-powershell-core-on-windows\nhttps://docs.microsoft.com/en-us/powershell/module/appx/add-appxpackage\n","description":"","formated_time":"2020-06-01","href":"https://syui.github.io/blog/post/2020/06/01/win/","tags":["windows"],"title":"windowsの必須ツールをupdateしてみる","utc_time":"2020-06-01T00:00:00Z"},{"categories":null,"contents":"スポットレイトアワーが楽しい ポケモンGoでは、色違いが登場するコミュニティデイがありますが、スポットレイトアワーというものも1週間に一度、開催されています。\nこういうイベント好きです。twitter見ていてもみんな楽しそう。\nこの前、twitterでドーミラーの色違いをゲットしている人がたくさんいて、このイベント見落としていたみたい。なので、今後は、コミュデイとスポットアワーに注目してポケモンGoをやっていくと、楽しいかも。\nTuesday, June 23, 2020: Clefairy will be in the spotlight, and you’ll earn twice the XP for catching Pokémon. If you’re lucky, you might encounter Shiny Clefairy!\nhttps://pokemongolive.com/en/post/jun2020-events/\nClefairyとはピッピのことで、6/23は色違いのピッピと出会えるようです。ピッピの色違い、欲しかったんですよおおお！\nただ、ドンメルとコロボーシは、現時点で色違いは実装されていないような気がする。当日にも実装されていなかった場合、スルーかも。\nジェネレーションチャレンジが楽しかった クレセリアがゲットできたので楽しかった、色違いは出なかったけど。なお、30%の確率で出たぽい。\nhttps://pokemongo-get.com/pokego03242/\n最近の変更 まず、ボックスでコスプレポケモンを選択できるようになったのはいいですね。ほとんどの人が喜んでると思う。(なぜ今まで実装しなかったんだというツッコミはなしですよっ\nまた、「強化」の時間短縮ができるようになったのもよかったです。これも、ほとんどの人が喜んでると思う。\n昔は、何度も「強化」をタップして「はい」を選択し、戻ってまたタップを延々と繰り返さなければならなかったのですが、今回の変更では、一度のタップで「強化」が可能になっています。\nこれらは、原作からの変更になるのかもしれませんけど、私は、良い判断だったと思います。\nおそらく、原作との兼ね合いで葛藤もあったのではないかと思っていて、どういうことかというと、例えば、原作では、「ふしぎなアメ」というものがあります。レベルアップのアイテムなんですが、これもひとつずつ使う必要がありました。すごく面倒なんですけどね、そういうものなんです。\nですが、ポケモンGoでは、それを短縮する変更があって、私は良い判断だったと思います。\n今後やってほしいイベントなど レジスチル、ドジョッチ、リオルの色違いが欲しいなって思ってる。なので、レイドでレジスチル、スポットでドジョッチ、タマゴでリオルが出てくれたら嬉しい。\nまた、トゲピー花飾りを持ってるので、進化させて使いたい。進化できるなら花飾りなくていいのでっ！\n花飾りはピチューとイーブイがあるんだけど、進化できるんだよね\u0026hellip;。\n","description":"","formated_time":"2020-05-31","href":"https://syui.github.io/blog/post/2020/05/31/pogo/","tags":["pokemon"],"title":"ポケモンGo、スポットレイトアワーなど","utc_time":"2020-05-31T00:00:00Z"},{"categories":null,"contents":"GBLは楽しんでいますか？もうすぐシーズン2のスーパーリーグが終わりますね。\n私のスーパーリーグは、初期レート2000からの2200でした。\nGBLはただの運ゲー まず、GBLについてのおさらいというか基本的なことを説明します。このゲームの勝敗は運で決まります。\nこれについては、今シーズンは自分でも検証しています。\n検証方法としては、メインとサブを用意し、同じポケモン、同じ時間帯、同じレート帯でバトルしました。若干、個体値はメインが有利なものを使用しました。\n結果は、メインは-200レート。サブは+200レートでした。\n2週間ほど検証を行い、スキルは同じ人物が操作しているので、もちろん一緒です。\n同じスキル、同じポケモン、同じ時間、同じレートでバトルしたにもかかわらず、最終的にはレート400もの差が開きました。\nでは、何が違ったのでしょう？\nそれは、マッチングです。環境が変わったわけでも何でもないのです。\nこのように、GBLの勝敗は、ほぼ運によって決定します。レート差も大きく運に依存します。\nその後は、検証を終了して、サブを封印。メインでバトルしてました。\n検証で下がったレート1800から2200に上がったのが今季スーパーリーグでした。\nもし開発側だったら もし私が開発側だったとしても、そりゃ、運ゲーにしますよ。\n何故かと言うと、運ゲーのほうが長く遊ぶことができるからです。\nこのポケモンを使えば絶対に勝てるとか、このテクニックを使えば絶対に勝てるなどの攻略法があった場合、長く遊ぶことができないんですよ。\n新しい調整やら追加やらが必要になってきて、開発側としては面倒極まりないのです。\nなので、開発側としても、運ゲーにします。\nFFIVで麻雀が流行っているのもそんな理由だと思います。なぜ、麻雀が選ばれたのか？それは運ゲーだからでしょう。\nGBLが運ゲーである証拠に、技のバフ率が1/10だったり、または相性があったりしますよね。みんな同じようなスキルを持ち、同じようなポケモンを使います。\nですから、GBLは、最終的には運によって勝敗が決るゲームに過ぎないというわけです。\nこれは、とても基本的なことですが、多くの人が見落としているような気がします。\n良い成績のみが出てくるネット これを聞いて、例えば、こんな反論が予想されます。\n「でも、強い人は強いでしょ？」、「強い人はいつも好成績を上げている」と。\nこれも少し違います。ガチ勢で強いと言われている人の中にもそれなりの数、レートが溶けたと言ったっきり浮上しなくなってしまった人達がいます。\n悪い成績は投稿されず、もう一方の良い成績を収めた人のみ投稿しているので、そのように見えるのです。\nまた、初期レートでもかなりの差がついており、同じような勝率でも初期レートが300も400も違うことがよくあります。\nこの差をマッチング運バトルで埋めるのは難しいことです。\n検証結果と同じように、同じスキル、同じポケモンを使っても、なぜか大きな差が開いてしまうことも珍しくはないでしょう。\nランク10に到達できるのは、一部の強運に恵まれた人達に過ぎません。\n私も、強運に恵まれてさっさと辞めたいGBL。\n不運は重なる GBLをやってると、不運が重なる連チャンを食らいます。\n例えば、遅延バグで3連敗したとしましょう。こういう事があると、その後も全部出し負けを食らったりとか、あるんですよね。よくあるのです。不運が重なることがよくあります。\n不運が重なると、レートは死にます。私は、このバグゲームで、よくGBLみたいなものを作ったなあと驚きます。\nバグが発生するのは仕方ありません。ですが、今のGBLシステムでは、そのバグが回復不能な致命傷を負わせています。\nなぜ、バグが発生することを前提とした仕組みで作らなかったのでしょうか。\n心を不健康にするゲーム、ポケモンGo GBLが実装されて以降、ポケモンGoは、心を不健康にするゲームになっています。\nというか、GBLをやめちゃった人、多すぎませんか。\n最近、バトルしていても、頭のおかしいガチ勢しか残ってない気がするんですけど、そのためか、さらに面白くなくなっています。大丈夫でしょうか、GBLは？ (自分のことを棚に上げるやつ\nGBLやってると疲れますし、面白くないです。5試合のうち4試合をbotと気楽に対戦したい\u0026hellip;。ガチ勢とやるのは、5試合中1試合くらいで十分です。\nダイゴのポーズ GBL以外は、いいゲームなんですけどねえ。\nとりあえず、ダイゴのポーズほしいので、がんばる。\n","description":"","formated_time":"2020-05-30","href":"https://syui.github.io/blog/post/2020/05/30/pogo/","tags":["pokemon"],"title":"ポケモンGo、GBLの真実","utc_time":"2020-05-30T00:00:00Z"},{"categories":null,"contents":"今回は、なんとなく前回の続きでお絵かき講座でもやってみようかなと思ったのでやります。\nこの講座を受講すれば完璧にお絵かきできるようになりますよ！(半分、嘘で、半分、本当です\nなお、お絵かきが苦手だと思っている人が対象です。\nまずは私が過去に書いた絵を見てほしいのですが、特にこの部分に注目してみてください。石ですね。\nこの石、実はとんでもない石なのです。この石にお絵かきのすべてが詰まっていると言っても過言ではありません！\nなぜなら、この石、豪華にも3色を使っているからなのです！！\nまずは茶色で全体を塗りつぶして、区切りを書きます。その後、黒(透明)を2つ使う面と1つ使う面で構成されています。\nこの前のイラストを確認してみると、全部で1時間30分もかかってしまっているようで、意外と時間かかっちゃったなという感じでしたが、なんとなく意識していたのは、2面性と3面性ですかね。遠くは2面で、近くは3面です。\n難しいところは2面で構いません。簡単なところを3面化することで、なんとなく見栄えが良くなるかも。\nこの石が描けたら、もう何も言うことはありません。\nあとはなんとなく好き勝手、自由に描いていけばいいのではと思います。\n自分が好きな絵柄、描きやすいものってありますよね。\n私は、単純で簡単なものが好きです。逆に複雑で緻密なものが苦手です。\nどちらにも良さがあります。例えば、簡単そうに見えるシンプルな絵柄は、ごまかしが全く効きませんから、人によっては難しいと感じる人もいます。\nなので、その人の絵を書けば、お絵かきなんてそれでいいんだと思います。\nただのお絵描きですから、自分の好きに自由に描きましょう。\nお絵かき講座、応用編はこれで終了です。(何も言ってないような気もする\n","description":"","formated_time":"2020-05-29","href":"https://syui.github.io/blog/post/2020/05/29/illust/","tags":["illust"],"title":"お絵かき講座、応用編","utc_time":"2020-05-29T00:00:00Z"},{"categories":null,"contents":"最近の世論 最近、あまり思わしくない方向に世論が形成されていきそうな雰囲気を感じているので、あまり書きたい話ではないのですけど、今一度、表現の自由について考えてみようという内容で書いていこうと思います。\nまずは、少し前に芸能人の方が大勢からすごい批判を浴びることがありました。この人を芸能人Aとします。\nその芸能人の発言自体は不適切と判断された模様で、大多数の批判は的を得ており、適切だったと思います。\nしかし、批判が多かったので、それをいじめだと認定して、批判を批判する人たちまでもが登場し、色々と話題を呼びました。\nその時、私は、自分の考えがあったのですが、特に何も言わずスルーしていました。\nあの時点で私がなにかいう必要は特にないだろうと考えていたからです。\nですが、今度は、TVに出ていた人がSNSで批判され、それが原因かはわかりませんが、自殺してしまうという痛ましい事案がありました。\nこれによって、世論は急速に「批判や誹謗中傷を絶対に許さない」みたいな方向にシフト。新しい法整備も検討されているみたいです。\nしかし、既に誹謗中傷などは法律によって規制され、特定も難しくはありません。\nこの問題、どう考えていけばいいのでしょうか。\n職務上の性質 まず最初に、芸能人が大勢から批判されたり、またはプライベートを暴露されたして、大変な目にあっている、これをどう考えればいいのかです。\nある芸能人がこのようなことを言ったことがありました。\n「自分について良いニュースはどんどん宣伝してくれ。でも、悪いニュースを流すことは絶対に許さない。そんなことになれば、世間から批判を浴びる。いじめと変わらないじゃないか」\nこれは芸能人の性質、自分の仕事を理解していない人の発言でした。\nこれに対して、このような判例があります。\n「その情報は確かに芸能人のプライバシーに関わる情報だが、職務の性質上、それが公の利益に資するなら、そのプライバシーの要請は若干、低くなる」\nつまり、世間に対する多大な影響力を持っているにも関わらず、よい部分だけは報酬や称賛を得て、その人が失言したとき、批判されたときの不利益は受け付けないというのは、通らないのです。\nより大きな影響力には、より大きな責任が伴います。\nそれを、自分にとって有利なものだけ受け取って、不利は絶対に受け付けないというのは、公平でもなければ、公正でもありません。\nもちろん、何をどう考えようと個人の自由です。\n現に私自身は、芸能人Aの発言について特に何も言いませんでした。それがその人の考え方なんだろうと思ったくらいです。\nまた、その芸能人A自身は、自分の職務上の性質を理解されているみたいで、批判は普通に受け止められてたと思います。大勢がよってたかっていじめじゃないか、そんなのは許されないなんてことを言いませんでした。\nただ、批判を批判する人に関しては、そういった性質を全く理解されていないように思います。\n芸能人が一人の人間なら、批判する人もひとりひとりの人間です。\n私にとって、どちらに対しても、それがその人の考え方なんだろう以外に思うところはありません。\n誹謗中傷 誹謗中傷は、個人を傷つけるためだけに悪意からなされたものですが、そのような表現を規制する法律は既にいくつもあります。\n例えば、刑法上の侮辱罪や名誉毀損、ネット関連では、プロバイダ責任法など。\nこのように個別的事案や少数者は、これらの法律によってケアされるべきと考えます。\n精神的に追い詰められてしまった人が行くところは病院であったり、専門家のところです。\nSNSでこういった事件が起こったとき、多くの批判や誹謗中傷を行った人達へ対処しようと考えているようですが、個人的には炎上元の個人が専門家のケアを受けられるようにしたほうが効率が良いと思います。\n大規模な炎上が起こるのも日に数十件くらいでしょう。炎上に加担したすべてのユーザーを対処するより、発生源を支援するほうが合理的です。\nそして、表現の自由を一律に制限したり、萎縮効果を発生させるような法整備に私は反対です。\n表現の自由 表現の自由という言葉は曖昧で、それがどういう意味なのか、よくわからないってことありますよね。\n表現の自由を簡単に説明すると「言論同士を戦わせれば、より良いものが自然と残る」という信頼を前提に構築された理論です。\n例えば、批判があったとするじゃないですか。表現の自由は、そこで黙るのではなく、その批判が間違っているのなら言論には言論で対抗せよという精神の下にあるので、最も良くないことは、黙ること、口を閉じることなんです。\nこの前、ある有名な経営者の方が、国益を損なうようなことをやろうとし、大勢の人がtwitterで批判してそれを止めるということがありました。\n実は、歴史において、世の中を良くしていたのは、賛美や称賛ではなく、批判であることのほうが多かったりします。\n今回のコロナ禍においても、批判というのは大惨事を防いだかもしれなくて、私自身は、特に何も言わなかったしやらなかったわけですが、批判してくれた人たちのおかげで、本当におかげで、本当に良かったと思っています。\nこのように、全体の利益を考えるのなら、自由な言論市場を保障し、その環境を作っていくということは、最大の防衛線であり、最高の防衛線です。\nもちろん、良いことも悪いこともあります。ですが、悪いことは現在の法律でも十分に対処可能。むしろ、自由な言論市場への抑制のほうが気になります。完璧にクリーンな言論を目指してはいけません。総合的に見ると、それは全体の利益を損ないます。萎縮効果が発生し、その効果は多くの問題ない一般人に影響を及ぼします。\n言論には言論で対抗する、言論同士を戦わせれば、より良いものが自然に残る、そういった信頼を含め、私は、世の中はよくなってきて、これからもっと良くなっていくと考えています。\nこれはデータからも明らかです。世の中は過去に比べ遥かに良くなりました。山あり谷ありですが、総合的に見て、これからも、もっと良くなっていくであろうことが推察できます。\n表現の自由も、おそらく、このことに寄与しているのでしょう。そんなことを思います。\n","description":"","formated_time":"2020-05-28","href":"https://syui.github.io/blog/post/2020/05/28/private/","tags":["private"],"title":"表現の自由について考えてみよう","utc_time":"2020-05-28T00:00:00Z"},{"categories":null,"contents":"/tags\nタグは表示すると、整理したり、管理したり、付けるのも考えるのも覚えてるのも面倒だったりするので、表示していなかったのですが、他のブログ見てるとき、やっぱりタグあると便利だよなあと思ったので記事中に表示するようにしました。\n{{ $taxo := \u0026#34;tags\u0026#34; }} {{ with .Param $taxo }} \u0026lt;strong\u0026gt;tag{{ if gt (len .) 1 }}s{{ end }}:\u0026lt;/strong\u0026gt; {{ range $index, $director := . }} {{- if gt $index 0 }}, {{ end -}} {{ with $.Site.GetPage (printf \u0026#34;/%s/%s\u0026#34; $taxo $director) -}} \u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ $director }}\u0026lt;/a\u0026gt; {{- end -}} {{- end -}} {{ end }} {{ $s := path.Dir (.Permalink | relURL) }} {{ $t := index (split $s \u0026#34;/\u0026#34;) 1 }} {{ if eq $t \u0026#34;tags\u0026#34; }} {{- range $termName, $index := .Site.Taxonomies.tags }} \u0026lt;span class=\u0026#34;tag\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;{{ \u0026#34;/tags/\u0026#34; | relLangURL }}{{ $termName | urlize }}\u0026#34;\u0026gt;{{ $termName }}\u0026lt;/a\u0026gt;\u0026lt;/span\u0026gt; {{- end }} {{ end }} ","description":"","formated_time":"2020-05-27","href":"https://syui.github.io/blog/post/2020/05/27/hugo/","tags":["hugo"],"title":"タグを表示するようにしてみた","utc_time":"2020-05-27T00:00:00Z"},{"categories":null,"contents":"nexus7, iphoneseでテストしてみました。調整も一通り終了したので、releasesにて配布します。\nhttps://github.com/syui/game/releases/tag/v3.0\nいまのところ、対応はmac, win, ios, androidとなっています。\nやったこと アイコン調整 アイコンがぼやけてたので、シャープ強にしてから変換しました。\nまた、xcodeでのアイコンの設定が分かりづらかったのですが、サイズのあった.pngをprojectのImages.xcassets/AppIcon.appiconset/に置きます。そして、Contents.jsonを書きます。\n#!/bin/zsh # Images.xcassets/AppIcon.appiconset/ # use : icon_1024x1024.png mogrify -resize 20x20! icon_1024x1024.png icon-20.png mogrify -resize 40x40! icon_1024x1024.png icon-20@2x.png mogrify -resize 60x60! icon_1024x1024.png icon-20@3x.png mogrify -resize 80x80! icon_1024x1024.png icon-40@2x.png mogrify -resize 120x120! icon_1024x1024.png icon-40@3x.png mogrify -resize 180x180! icon_1024x1024.png icon-60@3x.png cp -rf icon-20@2x.png icon-40.png cp -rf icon-20@3x.png icon-60.png cp -rf icon-40@3x.png icon-60@2x.png mogrify -resize 29x29! icon_1024x1024.png icon-29.png mogrify -resize 58x58! icon_1024x1024.png icon-29@2x.png mogrify -resize 87x87! icon_1024x1024.png icon-29@3x.png mogrify -resize 76x76! icon_1024x1024.png icon-76.png mogrify -resize 152x152! icon_1024x1024.png icon-76@2x.png mogrify -resize 167x167! icon_1024x1024.png icon-83.5@2x.png if [ ! -f ./Contents.json ];then echo \u0026#39; { \u0026#34;images\u0026#34; : [ { \u0026#34;filename\u0026#34; : \u0026#34;icon-20@2x.png\u0026#34;, \u0026#34;idiom\u0026#34; : \u0026#34;iphone\u0026#34;, \u0026#34;scale\u0026#34; : \u0026#34;2x\u0026#34;, \u0026#34;size\u0026#34; : \u0026#34;20x20\u0026#34; }, { \u0026#34;filename\u0026#34; : \u0026#34;icon-20@3x.png\u0026#34;, \u0026#34;idiom\u0026#34; : \u0026#34;iphone\u0026#34;, \u0026#34;scale\u0026#34; : \u0026#34;3x\u0026#34;, \u0026#34;size\u0026#34; : \u0026#34;20x20\u0026#34; }, { \u0026#34;filename\u0026#34; : \u0026#34;icon-29@2x.png\u0026#34;, \u0026#34;idiom\u0026#34; : \u0026#34;iphone\u0026#34;, \u0026#34;scale\u0026#34; : \u0026#34;2x\u0026#34;, \u0026#34;size\u0026#34; : \u0026#34;29x29\u0026#34; }, { \u0026#34;filename\u0026#34; : \u0026#34;icon-29@3x.png\u0026#34;, \u0026#34;idiom\u0026#34; : \u0026#34;iphone\u0026#34;, \u0026#34;scale\u0026#34; : \u0026#34;3x\u0026#34;, \u0026#34;size\u0026#34; : \u0026#34;29x29\u0026#34; }, { \u0026#34;filename\u0026#34; : \u0026#34;icon-40@2x.png\u0026#34;, \u0026#34;idiom\u0026#34; : \u0026#34;iphone\u0026#34;, \u0026#34;scale\u0026#34; : \u0026#34;2x\u0026#34;, \u0026#34;size\u0026#34; : \u0026#34;40x40\u0026#34; }, { \u0026#34;filename\u0026#34; : \u0026#34;icon-40@3x.png\u0026#34;, \u0026#34;idiom\u0026#34; : \u0026#34;iphone\u0026#34;, \u0026#34;scale\u0026#34; : \u0026#34;3x\u0026#34;, \u0026#34;size\u0026#34; : \u0026#34;40x40\u0026#34; }, { \u0026#34;filename\u0026#34; : \u0026#34;icon-60@2x.png\u0026#34;, \u0026#34;idiom\u0026#34; : \u0026#34;iphone\u0026#34;, \u0026#34;scale\u0026#34; : \u0026#34;2x\u0026#34;, \u0026#34;size\u0026#34; : \u0026#34;60x60\u0026#34; }, { \u0026#34;filename\u0026#34; : \u0026#34;icon-60@3x.png\u0026#34;, \u0026#34;idiom\u0026#34; : \u0026#34;iphone\u0026#34;, \u0026#34;scale\u0026#34; : \u0026#34;3x\u0026#34;, \u0026#34;size\u0026#34; : \u0026#34;60x60\u0026#34; }, { \u0026#34;filename\u0026#34; : \u0026#34;icon-20.png\u0026#34;, \u0026#34;idiom\u0026#34; : \u0026#34;ipad\u0026#34;, \u0026#34;scale\u0026#34; : \u0026#34;1x\u0026#34;, \u0026#34;size\u0026#34; : \u0026#34;20x20\u0026#34; }, { \u0026#34;filename\u0026#34; : \u0026#34;icon-20@2x.png\u0026#34;, \u0026#34;idiom\u0026#34; : \u0026#34;ipad\u0026#34;, \u0026#34;scale\u0026#34; : \u0026#34;2x\u0026#34;, \u0026#34;size\u0026#34; : \u0026#34;20x20\u0026#34; }, { \u0026#34;filename\u0026#34; : \u0026#34;icon-29.png\u0026#34;, \u0026#34;idiom\u0026#34; : \u0026#34;ipad\u0026#34;, \u0026#34;scale\u0026#34; : \u0026#34;1x\u0026#34;, \u0026#34;size\u0026#34; : \u0026#34;29x29\u0026#34; }, { \u0026#34;filename\u0026#34; : \u0026#34;icon-29@2x.png\u0026#34;, \u0026#34;idiom\u0026#34; : \u0026#34;ipad\u0026#34;, \u0026#34;scale\u0026#34; : \u0026#34;2x\u0026#34;, \u0026#34;size\u0026#34; : \u0026#34;29x29\u0026#34; }, { \u0026#34;filename\u0026#34; : \u0026#34;icon-40.png\u0026#34;, \u0026#34;idiom\u0026#34; : \u0026#34;ipad\u0026#34;, \u0026#34;scale\u0026#34; : \u0026#34;1x\u0026#34;, \u0026#34;size\u0026#34; : \u0026#34;40x40\u0026#34; }, { \u0026#34;filename\u0026#34; : \u0026#34;icon-40@2x.png\u0026#34;, \u0026#34;idiom\u0026#34; : \u0026#34;ipad\u0026#34;, \u0026#34;scale\u0026#34; : \u0026#34;2x\u0026#34;, \u0026#34;size\u0026#34; : \u0026#34;40x40\u0026#34; }, { \u0026#34;filename\u0026#34; : \u0026#34;icon-76.png\u0026#34;, \u0026#34;idiom\u0026#34; : \u0026#34;ipad\u0026#34;, \u0026#34;scale\u0026#34; : \u0026#34;1x\u0026#34;, \u0026#34;size\u0026#34; : \u0026#34;76x76\u0026#34; }, { \u0026#34;filename\u0026#34; : \u0026#34;icon-76@2x.png\u0026#34;, \u0026#34;idiom\u0026#34; : \u0026#34;ipad\u0026#34;, \u0026#34;scale\u0026#34; : \u0026#34;2x\u0026#34;, \u0026#34;size\u0026#34; : \u0026#34;76x76\u0026#34; }, { \u0026#34;filename\u0026#34; : \u0026#34;icon-83.5@2x.png\u0026#34;, \u0026#34;idiom\u0026#34; : \u0026#34;ipad\u0026#34;, \u0026#34;scale\u0026#34; : \u0026#34;2x\u0026#34;, \u0026#34;size\u0026#34; : \u0026#34;83.5x83.5\u0026#34; }, { \u0026#34;filename\u0026#34; : \u0026#34;icon_1024x1024.png\u0026#34;, \u0026#34;idiom\u0026#34; : \u0026#34;ios-marketing\u0026#34;, \u0026#34;scale\u0026#34; : \u0026#34;1x\u0026#34;, \u0026#34;size\u0026#34; : \u0026#34;1024x1024\u0026#34; } ], \u0026#34;info\u0026#34; : { \u0026#34;author\u0026#34; : \u0026#34;xcode\u0026#34;, \u0026#34;version\u0026#34; : 1 } }\u0026#39; \u0026gt; ./Contents.json fi 音が出ない m4aにすると音が出るようになる。ただし、m4aは、tyranorider(web-browser)では出ないので、webでは使えなそう。mp3と同時に書く、連続して書く方法もあるらしい。\n[playbgm storage=00.m4a] ボタン位置の調整 x=0, width=350にする\n[glink storage=\u0026#34;s02.ks\u0026#34; text=\u0026#34;続きを読む\u0026#34; size=20 width=\u0026#34;350\u0026#34; x=0 y=230 color=gray font_color=black graphic=more.png clickse=yes.m4a] 画面調整 背景画像のサイズを400x700に変換する, メッセージウィンドウとdata/system/Config.tjsの調整。\n[freeimage layer=1] [position layer=message0 width=395 height=400 top=350] [position layer=message0 page=fore frame=\u0026#34;frame.png\u0026#34; title=\u0026#34;test\u0026#34; margint=\u0026#34;55\u0026#34; marginl=\u0026#34;30\u0026#34; marginr=\u0026#34;30\u0026#34; marginb=\u0026#34;30\u0026#34;] [ptext name=\u0026#34;chara_name_area\u0026#34; layer=message0 width=400 color=black x=20 y=365 size=26] [chara_config ptext=\u0026#34;chara_name_area\u0026#34;] [button name=\u0026#34;role_button\u0026#34; glink text=\u0026#34;S\u0026#34; size=15 width=\u0026#34;40\u0026#34; y=365 x=350 color=gray font_color=white graphic=b_blue_save.png clickse=yes.m4a role=\u0026#34;save\u0026#34;] [button name=\u0026#34;role_button\u0026#34; glink text=\u0026#34;L\u0026#34; size=15 width=\u0026#34;40\u0026#34; y=365 x=300 color=gray font_color=white graphic=b_red_load.png clickse=yes.m4a role=\u0026#34;load\u0026#34;] marginL = 0; // 左余白 marginR = 0; // 右余白 ;marginT = 8; // 上余白 ;marginB = 8; // 下余白 ml = 0; // 左端位置 mt = 0; // 上端位置 mw = 400-0; // 幅 mh = 700-0; // 高さ ストア配布 ストアで配布するかは検討していますが、微妙なところです。やることは増え、費用はかかり、回収できず、情報その他を危険にさらし、しかも、効果は全くないでしょう。\nわずかばかり勝算を増やすなら、しっかりした英語と中国語を追加して、ファンを増やすという目的に割り切って無料にし、まずはgoogle playで配布してみて、もし宣伝効果があるようなら、apple storeでも配布という流れがよさそう。これでも可能性はかなり低いと思う。\nもちろん、自分が作ったアプリがストアに並ぶというのはうれしいし、そういった意味で配布したいという気持ちはある。\nスクリーンショット ","description":"","formated_time":"2020-05-25","href":"https://syui.github.io/blog/post/2020/05/25/app/","tags":["ios","android"],"title":"ノベルゲームを実機でテストしてみた","utc_time":"2020-05-25T00:00:00Z"},{"categories":null,"contents":"前回は、画面の調整などをしていなかったので、今回は、調整してみました。\nまずtyranoscriptは、画面サイズを調整するのがそこそこに面倒でした。具体的には、背景画像などのサイズをimagemagickなどで変換し、ボタンの配置を調整しました。androidは、data/system/Config.jsの以下を調整すればいけました。\nml = 0; mt = 0; mw = 400-0; mh = 700-0; 次に、アイコンですが、こちらも面倒です。基本的には、cordovaのフォルダ構成で以下の場所に配置します。\n$ ls ./platforms/ios/yui/Images.xcassets/AppIcon.appiconset/*.png $ ls ./res/{Android,ios} 変換スクリプトは以下を使います。\nhttps://github.com/hibara/create-ios-all-icons-shellscript\nios iosはxcodeでbuildします。実機でdebugしました。\n$ npm i -g cordova $ cordova platform add ios $ cordova compile ios # 更新 $ vim www/ $ cordova prepare ios $ ls ./platforms/ios $ open -a Xcode ./platforms/ios/yui.xcodeproj ただ、apple storeで配布するには、年間1万円以上の費用がかかるみたいです。これでは、配布しても回収できませんね。それに、審査も厳しそうです。\nandroid androidはandroid sdkでcli toolやemulateをdownloadし、sdkmanでgradleをinstallします。cordovaがpathからこれらを実行し、buildします。\n$ cordova platform add android $ cordova compile android # android sdk install # curl -s get.sdkman.io | bash # sdk install gradle # device download # start emulate $ cordova emulate android https://cordova.apache.org/docs/ja/latest/guide/platforms/android/\ngoogle playでの配布は、初期費用の3千円程度で済むらしい。\n","description":"","formated_time":"2020-05-24","href":"https://syui.github.io/blog/post/2020/05/24/app/","tags":["ios","android"],"title":"ノベルゲームをiosとandroid用に調整してみた","utc_time":"2020-05-24T00:00:00Z"},{"categories":null,"contents":"\n","description":"","formated_time":"2020-05-20","href":"https://syui.github.io/blog/post/2020/05/20/illust/","tags":["illust"],"title":"イラスト描いてみた26","utc_time":"2020-05-20T00:00:00Z"},{"categories":null,"contents":"shellのcatでは、github-apiのpostでjson errorが出る場合があったので、xqにtxt, mdなどのファイルをjsonのbodyに入れて出力するコマンドを追加してみました。\n$ xq j ./index.md {\u0026#34;body\u0026#34;:\u0026#34;+++\\ndate = \\\u0026#34;2020-05-17\\\u0026#34;\\ntags = [\\\u0026#34;golang\\\u0026#34;]\\ntitle = \\\u0026#34;\\\u0026#34;\\nslug = \\\u0026#34;golang\\\u0026#34;\\n+++\\n\\n\\n[xq](https://github.com/syui/xq)にtxt, mdをjsonのbodyに入れるコマンドを追加した。\\n\\n```sh\\n$ xq j ./index.md\\n```\\n\u0026#34;} これでgh-actionsに以下のような書き方ができます。\n$ curl -X POST \\ -H \u0026#34;Authorization: token ${GITHUB_TOKEN}\u0026#34; \\ -d \u0026#34;`xq j index.txt`\u0026#34; \\ ${URL} github-apiのpostは、titleなども加えられるのでbodyだけでは応用性は低いですが、個人的に使わない機能を追加してもしょうがないので、必要最小限で。\nどんどんと、なんのツールかわからなくなってきましたね！\n\u0026hellip;でも新しく作るのとか、分けるのとか面倒なんだよなあ。\n","description":"","formated_time":"2020-05-17","href":"https://syui.github.io/blog/post/2020/05/17/golang/","tags":["golang"],"title":"xqというcli toolにtxtをjson{body:}に出力するオプションを追加してみた","utc_time":"2020-05-17T00:00:00Z"},{"categories":null,"contents":"今回は、pull-reqが来たときgh-actionsを実行してlintでreviewやらreview-supportをするbotを作ってみた話。突然やる気になって作り始めてしまったという。\nsql lintは、sqlintを使いました。\n$ sudo gem i sqlint $ sqlint index.sql on: pull_request: types: opened #on: # push: # branchs: # - test jobs: comment: runs-on: ubuntu-latest steps: - uses: actions/checkout@v1 - name: Set up Ruby 2.6 uses: actions/setup-ruby@v1 with: ruby-version: 2.6.x - name: gem i run: gem i sqlint - name: run sqlint env: GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} GITHUB_REPOSITORY: ${{ github.repository }} URL: ${{ github.event.pull_request.comments_url }} GITHUB_PR_NUMBER: ${{ github.event.pull_request.number }} run: | #test #pull_number=$(jq --raw-output .pull_request.number \u0026#34;$GITHUB_EVENT_PATH\u0026#34;) #pull_number=1 #URL=https://api.github.com/repos/${GITHUB_REPOSITORY}/issues/${pull_number}/comments # review sqlint if ! lint_body=`sqlint views/news/index.sql`;then lint_body=`sqlint views/news/index.sql|tr \u0026#39;\u0026#34;\u0026#39; \u0026#34;\u0026#39;\u0026#34;|tr \u0026#39;\\n\u0026#39; \u0026#39;.\u0026#39;` echo $lint_body curl -X POST \\ -H \u0026#34;Authorization: token ${GITHUB_TOKEN}\u0026#34; \\ -d \u0026#34;{\\\u0026#34;body\\\u0026#34;: \\\u0026#34;### :exclamation: sqlint ...no\\n${lint_body}\\\u0026#34;}\u0026#34; \\ ${URL} fi ここでは、sqlint views/news/index.sqlをcheckして、結果をgithub-pullreq-commentにpostしています。\nsqlintの実行結果がなかなか厄介で、ifを使わないとerrorになってしまい、かつexportや/dev/null 2\u0026gt;\u0026amp;1で回避できませんでした。\n次に、gh-actionsでhtmllint-cliでhtmlの文法をチェックする方法です。htmllint-cliの実行結果も改行コードや空行などがgithub-apiを使ったpostに邪魔になることがあるので注意です。\n$ npm i -g htmllint-cli $ htmllint index.html on: pull_request: types: opened #on: # push: # branchs: # - test jobs: comment: runs-on: ubuntu-latest steps: - name: run htmllint-cli env: GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} GITHUB_REPOSITORY: ${{ github.repository }} URL: ${{ github.event.pull_request.comments_url }} GITHUB_PR_NUMBER: ${{ github.event.pull_request.number }} run: | #test #pull_number=$(jq --raw-output .pull_request.number \u0026#34;$GITHUB_EVENT_PATH\u0026#34;) #pull_number=1 #URL=https://api.github.com/repos/${GITHUB_REPOSITORY}/issues/${pull_number}/comments npm i -D htmllint-cli -s ./node_modules/htmllint-cli/bin/cli.js init lint_body=`./node_modules/htmllint-cli/bin/cli.js views/news/index.html` curl -X POST \\ -H \u0026#34;Authorization: token ${GITHUB_TOKEN}\u0026#34; \\ -d \u0026#34;{\\\u0026#34;body\\\u0026#34;: \\\u0026#34;${lint_body}\\\u0026#34;}\u0026#34; \\ ${URL} 最終的に完成したやつを載せておきます。raw_urlは本来いらなくて、curlではなく直接pathを通せばいいんだけど、なにかに使えるかもと思って残してる。\non: pull_request: types: opened jobs: comment: runs-on: ubuntu-latest steps: - uses: actions/checkout@v1 - name: Set up Ruby 2.6 uses: actions/setup-ruby@v1 with: ruby-version: 2.6.x - name: gem i run: gem i sqlint - name: lint and support env: GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} GITHUB_REPOSITORY: ${{ github.repository }} URL: ${{ github.event.pull_request.comments_url }} GITHUB_PR_NUMBER: ${{ github.event.pull_request.number }} run: | # setup pull_number=$(jq --raw-output .pull_request.number \u0026#34;$GITHUB_EVENT_PATH\u0026#34;) npm i -D htmllint-cli -s ./node_modules/htmllint-cli/bin/cli.js init export GOPATH=$HOME/go export PATH=$PATH:$GOROOT/bin:$GOPATH/bin go get -v github.com/syui/xq # webhook=google translate #url=${{ secrets.WEBHOOK_URL }} # feed url_arch=\u0026#34;https://www.archlinux.org/feeds/news/\u0026#34; url_archjp=\u0026#34;https://www.archlinux.jp/feeds/news.xml\u0026#34; xml=index.xml xmljp=news.xml curl -sL $url_arch -o $xml curl -sLO $url_archjp link=`xq l l $xml` link=${link%*/} link=${link##*/} linkjp=`xq l l $xmljp` linkjp=${linkjp%*/} linkjp=${linkjp##*/} if [ \u0026#34;${link}\u0026#34; = \u0026#34;${linkjp}\u0026#34; ];then echo ok `xq l l $xmljp` exit fi title=`xq l title $xml` date_xml=`date --date=\u0026#34;$(xq p $xml)\u0026#34; +\u0026#34;%Y-%m-%d\u0026#34; -u` body=`xq l description $xml|tr -d \u0026#39;\\n\u0026#39;|sed -e \u0026#39;s/\u0026lt;[^\u0026gt;]*\u0026gt;//g\u0026#39; -e \u0026#39;s/\\*//g\u0026#39;` author=`xq $xml | jq -r \u0026#34;.[0].author.name\u0026#34;` up_xml=${date_xml} # google translate #title_ja=`curl -L -d \u0026#34;{\\\u0026#34;txt\\\u0026#34;:\\\u0026#34;$title\\\u0026#34;}\u0026#34; $url` #body_ja=`curl -L -d \u0026#34;{\\\u0026#34;txt\\\u0026#34;:\\\u0026#34;$body\\\u0026#34;}\u0026#34; $url|sed \u0026#39;s/\u0026amp;#39;//g\u0026#39;` # github api : pull-req p=p.json URL=https://api.github.com/repos/${GITHUB_REPOSITORY}/issues/${pull_number}/comments curl -H \u0026#34;Authorization: token ${GITHUB_TOKEN}\u0026#34; \\ https://api.github.com/repos/${GITHUB_REPOSITORY}/pulls/${pull_number}/files \u0026gt; $p # support views/news/index.sql cat $p | jq -r \u0026#34;.[]|select(.filename == \\\u0026#34;views/news/index.sql\\\u0026#34;)\u0026#34;|jq -r \u0026#34;.blob_url\u0026#34; check=`cat $p | jq -r \u0026#34;.[]|select(.filename == \\\u0026#34;views/news/index.sql\\\u0026#34;)\u0026#34;` if [ -n \u0026#34;$check\u0026#34; ];then body_c=\u0026#34;\u0026gt; ${link}\\n${title}\\n${date_xml}\\n${up_xml}\\n${author}\u0026#34; gh_url=`echo $check | jq -r \u0026#34;.blob_url\u0026#34;`\u0026#34;#L17-L23\u0026#34; raw_url=`echo $check | jq -r \u0026#34;.raw_url\u0026#34;` curl -X POST \\ -H \u0026#34;Authorization: token ${GITHUB_TOKEN}\u0026#34; \\ -d \u0026#34;{\\\u0026#34;body\\\u0026#34;: \\\u0026#34;${gh_url}\\n\\n${body_c}\\\u0026#34;}\u0026#34; \\ ${URL} fi # review sqlint if ! lint_body=`sqlint views/news/index.sql`;then lint_body=`sqlint views/news/index.sql|tr \u0026#39;\u0026#34;\u0026#39; \u0026#34;\u0026#39;\u0026#34;|tr \u0026#39;\\n\u0026#39; \u0026#39;.\u0026#39;` echo $lint_body curl -X POST \\ -H \u0026#34;Authorization: token ${GITHUB_TOKEN}\u0026#34; \\ -d \u0026#34;{\\\u0026#34;body\\\u0026#34;: \\\u0026#34;### :exclamation: sqlint ...no\\n${lint_body}\\\u0026#34;}\u0026#34; \\ ${URL} fi # support views/news/${link}.html cat $p | jq -r \u0026#34;.[]|select(.filename == \\\u0026#34;views/news/${link}.html\\\u0026#34;)\u0026#34;|jq -r \u0026#34;.blob_url\u0026#34; check=`cat $p | jq -r \u0026#34;.[]|select(.filename == \\\u0026#34;views/news/${link}.html\\\u0026#34;)\u0026#34;` if [ -n \u0026#34;$check\u0026#34; ];then line=`echo $check | jq -r \u0026#34;.additions\u0026#34;` gh_url=`echo $check | jq -r \u0026#34;.blob_url\u0026#34;`\u0026#34;#L1-L${line}\u0026#34; curl -X POST \\ -H \u0026#34;Authorization: token ${GITHUB_TOKEN}\u0026#34; \\ -d \u0026#34;{\\\u0026#34;body\\\u0026#34;: \\\u0026#34;${gh_url}\\n\\n\u0026gt; ${body}\\n\\n$(xq l l $xml)\\\u0026#34;}\u0026#34; \\ ${URL} fi # review htmllint raw_url=`echo $check | jq -r \u0026#34;.raw_url\u0026#34;` curl -sLO $raw_url lint_body=`./node_modules/htmllint-cli/bin/cli.js ${link}.html|sed \u0026#39;/^$/d\u0026#39;|tr \u0026#39;\\n\u0026#39; \u0026#39;.\u0026#39;|tr \u0026#39;\u0026#34;\u0026#39; \u0026#34;\u0026#39;\u0026#34;` lint_body=\u0026#34;\\n\u0026#34;`echo $lint_body | grep -v \u0026#34;found 0 errors\u0026#34;` if [ -n \u0026#34;$lint_body\u0026#34; ];then lint_body=\u0026#34;### :exclamation: htmllint ...no\\n${lint_body}\u0026#34; else lint_body=\u0026#34;### :white_check_mark: htmllint ...ok\\nviews/news/${link}.html\u0026#34; fi curl -X POST \\ -H \u0026#34;Authorization: token ${GITHUB_TOKEN}\u0026#34; \\ -d \u0026#34;{\\\u0026#34;body\\\u0026#34;: \\\u0026#34;${lint_body}\\\u0026#34;}\u0026#34; \\ ${URL} ","description":"","formated_time":"2020-05-16","href":"https://syui.github.io/blog/post/2020/05/16/arch/","tags":["github"],"title":"pull-reqが来たときgithub-actionsを実行してhtml,sqlをreviewする","utc_time":"2020-05-16T00:00:00Z"},{"categories":null,"contents":"ボチボチやってるうちにポケマスのことがわかってきたので、裏技？も含めて解説します。ただ、知ってるよという人は多いかもね。\nセンターにお気に入りのトレーナーを呼び寄せる ポケセンには、色々なトレーナーがやってきます。お気に入りを優先することもできます。\nチーム編成からトレーナーを選んで、左上にあるハートマークにチェックを入れます。\nトレーナーやポケモンのモデルを自在に動かせる トレーナーを選択して、+ボタンをタップしてから表示されるトレーナーやポケモンをタップすればモデルを自在に動かせます。\n最強のトレーナーは誰だ？ いまのところ、レッド+カツラ, シロナ+アセロラのペアが最強とされています。\nシロナを引きたかったので、この前、ダイヤを全部使いました。サービス終了したら取っといても仕方ないし、使えるときに使っとくのも悪くないとか思って。\nそしたら、結構当たりが出ました。シロナ、カミツレ、シトロン、ヒビキ、カリンが当たりましたね。すごい。\nポテンシャルも当たりを引きまくっていて、なんかすごい。\nシロナ+アセロラのペアは、バトルヴィラですごく活躍できそうです。\nということで、レッド、オーキド、シロナ、アセロラがS評価となります。ボードとかもこの優先でいいでしょう。カツラは、他のチームや単体で使いづらいので、A評価かな。\n後悔したこと アセロラが実は強かったこと知りませんでした。\n今現在、レッド、シロナ、アセロラを優先的に育てるといいと思っているのですが、カードを重複させないとボードの一部が開放されませんので、カードレベルを上げなきゃいけません。\nアセロラのイベントやってたとき、アセロラ弱いし別にいいかと思って、スルーしてしまってるんですよね\u0026hellip;。カードレベル上げるチャンスだったのに。\nあのとき、やっときゃよかった！\nそもそもアセロラは結構お気に入りなのに、なぜスルーしてしまったのか。\nあのときは、ボードとかカード重複の効果とか正直良くわかってなかったな。\n","description":"","formated_time":"2020-05-15","href":"https://syui.github.io/blog/post/2020/05/15/pokemon/","tags":["pokemon","pokemas","game"],"title":"ポケマスのことがわかってきたので解説してみる","utc_time":"2020-05-15T00:00:00Z"},{"categories":null,"contents":"ポケモンGoの最近の進捗です。色違いは、ダークライトとかピカチュウが嬉しかった。\nコスプレのポケモンがハロウィンあたりから急に進化できないような仕様になってしまったのが残念です。これ進化できるように元に戻してほしさある。トゲピーの花飾りだけでも頼む。トゲピーは昔から色違いが欲しくて、やっと来たと思ったら、進化できないぞ！\nドーブルのメダルをやっとゲットしました。これは\u0026hellip;苦行！もうやらなくていいので、ホッとしてる。\nGBL プレシーズン \u0026amp; シーズン1 GBLのプレシーズンとシーズン1の大体の成績です。どちらもランク9です。\nどちらも共通するパターンを食らってしまっています。\n最後に各リーグが混ざる時期があるじゃないですか。そこでは、勝率が50%くらいになってしまい、基本は上がりません。同じ場所をウロチョロするしかない。\nただ、バグで1日の全バトルを全敗するみたいな事が稀に発生するんですよね、未だに。\nこれは仕方ないことかもしれませんが、この時期にこれを食らってしまうと、割とどうしようもない。\nこれを食らうとレートは-100から-200ほど一気に下げます。各リーグが混ざる前はこれを食らってもなんとかマイナスからプラスに挽回できたのですが、各リーグ混ざったあとは、完全に勝率が50%程度になってしまうわけですから、一旦下げたら、下げたところに固定されてしまう感じです。\nシーズン1は、計3回ほどこれを食らってしまっています。プレシーズンはもっと多かった。\n回避策は、各リーグが混ざった時期に参加しないこと。ついつい参加して酷い目にあってる。バグが発生したときもすぐにやめればいいのですが「勝つまでやめない」みたいな心境になってしまって、結局、やられてしまうパターン。\nGBL シーズン2 GBLのシーズン2が始まりました。ランク7になりました。初期レートは2000でした。\n前回と同様、ランク1でもランク7でも相手の強さは全く変わりませんでした。\n","description":"","formated_time":"2020-05-14","href":"https://syui.github.io/blog/post/2020/05/14/pokemon/","tags":["pokemon"],"title":"ポケモンGo、最近の進捗","utc_time":"2020-05-14T00:00:00Z"},{"categories":null,"contents":"私は、cli(command line interface) toolを好んで使うのですが、自分で作ることもあります。\n特に、ワンバイナリなtoolは、CIやdockerを回すときに便利でgolangをよく使います。goはshellとの親和性が高いので色々な場所で扱いやすく、非常に素晴らしい言語です。\nただ、最近は、rustが人気みたい。理由としては、高速で、サイズが小さく、安全であることが挙げられます。デメリットはコンパイルが遅いこと。\nしかし、rustも非常に魅力なので、base64 {encode,decode}などをcli tool化しながら、rustを学んでいこうという記事です。\nまず、テンプレを作成します。src/main.rsが本体になります。\n$ cargo new udrs $ cd udrs $ vim src/main.rs ここで、cli optionなどを書きやすくするframeworkのseahorseを導入します。\nuse std::env; use seahorse::{App, Command, Context}; fn main() { let args: Vec\u0026lt;String\u0026gt; = env::args().collect(); let app = App::new() .name(env!(\u0026#34;CARGO_PKG_NAME\u0026#34;)) .author(env!(\u0026#34;CARGO_PKG_AUTHORS\u0026#34;)) .version(env!(\u0026#34;CARGO_PKG_VERSION\u0026#34;)) .usage(\u0026#34;cli_tool [command] [x] [y]\u0026#34;) .command( Command::new() .name(\u0026#34;t\u0026#34;) .usage(\u0026#34;udrs t {}\u0026#34;) .action(t), ); app.run(args); } fn t(_c: \u0026amp;Context) { let t = \u0026#34;hello world.\u0026#34;; println!(\u0026#34;{}\u0026#34;,t); } [dependencies] seahorse = \u0026#34;0.7.1\u0026#34; では、実行してみましょう。ここでは、オプションをtで指定しています。\n$ cargo run t hello world. 次に、引数をbase64でencode, decodeするオプションを実装してみようと思います。\n[dependencies] base64 = \u0026#34;0.9.2\u0026#34; use std::env; use seahorse::{App, Command, Context}; fn main() { let args: Vec\u0026lt;String\u0026gt; = env::args().collect(); let app = App::new() .name(env!(\u0026#34;CARGO_PKG_NAME\u0026#34;)) .author(env!(\u0026#34;CARGO_PKG_AUTHORS\u0026#34;)) .version(env!(\u0026#34;CARGO_PKG_VERSION\u0026#34;)) .usage(\u0026#34;cli_tool [command] [x] [y]\u0026#34;) .command( Command::new() .name(\u0026#34;t\u0026#34;) .usage(\u0026#34;udrs t {}\u0026#34;) .action(t), ) .command( Command::new() .name(\u0026#34;e\u0026#34;) .usage(\u0026#34;udrs e {}\u0026#34;) .action(e), ) .command( Command::new() .name(\u0026#34;d\u0026#34;) .usage(\u0026#34;udrs d {}\u0026#34;) .action(d), ); app.run(args); } fn t(_c: \u0026amp;Context) { let t = \u0026#34;hello world.\u0026#34;; println!(\u0026#34;{}\u0026#34;,t); } fn e(c: \u0026amp;Context) { println!(\u0026#34;{}\u0026#34;, base64::encode(\u0026amp;c.args[0])); } //fn d(c: \u0026amp;Context) { // println!(\u0026#34;{:?}\u0026#34;, \u0026amp;base64::decode(\u0026amp;c.args[0]).unwrap()); //} fn d(c: \u0026amp;Context) { let by = base64::decode(\u0026amp;c.args[0]).unwrap(); let res = by.iter().map(|\u0026amp;s| s as char).collect::\u0026lt;String\u0026gt;(); println!(\u0026#34;{:?}\u0026#34;,res); } これで、e,dオプションが追加されました。base64でencodeしてみましょう。\n$ cargo run e \u0026#34;hello world.\u0026#34; aGVsbG8gd29ybGQu 次は、decodeしてみます。\n$ cargo run d \u0026#34;aGVsbG8gd29ybGQu\u0026#34; hello world. うまくいきました。\ntestも追加してみましょう。\n... #[cfg(test)] mod tests { #[test] fn base64_encode() { let expected = \u0026#34;aGVsbG8gd29ybGQu\u0026#34;; let actual = base64::encode(\u0026#34;hello world.\u0026#34;); assert_eq!(expected, actual); } } $ cargo test test tests::base64_encode ... ok 面倒なコマンドは、makefile化することもできます。\nLOG_LEVEL := debug APP_ARGS := \u0026#34;hello world.\u0026#34; export RUST_LOG=url=$(LOG_LEVEL) PREFIX := $(HOME)/.cargo run: cargo run $(APP_ARGS) test: cargo test check: cargo check $(OPTION) install: cargo install --force --root $(PREFIX) --path . $ make run help runだけでなく、buildしてコマンドの挙動を確認してみましょう。\n$ cargo build $ ./target/debug/udrs バイナリの配布は、travis-ciでbuildして、github releasesにdeployします。\ndist: trusty language: rust services: docker rust: - stable sudo: required env: global: - NAME=udrs matrix: include: - env: TARGET=x86_64-unknown-linux-musl - env: TARGET=x86_64-apple-darwin os: osx - env: TARGET=x86_64-pc-windows-gnu before_install: - rustup self update install: - source ~/.cargo/env - cargo install --force cross script: - cross test --target $TARGET --release before_deploy: - cross build --target $TARGET --release - bin=$NAME - if [[ $TARGET = \u0026#34;x86_64-pc-windows-gnu\u0026#34; ]]; then bin=$NAME.exe; fi - tar czf $NAME-$TRAVIS_TAG-$TARGET.tar.gz -C target/$TARGET/release $bin deploy: api_key: secure: \u0026#34;xxx\u0026#34; file_glob: true file: $NAME-$TRAVIS_TAG-$TARGET.* on: tags: true provider: releases skip_cleanup: true cache: cargo before_cache: - chmod -R a+r $HOME/.cargo branches: only: - /^v?\\d+\\.\\d+\\.\\d+.*$/ - master secure: \u0026quot;xxx\u0026quot;は、travisコマンドで発行します。github-access-tokenをgetして以下のコマンドを実行。\n$ sudo gem i travis $ travis login $ travis encrypt $GITHUB_ACCESS_TOKEN $ cat .travis.yml deploy: api_key: secure: \u0026#34;xxx\u0026#34; tagをpushすると、travisが走ります。\n$ git add . $ git commit -m \u0026#34;first\u0026#34; $ git push origin master $ git tag -a \u0026#34;0.1.0\u0026#34; -m \u0026#34;v0.1.0\u0026#34; $ git push origin --tags https://github.com/syui/udrs\nhttps://qiita.com/syui/items/e071ba72ea82d583e380\n","description":"","formated_time":"2020-05-12","href":"https://syui.github.io/blog/post/2020/05/12/rust/","tags":["rust"],"title":"rustで作るcli tool","utc_time":"2020-05-12T00:00:00Z"},{"categories":null,"contents":"前からrustでcli toolを作ってみようかなと思っていたので作ってみました。\nこちらの記事がわかりやすすぎた。\nhttps://qiita.com/watawuwu/items/b20abfae62f76e4b4c0c\nrustでコードを書くところから、toolのテストやmakefileでの自動化、ciでbuildしてtoolを配布するところまで、おおよそ必要な情報すべてが解説されています。\nrustで作ったcli tool(そのまんま) :\nhttps://github.com/syui/udrs\ntravis-ciでgithub-releasesにupload\n$ sudo gem i travis $ travis login $ travis encrypt $GITHUB_ACCESS_TOKEN $ cat .travis.yml deploy: api_key: secure: \u0026#34;xxx\u0026#34; makefileでtaskの自動化\nLOG_LEVEL := debug APP_ARGS := \u0026#34;foo%20bar\u0026#34; export RUST_LOG=url=$(LOG_LEVEL) PREFIX := $(HOME)/.cargo run: cargo run $(APP_ARGS) test: cargo test check: cargo check $(OPTION) install: cargo install --force --root $(PREFIX) --path . $ make test base64のencodeを追加してみることにしました。cliはseahorseがおすすめです。\nhttps://qiita.com/KeisukeToyota/items/996a09b10c462ee94cc8\nbase64 = \u0026#34;0.9.2\u0026#34; seahorse = \u0026#34;0.6.2\u0026#34; use std::env; use seahorse::{App, Command, Context}; fn main() { let args: Vec\u0026lt;String\u0026gt; = env::args().collect(); let app = App::new() .name(env!(\u0026#34;CARGO_PKG_NAME\u0026#34;)) .author(env!(\u0026#34;CARGO_PKG_AUTHORS\u0026#34;)) .version(env!(\u0026#34;CARGO_PKG_VERSION\u0026#34;)) .usage(\u0026#34;cli_tool [command] [x] [y]\u0026#34;) .command( Command::new() .name(\u0026#34;b64\u0026#34;) .usage(\u0026#34;cli b64 {}\u0026#34;) .action(b64), ); app.run(args); } fn b64(c: \u0026amp;Context) { let b64 = base64::encode(\u0026amp;c.args[0]); println!(\u0026#34;{}\u0026#34;, b64); } $ udrs b64 \u0026#34;hello\u0026#34; ","description":"","formated_time":"2020-05-10","href":"https://syui.github.io/blog/post/2020/05/10/rust/","tags":["rust"],"title":"rustで作るcli toolに入門してみる","utc_time":"2020-05-10T00:00:00Z"},{"categories":null,"contents":"自分の曲のうち5曲目に作ったものだけ、聴いててあれとなってたので、歌だけ削除してた。\n最近になってやっと、久しぶりに作曲してみようという気分になったので、この曲の歌の部分を作り直すことをやってた。が、昔、一度失敗してるだけに、なかなかうまくいかなかった。\n作曲も感覚だけでやってるところがあるので、こういう伴奏、苦手なのかもしれない。\nで、何度も作り直してると、やっと、まあ、これなら\u0026hellip;というものができたと思う。\nできたと思うという曖昧な言い方なんだけど、創作物というものは、これでいいかなと思ったものでも次の日見てみると、ひどいなこりゃとなってることが多い。よって、時間をあけてみないとわからないところがあったりする。\nなので、これでもダメかもしれない。けど、今のところは許容範囲、それもかなり低いレベルの許容範囲内ギリギリの部分だと思ってる。\n私は、自分で作った曲をx2の速度で稀に聴くことがあるんだけど、他はふーんって感じで、5曲目だけはなんじゃこりゃって感じだったが、今回、ふーんって感じになってると思う。\nやったこととしては、ズレてるなあと思ったので、ブロックをそれぞれ1つずつ落とした。歌の冒頭って結構合わないこと多くて難しいんだけど、始まりからじゃなく部分の終わりを持ってくることにした。間を開けることにした。以上。\n/music\n","description":"","formated_time":"2020-05-08","href":"https://syui.github.io/blog/post/2020/05/08/vocaloid/","tags":["vocaloid"],"title":"5曲目の修正に苦戦した話","utc_time":"2020-05-08T00:00:00Z"},{"categories":null,"contents":"今回は、過去キャラを修正するついでにお絵かき講座でもやってみようかなと思ったのでやります。\nこの講座を受講すれば完璧にお絵かきできるようになりますよ！(半分、嘘で、半分、本当\nなお、お絵かきができない、苦手だと思っている人が対象です。\n早速ですが、まずは月を好きなように描いてみてください。\nできましたか？\n普通は、丸を描いて、色を塗りますよね。誰でも最初はそんな感じになります。\n私もできました。\n半分は黒にし、半分は黄色です。\n真ん中で線を引いて、両色で塗りつぶせばいいでしょう。\n同じようにやってみてください。\nできました？\nそれはすごい。これであなたも絵をかけます。\nなんでこんなことでと思いました？\nでも、違うのですよ、それは。\n私が描いている絵の本質は、この半円の月、半月にあります。\nですから、これを描けたということは、あなたは絵をかけるということです。\nいや、本当は最初からできたのでしょう。気づいていなかっただけで。\n次は、お絵かき修了編です。ここから難易度が少しだけ上がります。気を引き締めてください。\nもう一度同じように、月を描いてみてほしいのですが、今度は、黒ではなく、透過な黒を使って同じようなことをしてみてください。全体を黄色で塗りつぶしたあと、黒(透明)で真ん中に線を引いて、片方を塗りつぶします。\nできましたか？\n私もできました。こんな感じになりますね。\nわかりにくい方は、以下の画像を参考にしてみてください。\nこれができたなら、あなたは、もうお絵かきマスターです。よく頑張りました。\n例えば、キャラを描くとき、同じ色のままにして完成ではいけません。これはパッと見でもわかるんですが、なんかかっこよくないんですよね。影をつけないと、かっこよくないのです。\n逆に言うと、影がうまくついていると、かっこよく見えます。\nでは、影をうまくつけるにはどうするのでしょう。\n究極の答えとしては「半分」を意識するということになります。\n例えば、半月はシンプルで、かつデザインに優れています。お絵かきにおける私の哲学です。\nですから、半分を若干黒くしたり、または、白くしたりすることがとても重要。これは、透明色で上塗りすることで実現します。\n例えば、黒が基本色の場合、白(透明)で上塗りです。白(透明)でパーっと境界線を引いて塗りつぶしですね。\n境界線は、迷ったら半分を意識します。腕の中心、腕の真ん中、足の半分、斜めに半分など。下記の絵を見て、若干、色が黒くなっている部分に注目してみてください。\n同じような青や茶色でも微妙に違いますよね。この微妙な色の違いが、パッと見の印象を決定づけます。\nまた、丁寧に仕上げるときは、透明黒・白の濃さを段階に分けて調整していきます。最大で3段階くらいでしょうか。私は写真を描きたいわけではないので、必ずしも現実と一致している必要はないと考えます。理想で構わないし、パッと見でいい感じなら、それが正解です。逆に、いくら現実に合わせていても、パッ見でダサかったら、私の価値基準では間違いとなります。\n次に、使用する色についても少しだけ話します。私が一つのキャラに使う色は、3色くらいです。それを濃くしたり、薄くしたりで使います。とはいえ、まずはそのキャラのテーマ色、例えば、キョウスケなら紫、アイなら白というふうに、思い浮かべる色を決めるようにしています。上記のイラストはかなり微妙ですが、おそらく、茶色でしょう。\n基本的にはパレットの基本色から選ぶことが多いです。仮にその時々で選びぬいた色だった場合、次に塗るときも大変です。\n基本を大切に。\nこれでお絵かき講座は修了です。よくできました。\n私は、迷ったとき、半月を思い出すようにしています。\nそれは簡単ではあるものの、シンプルで美しく、かつデザイン性も優れていると考えているからです。\n私が絵を描くときの基本です。\nなお、月は定規を使って描いても良かったんですが、これは難しい問題でもあります。\n一度、カチッと仕上げてしまうと、例えば、背景とかですが、カチッとしてしまうと、他と合わなくなる可能性が高くなるというか、雑に描けなくなってしまうので、使い所は難しかったりします。\n私の場合、一枚絵なら、定規を使う場合もありますが、マンガなら使わないでしょう。今回はお絵かき講座ということもあり、使いませんでした。完璧を求めるような内容ではないからです。ただ、デザイン性を考えるなら、使ったほうがいいですね。\n","description":"","formated_time":"2020-05-08","href":"https://syui.github.io/blog/post/2020/05/08/illust/","tags":["illust"],"title":"お絵かき講座、修了編","utc_time":"2020-05-08T00:00:00Z"},{"categories":null,"contents":"ポケマスの記事を書くのは前回で終了と思ってたんですが、ちょっと難易度のタスクが上がってたので、動画を撮ってみました。\n高火力で端っこの奴らを倒します、最速です。私は、リザードンを使いましたが、炎タイプがいいですね。なお、倍速にしてると、相手になんかシールドを貼られてしまうので、注意。\nちなみに、私は最初のクリアでは、リザードンでふぶき打ってくるやつ倒しました。そういう選択肢もあるということで。\n次に、ホウオウのB技で天候をひざしに変更します。ふぶきのやつ倒してない場合、ソーラービームやるといいです。\n最後に、炎タイプでジュカインをやっつけます。\nそういえば、最後にやってたリフレクター、意味なかったな。\n","description":"","formated_time":"2020-05-07","href":"https://syui.github.io/blog/post/2020/05/07/pokemon/","tags":["pokemon","pokemas","game"],"title":"ポケマスをプレイしてみた6","utc_time":"2020-05-07T00:00:00Z"},{"categories":null,"contents":"\nなんか書きたい気分だったので、描いてみたやつ。内容自体は、雑な感じになってる。\n","description":"","formated_time":"2020-05-06","href":"https://syui.github.io/blog/post/2020/05/06/illust/","tags":["illust"],"title":"イラストを描いてみた25","utc_time":"2020-05-06T00:00:00Z"},{"categories":null,"contents":"基本的な立ち回りを紹介。バトルヴィラが一番難しいので、バトルヴィラ用の戦い方を中心に解説します。ゲームがどんな感じかわかりにくいと思ったので、今回は動画を撮ってみた。\nあくまで私の場合ですが、\nまずは、ミュウでスピードスターを連発します。これは、回避アップ+デバフ+B技溜めが狙いです。スピードスターを連発してると、たまに回避アップします。バトルヴィラでは、相手の攻撃を避けることが最も重要です。\nスピードスターでゲージが回復しなかった場合、イーブイのたいあたりで補完してもよいでしょう。とりあえず、B技をすばやく実行することが重要で、威力は低くても速い技を連発します。\nB技ができるようになったら、リザードンで一気に落とせるか、落とせないか判断します。\nもし落とせないようなら、イーブイのB技で全体バフします。防御が上がるので、防御型で戦えます。\nバトルヴィラではトレーナー技を消費してしまい使えない事も多いので、イーブイのB技はそこそこ役に立ちます。\nただし、イーブイをピカチュウに変えてもいいと思っていて、リザードンとミュウの次にボードを進めるのはピカチュウにしようかと思っています。キズぐすり技回復が魅力。\nとはいえ、攻略は人それぞれ。自分なりの勝ち筋を見つけてやればいいでしょう。\n","description":"","formated_time":"2020-05-05","href":"https://syui.github.io/blog/post/2020/05/05/pokemon/","tags":["pokemon","pokemas","game"],"title":"ポケマスをプレイしてみた5","utc_time":"2020-05-05T00:00:00Z"},{"categories":null,"contents":"ボックスサーチ 今までのイベントで一番楽しかったと思います。このシステムはいいですね。\nイベント 再登場をあまり見ないので、イベントの希少価値が上がってきました。\nなので、ホウオウのイベントは、やっておくべきと考えます。これは新実装なので、これから新実装、再登場なしという流れになるかも。\nはじめての攻略 これから始める人向けに攻略法を書きます。\nアタッカー、シールド、サポート役が必要になります。それぞれの役はアイコンみたいなものでわかると思います。\nアタッカーが特に重要で、これがいないと攻略できないので、アタッカーを集めるところからですね。\nイベントがあるので、イベント中にゲットできるアタッカーがおすすめです。今はホウオウですが、ホウオウをゲットして育てればいいと思います。\nシールド役はデフォルトのメイが使えます。サポート役はあればいいかなくらい。全バフ、回復を意識するといいでしょう。\nシルバー(ホウオウ)、メイ(ツタージャ)、主人公(ピカチュウ) 一日にやること ボードに使えるアイテムがもらえるので、エクストラはやるべき。また、経験値も多いので、上限でないヤツ入れるといいかも。\nあと、バトルヴィラは面白いので、やるといいかも。\nガチャとダイヤ プレイしているとダイヤが貯まってきますが、使うのはおすすめしません。ダイヤは貯めておきましょう。\n貯めておくと、上限確定が狙えますが、これには期限がありますので、貯めておいて一気に使うのが最もおすすめです。\nプレイ歴 私のプレイ歴は短くて、このゲームがリリースされた初期に数日プレイしていました。それ以降はプレイしてなくて、レッドが実装されたと聞いて、最近になって復帰しました。 (これを復帰と言っていいのかは疑問\n初プレイのときは、メイ(ツタージャ)、コルニ(ルカリオ)、初回限定でもらえたダイヤを使ったガチャで当たったクリス(ワニノコ)でやってました。攻略きつかった。\n復帰したときは、ダイヤが貯まってたので、それを全部使ってレッド(リザードン)を上限確定で引きました。 (ポケマスに天井があって助かった\nレッドを手に入れてから、次のイベントにオーキド(ミュウ)が来たので、それを育てて戦っているという感じです。なお、オーキドは期間限定でログインした全員に配布されました。\n何が強いの？ 私は、レッド(リザードン)とオーキド(ミュウ)を使います。\nレッド、オーキドしか使ってこなかったので、他をあまり知りませんが、レッド、オーキドは、かなり強いと思います。持っていればそれを育てるといいでしょう。\n個人評価ですが、レッドとオーキドはS評価で、他はA評価。他を知らないだけというのはある。\n情報を見る限りでは、みんな好きなやつを使って攻略してるみたい。なので、手に入ったもの、自分が好きなものを使っていけばいいと思います。\nお気に入りは、レッド(リザードン)、オーキド(ミュウ)、リーフ(イーブイ)のパーティーです。\n無駄に育ててしまったなあと思うカードも少しあるので、個人的なおすすめを紹介。逆に言うと、これ以外は育てなくても良かったなと。プレイ歴が短いのでアイテムも不足してますし。\nレッド(リザードン)、オーキド(ミュウ)、リーフ(イーブイ)\n主人公(ソルガレオ)、ラン(ルナトーン)、メイ(ツタージャ)\nサカキ(ミュウツー)、コトネ(メガニウム)、フヨウ(サマヨール)\n下記は今の手持ちです。\n主人公は重複して使えないため、育てるやつを1つに限定したほうが効率的ですが、主人公(アチャモ)、主人公(ピカチュウ)もおすすめです。\n言いたいことは手持ちで頑張ろうということ。好きなやつ使えばいいよ。その他、タイプを意識してもいいかも。私は、レックウザが再登場したらドラゴンタイプまだなので、育てようと思ってる。\n強化 のびしろやアメなど強化アイテムはすべてレッドに使います。\nボードはレッドとオーキドをやります。重要なのは、オーキドの回避アップとピンチ回復、スピードスター技回復です。それを取っています。\n次は主人公(ピカチュウ)で、キズぐすり技回復や再度こらえるなどを取っていこうかなと考えています。\nポテンシャルは、レッドに技ゲージ威力、オーキドに全ダウン耐性が当たりました。\nあと、シルバー(ホウオウ)に急所威力アップ、主人公(ピカチュウ)に急所無効が当たりました。\n不都合のお知らせ ポケマスには、よく不都合のお知らせが来ます。\nただ、私がこのゲームをプレイしている限りでいうと、ポケマスには、不都合なんてありません。\n私は、このゲームで不都合やそれにまつわるストレスを感じたことは一度もありませんね。\n","description":"","formated_time":"2020-05-04","href":"https://syui.github.io/blog/post/2020/05/04/pokemon/","tags":["pokemon","pokemas","game"],"title":"ポケマスをプレイしてみた4","utc_time":"2020-05-04T00:00:00Z"},{"categories":null,"contents":"ポケマスにホウオウが実装されたらしいのでプレイしてみました。このゲームは結構面白くて、レッドが実装されたあたりからバトルヴィラを毎回クリアしてます。バトルヴィラは1日で最大、GRADE13まで上がりました。\nプレイスタイル 私は、リザードンとミュウが気に入ってるのでリザードンとミュウを使っています。\n残りの一体は回復や全体バフを入れます。お気に入りは、リザードン、ミュウ、イーブイの構成。その他、メガニウム、アチャモ、サマヨル、ルナトーンなどがおすすめ。\n基本的には、ミュウでスピードスターを連発し、回避率を上げながら、必殺ゲージをためます。必殺技が使えるようになれば、メガリザードンXにしてブラストバーンを連発するというパターン。ミュウが壁役なので、やられるとパーティーが崩壊しますが、生き残ってる限り耐えます。\nボードで最も優先しているのもミュウで、登場時の回避アップと技稀に回避アップ、ピンチ時回復を取っています。そんな感じでやると、そこそこ戦えるのではないかと思います。他にはスピードスター威力増あたりをとっておくといいかも。\nなお、相手の弱点をつけるアタッカーがいれば、適時、リザードンと入れ替えます。私はあまりアタッカーを持ってないなくて、使えるのは、ミュウツー、ソルガレオくらいです。なので弱点はあまり突けませんね。\nホウオウ ホウオウは、アイテムを集めて、なんかガチャを回すんですが、これいいですね。私、ガチャ運って全く無いんですが、こういうの面白いと思います。\n有料だと早く集められる感じかな。ゲーム運営には課金も必要ですが、このシステムはとてもバランスがいいと感じています。ポケモンGoでいうジム防衛みたいなもので、無料でも頑張って有料コインを貯められるみたいな仕組みに近い印象。\n私は、レッドが実装されたときからポケマスを続けてますが、そのあたりから続けてる人は、ミュウ、ミュウツー、ソルガレオが手に入ったりしたので、楽しめてる人が多いのではないかと思います。\nホウオウが手に入ったら、ひでりリザードンが使えるのでは？戦略の幅が広がる予感。\n","description":"","formated_time":"2020-05-03","href":"https://syui.github.io/blog/post/2020/05/03/pokemon/","tags":["pokemon","pokemas","game"],"title":"ポケマスをプレイしてみた3","utc_time":"2020-05-03T00:00:00Z"},{"categories":null,"contents":"\n勘で描いてると、完成後になんか変だぞみたいな感じになって、余計に時間がかかってしまった。\n構図あたり最初にしっかり考えてから描きはじめたほうがいいかもと思った。\n","description":"","formated_time":"2020-05-02","href":"https://syui.github.io/blog/post/2020/05/02/illust/","tags":["illust"],"title":"イラストを描いてみた24","utc_time":"2020-05-02T00:00:00Z"},{"categories":null,"contents":"作った曲を整理したり、追加したりしてました。よかったら聴いてみてください。\n/music\n以前作った5曲目(sora)があまりにダメすぎたので、一旦、歌だけ削除していたのですが、今回、イチから歌を作って追加。とはいえ、あまり期待しないでください。一度こうなってしまうと、難しい気がしてる。ただ、前のがあまりにダメすぎたので、前よりは多少マシになってると思う。でもダメ。\nあとは、忘れてたmetaを追加したり、アルバムを整理したりです。\n","description":"","formated_time":"2020-05-01","href":"https://syui.github.io/blog/post/2020/05/01/vocaloid/","tags":["vocaloid"],"title":"作った曲を整理してみた","utc_time":"2020-05-01T00:00:00Z"},{"categories":null,"contents":"短編小説に出てくるキャラの絵が必要になったので、北村くんと村長を描いてみました。カタツムリくんはまあいいかな\u0026hellip;そんなもん描いてるヒマはねえ。\n北村くんのイメージ、最初はメガネをかけた青年みたいな感じで書こうと思ってたけど、一発でうまく描けなかったので、好きなように描いてたらこうなった。もうこれでいいや。\nイメージとぜんぜん違うってのは、まあ、私もそう思うんですけど、でも、これでいきます\u0026hellip;描き直してるヒマはねえ。(めんどくさいだけだろ\n","description":"","formated_time":"2020-04-30","href":"https://syui.github.io/blog/post/2020/04/30/illust/","tags":["illust"],"title":"短編小説に出てくるキャラを描いてみた","utc_time":"2020-04-30T00:00:00Z"},{"categories":null,"contents":"\n","description":"","formated_time":"2020-04-29","href":"https://syui.github.io/blog/post/2020/04/29/illust/","tags":["illust"],"title":"イラストを描いてみた23","utc_time":"2020-04-29T00:00:00Z"},{"categories":null,"contents":"ノベルゲームの続きを作ってみました。57話までありますが、飛ばしたい方は、最新話から。\n/game\nひとりごと 内容としては、小説とつながるところまで。\n最近、キャラが増えすぎなのでよくないなあと思っていて、ノートも何も作っていませんから、どういった特徴があるのかとか忘れちゃったりするんです。\nお話を複雑にしすぎないこと、できる限りキャラを増やさないことを心がけてやってきたつもりでしたが、ここ最近の話が複雑になったり、キャラが増えすぎてる気がするので、この話が一区切り着いたら、少し抑えていきたいなと思ってます。\nですが、今ある分はキャラ絵を描かないといけないので描きました。\nマンガと小説の方は、書きたい気分なら書くかも。\n","description":"","formated_time":"2020-04-29","href":"https://syui.github.io/blog/post/2020/04/29/game/","tags":["game"],"title":"ノベルゲームの続きを作ってみた57","utc_time":"2020-04-29T00:00:00Z"},{"categories":null,"contents":"銀河鉄道 今日もいつもどおり起床し、みんなゾロゾロと境界に向かった。\nしかし、今日に限っていえば、その必要はなかったことを思い出した。\n銀河鉄道は、境界よりも中央寄りの場所に停車するらしい。\n私は来た道を引き返した。\n見送りのためか、みんなもゾロゾロと境界ではなく停車位置に向かうのだった。\n私は、故郷の星の見えないガラス板の上で、こんな光景が繰り広げられていることに、少し吹き出しそうになる。\n停車位置にたどり着き、しばらく住人と別れの挨拶を交わしていると、かすかな音が聞こえたような気がした。\nみんな一斉にキョロキョロと当たりを見渡したが、鉄道らしき物体が宇宙を徘徊している様子はなかった。\n「おや、皆さん、時間はまだですよ」\n村長がそう言った。\n「あれ、おかしいな\u0026hellip;何か聞こえたような気がしたんですけど」\n私は頭をかき、そうに言った。\nすると、住人の一人、カタツムリくんが上の方を指さして声を上げた。\n「おい、あれはなんだ！」\n「ん？何でしょう。私にもわかりません」\n村長が言った。\n仮に村長がわからないなら、多分、他の人にもわからないだろう。ここでは、そういう事が多かった。\nとすれば、あれは未知の現象ということになる。私は、心の中で、そんな事を考えていた。\nまさか、銀河鉄道が来る前に、変なトラブルだけはやめてくれよ。\nしかし、それが近づいて来るとはっきりわかるが、あれは人ではないだろうか。人の形をした何かがすごいスピードでこっちに近づいてくるみたいだった。\n「うわあああああ、な、なんだ！？」\n光熱と煙を巻き上げるほどのスピードだったらしい。しばらく経たないと正体が確認できないほどであった。\nその正体は、人だった。しかも、小さな女の子だ。\n小さな女の子が、宇宙の果てから飛んできた。宇宙服もなしにでだ。\n「あ、ああ\u0026hellip;わけが\u0026hellip;理論的に考えて\u0026hellip;いや、どうやって\u0026hellip;」\n村長がはじめてよくわからない言葉を発した瞬間だった。\n住人たちもはじめのうちはすごく動揺していた様子だが、次第にみんな落ち着きを取り戻すのだった。\n私も、これが銀河鉄道絡みの可能性を考え、一番最初にアクションすべきは自分だと判断した。\nまずは、女の子に話かけてみることからだ。\n「あー、はろー、君の名前はなんですか？」\n「アイだよ」\n「あー、アイ。変わった名前だね。君も下に見える星から来たのかい？」\n「アイは、向こうのほう、地球からだよ」\n「地球\u0026hellip;知らないなあ」\n住人達は、ザワザワとそうつぶやく。\nどうやら目の前にいるのは本物の宇宙人らしい。私も実物で見るのははじめてだ。それに名前が奇妙なことにも頷ける。しかし、見た目は、私達人間と全く変わりないように見えた。\n「私は、北村正(きたむら・ただし)。足元に見える星の出身だよ。ここにいるみんなそうだ」\n「ふーん」\n「アイも銀河鉄道に乗るのかい？」\n「うん。地球から一番近いのがここなんだって」\n「あー、そうなんだ」\nこの子もどうやら銀河鉄道に乗るらしい。\nすると、宇宙の果てからまた奇妙な音が聞こえた。\n「シュウウウ\u0026hellip;」\n「今度はなんだ！」\n私は、気がつくとそう叫んでいた。\n「ああ、今度のは銀河鉄道でしょう。時間です」\n村長が言った。\nそれは一瞬だった。大きな音がしたと思ったら、目の前に巨大な箱が流れていく。そして、それがやんだと思ったら、ドアが目の前でパッと開き、黄色い光があたりに溢れた。\n「おおっーーーーー！」「これが\u0026hellip;」「僕は3回目だ」\n住人たちが口々に感想を述べた。\n私の印象でいうと、想像していたのと違ってモクモクの煙はでていないようだった。\n光と少しの音がするだけの影の列車という印象だ。\nアイが自分の後ろについていた。\n正直、よくわからない宇宙人の訪問で自分の中にあった銀河鉄道への恐怖が吹き飛んでいた。むしろ、清々しく明るい気分だ。\n「みんな、今までありがとう。できることなら、また帰ってくるよ！」\n「おう、がんばれよ！」「達者でな」「北村くん、さようなら。またいつでも帰っておいで！」\nそんなお別れの言葉もあっという間、列車は二人を乗せ宇宙の彼方へと走り去っていくのだった。\n/novel\n登場人物 主人公は、アイが銀河鉄道に乗るとき偶然乗り合わせた乗客の一人\n","description":"","formated_time":"2020-04-28","href":"https://syui.github.io/blog/post/2020/04/28/novel-04/","tags":["novel"],"title":"短編小説を書いてみた4","utc_time":"2020-04-28T00:00:00Z"},{"categories":null,"contents":"前日 あれから数日が過ぎた。いや、もしかしたら数年だったかもしれない。ここでは時間の感覚が大きく狂うので仕方ない。\nそんなある日、村長が言った。\n「明日あたり、銀河鉄道が来ると思います。乗りたい人は準備しておくといいですよ」\n村長というのは、私に最初に声をかけてくれた人で、みんなから村長と呼ばれていた。時間を可能な限り正確に把握しているのも、この中では彼だけだ。\n「えっ、明日！？」\n私は、いつもの日課をこなそうという最中だったが、驚いて声をあげた。\n「ああ、そうですよ。おそらく、明日」\n「それで、村長は、どうするんです？」\n「ああ、私は、今回もパスになりますよ」\n「\u0026hellip;そう、ですか」\n村長の気持ちも少しわかる。もし列車に乗って変なところに連れて行かれるくらいなら、ここでのんびり暮らすのも悪くない、そう思うからだ。\nすると、村長が私に言った。\n「北村くんは、おそらく、乗っていかれるんでしょう。寂しくなりますよ」\n「はい、私は、乗る予定です」\n今回乗るのは、この中では自分だけだった。\nこのあとも何人出るのか、わからない。もしかしたら、自分で最後かもしれない。そんなことを思った。\n正直、私だって怖い。怖くて怖くてたまらない。だが、ここに来て最初に言った言葉を私はまだ覚えていた。\n「私、乗ります」\nここに来て銀河鉄道の話を聞いたとき、私は、そう言った。\n最初に直感したことは正しいことが多い。そんな人生の経験則に従い、私は、乗ることに決めたのだ。\nただ、後々になってみると、乗るのは自分だけではなかった。\nしかもそれは、ここの住人でもなければ、知っている人物でもなかった。\nそれは、見ず知らずの女の子だった。\nまさかあんなことが起ころうとは、誰も予想していなかった。宇宙の果てから少女が飛んできて、自分の後ろに並ぶなんてことを、一体、誰が予想できただろう。\nここの住人の誰もが、あの村長でさえ、とんでもなく予想外の出来事だったはずだ。\n/novel\n登場人物 主人公は、アイが銀河鉄道に乗るとき偶然乗り合わせた乗客の一人\n","description":"","formated_time":"2020-04-27","href":"https://syui.github.io/blog/post/2020/04/27/novel-03/","tags":["novel"],"title":"短編小説を書いてみた3","utc_time":"2020-04-27T00:00:00Z"},{"categories":null,"contents":"大気圏 このガラス板の上での生活に多少慣れてきたものの、私は未だ足元に見える星に帰りたいという思いを捨てきれずにいた。\nその様子を見ると、ここの住人は「俺も昔はああだった」と笑ったものだ。\nしかし、私には、この薄暗い光の中で延々と暮らす退屈な生活より、あの星の中で、さんさんと輝く太陽の下、公園のベンチに座って子供たちが遊ぶのを眺める生活のほうが、よっぽど楽しいことだと思うのだ。\nだからこそ、私はいつまでたっても、その望みを捨てられず暮らしていた。\nしかし、真下に見える故郷に帰るためには、超えなければならないたくさんの壁があった。\n最も大きい壁は、大気圏に突入しても燃え尽きないほどの強度を持つ素材がここにはないことだ。\n例えば、1日に1度やってくる人工衛星だが、これは、一度打ち上げたら役目を終えるまで動き続け、それが終わると大気圏で燃え尽きるよう設計されている破棄型だ。\nここの住人もかつて何度も帰還を夢見たが、ついぞ叶うことはなかった。\n昔、この人工衛星を操作して星に突っ込むという計画が考えられたこともあったらしい。\nしかし、操作不可能であること、耐久性がゴミであることなどから、仮に突っ込んだら全員死ぬと結論付けられた。\n宇宙工学を勉強してきた自分でさえ、そりゃそうだと頷いた。\nまた、助けを呼ぼうにも連絡手段がないこと、ガラス板の周りはどうやら外部から見えなくなっているらしいこと、なぜかすり抜けることなどの事情があった。\nそのうち、挑戦するものもいなくなり、現在に至る。\nここでの生活は単純だった。まずは起床からだ。\n起床すると、勝手に移動した分だけ境界に向かって歩くことからはじまる。\nここの住人は、起き出すと、一斉に中央とは逆方向にゾロゾロと歩き出すのだ。\nそれさえやっていれば、中央に至り星に吸い込まれて燃え尽きるなんてことはないからだ。ガラス板の中央に至るとそこから星に落ちる、と言われている。\n私は、それを見たことはなかったが、ここの住人はそう証言していたし、毎朝かなりの距離を勝手に動いていることを考え合わせると、おそらく、本当のことだろう。\n毎日やってくる人工衛生はかなり大きくて広かった。\nそこには、たくさんの食料が積み込まれており、トイレと水道はずっと可動しているようだ。\n私は、この人工衛星で一着の宇宙服を見つけたが、残念ながらこれでは星に帰れない。大気圏の突入に耐えうるほどの耐久性を備えていなかった。あたり前のことかもしれないが、ちょっと期待した自分がバカだった。\nまた、ガラス板の周りには大気の膜(まく)らしきものが張り巡らされているため、宇宙服は着る必要もなかった。\nこの膜がどれだけの高さまであるのかはわからないが、その昔、銀河鉄道で行ってしまった身長213センチの大男がジャンプしても膜はあったと言われている。\nただ、こんな場所にも一つだけいいと思えることがあった。\nそれは、ここの住人である。\nここの住人は、驚くほど精神が安定していて、まるで誰かに選ばれたんじゃないかと思えるような人たちばかりだった。\n仮にこのような場所に精神不安を抱えた極悪人が来たら、おそらく、その人を含む全員が全滅していただろう。\nこんな場所でも、まともな人間が多いことに、私は、心底助けられていた。\n/novel\n登場人物 主人公は、アイが銀河鉄道に乗るとき偶然乗り合わせた乗客の一人\n","description":"","formated_time":"2020-04-26","href":"https://syui.github.io/blog/post/2020/04/26/novel-02/","tags":["novel"],"title":"短編小説を書いてみた2","utc_time":"2020-04-26T00:00:00Z"},{"categories":null,"contents":"最近、描いてなかったので描いてみた。\n","description":"","formated_time":"2020-04-25","href":"https://syui.github.io/blog/post/2020/04/25/illust/","tags":["illust"],"title":"イラストを描いてみた22","utc_time":"2020-04-25T00:00:00Z"},{"categories":null,"contents":"はじめに 眠っているとき、夢の中で小説を書いたり、物語を書いたりすることってありますか。私はよくあります。\n実際、寝ているときに話の続きを考えたりすることは多かったりします。\n今回もその類の短編小説になるのですが、面白そうだったので出してみることにしました。\n一応、yui(自作ノベルゲームのタイトル)のスピンオフという位置づけかな。\nガラスの上 私は、さっきまで人工衛星の打ち上げテストをやっていたはずなのだが、気がつくと、闇の中に立っていた。\n闇と言っても、完全な暗闇ではない。足元にはかすかな青白い輝きが見える。\n私は、思い切って足元を覗き込んでみた。すると、そこには、私が住んでいたはずの巨大な星が、ゆるやかなアーチを描いているではないか。\n「星の周りに、こんな巨大なガラスが置いてあるなんて\u0026hellip;」\nガラスが巨大に思えたのは、これがどこまでも続くだろうと直感していたからだった。\n見えないガラス板の上と表現するほかないこの場所だったが、私は、次第に怖くなってきた。\nなぜか先程から足元がやけに後ろの方に引きづられているような感覚があるのだ。\n考えても見てほしい。もし私が無意識のうちにあの下に見える巨大な星に引き寄せられているのなら、そのうちどれだけ走っても抜け出せなくなり、燃え尽きて消えてしまうだろう。そのような場所に私はいるのだ。これが恐怖と言わずなんと言うだろう。\nそんなこともあり、私は、できる限り端の方に移動することにした。\n歩いても歩いても変わらない景色だったが、それでも歩いていると、向こうの方に人影が見える。数人が座り込んだり、立っていたりするようだった。\n「こんな場所にも人がいるのか？」\n私はそうつぶやきながらも、自分がいるのだから、他の人もいるだろうという結論に達した。いや、達したというより、それだけが希望の光だった。\n近づくと、やっぱり人だ。立っている人に声をかけられた。\n「ああ、あなたもここに連れてこられたんですか？怖かったでしょう。さあさあ、こちらへ」\n私は、彼が手招きしたその場所まで歩いた。\nそこに着いてみると、その場所は他の場所とは全然違っていて、それまではわからなかったが、足元に見える青白い輝きが一層鮮やかに溢れ出ているかのような場所だった。\n「ここは一体？」\n私は彼に質問した。他の人達もどうやら同じような場所にとどまっているみたいで、座ってたり、寝ていたりしている。\n「ああ、そこは境界。この世界において一番マシなところですよ」\n「境界？」\n「ああ、そうです。あなたも体感しているとおり、ここに連れてこられた人達はみんな、足元に見える巨大な星に引き寄せられているのですよ」\n「そんな感じはしていました」\n私はそうつぶやき、彼は話を続けた。\n「そして、ある地点を超えたとき、もう戻ってこられなくなるのです」\n「やっぱり、そうでしたか！私も危ないと思っていたんです。それなら、私はもう少しあっちのほうに行ってみようと思います」\n私はそう言って歩き出そうとした。しかし、なぜか彼に引き止められた。\n「ああ、それもやめたほうがいいですよ」\n「なぜです？」\n「ここを超えてしまっても、戻って来られないからです。いつの間にかガラス板は消え、行く方向をコントロールできなくなりますよ」\n「そ、そんな\u0026hellip;」\n「だから最初に言ったでしょう。ここが一番マシだと」\n「どっちもアウトだからですか？」\n「ああ、そうです。ここは無意識のうちに移動している距離が最も少ないんですよ。あっちの方になると、たった数時間を寝ているうちに、もうダメですね。戻ってこられない。駆け出しても間に合わず、やがて足元から燃えだし、消えてしまう」\n「\u0026hellip;それは怖い」\n「あなたも最初に来たときはあそこらへんだったのでしょう？歩き続けて正解ですよ」\n「どのくらいこの場所に？」\n私は、興味本位で質問してみた。\n「ああ、それは、覚えていないくらい長くです」\n「それで、食事やトイレはどうしてるんです？」\n「ああ、食事やトイレなどは人工衛星が1日に1度、ここを通り過ぎるので、そのときに調達を。この人数ですと500年分くらいはありますよ」\n「それはいいですね」\n私は、心の底からホッとしてそうつぶやいた。\nすると彼は、その思いに釣られてか、そのことを口にしたみたいだった。\n「ああ、それに、何年かに一度、ここにはあれも来るんですよ」\n「何がですか？」\n私は、こわごわと聞いてみた。\n「鉄道です、銀河鉄道」\n「ま、まさか！？」\n「ありえないこととお思いでしょう。その気持ち、わかりますよ。ですが、このような場所で、ありえないことなどあるでしょうか」\n「ほんとに、それがここに？」\n「私は前回、どこに連れて行かれるか、それが怖くて乗れなかったのです。次もどうなるのかわかりません。ですが、それがここに来るのは確かです。この見えないガラス板もそのために設置されたものなのでしょう」\n「私、乗ります」\n私は、考えるよりも先にそう口走っていた。\n「ああ、そうなるといいですね。ここに留まっている人の中にも10人に2人は乗って、どこか遠くにいかれますよ」\n彼は、私の挑戦的な言動を意にも介さず、和やかにそう言うのだった。\n/novel\n登場人物 主人公は、アイが銀河鉄道に乗るとき偶然乗り合わせた乗客の一人\n","description":"","formated_time":"2020-04-25","href":"https://syui.github.io/blog/post/2020/04/25/novel-01/","tags":["novel"],"title":"短編小説を書いてみた1","utc_time":"2020-04-25T00:00:00Z"},{"categories":null,"contents":"ポケモンGoの最近の進捗状況です。\nワシボンがウォーグルに進化した\nマスターリーグを戦った、レートは2500\n一緒に戦ってきた仲間たちです。個体値は低いですが、みんな頑張りました。ちなみに、L41はいません。\n私は自分が育てたいポケモンでしか技開放しませんし、戦いませんから、マスターリーグで使っているポケモンの個体値はかなり低めです。\nマスターリーグでは個体値が特に重要になります。よって、バトル重視なら個体値を優先したほうがいいでしょう。\n私はそもそもGBLが好きではありませんし、戦いたいとも思っていないので、自分の育成方針を変えてまでやるものではないのです。\nとはいえ、所感ですが、このような構成でも5人に1人くらいは運良くランク10に到達可能だと思います。\nそのための戦略を書いていきます。相手側にギラティナが入ってくるようなら、メルメタル、ディアルガ、カビゴンの構成でほぼ勝てます。カビゴンはのしかかり,じしんです。\n先鋒にギラティナが出てきたら、即座にディアルガに交代。相手も交代でメルメタルを出して来ることが多いのですが、この場合も勝ちパターンです。ディアルガにシールドを使って、ギラティナにカビゴンをぶつければ勝ちます。相手側の先鋒がギラティナばかりなら、こちらもディアルガを先鋒にします。\nそれ以外、つまり相手にギラティナがいない場合は、カイオーガ、ガブリアスのどちらかを入れた構成で行くといいでしょう。\n","description":"","formated_time":"2020-04-24","href":"https://syui.github.io/blog/post/2020/04/24/pokemon-go/","tags":["pokemon"],"title":"ポケモンGoの進捗","utc_time":"2020-04-24T00:00:00Z"},{"categories":null,"contents":"ポケモンのハートゴールドを久しぶりにプレイしてます。\nポケモンの原作って旅行してるみたいな気分になれるので好きです。なので、こうやってたまにプレイするわけですが、旅行？と思われる方もいると思うので、そのへんを少しだけ解説。\n皆さん、旅行は好きですか？知らない場所に行ったり、昔行ったところに行ったり。\n私は旅行、好きでもあり、嫌いでもあります。旅行している最中ってあまり楽しくなかったり、疲れたりしますよね。ですが、後々思い返してみたらよかったなーみたいな、そんな感じなんです。\nポケモンの原作もそうで、最初はプレイってあまり楽しくないんです。これ時間の無駄じゃないって、すごく思ったり。いや、今はすごい勉強になるので全然無駄じゃないと思うんですけど\u0026hellip;。勉強になるというのは、基本的な作り、オープニングがすごい考えられてたり、シンプルだったり、わかりやすかったりしますから、改めて良く出来てるなって思ったり。\n話を戻すと、一度プレイしてますから、やっぱり基本つまんないんですよね、最初は。でもプレイしていると面白くなってきて、懐かしくなってきて、そして思い出になっていくんだろうなって、後々思い返してみると、あのときプレイしてたやつ楽しかったな、あの場所にもう一度行きたいなとか、そういう気分に浸れるので、原作は好きだったりします。\n原作が旅行なら、ポケモンGoは日常のルーツみたいな感じかなあ。どちらにも良さがあり、好みがあると思うんですが、もちろん、私はどっちも好きです。ただ、多くの人にとってより重要になってくるのは、ポケットにはいる、いつも持ち運べる、終わりのないゲーム、ポケモンGoだろうなあと思っていますが。\nとはいえ、ポケモンの原作は旅行気分になれるので、おすすめです。\n今はちょうどシロガネ山でレッド倒しに行くところ。ただLV70なので、ちょっとレベル上げしないと勝てないと思う。\nプレイスタイル 名前はゴールド。最初はトレーナーと戦うが、後半、バテて避けるようになる\nほぼ最初の一匹、バクフーンだけで攻略する。基本、炎タイプを選択する\nアイテムは取れたらとるが探索しない\n伝説のホウオウが手に入ってからはホウオウを使う、四天王あたりでバクフーンとレベルが逆転する\n四天王ではかちぬきからいれかえに変更する、その後も戻すのが面倒でいれかえバトルになるため楽になる\n","description":"","formated_time":"2020-04-23","href":"https://syui.github.io/blog/post/2020/04/23/pokemon-heart-gold/","tags":["pokemon"],"title":"ポケモンハートゴールドをプレイしてみた","utc_time":"2020-04-23T00:00:00Z"},{"categories":null,"contents":"phonegapでremote buildする tyranoscript v5でios,androidはphonegapなどでbuildしてねと書いてあったので、やってみました。\nhttps://tyrano.jp/dl/v5\n$ sudo npm -g install phonegap cordova $ phonegap create test com.example.test2 Test $ cd test # html5(index.htmlファイル群)はwww/に置く $ cp -rf ../yui/* www/ $ vim config.xml \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; ?\u0026gt; \u0026lt;widget xmlns = \u0026#34;http://www.w3.org/ns/widgets\u0026#34; xmlns:gap = \u0026#34;http://phonegap.com/ns/1.0\u0026#34; id = \u0026#34;cf.syui.game\u0026#34; versionCode = \u0026#34;10\u0026#34; version = \u0026#34;1.0.0\u0026#34; \u0026gt; \u0026lt;name\u0026gt;yui\u0026lt;/name\u0026gt; \u0026lt;platform name=\u0026#34;ios\u0026#34; /\u0026gt; \u0026lt;platform name=\u0026#34;android\u0026#34; /\u0026gt; \u0026lt;description\u0026gt; novel game yui. \u0026lt;/description\u0026gt; \u0026lt;author href=\u0026#34;https://syui.ai\u0026#34; email=\u0026#34;example@example.com\u0026#34;\u0026gt; syui \u0026lt;/author\u0026gt; \u0026lt;/widget\u0026gt; $ phonegap serve -p 1313 $ phonegap remote build ios phonegapはadobeのアカウントが必要になります。また、phonegap buildするにもios dev(apple)のkey(p12)を登録する必要があり、これにはapple-storeでappを配布するときに使われる開発者登録が必要です。\nhttps://build.phonegap.com/apps\ncordovaでbuildする xcodeや実機がある場合、cordovaでbuildできます。phonegapはあくまでcloudでremote buildするためのものです。\n$ cordova create test $ cd test $ cordova platform add ios $ cordova compile ios # 更新 $ vim www/ $ cordova prepare ios $ ls ./platforms/ios $ open -a Xcode ./platforms/ios/yui.xcodeproj 実機でappを起動している様子\nアイコンを調整したり、画面サイズを調整したりする必要がありますが、難しくはありません。アイコンはcordovaに倣ってファイルを指定してやればいいのでしょう。画面サイズはtyranoscriptのほうで調整すればokだと思います。ただ、ストア配布に関しては、dev登録などのハードルが高いですし、めんどうです。また配布したところでプレイする人はほとんどいないでしょう。なので、今のところ考えていません。\n追記 アイコンは、res/ios/に画像ファイルを置いて、xcodeのimages.xcassets/AppIconにていけましたが、画像の透過度をなしにすることやサイズを用意することでやっと適用されました。これは、platforms/ios/xxx/images.xcassetsにあります。root dirを編集して、$ cordova prepare iosでも反映されます。\nhttps://resizeappicon.com/\nウィンドウの調整は、www/data/scenario/first.ksにてメッセージウィンドウを変更すると良い感じですが、背景画像などを調整することでも可能だと思います。\nwww/data/system/Config.ksでの調整は無理でした。\n","description":"","formated_time":"2020-04-20","href":"https://syui.github.io/blog/post/2020/04/20/ios/","tags":["ios"],"title":"phonegapを使ってhtml5で開発したwebアプリをbuildする方法","utc_time":"2020-04-20T00:00:00Z"},{"categories":null,"contents":"マンガの4話と5話を描いてみました。cookieが効いてるかもなので、その場合はシークレットモードで。\nhttps://syui.ai/manga/\nひとりごと vueのページも不便だったので作り直したりと思ったより時間がかかってしまいました。\nとはいえ一番はモチベがないと描かないってことかなと思います。モチベがあれば割とすぐ描きますけど、モチベがないと全く描かない。描かないと完成しませんから、モチベが全て。\n4話は誕生、5話は戦いみたいな感じで構築しました。これからガララ星はにぎやかになっていくのかもしれませんね。後に人間が生まれ、折れたつるぎを拾ったりして、その場所にある足跡やらなんやらからへんなおとぎ話でも作ったりするのかな。まだわかりません。(方向転換も考えて予防線を張っておく\nバトルについてですが、これはマンガでやりたかったことの一つだったので、実現できてよかったです。\n小説とかノベルゲームの戦闘シーン、あれがあまりに味気ないので、マンガで表現してみたいなあと思っていました。とはいえ、正直いうと、難しかったです。私は感覚で描いたりするだけなので、うまく行っているのかもわかりません。\nただ、バトル漫画とか好きですし、描いてるときは楽しかったと思います。それにバトルシーンって読み直していても飽きが少ないような気がします。\n絵の雑さがひどすぎる件。本当にひどい\u0026hellip;もう少し丁寧に描けるといいんですけど。\n「これ下書きですか？」\n「いや、あれが限界なんですよ\u0026hellip;」\n","description":"","formated_time":"2020-04-17","href":"https://syui.github.io/blog/post/2020/04/17/manga/","tags":["manga"],"title":"マンガの4,5話を描いてみた","utc_time":"2020-04-17T00:00:00Z"},{"categories":null,"contents":"今回は、GBLについて少し思っていることを書いていきたいと思います。過去の反省を含め、考えを改めなければならないという話になります。\nレートは相変わらず上がったり下がったり。自分の判断ミスや不運も重なり、今は、2500-2600あたりをウロウロしてます。\nさて、今回は、このGBLにおける私の考えや態度は、真実ではあるものの、率直に言ってよくないものだということです。だからこそ、今回はそれを改めなければならないという結論に至りました。\nこれについては、実は最初から迷っていました。ポケモン風に言うと、現実で行こうか、理想で行こうか、悩んでいたのです。ブラック・ホワイトはそんな感じのテーマだった記憶があります。\n私は、当初、GBLが始まるよりもずっと前から、GBLはこういう理由でよくないと主張していました。そして、GBLが始まってもその考え方や態度は変わることはありませんでした。\nバグによって負ける試合も相次いでいますが、それは些細な問題であり、GBLの最大の問題は、その仕組みにあります。対戦相手を踏み台にすることでしか楽しめない、そのシステム、そこに最大の問題があり、私が今まで遊んできたポケモンGoというゲームのゲーム性には相容れない、そんな思いがありました。今でもこの考え方は変わりません。\n次にバトルについてですが、マスターリーグを見ていても分かる通り、使われるポケモンと個人スキルには大きな差はありません。みんな同じポケモンを使い、同じスキルを持つため、勝敗は運に依存するところが大きい。もっというとマッチングと初手ポケモンにです。最善手を選択し続けても、負けるときは負けるし、勝つときは勝つのです。例えば、会場に集まった人達でジャンケン大会があったとしましょう。10連勝する人もいれば、1勝しかしない人も出てくる。これが真実です。ランクやレートについても同じで、ランク10に到達した人の殆どは、初期レートが高かったのでしょう。例外はあります、常に。しかし、多くの場合は初期レートによって決まります。初期レートはランダムか、あるいはコントール不可能な数値です。\nしかし、ポケモンGoってもともとどういうゲームだったか考えてみると、現実と仮想の融合です。原作にないポケモンGoの価値はそこにあると私は考えていたはずです。\n原作のポケモンは、RPGです。RPGとは他人の物語を進めていくというもの。それは想定されたストーリー、現実との接点はありません。\nですが、ポケモンGoは違います。自分が主人公、外に出てポケモンを捕まえるというコンセプト。現実とつながっているのです。その意味で、原作で捕まえたポケモンとGoで捕まえたポケモンは、後者のほうが圧倒的に価値が高い。一過性の物語をクリアしたらそれで終わりの原作とは大きく異なります。\n私はこういった理由から、このゲームを始めたわけで、今もなんとなく続けています。\nとすればですよ、現実における理想や真実をGBLにぶつけるのはよくないなあとそう思いました。\nなぜかというと、現実と理想を融合させるゲームなので、現実だけ、理想だけ、どちらか一方だけというのはよくないのだと思います。\n現実との接点は多少あるものの、もともとファンタジーであり、ゲームですよね。仮に私の態度を物語に当てはめてみた場合、非常によろしくない。\nどうせなら、ゲームにおける現実や理想を、自身に逆輸入したほうが、個人にとってもよい影響があるはずです。\nということで、GBLについては、淡々とやっていこうと思っています。自慢も批判も真実も運も関係ありません。\nランク10を目指す、ただそれだけです。\nとはいえ、理想が高すぎて既に失敗してしまっていることからもGBLはほどほどに、自分がやりたいようプレイしていければと思っています。\n","description":"","formated_time":"2020-04-14","href":"https://syui.github.io/blog/post/2020/04/14/pokemon/","tags":["pokemon"],"title":"ポケモンGoのGBLについて考えを改めた話","utc_time":"2020-04-14T00:00:00Z"},{"categories":null,"contents":"chart.jsが有名みたいで、ちょっと触ってチャートを表示してみたのですが、非常に操作しづらかったので、apexchartsを使ってみました。個人的には、こちらのほうがオススメかも。\n# https://github.com/apexcharts/vue-apexcharts $ yarn add apexcharts vue-apexcharts 今回作ったのは、vue+apexcharts+axiosという構成で、毎日更新されてるぽいcovid-19のjsonがあるのですが、値をとってきてチャートで表示することにしてみました。\nhttps://syui.ai/covid-vue-chart\n$ git clone https://github.com/syui/covid-vue-chart $ cd !$:t $ yarn install $ yarn serve import Vue from \u0026#39;vue\u0026#39; import App from \u0026#39;./App.vue\u0026#39; import axios from \u0026#39;axios\u0026#39; import VueAxios from \u0026#39;vue-axios\u0026#39; import VueApexCharts from \u0026#39;vue-apexcharts\u0026#39; Vue.component(\u0026#39;apexchart\u0026#39;, VueApexCharts) Vue.config.productionTip = false Vue.use(VueAxios, axios, VueApexCharts) new Vue({ render: h =\u0026gt; h(App) }).$mount(\u0026#39;#app\u0026#39;) 内容は非常にシンプルで以下のような書き方になりました。axiosでjsonを取ってきて配列に入れてあげる感じ。あと、type:lineがやりたくてoptionかなあと思ったのですが、vue-apexchartは、htmlでtype=\u0026quot;line\u0026quot;みたいです。\nチャートを作成するときは、jsonのkeyやら確認する必要がありますので、this.items = res.dataして表示してます。これはなくてもいい。\n\u0026lt;template\u0026gt; \u0026lt;div id=\u0026#34;covid19\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;covid19\u0026lt;/h1\u0026gt; \u0026lt;div\u0026gt; \u0026lt;apexchart width=\u0026#34;95%\u0026#34; type=\u0026#34;line\u0026#34; :options=\u0026#34;chartOptions\u0026#34; :series=\u0026#34;series\u0026#34;\u0026gt;\u0026lt;/apexchart\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div v-for=\u0026#34;(item, idx) in items\u0026#34; v-bind:key=\u0026#34;idx\u0026#34;\u0026gt; \u0026lt;li v-if=\u0026#34;idx === \u0026#39;Japan\u0026#39;\u0026#34;\u0026gt; {{ idx }} {{ item }} \u0026lt;/li\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import axios from \u0026#39;axios\u0026#39;; export default { created(){ axios.get(\u0026#39;https://raw.githubusercontent.com/pomber/covid19/master/docs/timeseries.json\u0026#39;).then((res) =\u0026gt; { var confirmed = [] var confirmedt = [] var date = [] res.data.Japan.forEach(function (key) { confirmed.push(key.confirmed) }) res.data.Thailand.forEach(function (key) { confirmedt.push(key.confirmed) }) res.data.Japan.forEach(function (key) { date.push(key.date) }) this.series = [{ data: confirmed },{ data: confirmedt }] this.chartOptions = { xaxis: { categories:\tdate }} this.items = res.data }).catch((error) =\u0026gt; { console.error(error) }) }, data () { return { chartOptions: { chart: { id: \u0026#39;vuechart-example\u0026#39; }, xaxis: { categories: [] } }, series: [ {name: \u0026#34;japan\u0026#34;, data: [] }, {name: \u0026#34;Thailand\u0026#34;, data: [] } ] } } } \u0026lt;/script\u0026gt; 注意点としては、gh-pagesは、サブディレクトリになるので、vue.config.jsでpublicPathを設定してやることです。index.htmlのlink pathが/なので。\n昨日、マンガのやつでちょっとだけvueを触ったこともあり、vue、楽しかったので、今日もついつい触ってしまいました。\n","description":"","formated_time":"2020-04-12","href":"https://syui.github.io/blog/post/2020/04/12/vue/","tags":["vue"],"title":"vueでapexchartsを使いチャートを作ってみた","utc_time":"2020-04-12T00:00:00Z"},{"categories":null,"contents":"かろうじてランク9に到達しました。初期レートは1900から。\n勝率はひどい状態です。メンバーは下記ですが、ただのジャンケンですので、攻略法はありません。\nスーパー : ピクシー, シュバルゴ, ナットレイ\nハイパー : フリーザー, ミュウツー(アーマード), ピクシー\nマスター : メルメタル, ディアルガ, カイオーガ\nこのゲームは最低ジャンケンです。厳しい条件を満たしてはじめて運ゲーに突入しますが、条件を満たさなければ絶対に勝てないという理不尽なゲームです。ちなみに、条件を満たしていないトレーナーに当たることは、残念ながらありません。つまり、ただのジャンケンですね。\nストレスしかたまらないし、疲れます。未だに5回に1度くらいは問題のあるバトルが発生しているように思います。\nとはいえ、今回のマスターリーグ、原理的には勝つことが可能なので過去のトラウマが解消されたのはよかったです。過去のマスターリーグは遅延バグにより原理的に勝つことが不可能だったため、そこで20連敗くらいし、レートも計150くらい落としてしまった経験があり、マスターリーグはどうも苦手、勝てる気が全くしないみたいな状態だったのですが、今回は普通のジャンケンが可能でした。つまり、原理的に絶対勝てないみたいなものではなくなっているなと。その点はよかったです。\n色違いマリル、一匹だけ出ました。とはいえ、マスターリーグでこのイベントはひどすぎます。最低ジャンケンの仕組みから条件に満たないトレーナーは確実にレートを落とすか、または参加しないかしか選択肢がありません。運営、とくにGBL開発陣は一体何を考えてるのかわかりません。\n私自身は、イベントの恩恵を受けましたが、こういうのはやめたほうがいいと思っています。\n以上、個人感想でした。\n関係ありませんが、色違いリオルほしいです。\n","description":"","formated_time":"2020-04-12","href":"https://syui.github.io/blog/post/2020/04/12/pokemon/","tags":["pokemon"],"title":"ポケモンGoのGBLシーズン1マスターリーグがはじまった","utc_time":"2020-04-12T00:00:00Z"},{"categories":null,"contents":"qiitaを書いていたら思った以上の分量になったので、ブログにも投稿しておきます。\nvueでスライドを実装するにはhooperというlibraryが便利でした。\nhttps://github.com/baianat/hooper\n前提 今回使用するのは、vue-cli4とhooperです。\nまず、vue-cli4を使えるようにします。最新を入れればいいですが、この情報が古くなった場合、4です。次に、hooperをpackage.jsonに追加します。\n$ yarn global add @vue/cli $ vue create sample-vue-project $ cd sample-vue-project $ yarn add hooper $ cat package.json package.jsonはこんな感じです。コピーして、yarn installしてもいいです。これでyarn installとかすると、依存関係がインストールできます。\n{ \u0026#34;name\u0026#34;: \u0026#34;sample-vue-project\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;0.1.0\u0026#34;, \u0026#34;private\u0026#34;: true, \u0026#34;scripts\u0026#34;: { \u0026#34;serve\u0026#34;: \u0026#34;vue-cli-service serve\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;vue-cli-service build\u0026#34;, \u0026#34;lint\u0026#34;: \u0026#34;vue-cli-service lint\u0026#34; }, \u0026#34;dependencies\u0026#34;: { \u0026#34;core-js\u0026#34;: \u0026#34;^3.6.4\u0026#34;, \u0026#34;hooper\u0026#34;: \u0026#34;^0.3.4\u0026#34;, \u0026#34;vue\u0026#34;: \u0026#34;^2.6.11\u0026#34; }, \u0026#34;devDependencies\u0026#34;: { \u0026#34;@vue/cli-plugin-babel\u0026#34;: \u0026#34;~4.3.0\u0026#34;, \u0026#34;@vue/cli-plugin-eslint\u0026#34;: \u0026#34;~4.3.0\u0026#34;, \u0026#34;@vue/cli-service\u0026#34;: \u0026#34;~4.3.0\u0026#34;, \u0026#34;babel-eslint\u0026#34;: \u0026#34;^10.1.0\u0026#34;, \u0026#34;eslint\u0026#34;: \u0026#34;^6.7.2\u0026#34;, \u0026#34;eslint-plugin-vue\u0026#34;: \u0026#34;^6.2.2\u0026#34;, \u0026#34;vue-template-compiler\u0026#34;: \u0026#34;^2.6.11\u0026#34; }, \u0026#34;eslintConfig\u0026#34;: { \u0026#34;root\u0026#34;: true, \u0026#34;env\u0026#34;: { \u0026#34;node\u0026#34;: true }, \u0026#34;extends\u0026#34;: [ \u0026#34;plugin:vue/essential\u0026#34;, \u0026#34;eslint:recommended\u0026#34; ], \u0026#34;parserOptions\u0026#34;: { \u0026#34;parser\u0026#34;: \u0026#34;babel-eslint\u0026#34; }, \u0026#34;rules\u0026#34;: {} }, \u0026#34;browserslist\u0026#34;: [ \u0026#34;\u0026gt; 1%\u0026#34;, \u0026#34;last 2 versions\u0026#34;, \u0026#34;not dead\u0026#34; ] } vue まず、vueの使い方を簡単に説明します。\nvueはsrc/main.jsとsrc/App.vue,src/index.htmlなどを書いてbuildします。\n$ yarn serve $ yarn build デフォルトでは、distにファイルが置かれます。なお、root pathはpublicになっています。例えば、https://example.com/path/to/img.pngを使いたければ、public/path/to/img.pngにファイルを置いて、App.vueには/path/to/img.pngと記述します。\n次に、vue-cliですが、env(環境変数)を使う際は、.envにVUE_APP_XXX=10などと書いて、App.vueなどにはprocess.env.VUE_APP_XXXとすることで環境変数を使えます。\nhooper https://baianat.github.io/hooper/\ndocsのexampleがわかりやすいですね。最小構成は以下です。大体わかると思いますが、オプションなども用意されていますので、そのあたりは後述します。\n// https://baianat.github.io/hooper/examples.html#default-example \u0026lt;template\u0026gt; \u0026lt;hooper\u0026gt; \u0026lt;slide\u0026gt; slide 1 \u0026lt;/slide\u0026gt; \u0026lt;slide\u0026gt; slide 2 \u0026lt;/slide\u0026gt; \u0026lt;hooper-navigation slot=\u0026#34;hooper-addons\u0026#34;\u0026gt;\u0026lt;/hooper-navigation\u0026gt; \u0026lt;/hooper\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import { Hooper, Slide, Navigation as HooperNavigation } from \u0026#39;hooper\u0026#39;; export default { components: { Hooper, Slide, HooperNavigation } } \u0026lt;/script\u0026gt; import Vue from \u0026#39;vue\u0026#39; import App from \u0026#39;./App.vue\u0026#39; Vue.config.productionTip = false new Vue({ render: h =\u0026gt; h(App) }).$mount(\u0026#39;#app\u0026#39;) hooperでの実装例 私の場合は、画像をスライドさせているので以下のような感じになりました。後で個別に解説します。\n\u0026lt;template\u0026gt; \u0026lt;hooper :settings=\u0026#34;hooperSettings\u0026#34;\u0026gt; \u0026lt;slide v-for=\u0026#34;(n,index) of products\u0026#34; :key=\u0026#34;n\u0026#34;\u0026gt; \u0026lt;img :src=\u0026#34;\u0026#39;/manga/\u0026#39;+ (index) +\u0026#39;.png\u0026#39;\u0026#34; /\u0026gt; \u0026lt;div class=\u0026#34;page_n\u0026#34;\u0026gt;{{ n }}\u0026lt;/div\u0026gt; \u0026lt;/slide\u0026gt; \u0026lt;hooper-navigation slot=\u0026#34;hooper-addons\u0026#34;\u0026gt;\u0026lt;/hooper-navigation\u0026gt; \u0026lt;hooper-pagination slot=\u0026#34;hooper-addons\u0026#34;\u0026gt;\u0026lt;/hooper-pagination\u0026gt; \u0026lt;hooper-progress slot=\u0026#34;hooper-addons\u0026#34;\u0026gt;\u0026lt;/hooper-progress\u0026gt; \u0026lt;/hooper\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import { Hooper, Slide, Progress as HooperProgress, Pagination as HooperPagination, Navigation as HooperNavigation } from \u0026#39;hooper\u0026#39;; import \u0026#39;hooper/dist/hooper.css\u0026#39;; export default { name: \u0026#39;App\u0026#39;, components: { Hooper, Slide, HooperProgress, HooperPagination, HooperNavigation }, data() { return { products: [...Array(Number(process.env.VUE_APP_PAGE)).keys()], hooperSettings: { itemsToShow: 1, centerMode: true } }; } }; \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; .hooper { height: 100%; } button.hooper-indicator { background-color: #000; } img { width:640px; } .page_n { text-align: center; height: 50px; } \u0026lt;/style\u0026gt; hooperのslideをloopで書く わざわざslideを一つずつ用意するのは面倒ですので、通常はfor,bindなどでloop処理を書くことになると思います。あるいは配列を持ってくるなど。以下は必要な部分の記述です。\n\u0026lt;template\u0026gt; \u0026lt;hooper :settings=\u0026#34;hooperSettings\u0026#34;\u0026gt; \u0026lt;slide v-for=\u0026#34;(n,index) of products\u0026#34; :key=\u0026#34;n\u0026#34;\u0026gt; \u0026lt;img :src=\u0026#34;\u0026#39;/manga/\u0026#39;+ (index) +\u0026#39;.png\u0026#39;\u0026#34; /\u0026gt; \u0026lt;div class=\u0026#34;page_n\u0026#34;\u0026gt;{{ n }}\u0026lt;/div\u0026gt; \u0026lt;/slide\u0026gt; \u0026lt;/hooper\u0026gt; \u0026lt;/template\u0026gt; export default { name: \u0026#39;App\u0026#39;, components: { Hooper }, data() { return { products: [...Array(Number(process.env.VUE_APP_PAGE)).keys()] }; } }; 何をしているのかというと、環境変数のVUE_APP_PAGEからdata{products}にページ数を入れます。文字列なので数字に変換、それをslideにてループ。\nスライドするのは、対応した画像ファイル、/manga/0.png,/manga/1.pngなどを順番にスライドさせます。画像ファイルは、/public/manga/0.pngなどの場所に置きます。\nv-forは(n,index) of productsのように書きますが、(n,index)の部分は、n of productsでもいいです。indexにも数が入ってます。ここでn,に続く記述はvueのオプション(vueが用意する変数)のようなものです。\nhooperのoption hooperには様々なbarなどが用意されています。基本的にはこんな感じで使います。\n\u0026lt;template\u0026gt; \u0026lt;hooper :settings=\u0026#34;hooperSettings\u0026#34;\u0026gt; // 上の全体位置を示すバー \u0026lt;hooper-navigation slot=\u0026#34;hooper-addons\u0026#34;\u0026gt;\u0026lt;/hooper-navigation\u0026gt; // ページ、戻る、進むのボタン \u0026lt;hooper-pagination slot=\u0026#34;hooper-addons\u0026#34;\u0026gt;\u0026lt;/hooper-pagination\u0026gt; // 下の全体位置を示す個別ボタン \u0026lt;hooper-progress slot=\u0026#34;hooper-addons\u0026#34;\u0026gt;\u0026lt;/hooper-progress\u0026gt; \u0026lt;/hooper\u0026gt; \u0026lt;/template\u0026gt; import { Hooper, Slide, Progress as HooperProgress, Pagination as HooperPagination, Navigation as HooperNavigation } from \u0026#39;hooper\u0026#39;; hooperのslideにて指定コンテンツを使う この場合のスライド出力は、0 - Foo, 1 - Barとなります。data{items}を変更すればいいでしょう。vueのexampleを参考にしましょう。\nhttps://jp.vuejs.org/v2/guide/list.html\n\u0026lt;template\u0026gt; \u0026lt;hooper :settings=\u0026#34;hooperSettings\u0026#34;\u0026gt; \u0026lt;slide v-for=\u0026#34;(item, index) in items\u0026#34;\u0026gt; {{ index }} - {{ item.message }} \u0026lt;/slide\u0026gt; \u0026lt;/hooper\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import { Hooper, Slide } from \u0026#39;hooper\u0026#39;; import \u0026#39;hooper/dist/hooper.css\u0026#39;; export default { name: \u0026#39;App\u0026#39;, components: { Hooper, Slide }, data() { return { items: [ { message: \u0026#39;Foo\u0026#39; }, { message: \u0026#39;Bar\u0026#39; } ] }; } }; \u0026lt;/script\u0026gt; gh-pages + hugoとの連携 build後のファイルはデフォルトでハッシュ値をつけるので、vue.config.jsで固定したあとに、gh-actionsを書いていきます。\nmodule.exports = { configureWebpack: { output: { filename: \u0026#39;[name].js\u0026#39;, chunkFilename: \u0026#39;[name].js\u0026#39; } }, css: { extract: { filename: \u0026#39;[name].css\u0026#39;, chunkFilename: \u0026#39;[name].css\u0026#39; }, }, } 私の場合は、非常にシンプルに、こんな感じになります。これはhugoを使っている場合で少し特殊ですが、ようは、VUE_APP_XXXに自動で画像ファイル数を入れる処理を書いて、build後に出力される必要なファイルを必要な場所にコピーしています。もちろん、buildオプションを指定して直接置くようにしてもいいです。その場合、コピー処理は不要です。\nrun: | echo VUE_APP_PAGE=`ls ./static/manga/*.png|wc -l` \u0026gt; .env yarn build cp -rf ./dist/*.js ./static/manga cp -rf ./dist/*.css ./static/manga cp -rf ./dist/*.map ./static/manga 私は、hugoを使っているので、以下のように構成しています。\n--- title: \u0026#34;yui | MANGA\u0026#34; type: manga page_image : \u0026#34;https://syui.ai/icon/ai.png\u0026#34; description: \u0026#34;惑星で暮らすドラゴンと少女のお話\u0026#34; --- \u0026lt;div id=app\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script src=/manga/chunk-vendors.js\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=/manga/app.js\u0026gt;\u0026lt;/script\u0026gt; {{ partial \u0026#34;head-blog.html\u0026#34; . }} {{ partial \u0026#34;header.html\u0026#34; . }} {{ partial \u0026#34;manga-css.html\u0026#34; . }} \u0026lt;main\u0026gt; {{ .Content }} \u0026lt;/main\u0026gt; \u0026lt;/div\u0026gt; {{ partial \u0026#34;footer.html\u0026#34; . }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; \u0026lt;link href=/manga/app.css rel=preload as=style\u0026gt; \u0026lt;link href=/manga/app.js rel=preload as=script\u0026gt; \u0026lt;link href=/manga/chunk-vendors.css rel=preload as=style\u0026gt; \u0026lt;link href=/manga/chunk-vendors.js rel=preload as=script\u0026gt; \u0026lt;link href=/manga/chunk-vendors.css rel=stylesheet\u0026gt; \u0026lt;link href=/manga/app.css rel=stylesheet\u0026gt; つまり、yarn buildしてできたdist/index.htmlの内容をhugoの必要な場所に置き換えます。dist/index.htmlは通常、buildしても内容が変わるものではありません。よって、hugoのほうに記述しても問題ないのです。\n","description":"","formated_time":"2020-04-11","href":"https://syui.github.io/blog/post/2020/04/11/vue/","tags":["vue"],"title":"vueのhooperでスライドを実装する","utc_time":"2020-04-11T00:00:00Z"},{"categories":null,"contents":"vueの標準機能を使い自前で作っていたwebのマンガビューアでしたが、ページも増えてきた関係で、流石に機能が少なく使いにくいと思ったのでlibraryを使うことに。前は次のページボタンしかなかったのですが、戻るボタンと上下に全体位置を示すバーを付けました。\nhttps://github.com/syui/comic.page\n使ったのはhooperとvue-cli 4です。vue-cliは古いバージョンに比べ格段に使いやすくなっていて、webpackを使わなくて済みました。\n$ yarn add hooper vueはこんな感じで書きます。hooperはslide {content}みたいな構成でhtmlを書きます。\n\u0026lt;template\u0026gt; \u0026lt;hooper :settings=\u0026#34;hooperSettings\u0026#34;\u0026gt; \u0026lt;slide v-for=\u0026#34;(n,index) of products\u0026#34; :key=\u0026#34;n\u0026#34;\u0026gt; \u0026lt;img :src=\u0026#34;\u0026#39;/manga/\u0026#39;+ (index) +\u0026#39;.png\u0026#39;\u0026#34; /\u0026gt; \u0026lt;div class=\u0026#34;page_n\u0026#34;\u0026gt;{{ n }}\u0026lt;/div\u0026gt; \u0026lt;/slide\u0026gt; \u0026lt;hooper-navigation slot=\u0026#34;hooper-addons\u0026#34;\u0026gt;\u0026lt;/hooper-navigation\u0026gt; \u0026lt;hooper-pagination slot=\u0026#34;hooper-addons\u0026#34;\u0026gt;\u0026lt;/hooper-pagination\u0026gt; \u0026lt;hooper-progress slot=\u0026#34;hooper-addons\u0026#34;\u0026gt;\u0026lt;/hooper-progress\u0026gt; \u0026lt;/hooper\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import { Hooper, Slide, Progress as HooperProgress, Pagination as HooperPagination, Navigation as HooperNavigation } from \u0026#39;hooper\u0026#39;; import \u0026#39;hooper/dist/hooper.css\u0026#39;; export default { name: \u0026#39;App\u0026#39;, components: { Hooper, Slide, HooperProgress, HooperPagination, HooperNavigation }, data() { return { products: [...Array(Number(process.env.VUE_APP_PAGE)).keys()], hooperSettings: { itemsToShow: 1, centerMode: true } }; } }; \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; .hooper { height: 100%; } button.hooper-indicator { background-color: #000; } img { width:100%; } .page_n { text-align: center; height: 50px; } \u0026lt;/style\u0026gt; vueとhooperのexampleをもう少しだけ。例えば、指定のコンテンツを配置するとしたら下記のような感じです。\n\u0026lt;template\u0026gt; \u0026lt;hooper :settings=\u0026#34;hooperSettings\u0026#34;\u0026gt; \u0026lt;slide v-for=\u0026#34;(item, index) in items\u0026#34;\u0026gt; {{ index }} - {{ item.message }} \u0026lt;/slide\u0026gt; \u0026lt;/hooper\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import { Hooper, Slide } from \u0026#39;hooper\u0026#39;; import \u0026#39;hooper/dist/hooper.css\u0026#39;; export default { name: \u0026#39;App\u0026#39;, components: { Hooper, Slide }, data() { return { items: [ { message: \u0026#39;Foo\u0026#39; }, { message: \u0026#39;Bar\u0026#39; } ] }; } }; \u0026lt;/script\u0026gt; この場合のスライド出力は、0 - Foo, 1 - Barとなります。data{items}を変更すればいいでしょう。\n","description":"","formated_time":"2020-04-10","href":"https://syui.github.io/blog/post/2020/04/10/vue/","tags":["vue"],"title":"vueで作ったマンガビューアを更新してみた","utc_time":"2020-04-10T00:00:00Z"},{"categories":null,"contents":"最近は、素材に使う必要なものばかり描いていた気がするので、今回はただただ遊びで描いてみました。\nいつもよりちょっと丁寧です。\n","description":"","formated_time":"2020-04-08","href":"https://syui.github.io/blog/post/2020/04/08/illust/","tags":["illust"],"title":"イラストを描いてみた21","utc_time":"2020-04-08T00:00:00Z"},{"categories":null,"contents":"ノベルの進行状況からかイラストを描く機会が増えています。\nibisPaint Xで再生を押すと、描いている最中の動画が流れて、これ全部保存しているんですね、知らなかった。\n今回は、普段、どんな風に絵を描いているのかを紹介してみようと思います。\n上は、サボネズミです。未来の意思を持ったサボテンなんですけど、他人の夢に入り込んで、そこではハリネズミとして行動します。ゼンの持ち物で関西弁をしゃべる。そういや登場させるの忘れてた、ということで、一応、描いてみた。\n動画が撮影されてるの知らなかったので、普段通りとなっています。\n大体は一発で線を引きます。最も時間がかかってるのは完成したあとですね。ここちょっと変と思った部分の修正です。全体的に変だとかなってしまうと、全部書き直しになることもあります。\nとはいえ、ほとんどは一発です。一発で仕上がったやつのほうがうまく描けたということが多いです。また、描きたい気分のとき描いたやつがそうなる傾向にあるような気がする。\n基本的に私は私のやり方で絵を書きます。とくに誰かに教えてもらったとか、だれかの真似であるとかではありません。\nもちろん、誰かの影響を受けているというのはあります。私は幼い頃、おじさんからドラゴンボール全巻をもらったのでそれを読んでいました。また、ゲームはポケモンが大好きです。なので、ドラゴンボールやポケモンの影響はすごく受けていると思います。\nこういったことは自然に出てくると思うので、みなさんも絵を書きたいときはただ描くだけでいいと私は思います。\n上手いとか下手とかではなく、自分が納得できるかや、描きやすいか、楽しいか、そういったことが何より重要だと思います。\nそれ以外のことは、割とどうでもいいことです。\nつらいことや難しいことは、やっぱり、続かないと思います。私は、自分の絵を自分が好きなように書いてきただけなので、続けられていますが、例えば、絵の勉強をしよう、資料を集めよう、誰それよりもうまく、あるいは同等に書こうみたい感じだったら、続かなかったと思う。\nもちろん、向上心は大切だと思います。ただ、私の場合でいうと、私は自分の絵柄を確立させていく方向で考えているように思います。そちらの比重、優先度のほうが高い。何故かと言うと、私は、大変なこと、難しいこと嫌いなんです。どうせならラクに楽しく描いていきたい。自分の絵を描いていきたい、それだけなんです。\n絵を書く時、何を参考にするの？\n実は私が絵を書くとき、資料を見ることは殆どありません。というか、全く無いと言っていいでしょう。サボテンを描くとき、サボテンを見ません。ネズミも同じ。ただ自分のイメージで、線を引いてそこから描いていくという感じです。なぜか。資料を探し出すとやる気が削がれるんですよ。そして、めんどくさい。\n絵を書きたいだけの人は、資料、やめたほうがいいです。資料は、描かなければならないものが明確にあって、かつ探さないとよくわからない場合に限定すべきです。\n普段の日常生活の中、ふと目にした何かや感じたことなどで、気持ちを刺激され描き始めるみたいな流れが一番いいのではないかと思います。\nもちろん、わからない部分もたまにあって、そういうときは検索しますが、ほとんどがイメージです。\n絵を書くとき必要なものは何もありません。イメージを大切に、私はそう思います。\n少し複雑なポーズや複雑なものを書くときがあります。こんなときも、やはりイメージが大切です。\nしかし、イメージと言っても分かりづらいですよね。\n例えば、線をぐにゃぐにゃっと思うがままに引いてみて、そこから脳内で描き出されるイメージ、構図みたいなものが見えるので、私は、そこに見えたものを描きます。\n真っ白なキャンバスにぐにゃぐにゃと適当に線を引くじゃないですか。そうすると、薄っすらその続きになる自然な線が見えてくるので、それをなぞるだけです。\nすごくわかりにくい話かもしれませんが、そんな感じでやると、誰でも描けますので、絵を描きたいと思った人は、そんな感じでやるのがオススメ。\n下記は最近書いたキャラクター。\n","description":"","formated_time":"2020-04-07","href":"https://syui.github.io/blog/post/2020/04/07/illust/","tags":["illust"],"title":"イラストを描いている動画を作ってみた","utc_time":"2020-04-07T00:00:00Z"},{"categories":null,"contents":"これが1話かどうか怪しいですが、ページ数的には、1話の分量ですね。物語的にも一区切り付きました。\n/manga\nマンガのページはvue.jsで構築しています。次のページボタンと画像URLのリンクを生成。\nできればこちらのリンクから読んだほうが読みやすいと思います。ブログページは画像を縮小して表示するため。\n独り言 週間連載の漫画家は、バケモンじゃないかと思いました。絵を書くのって大変で、セリフとか背景とか時間がかかります。\n私は、そこまで緻密に考えたり設計したり描き込んだりするタイプではなく、それでも時間がかかってしまいました。\n物語の構成は、1:海, 2:虹, 3:月となっています。とはいえ、内容があるかと言うと、特にありません。\nオリジナル小説または、ノベルゲームとの関連性はあります。設定はすべてそこから来ているため、キャラやその他の設定を受け継いでいます。今の所、ノベルゲームのスピンオフという位置づけ。しかし、これからどうなるのかは、わかりません。\n唯を追い出した羊は、第423代の大統領。ドラゴンの名前は、ドライ。色はブルーぽい感じ。ゲームの方でも必要になればキャラクター(モンスター)一覧に追加しますが、おそらく、追加しないでしょう。ガララ星に大陸はないの？反対側に一つだけあります。\nページ /manga\n","description":"","formated_time":"2020-04-02","href":"https://syui.github.io/blog/post/2020/04/02/manga/","tags":["manga"],"title":"マンガを1話だけ完成させてみる","utc_time":"2020-04-02T00:00:00Z"},{"categories":null,"contents":"ブログをやるならGitHub PagesかGitLab Pagesがおすすめです。\n私は、少し前にGitLabでブログをやっていましたが、その後、GitHubに移行したというか、戻りました。経緯としてはGitHub -\u0026gt; GitLab -\u0026gt; GitHubという流れです。\nsyui.github.io\n割と長くGitHub PagesやGitLab Pagesでブログをやってきたので、今回は、両者の違いをまとめてみます。\nGitLabはプライベートリポジトリが無制限で、HTMLソースを公開しなくていい\nWeb Serverは、GitHubのほうが安定していて速い\nGitLabのほうがドキュメントが充実しており、公式テンプレートがわかりやすい\nどちらもCIを回せるけど、GitLabはGitLab CIを回して、public/にビルドするという形態を採用するため、CIが成功しないとページが公開、更新されない。ユーザーが.gitlab-ci.ymlを書く必要がある\nGitHub PagesはデフォルトでJekyll Buildを実行しページが公開される仕組み。ただし、リポジトリルートに.nojekyllを置くことでJekyll Buildを実行しないオプションも存在する。よって、HTMLを直に置いてページを作ることもできる。何らかの原因でJekyll Buildが失敗する場合、この手段を用いることができる\nGitHubは、${USER}.github.ioというリポジトリ名を作成することで、当該ドメインが与えられる。branch:masterにHTMLをpushすると更新される。複数のページを用意したい場合は、リポジトリを作ったうえでbranch:gh-pagesにjekyll buildが通るソースコードを置くことでページを公開する\nGitLabも同じく${USER}.gitlab.ioというリポジトリ名を作る。ただし、ブランチは基本的にはmasterを使用する。なお、.gitlab-ci.ymlでソースを置くブランチは制御、変更できる\n現在、GitHub Pagesには、GitLab CIに相当するGitHub Actionsがあるのでページの自動ビルド、デプロイに関しての不便はない\nGitLab Pagesは複数のドメインを登録できる。GitHubは無理。なので必要なときはGitLab Pagesのドメイン設定を使ってGitHub Pagesにリダイレクトさせるなどのハックに利用させてもらってる\nまとめ 以下、サービス別に特徴をまとめます。一応、GitHub Pagesをおすすめしておきます。GitLab Pagesはweb serverが不安定なことが多かった記憶があります。とはいえ、好みの問題ですね。\nGitHub Pages web serverが速くて安定している\nデフォルトではjekyll buildが回る、オプションで切ることもできる\nGitLab Pages ドキュメントや公式テンプレートがわかりやすい\n必ずGitLab CIを通す必要がある\n複数のドメインを指定できる\nプライベートリポジトリが無制限に使えるため、HTMLソース(リポジトリ)を非公開にできる\nGitLabからGitHubに移行した経緯 私は、GitLab Pagesを2年くらい使っていましたし、特に不満もなかったのですが(たまに不安定で遅かったというのはある)、あるとき突然にページが非公開になってしまうことがありました。\nで、運営に連絡してみたのですが、返事がなかったので、GitHub Pagesに同じソースでデプロイしました。つまり、ここで移行という形になります。\nその後、GitLabの方で非公開が解除されたのですが、なんだったのかよくわからなかったので、その後、GitLabに戻ることはありませんでした。そのような経緯で、それ以降は、GitHub Pagesを使っています。\nただ、GitHubはCI連携がデフォルトではなかったため、通常は、ビルドしたものをリポジトリにpushしなければ更新できません。したがって、Travis CIを回してページのビルド、デプロイを自動化してましたが、GitHub Actionsが登場したので、今はそちらに移行しています。\nGitLab Pagesを使った複数ドメインを利用するハック 例えば、blog.syui.aiとlog.syui.aiというドメインをsyui.github.io/blogに飛ばしたいとしましょう。この場合、GitHub Pagesは一つのページに一つしかドメインを指定することができないので難しい。\nそこで、GitLab Pagesで２つのドメインを登録した上で、CloudFlareなどのリダイレクトをGitHub Pagesへ走らせることで、blog.syui.aiとlog.syui.aiを目的の場所に飛ばすことができます。\nCNAME : gitlab pages ↓ リダイレクト : github pages とはいえ、これはあくまでリダイレクトという形なので、アクセスは、トップドメインにとどまります。このような形を実現したい場合のみ利用できるハックです。\n簡単にブログを立ててみる手順 GitLab Pages https://gitlab.com/pages\nまず、リポジトリを作りましょう。リポジトリ名は${user}.gitlab.ioです。例えば、私の場合、syui.gitlab.ioですね。\nそして、以下のリポジトリをpushしましょう。\n$ git clone https://gitlab.com/pages/jekyll $ cd jekyll # ${USER}に注意 $ git remote add origin git@gitlab.com:${USER}/${USER}.gitlab.io.git $ git push -u origin master GitLab CIが通ったのを確認したら、ページが表示されているはずです。(GitLabの場合、成功しても公開まで少し時間がかかります)\nビルド出力はpublicディレクトリでないといけません。このへんは注意です。それぞれのジェネレーター(静的サイトジェネレーターなど)の実行にオプションから指定しないといけない場合があるかもしれません。publicがデフォルトでない場合はそうですね。\n複数のページを作りたい場合は、同じような手順に加えて、.gitlab-ci.ymlを調整しましょう。\nGitHub Pages まず、リポジトリを作りましょう。リポジトリ名は${user}.github.ioです。例えば、私の場合、syui.github.ioです。\n$ git clone https://gitlab.com/pages/jekyll $ cd jekyll # ${USER}に注意 $ git remote add origin git@github.com:${USER}/${USER}.github.io.git $ git push -u origin master 複数のページを作りたい場合は、同じような手順に加えて、ブランチをgh-pagesにしてpushしましょう。アクセスは、https://${USER}.github.io/リポジトリ名となります。\n# リポジトリを作った上で $ git remote add origin git@github.com:${リポジトリ名}.git $ git branch -b gh-pages $ git push -u origin gh-pages ","description":"","formated_time":"2020-03-28","href":"https://syui.github.io/blog/post/2020/03/28/blog/","tags":["blog"],"title":"ブログをはじめるならGitHub Pagesがおすすめ","utc_time":"2020-03-28T00:00:00Z"},{"categories":null,"contents":"vue 2.x + webpack 4.x 系でenvを使うのにハマったのでメモ。\n結論としてdotenv-webpackを使えばいけました。\n$ echo \u0026#34;page=4\u0026#34; \u0026gt;\u0026gt; .env $ yarn add dotenv-webpack const Dotenv = require(\u0026#39;dotenv-webpack\u0026#39;); module.exports = { plugins: [ new Dotenv(\u0026#39;./.env\u0026#39;) ] } var app = new Vue({ data: { products: [...Array(Number(process.env.page)).keys()] } }) \u0026#34;scripts\u0026#34;: { \u0026#34;build\u0026#34;: \u0026#34;cross-env NODE_ENV=production webpack --progress --hide-modules\u0026#34; } ","description":"","formated_time":"2020-03-25","href":"https://syui.github.io/blog/post/2020/03/25/vue2x/","tags":["vue2x"],"title":"vue 2.x + webpack 4.xでenvを使う","utc_time":"2020-03-25T00:00:00Z"},{"categories":null,"contents":"昔、ちょっとだけよくわからないマンガを書いてたことあります。\n今回、ノベルゲームの物語が進み、ようやく繋がりそうだったので、再びそのあたりをマンガで描いてみることにしました。\n書き直しになるのか、スピンオフになるのか、そんな感じです。\nノベルゲームも物語を追加したので、気になる方は、続きを読んでみてください。\n/manga\n私は、昔から気ままに書いてきた絵があるんですけど、それにお話を付けらたらなあとずっと思ってて、もう一度、ノベルゲームの設定を使って実現できたらと思ったので、描きはじめたという経緯。\n特に内容があるわけではありませんけど、マンガでは、へんなドラゴンと一緒に暮らす女の子の日常を予定してます。\nドラゴンのほう、こいつも地球出身で、古来から地底深くに生息していたドラゴンの生き残り。生命の龍と呼ばれています。色々あってユイと同じく地球を離れることになったやつ。\n私は、非公開の小説を書いていたり、ゲームを作っていたりして、ゲームで追加したキャラとかもたくさんいて、新しいキャラの影響もあって、非公開(稀に公開)のマンガや小説の設定も成長してきました。その意味でも今回は少しだけ頑張って描いていけたらと思います。\nというか、今、ipadで描いてるんですけど、ipadなら楽しく描けるような気がする。\nマンガは数ページだけnexus7で描いたことがあったのですが、今思うと、作業環境としては猛烈につらかったんだなって\u0026hellip;。\nipad、買ってよかったじょ！\n","description":"","formated_time":"2020-03-24","href":"https://syui.github.io/blog/post/2020/03/24/manga/","tags":["manga"],"title":"再びマンガを描きはじめた話","utc_time":"2020-03-24T00:00:00Z"},{"categories":null,"contents":"オリジナルのノベルゲームを更新しました。\n以下のページにアクセスして、はじめからを選択してください。新しい章を選べるようになっています。\nPLAY : /game\n紹介 : /imgame\nちょっとした制作秘話 今回作ったお話は、yui3の前半、モンスター編という位置づけになっています。\n簡単に言うと、アイとはかせが作ったモンスターボックスがどんなものなのか、その設定を紹介する内容です。\nこのような設定をただ説明するだけでは、物語としてつまらない。\nしたがって、物語の中にモンスターボックスの設定を組み込んで説明しています。\nまた、yui3の後半、アム編の冒頭を少しだけ公開しました。\nアムというのは、宇宙のナンバーワン通貨を発行している星です。今回、アイはそこに潜入するというミッションです(わけわからん)。\nなぜそうなったのかは、これから語られるかもしれませんし、語られないかもしれませんが、まあ、そんな感じです。\nで、こういったシーンで使えるかっこいい感じのBGMが欲しかったので、作りました。ええ、この冒頭のためだけに作りましたとも。\n今まではゆるふわな話が多かった気もするので、今回は、少し大人な感じで話を進めていこうと思っていて、そういった雰囲気を少しでも出せれば嬉しいです。\nただ、どんなに悲しかったり、つらかったり、あるいは怖かったりする話でも、最後には、どこか笑える、ハッピーエンドな感じのギャグを入れることも忘れずにやっていきたいなあと考えています。\nあ、アイが手に持っている剣は、頭の上の輪っかですね。それを形状変化させたもの。\nアム星は警備が厳重で、武器は持ち込めませんし、力も使えません。よって、今回、重力で鍛えた肉体とソードのみで突破することになりそうな気がする。(わからんけど)\n","description":"","formated_time":"2020-03-20","href":"https://syui.github.io/blog/post/2020/03/20/game/","tags":["game"],"title":"ノベルゲームの続きを書いた","utc_time":"2020-03-20T00:00:00Z"},{"categories":null,"contents":"前回、バトルリーグの改善案を話しましたが、今回は、その案について丁寧に説明してみることにします。\n対戦数を表示してはいけない理由 まず対戦数は表示してはいけません。なぜか？それはユーザーを不快にする要素があるからです。熱心なユーザーは、相棒ポケモンをやるために毎日トレーニングします。バトル数でハートを稼ぐためです。しかし、トレーニングするにはこの忌まわしき対戦画面に移る必要があるんですよね。ここでPvPに興味がない人でも、自分の成績をまざまざと見せられてしまい精神的に辛いのです。\n例えば、勝利数38,対戦数55のユーザーと勝利数12,対戦数55のユーザーがいたとしましょう。それを見ただけで人は区別してしまうんですよ。普通だなとか、弱いやつだなとか。\nこれは、非常に良くない。他人に対しても個人に対しても良くないことです。悪影響しかないと言ってよい。\nではどうすればいいのか。対戦数を表示しなければいいんですよ。\nこの表示がポジティブな情報のみだったら、シンプルで非常に良いものに変化します。\n戦えば戦うほど数字があがる可能性が増えるわけですから、嬉しいのです。\nユーザーをバトルリーグの強さで区別してはいけません。区別できてしまうようではいけないんですよ。\nまた、バトルをしてほしいのなら、なおさら勝利数のみを表示したほうがいい。対戦数を表示してしまうと、戦えば戦うほど落ちていく勝率に歩みを止めてしまう人が出てくるでしょう。逆に、たまたま連勝し、それ以上進めない人も出てくる。\nゆるいゲームへのミスマッチ ポケモンGOは、どういうゲームか。言ってみれば非常にゆるいゲームです。誰でも簡単にプレイできるゲーム。バトルは技が最高で2つあり、基本は1つ。それをタップして繰り出すだけで、初回操作にも説明は不要でしょう。\nさて、そんなゆるいゲーム、ポケモンGOに形式だけ本格的なPvPが実装されました。これがバトルリーグです。\nでもですよ、本格的なPvPをやりたければ、みんな他のゲームをやるでしょう。通信サーバーが不安定でバグだらけの技をタップして繰り出すだけのシンプルなゲームに皆さんは一体何を求めていると思いますか。確実に言えることは、本格的なPvPなんて誰も求めていないのです。多くの人は求めていないし、求めている人がいても、他にやりようがいくらでもあるので、その方法を改善案として提示しました。\nまずは、本格的なPvPをこのゲームでやろうとすると、様々な弊害が出てきてしまうということを説明します。\n一つは、形式と内容(実力)のミスマッチです。\n形式だけは本格的ですが、内容がその形式と合わないんですよね。どうやっても合わない。実力を反映しないし、できない。そんなものは存在しない。だって、技をタップして繰り出すだけのシンプルなゲームですよ。そこに良さがあるようなゲームです。1日プレイすればある程度理解できてしまうし、その後は同じことの繰り返しです。\nつまり、1日かそこらプレイしてテクニックを覚えたあとは、運ゲーです。これに本格的な形式を当てはめるのは無駄ですし、意味がない。そこには何も反映されませんし、言ってみれば運の良さくらいしか反映されません。\n例えば、ジャンケンの成績、対戦数と勝利数がずーっと目に見える場所に張り付いていたらどう思います？私は、鬱陶しいですね。それに意味もないと考えます。\nしかし、運営はそういった意味のない数字、レート、ランクにあたかもゲーム価値があるように見せかけます。ユーザーもそれに倣って、その基準で物事を判断し、評価するようになる。この状況、あまり楽しいとは言えません。\nではどうすればいいのか。\n本格的なPvPを何が何でもポケモンGOでやりたいというなら、それは「おまけ」にすべきであり「基本」あるいは「核心」にすべきではありません。\nですから、最高ランクは勝利数で上がれるようにし、最高ランクに到達した時点で3000のレートが与えられ、そこからユーザーに選択させればいいと私は考えています。つまり、結果(3000)から逆算するのです。また、おまけは、あくまでおまけであり、そこに報酬は出ません。\nしかし、この仕組みによって、誰よりも強くなりたいというトレーナーにはレートを上げるチャンスが与えられ、逆に報酬目当てのトレーナーやPvPをやりたくないトレーナーには、そこでやめる機会が与えられる。レートはシーズン終了時に今までどおり記録されますので、頑張りは残ります。逆に、やめた人達は3000ですね。\n今の運営の態度は、明らかにこういった個人の選択を奪うか、あるいは尊重しない方向で動いています。PvPの報酬や評価、表示などがその証拠です。\nPvPはやりたい人がやればいいのであって、そういった仕組みを作るのが運営の仕事だと私は思います。PvPに参加する人を何が何でも増やそうとする試みは、もはや「ポケモンGOには人それぞれに遊び方がある」と言えるものではありません。\nまとめ 対戦数(総数)は表示しない、表示するのは勝利数だけ\n最大ランクまでレート戦なし(勝数でランクは上がる)\n最大ランクに到達した時点で3000のレートが与えられる\nそこからはレート戦、ただしあくまで「おまけ」。レートによる報酬はなし(終了後レートは記録される)\n個人的なお願い プレシーズンでのランク10の基準、3000に戻してくれると嬉しいなー、なんつって。\n","description":"","formated_time":"2020-03-16","href":"https://syui.github.io/blog/post/2020/03/16/pokemon/","tags":["pokemon"],"title":"ポケモンGO、バトルリーグの改善案ついて説明してみる","utc_time":"2020-03-16T00:00:00Z"},{"categories":null,"contents":"シーズン1が始まりました。一応、ランク7に到達しました。\nですが、見ての通り初期レートが死んでいます。ここからランク10(レート3000)は無理です。\n相手の強さ 相手の強さは、ほとんど変化がないように思います。ランク1であろうと、ランク6であろうと、正直、相手が強すぎるような気がしています。何かがおかしい。楽に勝てた記憶がありません。YouTubeを見ていると、もう少し楽な試合があってもいいと個人的には思うのですが。\n戦略と勝率 私は、プクリン(ピクシー)、シュバルゴ、ルンパッパのメンバーです。はがねタイプには、シュバルゴのアシッドボムで対抗します。チルタリスもアシッドボムからのメガホーンで落とせます。この構成でやると、運には依存するものの基本的には勝ち越せるはずなんですが、どういうわけか、あまり勝てていない状況です。\nフリーズ まず、55試合中に勝てたはずの6試合をフリーズによって落としています。こちらの通信には問題はないはずです。\nさらに3試合ほどフリーズによって落としかけました。ギリギリ動くようになったので、なんとか回避しました。\nしかし、なぜこちらばかりフリーズするのでしょう。相手がフリーズしたの見たことない。たまには相手もフリーズしてほしい。\nチャージ シーズン1で戦っていると、やはり、チャージ攻撃が速すぎる人に出会います。これはプレシーズン中もよくありました。\n私は、チルタリスと何度も戦っていますから、りゅうのいぶきがどれくらいのチャージ必要かわかるんですよ。簡単に言うと、りゅうのいぶきは、チャージが遅いです。\nしかし、初登場からりゅうのいぶきを3,4発ですぐにゴッドバードを放てるはずがないのに、普通に打ってくることがあります。\n今はそういうのを食らってもなんとか勝てていますが、しかし、ハイパー、マスターになってくると、即チャージに対抗するのは、難しくなってくるでしょう。\nこのゲーム、精神衛生上よくないので、突然やめることになるかも。\nプレシーズン 今更ですが、プレシーズン中の話を少しします。悔しすぎる思いを少し吐き出したい。\nプレシーズン中、私のレートは2600から始まり、ハイパーで3300まで上げました。レートの推移はスーパーが3000で、ハイパーが3300です。ハイパーの期間中、遅延バグを知らずに-100を食らってしまっています。ギャラドス、キングドラに変えてみたものの「これは絶対におかしい」と気づくまで連敗してしまったためです。1日の出来事でした。そこからレートを3300に戻しました。が、本来なら3400でした。遅延を食らわなかったら。\nマスターもディアルガを使ってみたところ連敗し、どうも自分のディアルガ、カビゴンが与えるダメージが少なすぎることに気づくまで-100下げてしまった。そこから中断することになります。ですから、マスターはレートを下げてから戦ってなかった。\nあとからならなんとでも言えますが、あえていうと、ランク10に到達できる可能性をことごとく運営に潰されてきたので、納得していませんし、今もそうです。\nまずはプレシーズンにもかかわらずランク10の基準をレート2800から3500に変更した点です。これは初期に行われた変更で、そこだけなぜか対応が早かった。プレシーズンですよ、何でわざわざ基準だけ厳しくして、バグや不正をずっと放置するのでしょう。わけがわからない。変更がなかった場合、ランク10に到達していました。\n初期レートは3200くらいで多くの人に配られているのをtwitterでよく見ます。私はバトルリーグに関連すると思われるメダルはゴールドにしているはずなのに、初期レートが低かった。ゴールドの値が低かったからそうなったのかもしれませんけど、初期レートは納得していません。3200から始めていたら私のレートは今頃3900ですよ(あくまで論理上)。まあ、そこまではなかったとしても、ランク10には到達していたと思います。実際、ランク10に到達した人達は、例外なく初期レートがよかった人達です。\n最後のチャンスであるマスターリーグ。これは遅延バグによって中止せざるを得えない状況に追い込まれました。最強ポケモン、最強技を使っても相手だけ遅延しないのでまともに戦うことができません。しかも、時期的に初期は勝ちやすいため、そのチャンスを逃してしまった損失も大きかった。\nつまり、プレシーズンにもかかわらず基準だけ早々に引き上げたのも、クリアできないような初期レートも、致命的バグが多発して攻略不可能になったのも、すべてが最悪でした。\n改善の知識 ここで、私が持てる改善の知識を少しだけ書きます。個人感想に過ぎませんけど、簡潔に。\nタコ部屋って知ってます？知らない人は調べてください。ようは、奴隷ユーザーに厳しくするだけでは逃げてしまうので、ユーザー同士戦わせランキングしたら逃げず働くようになって経営者はウハウハだという話です。ランキング上位だけがわずかばかり報奨をもらえます。GOリーグはタコ部屋です。もちろん、今の時代、タコ部屋を作ることでしか人を集められない稼げないゲームは多い。しかし、ポケモンGOでそれを作る必要はまったくない。なんでこの最高のゲームにそんなもん作ってんだよ。わけわからん。\nポケモンGOのいいところは、みんなが勝てるゲームだからです。コミュニティデイ素晴らしい。みんな色違いをゲットできる、みんな勝ち。レイドもそうです。簡単に伝説ポケモンが手に入り、みんな楽しいし、みんな勝てる。いいゲームですね。でもGOリーグは良くない。\n私は運良く勝ち越しています。しかし、対戦画面を見るのが苦痛で、バグってる運ジャンケン(勝敗はバグと運によって決まる)にどれくらいの勝率で勝ったか表示されたところで面白くもない。しかも、連敗したときの嫌な記憶がよみがえる。\n改善策として、まずは、対戦数を表示しないこと。表示するのは勝利数だけ。連勝記録はあってもいいけど、なかったほうがシンプル。\nレートは、負けても下がらないようにすること。勝てば上がる、それだけでいい。頑張ったのに下がったら嫌でしょ。今の仕組み楽しくない。勝てない人はレート上がらないので、それでいいはず。わざと負ける人にどう対処するかは考えなくていいし、放置でいい。レート下がらないとわざと負ける人が出てくるかもという懸念、レート下がるとわざと負けは出ないはずという前提が間違い。また、同士討ちは負けでなく勝ちでいい。初期レート、バグ含めすべてが不公平、不公正な環境なのにそこだけ厳格なのわけわからん。\n今の運営、ユーザーへの嫌がらせにだけは熱心。多くの人を楽しませようという気持ちがないと思う。ダークライのときもそうだけど、引っ込めるの多少遅れても誰も文句言わないのに、あえて時間より早めに引っ込めたりとかしてる(しかも遅めに登場)。\n個人的には、レートを撤回して、最高ランクも一定数勝てば到達できるようにしたほうがいいと思う。それ以上戦いたい人は勝手にやるでしょ。\n私ならこうするというのを書いておきます。私なら最高ランクまでレート戦はなしにします。続けてれば最高ランクは取れるようにします。で最高ランク10に到達した時点の全員に3000のレートが与えられます。そこからは勝てば上がるし、負ければ下がるレート戦にすればいい。そんな感じにすると思う。ただ、レートによる報酬は与えません。PvPは戦いたい人が戦えばいいという考えだからです。\n対戦数(総数)は表示しない、表示するのは勝利数だけ\n最大ランクまでレートなし(勝数でランクは上がる)\n最大ランクに到達した時点で3000のレートが全員に与えられる(運営システムが行うのはここまで)\nレートによる報酬はなし(戦いたい人は戦ってレートを上げればいい)\n","description":"","formated_time":"2020-03-15","href":"https://syui.github.io/blog/post/2020/03/15/pokemon/","tags":["pokemon"],"title":"ポケモンGOバトルリーグのシーズン1が始まった","utc_time":"2020-03-15T00:00:00Z"},{"categories":null,"contents":"GOリーグはあまり好きではありません。ただ、実際にプレイしてきたのでポイントをまとめます。\nノーマル攻撃かシールド破壊か スーパーはノーマル攻撃で押せます。マスターはシールド破壊が有効です。ノーマル押しでは勝てません。そういった傾向にあります。\nこの知識を前提に戦略を立てるとよいでしょう。ノーマル攻撃が強いポケモンはなにか、シールドを破壊できるポケモンは何かを考えていけばメンバーは決めやすいと思います。\n耐性x2 その上で、よく出てくるテンプレに相性で対抗することを考えます。二重耐性(耐性x2)が特に重要です。\n例えば、フシギバナにはヒードランが耐性x2を持ちます。ギラティナにはカビゴンです。その上でわざをベストなものに変更します。\nシャドウ シャドウポケモンは、与えるダメージが大きくなります。\nスーパー 以下、連勝経験のあるパーティーです。\nテンプレ:チルタリス、マリルリ、ランターン、ナマズン、エアームド、ラグラージ、デオキシス、レジスチル\nポケモン わざ1 わざ2 わざ3 グランブル あまえる かみくだく インファイト マッスグマ シャドークロー かみなり くさむすび ルンパッパ はっぱカッター れいとうビーム ハイドロポンプ グランブルをシールドで守りつつ、先鋒(or交代)を倒し切る。これができなかった場合、負ける確率が高い。グランブルをプクリンやピクシーにしてもいい。ゴーストを頻繁に見かけますので、マッスグマを当てると良いでしょう。\n予備:マッスグマと適時入れ替えるのがオススメ\nポケモン わざ1 わざ2 わざ3 フワライド たたりめ こごえるかぜ シャドーボール レアコイル でんきショック ほうでん マグネットボム シュバルゴ カウンター アシッドボム メガホーン マンタイン あわ つばめがえし れいとうビーム ジラーチが使える場合、スーパーではジラーチが強いので使いましょう。\nハイパー テンプレ:ラグラージ、ギラティナA、フシギバナ、レジスチル、ニョロボン、ラプラス\nポケモン わざ1 わざ2 わざ3 フリーザー こおりのつぶて こごえるかぜ げんしのちから ヒードラン ほのおのうず アイアンヘッド かえんほうしゃ ピクシー あまえる コメットパンチ サイコキネシス こごえるかぜを連発、ほのおタイプならげんしのちから。フシギバナ来たらヒードランに入れ替えてアタックを貯める。先鋒でかくとうタイプが出てきてやられる場合はピクシーに変えたりすると楽かも。\nミュウが使える場合、ハイパーではミュウが強いので使いましょう。\nマスター テンプレ:ディアルガ、ギラティナO、カイオーガ、メルメタル、トゲキッス、ラグラージ\nポケモン わざ1 わざ2 わざ3 ライコウ ボルトチェンジ ワイルドボルト シャドーボール ダークライ バークアウト シャドーボール きあいだま ルカリオ カウンター はどうだん シャドーボール ゴーストとあくタイプの技が比較的強いので、それを持ったポケモンかつテンプレ耐性があるポケモンで対抗。ギラティナにはダークライをぶつけ、ディアルガにはルカリオをぶつけます。他に出てくるポケモンはメルメタル、トゲキッス、カイオーガです。難しければ相打ち覚悟でライコウ以外をテンプレに変更します。ディアルガ、カイオーガあたり。\n運ゲー このゲームは基本的に運で勝敗が決まります。\nですから、最低限の知識、テクニックを持ったなら、あとは運次第です。運が良ければ連勝しますし、悪ければ連敗します。同じメンバーで5連勝したと思ったら、次のセットで5連敗したみたいな経験がある人は多いと思います。バトルは相性で決まります。レートやランクはほぼ関係ありません。\n相手の強さ よく低レートは相手が弱い、高レートは相手が強いと言われたりしますが、私の経験から言うと、全レート通して相手の強さはほとんど変わっていません。2600でも3300でも相手の強さに違いはありませんでした。\nただ、レートではなく時期による変化は確認しています。初期の頃と最終では、最終のほうが勝ちにくくなったと感じることがあります。つまり、同レート帯でも相手の強さは時期によると思われます。\nレートが低い相手は弱いとかそういったことは全くないと思います。\nレートは初期レートのガチャによって決まり、強い人が低レートということはよくあります。反対に強い人でも高レートということもよくあります。相手の強さはレートやランクではなく、時期によって変化します。逆に言うと、相手の強さにレートやランクは全く関係ありません。\n立ち回り 必要なテクニックをいくつか紹介します。\nまずは、溜めです。耐性x2がある場合、必殺技を使わずに溜めておきましょう。\n次に交代ですが、先に交代したほうが負けます。もしくは天に運を任せた状態になります。それでも少しばかり勝率を上げるためには、交代後のポケモンを厳選する必要があります。ニョロボンとか交代要員として重宝されているようです。\n","description":"","formated_time":"2020-03-12","href":"https://syui.github.io/blog/post/2020/03/12/pokemon/","tags":["pokemon"],"title":"ポケモンGOのリーグが正式に始まるのでポイントをまとめてみる","utc_time":"2020-03-12T00:00:00Z"},{"categories":null,"contents":"自作のノベルゲームを更新しました。以下のページにアクセスして、はじめから-\u0026gt;最新話:45話となっています。\nPLAY : /game\n紹介 : /imgame\n今回もイラストを描いたり、背景を描いたり、脚本を書いたりしました。\n私は基本的に強制力がないと永遠に書かなそうだと思ったので、1ヶ月に1回、新しい物語を追加していくことにしました。よろしくおねがいします。\n","description":"","formated_time":"2020-03-07","href":"https://syui.github.io/blog/post/2020/03/07/game/","tags":["game"],"title":"自作ゲームを更新してみた","utc_time":"2020-03-07T00:00:00Z"},{"categories":null,"contents":"私はファイルのハッシュ値を調べるとか比較するとかをまとめてchecksumと呼んでいます。ただ、この辺の知識は調べたり、詳しかったりするわけではなく、普段なんとなく思ってる、ふわっとした理解に過ぎません。\nそれを前提に話をすると、webやserverに置かれたファイルというのは、改ざんされている可能性があるため、特にインストール時や実行権限を得られるディレクトリにバイナリを置く際などはファイルの同一性をチェックし、偽装されていないかなどを確認することがよくあります。また、ファイル破損などのチェックにも有効なので、通常は、ファイルをダウンロードする時などに自動チェックされることが多いと思います。ブラウザやダウンローダーもハッシュ値チェックは行っているでしょう。\n通常、checksumには、sha1sum,md5sumなどのコマンドを使います。\nで、ファイルを比較するとか、ハッシュ値とファイルを比較するとかになると、普通は、shellscriptを書くことになると思います。\nif [ \u0026#34;da39a3ee5e6b4b0d3255bfef95601890afd80709\u0026#34; = \u0026#34;`sha1sum ~/.bashrc |cut -d \u0026#39; \u0026#39; -f 1`\u0026#34; ];then echo ok fi #こちらは通常、サーバーからの結果や所定形式のテキストをダウンロードしてのチェックになります、つまりパイプ前を変更する必要 sha1sum ~/.zshrc ~/.bashrc |sha1sum -c --quiet しかし、今回はワンバイナリで使えるchecksumツールをgolangで作ってみました。\n$ go get github.com/syui/shasumgo $ shasumgo ~/.bashrc ~/.bashrc ok $ shasumgo s da39a3ee5e6b4b0d3255bfef95601890afd80709 ~/.bashrc ok こんな感じで使えます。\nまた、shellscriptにも使いやすいようコマンド成功時の出力をなしにするオプションもつけました。成功すると出力なし。失敗するとハッシュ値が出力されます。\n$ shasumgo c ~/.bashrc ~/.bashrc $ shasumgo s c da39a3ee5e6b4b0d3255bfef95601890afd80709 ~/.bashrc 最近、gh-actionsを使っていると、やっぱり、go-binaryは使いやすいなーと思ったので。\nもしworkflowを書くときchecksumが必要ならgo get github.com/syui/shasumgoしてshasumgoコマンドで処理を書くのも便利そうと思ったりしてます。\nif [ -z \u0026#34;`shasumgo s c da39a3ee5e6b4b0d3255bfef95601890afd80709 ~/.bashrc`\u0026#34; ];then echo ok fi 今日は、ゲーム(小説)の続き書こうと思ってたんだけど、なぜかこれ作ってた。\n","description":"","formated_time":"2020-03-05","href":"https://syui.github.io/blog/post/2020/03/05/checksum/","tags":["checksum"],"title":"checksumで2つのファイルの同一性をチェックするツールをgolangで書いてみた","utc_time":"2020-03-05T00:00:00Z"},{"categories":null,"contents":"今日もポケマスを楽しくプレイしてます。\nただ、不穏な噂もあって、業績不振のためゲームが終了するかもしれないみたいな話を耳にしました。\nそこで、あくまでプレイヤー視点ですが、私がプレイしていて思ったことなどを書いていきたいと思います。\nまず、このゲームはほんと良くできていて、言ってみれば何の問題もない優等生ですよ。運営もしっかりやっていて、過去に色々な騒動があったみたいですが、正直、大した問題はなく気にするほどのことではない些細なことばかり。何がいいたいのかと言うと、ゲームも運営も何の問題もない、よくできているということ。それは最初に言っておきたい。\nつまり、今回の話は、このゲームになにか問題があるというわけではなく、問題がないところが問題だみたいな話になるかもしれません。\nプレイヤーの名前における重要性 プレイヤーの名前、ユーザーネームはとても重要です。特に、ネットゲームでは。\nこれは、重複不可の英数のみから成り立つものがいいですね。\nなぜなら、同一性を確保できるからです。\n例えば、重複不可能にすることで、それが現実とリンクする部分になるんですよ。プレイヤーにとって大切なものになります。\n確かに、重複不可にすることで早いもの勝ちになってしまい、ほしい文字列を取り逃してしまう人も出るでしょう。しかし、それでも、重複不可になっている方が私は嬉しい。悔しいけどね。\nプロフィール画面を見せるだけで、ああ、このプレイヤーか、ということがわかるからです。\nまた、中国語や韓国語、日本語が混ざっているのも好ましくありません。アルファベットのみに限定することも重要です。私は中国語や韓国語は読めませんからね。でも、アルファベットなら誰でもわかりますよね。\nプレイヤーの名前は重要\n英数のみ、重複不可能にしよう\n複雑なIDをプレイヤーに見せてはいけない、一見して覚えられないようなコードはプレイヤーに付与すべきではない。どうしてもというときは裏で処理\nあらゆる複雑さがもたらす混沌 次に、ポケマスのシステムについてです。私は、このゲームを初めてプレイしたとき、これは長続きしないかもしれないと思いました。\nそれは、システムの継続可能性が低かったからです。独立して回すことができない、コンテンツやストーリー、キャラクターを新しく用意しないと回せない、そのような仕組みだったからです。今のシステムって、中の人があまりに考えることが多すぎると思っていて、キャンペーンがあるたびにタスクでもらえるアイテムを考えたり調整しなくちゃいけなかったりで大変です。そういった運営に関する中の人の大変さとか、考えなきゃいけないことを減らしたほうがいいのではと思っていて、そのためには、アイテムを減らし、能力アップ要素を減らし、調整の複雑さを減らすのがいいと思っています。\nまた、イベント中のあまりの複雑さ、アイテムの多さなどに混乱が生じています。今でこそ大体は把握しましたが、通常は説明がなくてもわかるようなシンプルさが求められると思います。\nよって、このゲームは新しい機能をつけるというより、削るほうがいいのではと思います。\nではどこを削るのか。\n私はプレイしていて、ストーリーを読んでいません。飛ばしています。そして、私のように飛ばしている人は多いかもしれないと思っています。\n理由としてはいくつかありますが、ストーリーを読んでいると、何故か恥ずかしくなってくるためです。\nストーリーは子供向けに作られており、それにしても、あまりに子供向けすぎるのではないでしょうか。\n私は、昔、心理テストで「永遠の子供」と揶揄されたことがありました。ですが、そのような特性を持ってしても、恥ずかしいと感じてしまうストーリーは一体どうなんだと。\nもちろん、ストーリー自体は、決して悪くはないんです。どれも良くできていると思いますよ。キャラクターだって合ってるし。だからこそ指摘しづらい。間違っていない優等生に偉そうな説教をしている気分になるのです。\nしかし、私はストーリーをバッサリ削ったほうがいいと思っています。\n次に、能力アップ、強化の複雑さです。あまりに複雑すぎて、これでは、継続可能性が失われていきます。追加要素を付け加えるたび、調整による負荷が増大するでしょう。\nよって、能力アップは基本、レベルのみとするのが良いと思います。ただ、これだけでは課金ユーザーは納得しない。課金ユーザーが目に見える形で自慢できるような構成がベストです。\n私なら限界突破でLV+5まで可能にします。ただし、これには期間制限があって、上限レベルが開放されるたび限界突破は失われますよね。したがって、やりたい人は上限が開放されると再度、限界突破しなければなりません。\nこのようにすることで、ユーザーはLVを見せるだけでいかに強いかを示せるというシンプルさ、課金の継続性を維持することができると思います。\n今の状態はよくありません。ユーザーの強さを見せるにはLVやB技、装備の画面を見せなければいけないからです。これは複雑すぎます。\nつまり、一見してわかるようなシンプルさが重要だと思います。\nまた、エピソードエリアは苦痛です。FFディシディアってゲームがあったんですけど、あれにもこういうコマになって進まされるゲームあったんですが、そこの部分がつまらなさすぎて苦痛でした。\nストーリーを削る\n能力強化はレベルのみ\nアイテムを減らす\nエピソードエリアを削る\n一見してわかるようなシンプルさを追求する、プレイヤー名でも、プレイヤーの強さでも、能力強化でも、アイテムでも同じ\nバトルヴィラのシステムは素晴らしい バトルヴィラのシステムは素晴らしいです。ポケマスは、基本的にバトルヴィラで遊ぶという形にすると継続可能かもしれないと思っています。\nですが、気になる部分もあります。まず1つはストーリー性がないということです。ストーリーはシステムが欠け、バトルヴィラはストーリーが欠けているように感じます。\nそこで、私ならバトルヴィラにストーリーを組み込みます。\nですが、ストーリー性は極限まで落とします。\n矛盾しているように聞こえますが、ストーリーを語るのにセリフは必ずしも必要ではありません。\nなぜなら、有名IPにみんな知っているキャラクターだからです。ポケマスはそこが強い。\nだからそこを生かさなければいけません。わざわざイチからそのキャラの説明をしたり、肉付けする必要はないのです。\nバトルヴィラでは、最後の対戦相手にだけセリフが与えられ、それ以外は淡々と進みます。今までどおり。なお、この場合のセリフは読み飛ばせないようにしなければなりません。\nバトルヴィラでは、基本、対戦相手のキャラクター構成だけでストーリーを語ります。セリフ無し。で、最後のバトル時のみ、セリフを入れる。しかもそのセリフはポケモンセンターで使われるうちの一つとします。これは追加の負荷を減らすためでもあり、バトルヴィラをクリアした人へのちょっとしたサプライズ的なあれですよね(単にめんどくさいだけだろ)。\n次に、キャラ構成だけでストーリーを語るというのはどういうことか説明します。\n例えば、最初にグリーンと戦い、最後にワタル。次にグリーンが登場して戦うという構成にすると、キャラだけでストーリーを語ることができるというわけです。言葉は不要。最後のバトル相手もこのことには触れずのセリフ。このようにすれば、これまでのストーリーの恥ずかしさみたいなものをプレイヤーが感じることは少なくなるでしょう。\nバトルヴィラにストーリーを組み込む\n基本的には、対戦相手のキャラクター構成だけでストーリーを語る(セリフ無し)\nラストバトルだけはバトル前にセリフが入る\nストーリーを盛り上げる ストーリーが盛り上がるときってどんなときでしょう。私は、RPGの盛り上がりは、ストーリー自体というより、こちらが団結して相手に猛攻を加えるときだと思っています。\nなので、基本的には、バトルヴィラも1対1でバトルして、ラストだけは3対3のチーム戦がいいかもしれないと考えています。とはいえ、これは現実的ではないかもしれません。現在のバトルシステム、能力上もチームバトルが前提です。\nですが、このようにすることで、ラストバトルはより盛り上がること間違いなしだと思います。やはり、淡々と進むだけでなく、緩急をつけることは大切なのかも。\nとはいえ、これはそこまで重要とは思いません。ちょっとそんなことを思ったという程度。\n1対1と3対3\nラストにチームバトルを持ってくる\n収益性を考える プレイヤーが最も望んでいることってなんでしょう。\nそれは、強くなることです。そして、その強さを確認すること。\nですが、最も重要なのは、やはり、ただ強くなりたいってことですかね。確認はおまけみたいなもんで、強くする過程が楽しいし、早くやりたいのです。\nとすれば、課金は、この部分を意識しなければなりません。\nつまり、強くするには課金が必要みたいな。もっというと、誰よりも早く強くするには課金が必要。\nこれはバトルヴィラで実現するのがいいと思われますが、基本的にレベル上げ、強くするみたいな動作は、バトルヴィラのみで実現できるようにするのがいいかもしれないと思っています。\nそこで、「キズぐすり」、「げんきのかたまり」を売るのです。まあ、私は、「キズぐすり」で全回復、それだけでいいと思いますが。\nただ、技はバトルごとにリセットされる仕組みがいいと思います。なぜなら、アイテムや原理を減らすためで、よりシンプルにするためです。\n基本的な流れは、バトルヴィラで戦って、回復して、また戦うというサイクルが回せればいいと考えます。そして、回復アイテムは課金です。早く強くなるためには課金が必要。このサイクルを直接的に結びつけます。\nただし、上記だけではまだ弱いと私は考えており、最も収益に結びつくのはある要素かもしれないと思っています。\nそれは、与えることです。\nポケモンGoはほんとうによく考えられたゲームです。課金の恩恵を周りの人間に分け与えられるのですから。ポケストップというものがあり、課金すると花びらが舞いますが、その花びらが届く範囲にポケモンがたくさん湧くという仕組みです。つまり、自分だけが得するのではなく、周りも自分も得するのです。与えることができるのです。\nポケマスにもそういった仕組みを取り入れれば、課金率は上がるかもしれないと考えています。\nつまり、与える仕組みです。\n例えば、バトルヴィラのマルチで、「キズぐすり」、「げんきのかたまり」をチームに使うことができたらどうでしょう。\nですが、これにもまだ弱点があります。ポケモンGoのすごいところは、その弱点までも克服して与えることができる点にあるわけですが、与える相手を課金者が選べるようになっているのはダメだということです。あくまで誰にでも平等に与えることができなければなりません。それも自然な形で。\nこいつは嫌いだから回復してやらない、こんなことができてしまうようでは、せっかくの「与える」仕組みは効果半減。あまり意味のないものに成り果ててしまうのです。\nよって、自動でチームが組まれる前に回復を使えるようにしないといけません。また、回復者、つまり、課金者の名誉を視覚化することも重要です。これは一生残るものとかではなく、一時的にプレイヤー名が表示されるとかですね、そういったもので構いませんが、ちょっとしたところに見えるようにすることが重要です。\nとはいえ、これはあくまで例ですので、「平等」に「より好みを許さず」「与える」ことができる仕組みであれば良いと思います。\nなお、注意しなければならないのが現在のフレンドシステムです。この人は回復課金してくれるぞということがわかったとき、多くの人がその人に群がるような行動を抑制する必要があります。それは平等でも公平でもないからです。\nユーザーは強くなることを最も望む\n「平等」に「より好みを許さず」「与える」ことができる仕組みがあるといいかも\n進捗 最後にゲームの進捗です。\n私のプレイ歴は結構短くて、初期にクリス(オーダイル)を当てて、それを使ってクリア。その後はやめてしまって、今回、レッド実装に伴い再開という流れです。\nですから、カードは全然持ってませんし、育てていません。\nですが、現在は、数少ない手持ちのレッド、リーフ、ミュウを育てています。装備は揃いました。あとはボードですね。\nこのゲーム、続いてほしいなあ。頑張れ！\n","description":"","formated_time":"2020-03-01","href":"https://syui.github.io/blog/post/2020/03/01/pokemon/","tags":["pokemon","pokemas","game"],"title":"ポケマスをプレイしていて思ったこと","utc_time":"2020-03-01T00:00:00Z"},{"categories":null,"contents":"twitterでポケマスのプロモが出ていて知りました。レッドが実装されるっぽい。現在、特定のタグでつぶやくと絵文字が表示されます。(いくらくらいなんでしょうね、タグ一つに付き2000万みたいな噂\n#pokemonmasters\nポケマスは昔、一度プレイしていて、グリーンが実装されるまでプレイしてました(本当に初期だけ)。\nそのとき、レッドが実装されたらほしいみたいなこと言ってたので、再開してレッドを引いてみた。\n仕組みとしてはガチャですね。私は昔からダイヤ(ガチャに必要なコイン)を貯めていて、ガチャを引いてなかったのです。よって、今回はそれを使って150連してみた。\n結果、レッドは出ませんでした。\nですが、たくさんガチャを回すと、確定で一つ好きなやつ選べるみたいな天井がポケマスにはあって、それを使ってレッドを引きました。(無理やり\n現在、レッドのレベルを上げています。しばらくプレイしてなかったので、わけがわかりませんが、\nポケマスの要点 カードが重複すると、必殺技の威力が上がるらしい。ですが、無課金でやってるので、そんなガチャ引けませんから、これは無視することに。これをB技nと呼ぶらしいです。最大の5枚が重複すると、B技5です。一般的には期間中しか引けませんから、みんな5枚を目指してるみたい。\n私は現在、装備を集めるためEXエリカ周回とボード(バトル時に稀にドロップ)をやっています。ドロップはそのバトル時に必殺技、つまり、B技を使う必要があります。オートで最短でできるものを周回しましょう。オススメは、エピソードに必要なアイテムを得るためのバトルですかね。\nですが、ボードはミュウを優先的に育てたほうがいいみたいな話があります。ミュウにはピンチ回復があるようで、それがバトルヴィラ(HP継続対戦)に有効なんだとか。ちなみに、ミュウはB技5に到達。でもまだ星x4だ。\nのびしろというアイテムがあり、基本的には、それを集めて星と能力を上げていくみたいです。期間に各3-5個くらい集められるらしい。最大20なので、20x3で60は必要になる計算。とはいえ、のびしろは金、銀、銅があり全部別ですが。なお、ガチャを引くと、重複のうち上限超えがのびしろになるぽいので、ガチャをやる人は、すぐに集まります。\nポケマスはこちらのサイトがわかりやすかったです。\nhttps://pokemasya.com/\n\u0026hellip; \u0026hellip; \u0026hellip; !\n","description":"","formated_time":"2020-02-29","href":"https://syui.github.io/blog/post/2020/02/29/pokemon/","tags":["pokemon","pokemas","game"],"title":"ポケマスにレッドが実装されたのでやってみた","utc_time":"2020-02-29T00:00:00Z"},{"categories":null,"contents":"\nマスターリーグに突入しましたね。唐突ですが、私はやめることにしました。\nコツコツやってきて、レートは2600から3300になりました。初期レートからの上昇幅は+700くらい。\nレートというのは勝てば上がるし、負ければ下がるようです。所感では、3勝2敗で下がり、4勝1敗でもほぼ上がりません。5勝0敗、つまり、5連勝しないと上がらないという感じでした。少し理不尽な気もしますが、そういった仕組みで戦ってきたことを考えると、今までそこそこに勝ってきたということだと思います。\nただ、マスターリーグの初戦から困難に直面してしまい、この打開策は存在しないだろうなと思ったので、悔しいですが、ここでやめることにしました。\n未だに遅延が発生していた件 信じられませんが、遅延が未だに発生しているとは思っていませんでした。それ故、大打撃を食らったという話と、打開策が存在しないことを悟った話です。\n私は、まず様子見として、ディアルガ、ギラティナ、ラグラージのメンバーで戦ってみることにしました。これは間違いでもあり、正解でもありました。\nそこで5連敗しました。ディアルガの攻撃が遅延し、その影響は全体に及んでしまったのです。\nここでわかったことは、最強ポケモンであるディアルガが遅延のため使いものにならないということ、そして、最強技であるりゅうのいぶきも遅延のため選択できないということでした。\nそれに、テンプレを使ってその動きを把握した上で攻略法を考えようと思っていたのに、敗退しても全く得るものがなかったことも大きな損失でした。\n普通、負けというものには得るものがあります。このように負けたのだから、次はこうしよう、ああしよう、そういった対策が立てられるのです。しかし、今回の敗北の原因は遅延です。そのため、テンプレの動きも役割も把握できず負けてしまった。よって、得られたものは何もなく、意味のない敗北でした。\nしかし、なぜか相手だけ遅延せずに攻撃してきます。圧倒的に理不尽ですが、このゲームはそういうものです。今まではそんな理不尽を受け入れて戦ってきましたが、マスターリーグではその影響が大きく、打開策がないと判断。\nマスターリーグというのは、ステータスも重要になってきます。CP制限があり色々なポケモンが活躍できる他のリーグとは違います。強いポケモンは圧倒的に強い。その圧倒的に強いポケモン、圧倒的に強い技が私には選択できないという状況です。\n私は、今まで他のリーグでも遅延やバグ、不正をたくさん食らってきました。ですが、それらを食らってもなお、メンバーを工夫することで、なんとか戦うことができている状況でした。\nしかし、マスターリーグでは、そういった勝ち筋を見出すことが全くできないと実感しました。\nそのため、私のリーグはここで終了です。\nこんな状態でレートを上げることは絶対に不可能。戦えば下がるだけ。実際、かなり下がってしまった。\n私のMAX強化したディアルガで相手のディアルガを半分も削ることができません。さらに、遅延はその後も引きずるように発生し、このような状態では勝てるはずがありません。\n他のポケモンも試してみました。次に試したのが、ギラティナ対策として採用したカビゴンです。しかし、カビゴンも遅延が発生し、まともに戦闘になりませんでした。なにより相手のディアルガが強すぎる(相手は遅延しないので)。\n最強のポケモン、最強の技、そして、そのカウンターとしての対策ポケモンまで封じられてしまっては、打つ手がありません。ここからレートを上げていくのは正直、無理です。やる気もない。\n現在、ディアルガ、ギラティナが最も使われているポケモンです。ギラティナを対策にするにはディアルガが一番最適で、二番目にはカビゴンだと思います。カビゴンはじしんも覚えるためディアルガにも有効です。更に最強技であるりゅうのいぶきも封じられたのは痛すぎる。選択肢があまりに狭くなりすぎた。\nこのような状況で私にできることは何もありません。\nプレイヤーが思っていること 最後に、レートを上げ戦ってきた自分だからこそ言えることもあると思うので、私が思ってることを書きます。\n負けている人が書くと、負け惜しみだなんだ言わるかもしれませんが、私は、現に+700もレートを上げています。でも、本当は勝った負けたに関係なく、こう思っている人は多いはず。\nですから、「勝てないからそんなこと言うんだろ」みたいなことは思わないでほしい。私もそんな風には考えません。\nこのバトルリーグ、全然、面白くありません。\nおそらく私を含め多くの人がこのリーグに抱いている感情は怒りです。そして、つまらなさ。\n勝っているときもそう思っていましたし、負けているときならなおさらです。私は、勝っているときも、楽しいとはあまり思えませんでした。\n私がずっと思っていたのは「さっさとクリアしてやめたいなあ」です。さっさとクリアしてやめたかったのですが、マスターリーグを少し戦ってみて、クリア(ランク10)は到達不可能であることを悟りました。遅延やバグ、不正の影響がマスターリーグでは大きすぎたのです。\nなぜさっさとクリアしたかったのかにも理由があります。\nNianticのバグだらけのゲームというのは、さっさと上がっておかないと後々大変なことになるためです。具体的には、たいへんな「苦行」を強いられることになります。\nこれはポケモンGOをプレイしている全プレイヤーが認識していることだと思います。\nもちろん、このゲームには良いところもたくさんあります。私は特に自己満足ゲームとしての誰と競うわけでもなく、ポケモンを集めたり、強くしたり、または相棒にしたりという部分が好きでした。ですが、リーグはよくない。特に今の状況は最悪です。そして、これから増加するであろう苦行を考えると、とてもつらい。\nしかも、今後このゲームはバトルリーグに飲み込まれていくと私は予想しています。強化するポケモン、ゲットするポケモン、相棒にするポケモン、そのすべての要素はリーグが中心になっていくでしょう。そして、それを実行するのは運営ではなく、おそらくプレイヤーの人達。とはいえ、リーグという檻が作られ、そこで戦うよう誘導されれば、誰だってそうなると思います。\nそうなったとき、人々がどのように考えるのかも私は知っています。バトルリーグなんでやらないの？楽しくないからって、勝てないからでしょ、負け惜しみ、そんな風に考えるのです。\n仮に私が初期レートから-700の状態でこういうことを書いた場合、多くの人はそれが事実とは思わない。単なる個人のヒガミ、そう考えるのです。\nですが、私は実際にプレイし、それが事実であることを知っています。全然楽しくない、ストレスしかたまらない。このバトルリーグ、重要なのは何より運で、おまけに遅延やバグ、不正が横行しており、ランクやレートには何の意味もないということを知っている。したがって、そういうことは思いません。\nしかし、だからこそ、私は、プレシーズン中にさっさとあがっておきたかった。\nおそらく、プレシーズンが終了したとき、ランク10の到達は事実上不可能な値に設定されてしまうでしょう。しかもそれを目指すためにやらなければならない苦行は今までとは比べ物にならない。これは決定事項であり、確定事項だと思われます。\nあるときトレーニングメダルというものが付与されましたが、いつの間にかトレーニングは不可能になり、メダルを取ることができなくなったことがありました。この状態は数年続いたあと、今でこそ数値を上げることができるようになっていますが、そのようなことが、このゲームには普通によくあります。\n人々はこのゲームを苦行と呼び、私を含む多くの人は、プレシーズンが終わったとき、何が待ち受けているのかを知っています。今までとは比較にならないくらい「苦行」が増加するであろうことを既に知っているのです。\nこれがこのゲームの特徴です。今までもこれからもそこは変わりません。\nそして、私もこのゲームのそういう特徴を知っていたのです。だからこそ、プレシーズン中もかなりの苦行ではありましたが、それが終わったときにはじまる苦行を考えると、今のほうがだいぶマシだろうと考え、さっさとクリア(ランク10)しておきたかった。それだけのことです。\n勝ちたいとか、楽しいとか、そういった理由では全くない。まともな人なら、このバグだらけのバトルリーグを少し体験しただけでも「こんなのやってられるか」とさじを投げてしまうのが普通です。そして、私自身、それが正しいと思っています。\nですが、今後、さらに進化し、増加していく苦行を思うと、私は今のうちにやっといたほうがいいだろうという判断でした。\nしかし、遅延やバグの影響でマスターリーグは攻略不可能、レートを上げることが不可能であることを知り、今まで+700もレートを上げて頑張ってきたのは全くの無駄だったことが判明します。\nつまり、私の明らかな判断ミスです。どうやら、最初からやらないほうが正解だったぽいのです。やるとしても、初期レートが低かった時点でやめておくべきだったのかもしれません。\n運営にやってほしいこと 運営にやってほしいことは唯一つで、今までに遅延やバグ、不正によって得られなかった、あるいは失われたはずのレートを返してほしい。\n私は、勝っているときにもこのような問題でレートを失ってきました。本来なら5勝0敗だったはずが、4勝1敗にされてしまったりしたことも数多く、今回は遅延の影響で全敗です。これはハイパーリーグ時にも起こっています。そのときは-100レートでした。今回も-80くらいの影響を受けてしまっています。\nそれに、初期レートがあまりに不公平です。1000から始まる人もいれば、2000から始まる人もいますが、twitterなどを見ると、3200あたりから始まる人が多い印象。運ゲー要素が強いこともあり、このゲームでのランクやレートというのは、初期レートで決まります。強さなんて全く関係ない。\nですから、初期レートが低い数値から始まった人に、レートをプラスしてほしいのです。\n1000 = +1000 2000 = +500 3000 = +0 私は、これくらいのプラスが妥当だと思います。\n遅延などの影響を受けたレートを返すか、または、初期レートの不公平を解消するか、どちらか、もしくは両方を実行してほしいと思っています。\n私は、初期レートから+700を上げています。レートが上がりにくい環境での+700というのはかなり大きいと思っていて、これでもまだクリアできない、上がれないというのは異常としか思えません。\nそして、できればこの問題だらけのリーグ、もうやりたくありません。ストレスしかない。\n多くの人は「やらなきゃいいじゃん」と思うでしょう。\nですが、その後に来る苦行を考えると、長年このゲームをプレイしてきたプレイヤーとしては受けざるを得なかった。\nこのように思っている人は、私以外にもかなり多いと思います。\nレートを返してください。そして、初期レートの不均衡を解消してください。\n言いたいことがある人へ こんな自分勝手な記事を読んで、言いたいことがあるって人、すごく多いかもしれませんね。\n私もこんな記事を読んだら、何だこれって感じです。あなたが弱いだけなのに、何いってんのって感じですよね。\nなので、言いたいことがある人は、私と同じようにポケモンGOのバトルリーグをプレイしてみてほしいのです。そして、レートを今から+700ほど上げてみてほしい。実は、私が今まで散々いばってきた+700というレートは、そこまで大した数字ではないことがわかるでしょう。\n事実、普通の人なら1,2日プレイすれば簡単に上げられてしまうような数字なのです。ですが、私はあまりに能力がないため、それでも大変だったというだけの話だったりします。\nしかし、まずはそれを判断するためにも、私と同じスタート地点に立ってほしいのです。スタートとして同じような体験をしてみてほしい。\nもちろん、私と全く異なる意見を持つ人もたくさんいると思います。運ゲーと言ってるけど、運なんて全く関係ないじゃんとか、レートなんてすぐに上がるとか、ランク10に到達するのなんか簡単だとか、遅延やバグなんて存在してないとか色々あると思うんです。\nなので、1,2日やって+700レートしてみて、「全然ありじゃん」とか「これはおかしい」とか自分の意見を持ってほしいなと思っています。そのへんは、やっぱり、私の言っていることが正しいとは限らない。なので、自分で体験して判断してほしい。\n","description":"","formated_time":"2020-02-26","href":"https://syui.github.io/blog/post/2020/02/26/pokemon/","tags":["pokemon"],"title":"ポケモンGoにリーグが実装されたのでやってみる11","utc_time":"2020-02-26T00:00:00Z"},{"categories":null,"contents":"今回は夫婦別姓について個人的な考えを書きます。なお、私は、国籍(戸籍)において男性に分類されます。(どっちでもいいですが\n私は夫婦別姓については賛成します。\nいや、賛成というか、むしろ結婚やそれにまつわる儀式の数々に疑問を持っていると言ったほうが正解かもしれません。\n私の思想は、一般的な価値観からすると、かなり異様なものだとは理解していますが、しかし、私自身はそれが普通だと思っています。\nさて、まずは何から話をしましょうか。まずは私の感情からお話することにします。\n私は昔から、女性が結婚すると半ば強制的に夫の姓を名乗らざるを得ないような状況が、とても嫌いでした。\nなぜ女性だけが夫の姓を強制されるのか。いや、強制されないにしても、元の姓を使うことに対して、世間的な厳しい仕打ちがあります。それは親戚含め、結婚相手である男性にさえも理解されず、理解されたければ多重な説得が必要みたいな状況があります。\nこれらの状況は、私の思想すべてに反する。\n女性であれ、男性であれ、個人の意思を尊重すべき。それが私の価値観です。\nですから、苗字も変えたくなければ変える必要なんてありません。私はそう思います。\nそれに、女性を物のように扱う結婚の儀式の数々を私はとても嫌いです。あれは一体なんなのでしょう。私の価値観からすると、わけがわからないと思っています。\nですが、一般の人々からすれば、当たり前の儀式、あたり前のことなのですよね。\nただ、勘違いしてほしくないのは、私は女性の味方ではないということです。\n私は誰の味方でもありません。\n女性の味方でもなければ、男性の味方でもない。それは夫婦別姓についても同じことです。\nあえていうなら、私は人の味方です。人が一方的に相手の姓を強制されてるような状況に、私は反対です。そして、逆に言えば、夫婦別姓に賛成です。\nさて、次は、少し現実的な話をしましょう。なぜ世界的に夫婦を同姓に統一する制度が採用されているのかという話です。\n長くなってしまいそうなので、端的に述べることにします。制度というのはどのようなものであれ存在する理由があります。長い歴史があればそれだけの意味がある。\n結婚という制度において、妻は夫の姓を名乗るというルール、慣習、枠組みにも、多くの意味が隠されているのです。\n最も重要な意義は、争いを避けること。これはこうと最初から決まっていれば、争いを減らすこと、避けることができるのです。\n例えば、夫婦別姓を採用した社会について考えてみましょう。\nここで、最も予想される争いは「子供の姓はどちらにするか」だと思います。\nもしかしたら、夫婦別姓に賛成している人の中には、子供の姓は夫の姓でいいよ、そんなことで私は争わない。私は絶対に大丈夫。そう考えている人もいるかもしれません。私は自分の姓を変えたくないだけなんだと。\nしかし、より大きい視点で物事を考えた場合、夫婦別姓は将来的な紛争を爆発的に増やしてしまう可能性があります。そして、それは夫婦間の問題にとどまらず、子供や親戚を含めた大規模な紛争に発展する可能性がある。\n例えば、500組の夫婦がいたとして、200組がこのことで後々争うことになったとしましょう。これを全国規模に当てはめると、国そのものが崩壊する危険性すらあるかもしれない。夫婦別姓に賛成する立場の人も、そのリスクがあることは理解しておかなければならないと思います。\n往々にして、制度には存在する理由があり、長い歴史の分だけ意味がある。\nここまでで言いたいことは伝わったと思いますので、まとめに入ります。\nそうはいっても、私は、全体的な利益を考える立場でもなければ、ただの個人。そして、ここは個人ブログです。\nよって、個人的な意見を述べると、私は夫婦別姓に賛成です。\n一方的に女性が夫の姓を強制されるような状況に、心の底から嫌悪しています。なぜ相手に合わせる必要があるのですか、結婚したいならしたらいいし、苗字を変えたくなければ変えなくていい、それが私の考えです。私はそれが当たり前のことだと思っています。\n最後に、少しトーンを落とし、面白い話でもしましょうか。\nもしあんたが結婚したらどうするのって感じの話をしてみます。\n仮に私が結婚した場合なんかは、私は上記のような考え方をしますので、女性が旧姓を名乗ろうが全く気にしないでしょう。そんなのは個人の自由であって、私に気を使う必要は全くない。それが当たり前だし、私からすると世間の価値観のほうがどうかしていると思っています。\nで、相手の姓のほうがかっこいいなって思った場合、むしろ私が姓を変えます。\nそんなことして、親戚とかにどうやって説明するのとか聞かれるかもしれませんが、私はあまり気にしません。今までも気ままに生きてきたので「苗字を変えることにそんなこだわりはない、ただ、相手の姓のほうがかっこいい感じだったので、変えることにした」そんなことを言うと思う。控えめに言ってやばいやつって感じですけどね。\nでも、最初にいいましたよね。私の思想は、一般的な価値観からすると、かなり異様なものって。\n","description":"","formated_time":"2020-02-23","href":"https://syui.github.io/blog/post/2020/02/23/private/","tags":["private"],"title":"夫婦別姓について個人的な考え","utc_time":"2020-02-23T00:00:00Z"},{"categories":null,"contents":"なんとかレートを3300に戻すことができました。\nただし、問題が全く発生しなかったというわけではなく、依然として問題は多いと感じています。\n今回はマスターのメンバーについて。マスターによく出てくるポケモンは、ディアルガ、ギラティナ、ラグラージ、メルメタル、トゲキッスだと考えていて、それを軸に考えてみます。\n私はカイオーガもテンプレに入るかもと思ったりしましたが、ドラゴンチームに水で攻めるカイオーガは難しいかもしれない。カイオーガよりじしんを持つラグラージのほうが選ばれそう。\nポケモン 弱点 耐性x2 わざ1 わざ2 わざ3 サーナイト はがね,どく,ゴースト ドラゴン,かくとう あまえる シンクロノイズ シャドーボール ミュウツー あく,むし,ゴースト - サイコカッター サイコブレイク きあいだま ミュウ あく,むし,ゴースト - シャドークロー れいとうビーム くさむすび ミュウは非常に面白いポケモンで、広範囲に戦略を立てられます。例えば、ドラゴンクローを使って、シールド剥がしを試みても面白いかもしれません。ただ、最も有効に活用できるのは、技のタイプでしょう。リーグではほのお,こおり,くさタイプは弱点が多く耐性もないため採用しづらい。ですが、ミュウを使うと、こういったタイプの技が使えるのです。ただ、ノーマルアタックにくさタイプを覚えられないのは非常に残念ですね。ラグラージをやっつけた上で、カウンターまでできたのに。\nおそらく、マスターでもラグラージは活躍し、多くのパーティーに入れられることになるでしょう。今回のラグラージはドラゴンにじしんを連発してくると思います。それ以外はハイドロカノンで対処するはずです。かなりの広範囲に使えるため、私もメンバーに入れることを考えていますが、今までテンプレは使ったことがないので、戸惑いそう。\nヒードランは外しました。今回、フシギバナがテンプレに入ってくるかわかりませんが、多分、入ってこないでしょう。とすると、ヒードランが活躍する場面は限られてきます。ヒードランはラグラージに弱いですし、ラグラージに弱いポケモンはなるべく入れたくない。ただ、ヒードランはディアルガをギリギリで倒せるみたい。よって、ディアルガ、ギラティナ、メルメタル、トゲキッスとそこそこ戦えるポケモンです。なので、今回も広範囲に活躍できる可能性はあります。\nその他、ラプラス、フリーザー、ギャラドス、カビゴンあたりが使えそうかもしれないと思っています。特にフリーザーとカビゴンはHP,防御が高いので、今のメンバーより安定するかもしれない。\n","description":"","formated_time":"2020-02-22","href":"https://syui.github.io/blog/post/2020/02/22/pokemon/","tags":["pokemon"],"title":"ポケモンGoにリーグが実装されたのでやってみる10","utc_time":"2020-02-22T00:00:00Z"},{"categories":null,"contents":"レートは2600から3300まで上がっていたのですが、2020/02/18くらいから突然に負け始め3200にまで下がってしまったので、それに対する考察です。\n原因はおそらく、以下の変更だと思います。ちょっとおかしいぞと思ったときにバトルを停止すべきだったのに、検証しようと考えたのが愚かでした。バトルから離脱する決断が遅すぎたので大損害を食らってしまった。\n対戦マッチングシステムが「レート重視」に調整された模様（2020年2月17日～）\nissue-2020-02-17\nまずはじめに、私が経験したバグおよび不正と思われる動作について記録しておきます。\nポケモンが対面して、これは勝ったぞと思った瞬間、動かなくなる現象に何度も遭遇する件 これが発生するタイミング的に、そこには人の意思が介在しているのではないかと私は考えています。\n例えば、バトル開始直後、最初のポケモンが登場したときにこの現象は起こります。こちらがフリーザー、相手がフシギバナだったとしましょう。これは有利だぞ、そう思った瞬間、こちらだけ動かなくなるのです。そして、相手からの攻撃やスペシャルを受けてフリーザーが死にかける直前、動けるようになります。ただ、反撃虚しく、やられてしまうのが通常です。\nまたあるときは、お互いが2体を消費し、最後のポケモンを見せ合う場面でこの現象は起こります。こちらがピクシー、相手はギラティナです。これは勝ちだな、そう思った瞬間、やはり動かなくなります。で、ピクシーがやられる直前に動けるようになります。\nこの現象は総計で20回以上は経験しています。\nここからは私の推測ですが、たまに最後まで戦わず終了してしまう人を何人か見てきました。あれは単に勝敗が見えてしまったのでそこで終了した、そう読み取ることもできます。しかし、あまりにそのタイミングが前述した場面、つまり、動かなくなるとしたらここだろうなというタイミングに一致しているのです。もしかしたら、あれは不正アタックを実行する動作なのかもしれないと考えることができます。もしかしたら、未だに何回かは成功してしまうのではないかと。\nこれは自分が勝っているときにもよく発生していました。あるときギラティナがドラゴンクローを連発してきたことがあったんですけど、動けるようになったときギリギリに反撃できたので、かろうじて勝利したことは何度もあります。ですが、最近では、動かなくなったらほぼ確実に負けてしまうケースがほとんどになってしまいました。\n相手のチャージが早すぎる件 ギラティナと戦ったとき、ピクシーが為す術なくやられてしまうことが何度かありました。これも相手がギラティナなので、これは勝ったぞと思っていました。しかし、相手のギラティナがあまりに強すぎたので、ピクシーがタイマンで負けてしまったのです。\n相手のギラティナは4回連続でげんしのちからを放ちました。正確には、3回連続で放ったあと、1秒ほど間をおいて最後の一発を放ち、計4回です。このとき、ギラティナのHPは半分も削ることができませんでした。こちらのシールドも虚しく、これほど強いギラティナには勝てないなあと私は思いました。\nしかし、果たしてギラティナはあそこまで早くチャージが撃てるものなのだろうか。私は、ロケット団を相手にギラティナを使って試してみたところ、やはり、あれほど早くチャージ攻撃が打てるというのはありえない。しかも、どれだけ貯めても2回が限度ではないでしょうか。\nこの現象は、相手がグリッチ(不正)を使ったのか、それとも通信の問題だったのか、もしくは相手が強かっただけなのか、わかりません。これも、そこそこの確率で遭遇する現象の一つです。\nこちらの攻撃が全く通らないような遅延が出てしまい、結果として負けてしまう 私は、これはちょっとおかしいぞと思ったとき、その原因が自分にあるのか、ゲームにあるのか、判断できませんでした。最初は、自分が原因だと考えていました。そこで、メンバーを変えてみることにしました。結果的には、これが間違いでした。\nラグラージ対策として、ギャラドスやキングドラで何度か戦ってみたのですが、こいつらの攻撃があまりに遅く、ダメージが殆ど通らなかったのです。最初はそんなもんかと思っていましたが、何度も戦ううちに、やはりどう考えてもおかしいという結論に至りました。相性がどれだけ良くても勝てないし、与えるダメージ量が少なすぎるのです。それ以外のポケモンでも遅延が発生しているかはわかりません。ですが、ギャラドスやキングドラは使わないほうがいいでしょう。何かがおかしい(特に攻撃が)。\nですが、私は、この「なにかおかしい」と結論付けるまでに、大きな損害を食らってしまうことになります。\n最初は、「うーん、ちょっと変な気もするけど、気のせいだろう」くらいですが、何度もやっていると「どう考えても変だ」になり、結論を出すに至ります。\n回数を重ねてみないとわからないことですが、しかし、私は決断がおそすぎた。負けを取り戻そうみたいな気持ちだったのかねえ\u0026hellip;。\nなにか変だぞと思ったときは、すぐ逃げましょう！\nということで、今の状態でバトルしても勝てる気が全くしないので、お休みします。(前回記事を書いたとき、戦い続けるぞみたいなこと言ったので、すごく気まずい\nバトルすると常に通信不安、グルグルが回る。シールドすり抜けや連続再生の発生 どう考えても数日前の状態から見て異常を示しているとしか思えないほどに、ぐるぐる回ってます。回ってないときはありません。\nで、それだけならいいんですけど、実際のバトルもかなり異常です。\nシールドすり抜けや相手のチャージ攻撃が連続再生されるというようなことが頻繁に発生します。\nもしかしたら、遅延も発生しているのかもしれません。wifi接続の場合に不利になるのかわかりませんが、私はそう考えています。今バトルして、たとえ相性で勝っていたとしても、勝てる気がしません。\nバトルを開始したのにバトル画面に移行せず操作できない、結果として負けてしまう これはこの前、1回だけありました。ただ、私が経験してきたことに比べれば、こんなことはかなりどうでもいい部類に入ります。\nもちろん、1セットでさえゲームを落とすのは厳しいです。特にこのゲームはレートが異常なほどに上がりにくく、1つの負けでもかなり大きな損失になります。\n更に、1日25セットと言う制限付きで、短い期間制限もあります。\nですが、このバトルリーグにおいて、強制的に1セット負けが確定するという程度のことは、そこまで大した問題ではなくなっています。他の問題が大きすぎるし、多すぎる。\n恣意的なマッチング 同じ相手に連続であたったり、また、他の要因で抽出された恣意的なマッチングが横行しているのではないかと感じることがあります。証拠はありませんが。\n自分は200戦しているがそんなことは起こったことがないという人がいる件 私にはちょっと考えられませんが、問題が全くなければ誰も書き込んだりしないはず。\nですが、中には「自分は200戦しているが、そんなことは起こったことがない」、「そんなの都市伝説だ」という書き込みも見かけます。\nこれはどういうことでしょう。\n他のゲームの話になりますが、不正を使うユーザーはそういう主張を匿名掲示板に流すことがあるというのは聞いています。\n「そんなの負け惜しみだろ」、「バグやグリッチなんて存在しない」、「自分は200戦しているが、そんなことは起こったことがない」、「そんなの都市伝説」という趣旨のことを書き込むことがあるらしいのです。よって、こういった主張についても、それは本当なのか、もしくは不正を使っている人の主張なのかは可能性の一つとして考慮する必要があるのかもしれません。\n私は、いろいろな検証動画なども見てみましたが、やはり、遅延やバグは一部で存在しているのではないかと個人的には思っています。\n勝つのは難しい 当たり前ですが、すべてのバトルが不正やバグが原因だったわけではありません。普通に戦い、普通に負けたことも多く、相性による敗北もかなり多いです。\nこのゲームでは、1勝するだけでも結構大変だったりします。運良く相性がマッチすればいいんですが、苦手ポケモンばっかりが来て、連敗してしまうこともあるでしょう。\nですが、1勝1勝が大切だからこそ、他の要因で負けてしまったと思われるバトルが多いのも、やっぱり悔しい。\n私はその要因が50%を遥かに超えていると思ったので、今はバトルをやめて、しばらく様子見。\n","description":"","formated_time":"2020-02-20","href":"https://syui.github.io/blog/post/2020/02/20/pokemon/","tags":["pokemon"],"title":"ポケモンGoにリーグが実装されたのでやってみる9","utc_time":"2020-02-20T00:00:00Z"},{"categories":null,"contents":"ハイパーで戦っています。連勝することも稀にあります。運が良かっただけですが。\n5連勝したときだけ嬉しそうにスクショを残すやつ。\nですが、基本的には悪戦苦闘しています。この前は、バグとマッチングによる2勝3敗を食らってしまって、レートが下がり、かなり落ち込んでたりする。\nバグに関しては、バトル開始したのにバトル画面に移行せず、操作できない状態になってしまい敗けました。これは不正を食らったという感じではなく、単なるバグだと思いますね。(まだわかりませんが\nマッチングに関しては、相性が悪すぎる相手にあたってしまい、負けてしまったんですよね。自分のメンバーではどうやっても勝てなかった。しかし、次のバトルでも同じ相手と当たってしまって2連敗を食らうという悲劇。どう考えてもマッチングおかしいだろっ！と思いますが、こういうことが積み重なって、レートがだだ下がり中。\nただでさえ勝つの難しいのに\u0026hellip;。もう戦いたくないでござる、絶対に戦いたくないでござる！という気持ちしかない。\nとはいえ、ランク10を目指すと決めた以上、やるしかない。長年付き合ってきたゲームですし、クリアしたい。\nそこで、不正を食らっても、バグを食らっても、恣意的なマッチングを連発されても、それでもそこそこ戦えるメンバーを考える必要があるかもしれないと思ったので、また少しだけ考えてみました。今回はそれについて。\nまず、思いつく限り当たってみたのですが、やはり、最強ラグラージを筆頭にフシギバナ、ギラティナ、レジスチルをまとめて葬り去るようなポケモンは、ある一匹を除いて存在しません。ミュウツー(アーマード)やクレセリアでも無理です。\nその一匹とは、ミュウです。現時点で最強のポケモン、ミュウ。\nですが、私はミュウを育ててしまっているので、ハイパーには使えません。ですが、マスターでは活躍するかもしれないと思っています。\nポケモン 弱点 耐性 わざ1 わざ2 わざ3 ミュウ あく,むし,ゴースト かくとう,エスパー シャドークロー れいとうビーム オーバーヒート 下記はバトルシュミレーションです。ミュウは、上記のわざで、ラグラージ、フシギバナ、ギラティナ、レジスチル、おまけにミュウツーに勝ちます。これは、ハイパー、マスター同じ。\nhttps://pokemongo-get.com/taimansym/\n次に、ディアルガと戦ってみたのですが、流石にテンプレわざでは勝てませんでした。しかし、わざをきあいだまに変えれば、ディアルガにも勝ちます。ミュウ、つよすぎ！\nただし、リザードンと戦った場合、テンプレわざではギリギリ負けてしまうみたい。わざをげんしのちからに変えれば勝ちますが。\n理論的には、二重弱点を持つポケモンはミュウに勝つことができません。\nということで、前回忘れていましたが、ミュウは育てておくとよいかもしれません。CP制限を考慮し育てないにしても、技開放くらいはしておいても損はないポケモンだと思います。\n現在、ミュウのつよさに気づいている人はほとんどいません。\nしかし、新しいわざマシンが実装されてしまうと、ポケモンGoにおけるミュウのとてつもなさに気づいてしまう人が増えてしまう可能性があります。\nそれだけはマジやめてくれと思っていて、ミュウが流行ってしまうと、ますますバトルが厳しくなってしまう。\nでも、わざマシンがあると自分もミュウをもっと使いやすくなるので、嬉しくもあり、悲しくもあるような複雑な気持ち。\nしかし、きっと、ミュウが人気になるのは喜ばしいことなのでしょう。お気に入りのポケモンですからね。\nそんなこともあり、この状況を心から喜べるよう私はプレシーズン中に、なんとしてでもランク10に到達しなければなりません。\nこのリーグの檻から心を解き放つには、戦うしかなく、勝つしかない。\n","description":"","formated_time":"2020-02-18","href":"https://syui.github.io/blog/post/2020/02/18/pokemon/","tags":["pokemon"],"title":"ポケモンGoにリーグが実装されたのでやってみる8","utc_time":"2020-02-18T00:00:00Z"},{"categories":null,"contents":"openssh 8.2がreleasesされました。updateしたところ、ios-goodreaderからsftp-serverにアクセスできなくなりました。\nので、downgradeしました。downgradeが古かったので、何故か実行してもアクセスできないという現象に遭遇したので、downgradeもupdateしておきましょう。\n$ yay -S downgrade $ downgrade openssh openssh 8.1p1 4 x86_64 (remote) $ sudo systemctl restart sshd goodreaderでキー(private-key)が読み込めない問題はこちらが参考になります。\niosのgoodreaderでsftpのprivate-keyが読み込めない問題\n","description":"","formated_time":"2020-02-16","href":"https://syui.github.io/blog/post/2020/02/16/openssh/","tags":["ssh"],"title":"openssh 8.2とgoodreader","utc_time":"2020-02-16T00:00:00Z"},{"categories":null,"contents":"\nハイパーで戦っていて、勝敗が五分五分な感じだったので、そこそこ手応えがありそうなメンバーに変えてみた。\nポケモン 弱点 耐性x2 わざ1 わざ2 わざ3 フリーザー いわ,はがね,でんき,ほのお じめん こおりのつぶて こごえるかぜ げんしのちから ヒードラン じめんx2,みず,かくとう フェアリー,くさ,こおり,どく,はがね,むし ほのおのうず アイアンヘッド かえんほうしゃ ピクシー はがね,どく ドラゴン あまえる コメットパンチ サイコキネシス よく見かけるポケモンが固定されてきた感じになっていて、ギラティナ、ラグラージ、フシギバナ、トゲキッスです。\nこいつらをまとめて葬り去るポケモンを探さなくてはいけません。私の場合は、3日前に見つけたフリーザーがいいのではないかと思いました。\nフリーザーは、シールドを貼りながら、こごえるかぜで相手の攻撃を下げ、二匹目にもこごえるかぜを当てるところまでが狙い。\n逆に、二匹目に当たらなかった場合、負けることを覚悟しなければいけません。このへんは調整が必要で、相手を倒せそうならスペシャルをためておくことも重要になります。\nなお、こちらからは交代しません。相性がどれだけ悪くてもフリーザーで頑張ってください。\nでは、相手が交代してきたらどうでしょう。よほどのことがない限りフリーザーでいきます。ですが、耐性x2を持っている場合は、そのポケモンに交代します。\n例えば、フシギバナが来たらヒードランに交代です。フリーザーのままでも良さそうな気がしますが、シールドを失い、場合によってはやられてしまうでしょう。その点、ヒードランはシールドを失わず倒せると思います。トゲキッスも同様です。また、ギラティナはピクシーに交代です。まあ、フシギバナやトゲキッス、ギラティナに変えてくる可能性は低いです。こおりが弱点ですからね。それ以外は放置して、こごえるかぜを打っておくのがいいと思います。\n即座にレジスチルに交代された場合、一発はこごえるかぜを当ててヒードランに交代。シールドは残しておくこと。\nたまにリザードンに交代されることがあります。その場合は、げんしのちからを一発目に撃つと良いでしょう。おそらく、相手はシールドを貼らないので通ります。なぜなら、リザードンに交代した理由はこごえるかぜに耐えられると思ったからでしょう。逆に、リザードンが先鋒だった場合、フリーザーのこごえるかぜ,げんしのちからという順に技を繰り出すとよいかもしれません。ただし、相手のHPが残り少ない場合、つまり、相手がこごえるかぜにも耐えられないほどにHPを削れてしまっている場合は、そのままこごえるかぜしかありません。このへんは難しく、最初から相手がシールドを張らないことも考えられます。その場合、げんしのちからを一発目から撃つのがいいのですけど、シールドを張られた場合は詰みます。なので、一番良いのは、こごえるかぜで下げといて(シールドあり)、次にげんしのちから(シールドなし)だと思います。\nラグラージの場合は簡単で、シールドを最初の2回貼ります。で、こごえるかぜを2回当てたあとは、耐えつつノーマル攻撃を連打します。\n私がトゲキッスではなくピクシーを使う理由は、最後のほうに当たるギラティナのげんしのちからに耐えるためです。トゲキッスではやられてしまう可能性が高い。また、グランブルのかみくだくという選択もありますが、グランブルは耐久力が低いので、安定しないと思います。タイプ的にはクチートがベストなんですけど、CPやステータスが低すぎて育てる気にならない。\nヒードランは、トゲキッス、フシギバナによく効きます。また、ギラティナともそこそこに戦えますし、はがねタイプにも強いので入れています。ですが不安も多く、安定しないようなら、ギラティナやディアルガに変えてもいいかもしれません。\n先鋒がラプラスの場合はげんしのちから、こごえるかぜ、げんしのちからの順です。おそらく厳しい戦いになるでしょう。エンペルトの場合も同じですが、こちらは諦めるしかありません。ほぼ敗け確定です。これについては、後ほどお話しますが、相性が悪い場合はどうしようもありません。完璧なポケモンはいませんし、完璧な構成も存在しない。基本的には、ジャンケンなのです。\nラグラージ、フシギバナについて 強すぎ。限定技を連発されるのがつらすぎだし、また、開放技も強いので、ほぼ対応が不可能なことによるテンプレ化が促進しているような気がする。\n対処法は、こごえるかぜとナッシー(アローラ)を思いついたんだけど、ナッシーの場合、他のポケモンに対応できなさそうだと思っていて、更に、どくを食らう可能性もあったりなのできついかも。\n連勝について このゲームにおいて、連勝記録というものは、運でしかないので、当てになりませんし、当てにしないほうがいいです。\nたまにtwitterとかで連勝記録が載せられていることがあり、メンバーも載せられていたりしますが、そのとおりの構成でいっても、また、たとえ連勝の人が同じようにプレイしても勝てるとは限らない。\nこのゲームは、なにより運やマッチングのほうが重要で、マッチング、先鋒のポケモン、メンバーの相性によって、ほとんどの勝敗が決まります。どのようなメンバーで行こうと、どれだけ育てようと、どれだけテクニックを使おうと、負けるときは負けるのです。\nつまり、勝てるかどうかは、単にマッチングでの相性次第。ほとんどがこの要素に占められます。特に連勝という事柄について考えてみても、何人に一人は連勝してもおかしくない。確率的にそういう人が出てきてもおかしくありません。\nですが、それは偶発的事例でしかなく、決して真似できるものではないと思います。\n私自身、5連勝は運がよくないと無理だし、5連勝しないとレートが上がらない設定に厳しさを感じる。\n育てておくと良いポケモン マスター用ですが、フリーザー、ギラティナ、ヒードランを育てておくと良いかもしれません。\nただ、ステータスでどれだけ差がつくかわかりませんので、ミュウツーが活躍する可能性も。\nポケモン 弱点 耐性x2 わざ1 わざ2 わざ3 フリーザー いわ,はがね,でんき,ほのお じめん こおりのつぶて こごえるかぜ げんしのちから ヒードラン じめんx2,みず,かくとう フェアリー,くさ,こおり,どく,はがね,むし ほのおのうず アイアンヘッド かえんほうしゃ サーナイト はがね,どく,ゴースト かくとう,ドラゴン あまえる シンクロノイズ シャドーボール ","description":"","formated_time":"2020-02-15","href":"https://syui.github.io/blog/post/2020/02/15/pokemon/","tags":["pokemon"],"title":"ポケモンGoにリーグが実装されたのでやってみる7","utc_time":"2020-02-15T00:00:00Z"},{"categories":null,"contents":"\nこの前、久しぶりに絵を書いたこともあって、楽しくかけたんだけど、でも後々見てみると、なんか下手くそだなあと思ったので、今回は少しそれっぽく描いてみることにした。\nポイントは、線を太くしすぎないことかなあと思ったりしたけど、単にどう描くか忘れていた可能性もありそう。\n","description":"","formated_time":"2020-02-13","href":"https://syui.github.io/blog/post/2020/02/13/illust/","tags":["illust"],"title":"イラスト描いてみる20","utc_time":"2020-02-13T00:00:00Z"},{"categories":null,"contents":"五等分の花嫁、最後のクイズが出されたので、一応、答えておくことにします。\n左から5,2,1,3,4なので、一番右が四葉だと思います。80%の確率で。\nまず手の仕草からわかるのは、5,2,3です。1,4は表情からなんとなくです。\n花嫁は四葉でした。これは個人的な推しということを抜きにしても、最も結婚に向いているのも性格的に四葉だろうなあと思っていて、よかったねーという感想しかない。\n私が好きなキャラ、そういうのに向いてないのが多いんですけどね。平沢唯(けいおん)とかはかせ(日常)とか。\nでも四葉は向いてるんじゃないかなって思います。\n本作は最後まで誰だろうってのが面白くて、ついつい考えたくなっちゃいますね。\n","description":"","formated_time":"2020-02-13","href":"https://syui.github.io/blog/post/2020/02/13/manga/","tags":["manga"],"title":"五等分の花嫁、最後のクイズ","utc_time":"2020-02-13T00:00:00Z"},{"categories":null,"contents":"描きたい気分だったので、描きたいように描いてみた。\n","description":"","formated_time":"2020-02-12","href":"https://syui.github.io/blog/post/2020/02/12/illust/","tags":["illust"],"title":"イラスト描いてみた19","utc_time":"2020-02-12T00:00:00Z"},{"categories":null,"contents":"レートが3000に上がったので、かろうじてランク9に到達！！\n初期レートが2600なので、3000までは大変でした。間に合わないかと思った。\n追記:ハイパーが始まった 私は、スーパーが終わる直前に3000に到達したのですが、どうやらレートはハイパーに引き継がれるらしい。\n\u0026hellip;それはそれできついですね！\ntwitterを見ていると3200前後で初期レートが配られているのをよく見ます。この場合、スタート地点で600ものレートに差がついている計算になります。それが引き継がれるというのは、やっぱり厳しい。この差をバトルで、しかも私、バトル好きじゃないし\u0026hellip;埋めなければいけないというのは正直、つらいです。\nレート2000台から始まった人は、引き継がれたとき+500するとか無理だったんでしょうか。(ちなみに1000なら+1000\nとはいえ、レートが引き継がれるということは、ランク10は理論的に狙えるので、一応、目指していくということになるのかな(現実的に狙えるとは言ってない\nポケモン 弱点 耐性x2 わざ1 わざ2 わざ3 グランブル はがね,どく ドラゴン あまえる かみくだく インファイト ヒードラン じめんx2,みず,かくとう フェアリー,くさ,こおり,どく,はがね,むし ほのおのうず アイアンヘッド ストーンエッジ エンペルト じめん,でんき,かくとう どく,こおり,はがね メタルクロー ハイドロカノン ふぶき ディアルガは、使えるかどうかまだわからないので、つぎ込むのはやめておきました。それに色違いじゃないとつぎ込むのは難しい。ヒードランは耐性x2が付いてるので、ほぼ確実に活躍すると思います。よって、色違いにつぎ込み。\nまた、ギラティナにはグランブルよりもプクリンが効きます。ゴーストが耐性x2なので。ただ、CPが低いので育てるのは大変かも。\nポケモン 弱点 耐性x2 わざ1 わざ2 わざ3 プクリン はがね,どく ドラゴン,ゴースト あまえる れいとうビーム じゃれつく ","description":"","formated_time":"2020-02-11","href":"https://syui.github.io/blog/post/2020/02/11/pokemon/","tags":["pokemon"],"title":"ポケモンGoにリーグが実装されたのでやってみる6","utc_time":"2020-02-11T00:00:00Z"},{"categories":null,"contents":"ランク8に上がってからギリギリの勝負になることが多くなったので、メンバー変えました。\n$ echo \u0026#34;scale=5;121/190\u0026#34;|bc .63684 現在は121勝69敗です。ランク8での勝率は7,8割ほどだと思います。初期の頃より勝てるようになっているという珍しいタイプ。\nただ、この前、2勝3敗になってしまい、レートはじまってから初めて敗けました。はじめてレートが下がりましたが、これ、かなり下がりますね、きついです。\n以前のメンバーはかなり勝数を上げてくれて、ランク6,7で割と楽だったんですけど、もちろん、運が良かったというのもありますが、ランク8ではまたきつくなってきたと思っていて、いつもギリギリの勝利になっていて、これはダメだなと。そういった経緯でPvPは、これで2回目の構築になります。\nスーパーリーグ ポケモン 弱点 耐性x2 わざ1 わざ2 わざ3 グランブル はがね, どく ドラゴン あまえる かみくだく インファイト シュバルゴ ほのおx2 くさ, どく カウンター つばめがえし メガホーン ナットレイ ほのおx2,かくとう くさ タネマシンガン パワーウィップ ミラーショット わざ1がノーマルで、わざ2,3がスペシャル。以前のメンバー、わざ3はあまり考慮してなかったし、開放もしてなかったなあ。なので、今回はわざ3も考慮してみた。\nなお、エアームドを頻繁に見かける場合はナットレイの代わりにレアコイルを入れるとよいかも。マリルリ対策はいまだにルンパッパが有効です。\nポケモン 弱点 耐性x2 わざ1 わざ2 わざ3 レアコイル じめんx2,ほのお,かくとう ひこう,どく,はがね スパーク ほうでん マグネットボム ルンパッパ ひこう,どく,むし みず はっぱカッター れいとうビーム ハイドロポンプ 参考 : https://pokemongo-get.com/pokemon/\nメンバーの構築 メンバーの構築は、大体が前回と一緒でテンプレ撃破から考えようです。\nなぜならテンプレは最も数が多いからです。数が多いと、それだけマッチする確率が高くなります。\n具体的にどうやってテンプレ撃破を考えるのか。まずはじめはタイプから考えます。こちらが狙われるタイプ、そして、相手を返り打つタイプです。次に技です。テンプレが放ってくる技。\nポケモンGoの強さはタイプ \u0026gt; わざ \u0026gt; 種族値 \u0026gt; 個体値になっています。特にスーパーリーグではその傾向があり、マスターに近づくにつれ、その傾向は薄れます。これは、私の考えに過ぎませんが、簡略化するとそうなっていると思います。\nとすれば、タイプから考えていくのが合理的です。\n例えば、テンプレではあまり見かけないタイプがあるとしましょう。それがほのおタイプだとして、じゃあ、このほのおタイプが弱点になるポケモンを入れてみようという感じです。\nこれは、いろいろな方向から考えます。例えば、ほのおタイプのメンバーはテンプレに対してどうだろうと考えてみます。すると、ほのおタイプの構成ではテンプレに圧勝されてしまうでしょう。ラグラージやマリルリ、ナマズンやタテトプス、チルタリスにやられてしまうのです。\nよって、必然的にほのおタイプで構成されたメンバーは駆逐され、見かけなくなります。とすると、ほのおが弱点のポケモンを入れても、その弱点を突かれる可能性は低いと思います。\nあとは技が重要なので、強い技から構成して、それを持っているポケモンを調べるという流れ。\n基本的には同じタイプの技を選ばないこと。わざ1,2,3あるけど全部違うタイプで構成すること。わざ1、つまりノーマル技だけど、これはダメージ重視の効率的な技にすること。貯めはそれよりも優先順位が低い。\nただし、今回採用しているナットレイのタネマシンガンははっぱカッターより威力が弱く、そして遅い。よって、パワーウィップで同タイプ補完しています。\nチルタリスにやられないように考える必要もあります。チルタリスはドラゴンとひこう技で攻めてくるでしょう。なので、はがねタイプで対応します。\n頭の中でシュミレーションして、これを出したら、相手がこっちの弱点となるポケモンで先鋒してきて、それをこうして、ああしてということを繰り返します。\n考えるの2回目なので、バトルも楽しくなってきた気がする\n初期レート ランクは初期レートによってほぼ決定します。初期レートは古いユーザーの場合、メダルが影響していると考えられています。なお、古いユーザーか否かはXPなどから判断されるのかもしれません。\n世界中の900人以上のトレーナーによる調査結果を以下に示します。\nゲームは、以下の5つのバッジの値に基づいてGBLでプレイを開始した瞬間に、すべてのプレーヤーの初期評価を作成しています。（最高値のバッジは各プレーヤーのGBLロビーに表示されます）\nhttps://9db.jp/pokemongo/data/8878\n原文 : https://www.reddit.com/r/pokemongo/comments/ezk4g7/study_report_go_battle_league_rating_vastly\nここからは個人的な推測です。\nメダルは、基本メダルと加算メダルに分けられ、エリートトレーナー、ヒーローが基本メダルになります。それに加算メダルである各リーグのメダルのうち200ポイント(ゴールド)を超えた部分が1000ポイントを上限に加算されると考えています。つまり、最大で800ポイントです。そして、2番目のリーグメダルが上限を超えた場合、3番目に移行します。超えなかった場合は2番目までが加算。なお、ポイント合計が3500以上になる場合、端数を切り捨て、3500台になると考えられます。\n例えば、エリート2600, スーパー1500, ハイパー512のメダルポイントがあったとしましょう。これが対戦プロフィールに表示されている場合は\n2600 + 800 + 312 = 3712となり、初期レートは3512です。\nこれがハイパーリーグの場合、もしかしたら初期レートはハイパーリーグのメダルが加算されるなど、変化するかもしれません。\nまた、初期レートは単なるガチャの可能性もあります。人によってあまりにバラバラですからね。\nランク10を狙うには 私は初期レートの2600から2900に上げました。これはバトルのみで+300ものレートを上げたことになりますが、かなりきつい。\nレートは3勝2敗で下がります。4勝1敗でもほぼ上昇しない。5勝0敗でやっと+30ほど上がります。つまり、5連勝しないと上がらないようになっています。\nこの場合、レートを+300上げるには、大体、5連勝x10回繰り返す必要がありました。ランク8で5連勝を繰り返すことは至難を極め、つらい戦いでした。\nよって、バトルでレートを上げるのは全く現実的ではありません。\nランク10を狙うには、初期レートで3500に近いポイントを取るしかありません。\n不正テクニック たくさんのバトルをしていると、不正テクニックを使ったユーザーとマッチすることがとても多いです。大体、5回に1回ほどの割合で、不正ユーザーに当たります。\n私もたくさんやられてます。ですが、戦いをやめるわけにはいきません。期間制限があるからです。そして、期間中にバグが修正される可能性はほぼゼロです。\nつまり、不正ユーザーによる敗け試合を覚悟してでも、不正ユーザーにマッチしないことを祈りながら戦うしかない状況です。\n勝率のうち約20%が不正ユーザーによる負けで、残り20%が相性による負けになります。これが私を含めたほとんどのプレイヤーの勝率の内訳だと思います。\nもちろん、これはうまくやった場合の話で、それでも、不正ユーザーによる負けを回避する方法が未だわかりません。\ntwitterでは勝率がやたら高い人がいます。しかし、彼らは一体、どうやって不正ユーザーを回避しているのでしょう。\n私は5回に1回は不正ユーザーに当たっています。この場合、あのような勝率は実現不可能です。\nもしかしたら、不正ユーザーとマッチングしないようにする何らかの方法があるのかもしれません。\nその方法がわかるまでバトルは控えたほうがいいのかも。\n私が確認した限りでは、不正ユーザーは2種類のタイプに分かれます。最初から不正を使ってくるタイプと、自分が負けそうになったら使ってくるタイプです。この場合、こちらが動かなくなり、次に更新されたときにはダメージがかなり通っている状態になります。なお、シールドは使えますので、こちらの通信の問題ではないと思います。\nまた、完全にフリーズしてしまい、次にアプリを開いたときにはこちらの負けが確定しているというパターンもあります。また、動かなくなったまま、相手だけが動いてこちらをボコるパターンもあります。\nハイパーリーグ ポケモン 弱点 耐性x2 わざ1 わざ2 わざ3 グランブル はがね,どく ドラゴン あまえる かみくだく インファイト ヒードラン じめんx2,みず,かくとう フェアリー,くさ,こおり,どく,はがね,むし ほのおのうず かえんほうしゃ ストーンエッジ ディアルガ じめん,かくとう どく,くさ りゅうのいぶき かみなり アイアンヘッド マスターリーグ ポケモン 弱点 耐性x2 わざ1 わざ2 わざ3 サーナイト はがね,どく,ゴースト かくとう,ドラゴン あまえる シンクロノイズ シャドーボール ヒードラン じめんx2,みず,かくとう フェアリー,くさ,こおり,どく,はがね,むし ほのおのうず かえんほうしゃ ストーンエッジ ディアルガ じめん,かくとう どく,くさ りゅうのいぶき かみなり アイアンヘッド ","description":"","formated_time":"2020-02-05","href":"https://syui.github.io/blog/post/2020/02/05/pokemon/","tags":["pokemon"],"title":"ポケモンGoにリーグが実装されたのでやってみる5","utc_time":"2020-02-05T00:00:00Z"},{"categories":null,"contents":"ランク8に上がりました。ただ、レーティングが低すぎるので、ランク10はほぼ不可能に近い。今回も思ったことなど書いていきます。\nランク7からの勝率は覚えているので、12勝3敗です。\nなぜ覚えているのかというと、私の勘違いでレーティングはレベル7からだから、それまでは敗けてもいいので、テンプレ撃破のメンバーを考えよう検証しようと思っていたからです。\nで、ようやく探り当てた感じです。検索してとか、誰かのを真似してとか、誰かに教えてもらったとかではありません。\nというのも、レベル7以上になると、「自分で考えて構成してきた人と、誰かに教えてもらって構成してきた人」とでは大きな差が出てくるのではと思っていたからです。\nそして、自分で考えて構成してきた人とぶつかると、その勝敗は運次第になりやすいと思うのです。とすれば、誰かに教えてもらったり、テンプレをコピーしたりの自分で考えられない人を狩るしかレベル7から始まるレーティングを上げる方法はないのでは？とそんな考えも頭の中にありました。\nその意味で、この辺のランクで勝利収めるのは、けっこう厳しいのではと思ってます。ランクが上がるほど厳しいのではと。\nですから、以降はかなり厳しい戦いになりそうな予感がしていて気分が沈む。\nしかもそれを探り当てるまでのコストというか、私はあまり頭がよくありませんし、不真面目で適当ですからね。かなりコストかけてしまったという感じで、それが致命的にやばかったみたいです。\nそれにいくつもの勘違いをしていたようで、私はレベル7で、レーティングが開始されると、その時点で全員に同数のレーティングポイントが振り分けられ、そこから始まると思っていたのです。だからレベル7まではコストをかけることをあまり厭わなかった。ただ、実際は違うようで、すでに始まっていて、それが見えなかっただけぽいので、かなりつらい状況に陥っていることに今頃気づきました。\n今日、ランク8でやってみて、運良く5戦5勝したんですけど、上がったレーティング+30ぽっちでした。なので、無理！という感想しかない。\nとはいえ、ランク10を目指してほどほどに頑張る。\nそれと、プレリリースが終わったらランクやレーティングがリセットされるという話がありますが、リセットするかは選択できるようにしといてほしい。これが無に帰すと、大半のユーザーは死にます。\n","description":"","formated_time":"2020-02-02","href":"https://syui.github.io/blog/post/2020/02/02/pokemon/","tags":["pokemon"],"title":"ポケモンGoにリーグが実装されたのでやってみる4","utc_time":"2020-02-02T00:00:00Z"},{"categories":null,"contents":"やはり、ピクシー、シャンデラ、フシギバナの構成では安定しないと思うので、構成を考え直してみた。\n今度は以下のような感じになりました。\nポケモン タイプ わざ1 わざ2 ピクシー フェアリー あまえる コメットパンチ ハリテヤマ かくとう カウンター インファイト ルンパッパ くさ・みず はっぱカッター れいとうビーム 以前の構成では、あと一歩のところで押し負ける事案が多発。それ以外は割と圧勝するので、ハマれば強いけど、勝てなければ意味がありません。それに、ギリギリの勝負は望んでいないので、変えてみることにしました。\n今までのバトルを思い出すと、タテトプス、ラグラージ+ナマズン、エアームド、レジスチル、チルタリスというテンプレに苦しめられている感じだったと思う。\n特にタテトプスが出てくるときつかった。ということで、ほのおではがねを攻めるのではく、かくとうで攻めてみることに。これでタテトプス、レジスチルが消えます。\n次に、フシギバナはチルタリスを当てられることが多く、苦戦するので、代わりにルンパッパをぶつけることにしてみます。フシギバナはれいとうビームとかかえんほうしゃを食らうことも多かったので、みずが入ってるルンパッパはよさそう。\nとはいえ、これがハイパーもマスターも続くとなると、はっきり言って気が滅入ります。\n正直、やってられないレベル。時間と想像力を奪い去られ、リーグという箱にとじこめられられている気分です。\nこれ以上のめり込まないほうが良いように思うので、今後は最初に決めたメンバーを育てて、それで勝てたら嬉しいなくらいの調子でやっていこうと思っています。アイテムの消費が無駄に激しすぎるし、これじゃあ自己満足の冒険になりませんからね。私は、ポケモンGOではそっちのほうがやりたいことです。\n","description":"","formated_time":"2020-02-01","href":"https://syui.github.io/blog/post/2020/02/01/pokemon/","tags":["pokemon"],"title":"ポケモンGoにリーグが実装されたのでやってみる3","utc_time":"2020-02-01T00:00:00Z"},{"categories":null,"contents":"対戦経験ゼロからの4勝1敗。\n今日は、なんとか勝てました。\nそれに今までとちょっと違う感じがしたので、今回思ったことを記録していきたいと思います。このシリーズ、今回で終わりそうかも。というかできればこれで終わってくれ！\n私は昨日の対戦でとても大変な目にあいました。\n私とマッチングする相手が全員、例外なく、あまりに強すぎたのです。はっきり言ってあまりにガチすぎて、これは流石におかしいと。\n昨日のバトル、実は、そのほとんどが「あと一発で勝負がつくぞ、勝つか負けるか、常にギリギリの戦い」でした。そういうのが連続していました。\n読み合い、そして最後の一瞬で勝負が決まるという状況\u0026hellip;。\nはっきりいって疲れる！！なんか知らんうちに相手の強さが影響してか、こっちまでわけわからん交代して変なテクニック使っちまったよ！と、そんなことになっていました。\nでも、私は基本的にガチ勢以外の人と当たって、さっさとランクを上げて、お休みしたいだけなんです。おいらは、こんなガチ勢がいるとこに来た覚えはないんです。(本音漏れすぎ！\nつまり、そんな感じでした。\nということで、今回は少し弱い構成でやってみことにしました。CPも1300台に落としてバトルしてみたんですよね。で、結果、4勝1敗だったと。\nしかも、相手がこれまでと違って、なんかこう動きがですね、私と同じくらいで、全く疲れなかったわけです。もちろん、ポケモンGoというゲームは、はっきり言って全員強いです。どのポケモンも基本的に強いし、弱い相手なんていません。どんな相手とやろうが強い。\nですが、今回は初回にあたったようなとんでもない相手と連続5回も勝負するみたいなことはなかった感じでした。\nつまり、何がいいたいか？\nガチ勢と当たりたくなければ、CP1300に抑えるのが効くかもしれない！という仮説が生まれたのです。\n私はしばらく、この仮説に基づいてバトルしてみようかなと思ってます。できればこれで終わってくれ！という願いを込めて。\n今回の構成はこんな感じでした。フワライドのこごえるかぜを連発してましたよ。やってたのはおそらく、それくらい。あとは臨機応変に。\nポケモン タイプ わざ2 フワライド ゴースト・ひこう こごえるかぜ ハガネール はがね・じめん かみくだく メガニウム くさ ハードプラント あと、勝敗は運ですね。大半が運です。私が4勝したのも運。\n相手のポケモンと、そして先鋒しだいです。今回も1敗しましたが、やはり相性でした。これは私にはどうすることもできないので、パス。\n追記 その後、4勝1敗で、これはいける！って思ったんだけど、その後、2敗して、しかも強かったので、これはダメだなと思いCP1400台に戻したら2勝したので、関係ないかもしれません。\nCP-100というのは、それで勝負が決まることはあまりないけど、それでもリスキーな方法なので、あまりに勝てないときは試してみるのもいいかもしれませが、それ以外ではおすすめしません。\n","description":"","formated_time":"2020-01-31","href":"https://syui.github.io/blog/post/2020/01/31/pokemon/","tags":["pokemon"],"title":"ポケモンGoにリーグが実装されたのでやってみる2","utc_time":"2020-01-31T00:00:00Z"},{"categories":null,"contents":"これまで対戦の経験はゼロ。タスクに必要な場合は借りたりとかで、やってきましたけど、今回はそういう訳にはいかないみたい。つまり、戦うしかない！\n対戦してるとそのうちルールとかわかってくるだろうと思い、とりあえずやってみることに。\n感想としては、みんな強すぎだろ！という感想しかない。\nある5戦のうち2人がテンプレで、3人が私と同じくテンプレ狩りの構成でした。テンプレだけでも強いのに、早くも\u0026hellip;いや、早すぎだろというテンプレ狩りの構成が私を襲う。\n3勝2敗ですが、1回はミスで、もう一回は相性でした。ミスはどうにかできますが、相性はどうにもならんかった。\nよって、ミスを減らす練習は必要だなあと思ったりしてます。\nまた、リーグは、強い人と当たった場合、相性による運勝負になる傾向が強いのではと思います。\nなので、そのへんは気楽に考えて「確かに勝負は運で決まるけど、運良く勝てるように、できることをやっていこう」という前向き？な気持ち。\nスーパーリーグ 現在の構成はピクシー, シャンデラ, フシギバナ。ようはあまえる, はっぱカッターのノーマル技でゴリ押しのテンプレ狩りと言ったところ。\nポケモン タイプ わざ ピクシー フェアリー あまえる シャンデラ ほのお・ゴースト ほのおのうず フシギバナ くさ・どく はっぱカッター シャンデラはレジスチルとかエアームドをやっつけます。ただ、耐久力は低いのです。\n戦略としては、一撃で沈められそうならシールド、それ以外は無視。必殺技は使わない方向で。必殺技を使うと、あと一歩のところでやられてしまうことがありました。最後に、先鋒交代はできる限りしない方向で、先鋒には頑張ってもらうしかない。先鋒を先に交代してしまうと負けてしまう確率が非常に高いと思います。\nその意味では、やはりポケモンバトルにおいて相手の先鋒次第という部分はあると思う。リーグにおいて、運というのが勝敗を分ける最大の要素だと思います。なので、私と同じく負けまくってる人もそこまで落ち込まないで！\nとはいえ「どうせ運勝負なんだから何もしない」というのも面白くないので、やれることはやっていくスタイル。\nこんな感じでスーパーリーグは頑張るとして、次はハイパーを考えてみます。\nハイパーリーグ ハイパーも同じく、検索して、一般的に強いよって言われているポケモンのうち選ばれそうなポケモンを対策することから考えてみることに。\nギラティナ(アナザー)とかクレセリアが人気でそうですよね。なのでこいつらを返り討ちにする構成ということで以下。\nポケモン タイプ わざ トゲキッス フェアリー・ひこう あまえる ヒードラン ほのお・はがね ほのおのうず メガニウム くさ はっぱカッター マスターリーグ マスターもついでに。こっちはディアルガが使われそうで、それはハイパーも同じかも。\nポケモン タイプ わざ サーナイト フェアリー・エスパー あまえる ヒードラン ほのお・はがね ほのおのうず フシギバナ くさ はっぱカッター テンプレのポケモンはやっぱり強い テンプレのポケモンはやっぱり強いです。\nステータス、タイプともに一番強いポケモンたちは、全部テンプレに取られてしまっている感じでした。\nよって、そこから考えるのも割と難しかったりします。\n特にタイプですね。タイプはすでに分析され尽くされている感じで、弱点が少なく、耐性が高いポケモンは一番にリストアップされます。\nそのため、テンプレの数少ない弱点をつけるポケモンで、なおかつ耐性が高いポケモンとなると、実はあんまりいないのではという感想。\nこの辺はやはり、旬なポケモン、よく使われているポケモンをすばやく把握して、その対策をぶつけていくしかないと思います。\nもちろん、これは変動します。とはいえ、あまりに変動が早すぎる気がするんですけど\u0026hellip;。\n本気で勝とうと思った場合の戦略 最後に、本気で勝とうと思った場合の戦略を考えてみます。\n先程から何度も述べている通りポケモンバトルは「強い人とやりあうと運勝負になる」という特性があると思われます。\nこれはバランスのとれたゲーム上、仕方ないことです。また「多くのポケモンに活躍の場を」というコンセプトに従ったものだと考えられ、決して悪いことではありません。\nただ、一定の戦略、一定のレベルに達したらあとは運次第かなと思っています。\nこの場合、私達が取りうる戦略には、どんなものがあるのでしょう。\n私は「弱い人に当たること」がまっとうな戦略であると思います。強い人と当たってしまうと、どれほど戦略を練ろうが、どんな強化をしようが、どんなポケモンを使おうが、運勝負になってしまう。とすれば、弱い人と当たることを考えなければなりません。\nまた、ポケモンの強化などに頼った戦略は、やはり早々に限界が見えてしまうのではと思っています。それに大変ですし、疲れちゃいますよ。時間や労力が大変にかかります。\nということで、「弱い人に当たること」が勝ち数を上げるためには最も重要だと考えます。\nでは、どうやって「弱い人に当たること」ができるのでしょう。\nこれはマッチングのルールによります。私が現時点で考えているのは、エリアと時間帯です。仮に位置情報から一定の範囲内を検索してマッチングしている、もしくはその割合が大きい場合、私達が取りうる戦略があります。\nそれは「強い人がいるエリアを避けて対戦を申し込む」ということです。また、それよりも重要なのは時間帯かもしれません。時間帯だけは、その時点で対戦相手を探している人としかマッチングしないという特性があります。よって、対戦する時間帯に着目してみるのもいいかもしれません。\nこの前、一戦交えてみて思ったのはそんなとこ。\n以上\n参照 ポケモン図鑑 : https://pokemongo-get.com/pokemon/\nリーグランク : https://pokemongo-get.com/pokego03087/\n現在はプレシーズンということで、レーディングに影響せず気軽に楽しめます。シーズン1開始と同時にランクはリセットされる予定らしい。これは3月頃の予想。レーディングが影響するのは、レベル8からなので、レベル8以上の人ははレベル7にランクがリセットされるかもしれないと予想しています。\n","description":"","formated_time":"2020-01-30","href":"https://syui.github.io/blog/post/2020/01/30/pokemon/","tags":["pokemon"],"title":"ポケモンGoにリーグが実装されたのでやってみる","utc_time":"2020-01-30T00:00:00Z"},{"categories":null,"contents":"opensshのsftpが前提です。\niosのgoodreaderでsftpのprivate-keyが読み込めませんでした。\nこれはmacのssh-keygenで作成されるコマンドの出力が変更されているので、昔作ったキーでは読み込めますが、新しく作ったキーは読み込めなかったのです。よって、キーを作り直すか、キー自体を編集することで解決。\n問題の答え # 公開鍵、秘密鍵の作成 $ ssh-keygen -t rsa -b 4096 -m PEM -f ~/.ssh/goodreader # serverにpublic-keyを登録 $ ssh-copy-id -i ~/.ssh/goodreader.pub user@192.168.1.11 -p 22 # ~/.ssh/goodreader # このprivate-keyをiosのgoodreaderに持っていく 問題の内容 私はいつもこんな感じでssh-keyを登録したり、変更したりします。単純ですね。\n$ ssh-keygen -f ~/.ssh/$KEYNAME $ ssh-copy-id -i ~/.ssh/$KEYNAME.pub user@localhost 簡単に説明すると、サーバーの/etc/ssh/sshd_configにて設定される.ssh/authorized_keysに公開鍵が登録される仕組み。\nこの公開鍵に対応する秘密鍵を共有すれば、大抵はサーバーにアクセスできる。よって、iosのgoodreaderにもこんな感じで使える秘密鍵(.ssh/authorized_keysに書いた公開鍵に対応するやつ)を使えばアクセスできるはずなんですが、できなかった。\n$ cat ~/.ssh/private-key -----BEGIN OPENSSH PRIVATE KEY----- $ cat ~/.ssh/private-key-old -----BEGIN RSA PRIVATE KEY----- デフォルトは、RFC 4716 - The Secure Shell (SSH) Public Key File Format のフォーマット。これは RFC で定められた秘密鍵のフォーマットだ。\nこれまで使われていた PEM フォーマットは、Privacy-Enhanced Mail - Wikipedia にもあるとおり、もともとセキュアなメールシステムの RFC 向けに開発された。 しかし、これらの RFC は一つのルート認証局の PKI に基づいたもので、運用の問題で実現することがなかった。\nしかし、PEM というフォーマットは秘密鍵、公開鍵のフォーマットとして広く使われたようだ。\nRFC 4716 のような仕様が策定され、今回のようにデフォルトの出力も切り替えられているため、PEM もいよいよその役割を終えるのかもしれない。\nhttps://amasuda.xyz/post/2019-07-27-ssh-keygen-openssh-to-pem/\ngoodreaderはこの辺対応していない感じ？なので、macのデフォルトで作ったキーが使えないためハマる人とか多そう。(自分もハマった\n","description":"","formated_time":"2020-01-26","href":"https://syui.github.io/blog/post/2020/01/26/goodreader/","tags":["ios"],"title":"iosのgoodreaderでsftpのprivate-keyが読み込めない問題","utc_time":"2020-01-26T00:00:00Z"},{"categories":null,"contents":"\n今回は、アイのわざ、月見を描いてみました。\n原作ではまだ未登場ですが、おそらく技の絵を使うことはないでしょう。\nもし原作で登場することがあるなら「こういうイメージもあるよ」ということで。\n/img\n","description":"","formated_time":"2020-01-25","href":"https://syui.github.io/blog/post/2020/01/25/illust/","tags":["illust"],"title":"イラストを描いてみた17","utc_time":"2020-01-25T00:00:00Z"},{"categories":null,"contents":"\n私の場合、最初はミュウで、次はミュウツーでした。\nアルセウス、ミュウ、リザードン、ミミッキュがお気に入りなので、次はリザードンでしょうか。\n最高の相棒、もしかしたらメガシンカの条件になるかもなので、メガ優先していこうかなと思ってます。\n","description":"","formated_time":"2020-01-25","href":"https://syui.github.io/blog/post/2020/01/25/pokemon/","tags":["pokemon"],"title":"ポケモンGoで最高の相棒にしてみる","utc_time":"2020-01-25T00:00:00Z"},{"categories":null,"contents":"開発環境をイチから作りなおしてみる企画やってます。\nhttps://git.syui.ai/syui/dotfiles\npowerline.zsh https://github.com/syui/powerline.zsh\nhttps://github.com/syui/ricomoon\nzshのprompt(powerline.zsh)を調整しています。昔から不満のあったオリジナルアイコンの位置などを修正しました。昔からちょっと上にズレてたんですよね、気になってたんですが、放置してたのです。\nicomoonで作ったやつは以下の調整でいけた。ただし、基本とするフォントにもよる。\n#!/usr/bin/fontforge -script Open(\u0026#34;./font/icomoon.ttf\u0026#34;) SelectAll() foreach Scale(80, 80, 0, 0) endloop Generate(\u0026#34;./font/i.ttf\u0026#34;) Close() またgitlabやheroku(に似ている)アイコンをプラスしました。昔はfont-awesome(bland)に入ってなかった。ただ、省略したアイコンも多く、最初は必要なものにとどめました。\nフォントに関しては、SF Monoがいいらしい。そのうち時間があれば見てみようかなと思っています。ただ、フォントやアイコン周りを久しぶりに触ることになりましたが、たいへん。fontforgeなんもわからん。\nzstyle ':vcs_info:git:*' formatsとかで表示する情報にコミット数を追加してみたりした。\n$ git --no-pager shortlog -sn |tr -d \u0026#39; \u0026#39;|cut -f 1 | head -n 1 zsh-notify zsh-notify入れたら端末がおかしくなったような気がしたので、アンインストールした。\n#zsh-notify #commandを実行してもpromptが動かなくなることがある zinit light marzocchi/zsh-notify zstyle \u0026#39;:notify:*\u0026#39; error-title \u0026#34;Command failed\u0026#34; zstyle \u0026#39;:notify:*\u0026#39; success-title \u0026#34;Command finished\u0026#34; export SYS_NOTIFIER=`which terminal-notifier` zstyle \u0026#39;:notify:*\u0026#39; command-complete-timeout 15 一応、上記の構成で機能はする。\ngit add + git diff git addするときにdiffをfzf --previewで確認する^g\nunbufferを使うので、ない場合は、$ brew install expectで入ります。\n念の為にbindkey -s扱いにした。\n# git addするときにdiff function gadd() { selected=$(unbuffer git status -s | fzf -m --ansi --preview=\u0026#34;echo {} | awk \u0026#39;{print \\$2}\u0026#39; | xargs git diff --color\u0026#34; | awk \u0026#39;{print $2}\u0026#39;) if [ -n \u0026#34;$selected\u0026#34; ]; then BUFFER=\u0026#34;git add $selected\u0026#34; CURSOR=$#BUFFER fi } zle -N gadd bindkey \u0026#39;^g\u0026#39; gadd vimで直前のカーソル位置からファイルを開く この設定は必須。\n\u0026#34; 直前のカーソル位置で開く augroup vimrcEx au BufRead * if line(\u0026#34;\u0026#39;\\\u0026#34;\u0026#34;) \u0026gt; 0 \u0026amp;\u0026amp; line(\u0026#34;\u0026#39;\\\u0026#34;\u0026#34;) \u0026lt;= line(\u0026#34;$\u0026#34;) | \\ exe \u0026#34;normal g`\\\u0026#34;\u0026#34; | endif augroup END 今後の予定と方向性 今後は、気になる箇所を修正しながら、linux対応とansible化やvagrant化していこうかなと考えています。\n必要性はありませんが、やってみることで新たな知見を得られたりもするものなので、やっていきたいなあ。\n","description":"","formated_time":"2020-01-25","href":"https://syui.github.io/blog/post/2020/01/25/dotfiles/","tags":["dotfiles"],"title":"開発環境を作り直してみる3","utc_time":"2020-01-25T00:00:00Z"},{"categories":null,"contents":"この前、ふと3Dモデルでも作ってみたいなーと思い立ち、作ってみることに。\nまずは簡単なものからと思ったので、アムのコインを3D化してみます。\n3Dモデルを作るのはこれが初めてですが、\nはっきりいいましょう、こんだけ作るのもすごい大変だったと！\nまずは3Dモデルってどうやって作るのか調べてみると、いい感じに自分でもできそうなやり方があったので、それでやってみて、1, 2時間くらいかかったと思う。\n作ったあとは、obj,mtl,jpgをzipに圧縮してsketchfabにアップロードしてみました。\nしかし、1ヶ月に1回のアップロード制限はきついかも。ただ、uploadすると3D-editorが使えるので非常に有用だと思います。\n3Dモデルの簡単な作り方 今回は、丸図形を用意して、テクスチャに当て、大きさの調整、x,y軸などを調整して完成という流れ。\n最初はエディタの使い方とか全然わかりませんが、なんとなくガチャガチャやってたらわかってくるのではと思ったので、ガチャガチャやってました。\nで、こんな感じのものを簡易に作成して、blenderとかsketchfabの3D-editorとかで修正していけばいいのかなあという感じで今のとこ思ってます。(違うかも\nアムのコイン yuiの最後のほう(43話くらい)に登場するアイテム。宇宙で最も流行している特殊な通貨のこと。\n","description":"","formated_time":"2020-01-24","href":"https://syui.github.io/blog/post/2020/01/24/3d/","tags":["3d","make"],"title":"3Dモデルを作ってみる1","utc_time":"2020-01-24T00:00:00Z"},{"categories":null,"contents":"https://git.syui.ai/syui/dotfiles\nfzf fzfに関しては、vim **\u0026lt;tab\u0026gt;などが使えます。--previewで画面分割しながらtree,catしたものを表示できます。\ngrepの代わりになるrgとcatの代わりになるbatがおすすめで、コマンドオプションなどに追加。あと.git以下は拾わないようにしたりとか、ファイルのみとか。\n$ brew install rg bat bindkey \u0026#39;^b\u0026#39; fzf-file-widget export FZF_DEFAULT_COMMAND=\u0026#39;fd --type f --hidden --follow --exclude .git\u0026#39; export FZF_COMPLETION_OPTS=\u0026#39;--preview \u0026#34;bat --color=always --style=header,grid --line-range :100 {}\u0026#34;\u0026#39; export FZF_CTRL_T_COMMAND=\u0026#39;rg --files --hidden --follow --glob \u0026#34;!.git/*\u0026#34;\u0026#39; export FZF_CTRL_T_OPTS=\u0026#39;--preview \u0026#34;bat --color=always --style=header,grid --line-range :100 {}\u0026#34;\u0026#39; #export FZF_COMPLETION_TRIGGER=\u0026#39;~~\u0026#39; fancy-ctrl-z () { if [[ $#BUFFER -eq 0 ]]; then BUFFER=\u0026#34;fg\u0026#34; zle accept-line else zle push-input zle clear-screen fi } zle -N fancy-ctrl-z bindkey \u0026#39;^z\u0026#39; fancy-ctrl-z fzf-file-widgetは^tですが、tmuxに使ってるので^bに変更。この辺はbindkeyコマンドで調べられます。\n^zでバックグラウンドの利用を促進。\nvim + terminal vim + terminalは、tyruさんのgithubやblogが参考になると思います。\nhttp://tyru.hatenablog.com/entry/2020/01/06/153959\n簡単に言うとpeco, fzfとの連携が便利になるpluginなどをいくつか作られている感じです。\nPlug \u0026#39;tyru/sync-term-cwd.vim\u0026#39; Plug \u0026#39;tyru/tapi-reg.vim\u0026#39; $ go get github.com/mattn/gof vim-lsp vim補完についてはmattnさんのgithubやblogが参考になると思います。\nhttps://mattn.kaoriya.net/software/vim/20191231213507.htm\nlspは様々な言語支援を提供してくれるサーバーのことでpluginはそのクライアントみたいな感じでしょうか。わからん。言語ファイルを開いて、:LspInstallServerしましょう。./serversにダウンロードされます。\nhttps://github.com/mattn/vim-lsp-settings\nPlug \u0026#39;prabirshrestha/async.vim\u0026#39; Plug \u0026#39;prabirshrestha/asyncomplete.vim\u0026#39; Plug \u0026#39;prabirshrestha/asyncomplete-lsp.vim\u0026#39; Plug \u0026#39;prabirshrestha/vim-lsp\u0026#39; Plug \u0026#39;mattn/vim-lsp-settings\u0026#39; ","description":"","formated_time":"2020-01-22","href":"https://syui.github.io/blog/post/2020/01/22/dotfiles/","tags":["dotfiles"],"title":"開発環境を作り直してみる2","utc_time":"2020-01-22T00:00:00Z"},{"categories":null,"contents":"ゲームのシナリオを書こうと思ったけど、やる気でないので、こういうときは他のことしたほうがいいと思って、カオスになってた開発環境の整理をはじめました。\n以前から整理しようと思っていたgithubのdotfilesのbranchを切らず、自前のgit-serverで整理していこうかなと思っています。別に移行するわけではありませんが、今は整理されてないリポジトリ群を見たくない\u0026hellip;。\nhttps://git.syui.ai/syui/dotfiles\n$ git clone https://git.syui.ai/syui/dotfiles zpluginとvim-plug まずはplugin-managerを入れました。\nhttps://github.com/zdharma/zinit\nhttps://github.com/junegunn/vim-plug\nただ、本格的にやる気が出てきたのは、やはり自分のpowerline.zshを作り直しているときです。\n自分で目に見える変化を付けていくほうがやる気が出るのでおすすめです。\npowerline.zsh 今回はこんな感じで配色をシンプルにしました。昔は色とりどりでしたが、時間が経つにつれ、あまりかっこよくないなあと。でもカスタマイズするのも面倒なので放置していました。\nhttps://github.com/syui/powerline.zsh\ngit-repoにcdするとき劇遅になるので、zle reset-promptして必要があればcd .で表示します。このあたり改善したいのですが、今のところ放置。\n# z + peco # 入力があれば移動履歴から補完、なければ移動 function peco-z-search (){ zdirselect=`z | sort -g -r | peco | cut -d \u0026#39; \u0026#39; -f 2- | sed \u0026#39;s/ //g\u0026#39;` if [ `echo \u0026#34;$LBUFFER\u0026#34; | wc -w | tr -d \u0026#39; \u0026#39;` -eq 0 ];then cd $zdirselect ls -slhAF zle reset-prompt else LBUFFER+=\u0026#34;$zdirselect\u0026#34; fi } zle -N peco-z-search bindkey \u0026#39;^f\u0026#39; peco-z-search pmy 今回は、pmyというツールを使ってfzfと連携してみました。\nhttps://github.com/relastle/pmy\n以下のような設定を書くことで連携できます。\n- description: フォルダならtree ファイルなら中身をbatしながらパスの補完 regexp-left: ^(?P\u0026lt;body\u0026gt;.*?)(?P\u0026lt;path\u0026gt;(~/){0,1}(\\S*/)+)(?P\u0026lt;query\u0026gt;\\S*)$ cmd-groups: - stmt: command ls -anlhF \u0026lt;path\u0026gt; after: awk \u0026#39;{print $9}\u0026#39; fuzzy-finder-cmd: fzf -0 -1 -q \u0026#39;\u0026lt;query\u0026gt;\u0026#39; --ansi --header-lines 1 -n 9 --preview \u0026#39;if [[ {9} == */ ]] ; then tree -C -L 3 \u0026lt;path\u0026gt;{9}; else bat --color=always \u0026lt;path\u0026gt;{9}; fi\u0026#39; buffer-left: \u0026lt;body\u0026gt;\u0026lt;path\u0026gt; buffer-right: \u0026#39;[]\u0026#39; fzfとpeco、似たようなツールだけど面倒なのでどちらも使っていきたい。\niterm2 color 今回は、Japanesqueというカラーを参考にしました。\n$ curl -sLO https://git.syui.ai/syui/dotfiles/raw/branch/master/syui.itermcolors 感想 イチから環境構築をやり直すと、最初はものすごく不便ですが、少しずつ便利にしていきたい。\nその過程で新しい使い方を身につけたり、新しいツールを使ったりできるので、いいですね。\n","description":"","formated_time":"2020-01-20","href":"https://syui.github.io/blog/post/2020/01/20/dotfiles/","tags":["dotfiles"],"title":"開発環境を作り直してみる1","utc_time":"2020-01-20T00:00:00Z"},{"categories":null,"contents":"タイトルはyui2となっています。\nhttps://syui.ai/imgame2\nまずロゴを作りました。数字の部分、最初はフォントを使おうと思ったんですが、めんどくさいですしね、でもしっくりこなかったので、自分で作る羽目になりました、2です。\n今回もアイテムから背景、キャラクター、シナリオなどを設計しました。\n例えば、モンスターボックスというアイテムが登場するのですが、以下のようなデザインから構成されています。なんとなく線を引いたり、消したり、塗りつぶしてみたり。\nシナリオに関しては、最初のシリーズで謎だった部分の伏線がいくつか回収されていると思います。\nイラストで描いている背景、アイテム、キャラクターは方向性がそれぞれに決まっているのでやりやすいです。\nやらないこととやることを決めていて、やらないことはやりません。それは面白くないことだったり、めんどくさいことだったり、やたら時間がかかることだったり。\nシナリオに関しては、やはり非公開で書いていた小説が原案になっています。シリーズ1では暗くなってしまうので、バッサリと切り捨てた部分を少し拾いました。\nキャラクターに関しては、キョウスケ、ポンタ、オクトカットはゲームからの参加で、それによって原案キャラも若干影響を受けていると思います。\nここから少しキャラクターに関する話をします。\n例えば、yuiに出てくるキャラで私はどれに当てはまるのかってよく聞かれるんですが\u0026hellip;うそですきかれたことありません！で、自分がどのキャラに当たるかと言うとそりゃもちろん、アイですよ！\u0026hellip;という冗談は置いといて、私はおそらく、誰でもあって、誰でもないのだと思います。\n私は以前、こんなコメントを見たことがあって、作者が自分のキャラのセリフにはっとさせられたという話に「作者は自分の思いをキャラAに語らせていて感動的」とコメントがついていました。\nこれですね、大半の人がコメントと同じような意見を持つと思うんですけど、私が思ったのはおそらくそうではないなと。\n作者が作ったキャラでも、あいつらは勝手に動いて勝手にしゃべるので、特に作者がこうしゃべらせているみたいなことって少ないです。作者は単にキャラが勝手に喋ったそれをですね、メモしたり、記録したりですね、するだけですから、おそらく、本当に自分が作ったキャラのセリフにはっとさせられたんだろうなーって思ったんです。\n一方で、そうは言っても作者が作ってんでしょと言われると、確かにそうで、それはやはり、どこかにあるからだと思うんです。\nなので、私は、どのキャラでもないし、どのキャラでもあるなあと今の所はそう思ってたり。\n話を変えて、次はモンスターの話です。\n(本作ではまだ未登場)\n今回は、モンスターが登場しますが、モンスターを作るの結構大変でした。特に、アイテムの方向性でデザインするのか、キャラクターの方向性でデザインするのかで迷いました。なので、その中間をとって、基本は四角や三角の図形で構成するものの、やはり躍動的に表現する部分も可という方向で行くことにしました。各々の部品もシンプルにすることを心がけ、あまり複雑にしてしまうと、あとで描くの大変ですからね\u0026hellip;。\nあと、配色ですが、私は1キャラ、1フィールド、1アイテムにつき3,4色と決めているところがありますので、モンスターも同じ。それでも配色は、難しかったし、悩みます。ただ、鳥なら鳥、ネコならネコ、ドラゴンならドラゴンで、一番に思いつく色ってあるじゃないですか。私の場合、それを基本色にしました。\n最後にキャラクター紹介ページを作りました。\nhttps://syui.ai/gamechara/\nこれは、漫画とか読む人はわかると思うんですが、冒頭にありますよね。私は全く見ないんですけど、というかゲームも説明書すら読まなかったり\u0026hellip;でも作る側からすると、やっぱり「わかりにくいかな、こいつ誰ってなったりしない、途中から入って大丈夫？」みたいなことをちょっとだけ気にします\u0026hellip;うそ、すごく気にします。なので、作りました。\nゲーム作るのとか、面倒でしたけど、でも、面白かったですよ、楽しかった。\n次はどんなお話にしましょうか。\n","description":"","formated_time":"2020-01-17","href":"https://syui.github.io/blog/post/2020/01/17/game/","tags":["game"],"title":"ゲーム2を作ってみた","utc_time":"2020-01-17T00:00:00Z"},{"categories":null,"contents":"2019冬で良かったのは、ハイスコアガール、ビースターズ、サイコパス3でした。\n今期は多分これを見るだろうなーというのを載せておきます。\n映像研 最初は、そこまで面白い話ではなかったと思います。まだ最初ですしね。\nただ、秘密基地などのワクワク感はありました。\n狭い路地を進み、秘密の抜け道を通るところとか。\n主人公、男だと思ってたら、女の子だった件。\nソマリ 独特の世界観、でも1話はそこまでは面白くなかったと思います、まだ最初ですしね。\nでも面白くなりそうな気もします。\n拾った子供、男の子だと思ってたけど、海外の反応見てると女の子という情報があり、わからない。\n異種族レビュアーズ よくわからないお話ですが、天使がかわいかったので見ました。\nこの天使、女の子だと思ってたら男だったので(正確には両性らしい)、自分は、完全に性別の見分けがつかなくなってきてるのだと思います。\n私、金髪少女萌えなんですよね。今までの好き傾向からすると。\nまどマギ・レコード こちらは最初から話が面白かったです。\nどうなるのでしょうか。\n以上が今期アニメの初回の感想でした。\n","description":"","formated_time":"2020-01-13","href":"https://syui.github.io/blog/post/2020/01/13/anime/","tags":["anime"],"title":"今期のおすすめアニメ2020冬","utc_time":"2020-01-13T00:00:00Z"},{"categories":null,"contents":"今回はゲームに登場したアイの技の紹介です。\nこれは波動という技です。私が勝手に頭の中でそう呼んでいて、後でかっこいい名前をつけようと思ってたわけなのですが、結局そのままになってしまった！これは後者も同じく。\nようはエネルギー派のことですね。波動拳とかかめはめ波、シャドウボールとかみたいな。\n今のところ、アイがアイモードのときに使えるようです。\nこれは超究。自分の髪を創造の力に使うというアイの切り札。一度使うと、次は髪が伸びるまで待たないといけない。\n創造の力と言っても、あるものを使ったほうがやりやすいし、かつ、魔力がこもった自分の髪の毛を使うので、威力は絶大だと言われています。\nアイもいざというとき使うために髪を伸ばしてるのかもなーと思ったり。\nあと、まだ登場していませんが、月見という技があります。一応、イメージはいくつかあるのですが、技名、シナリオは仮なので、確定ではありません。未確認ということで。\n","description":"","formated_time":"2020-01-10","href":"https://syui.github.io/blog/post/2020/01/10/illust/","tags":["illust"],"title":"絵を描く機会を増やしてみる6","utc_time":"2020-01-10T00:00:00Z"},{"categories":null,"contents":"/imgame\nゲームに新しい話を追加してみました。\n興味のある方はプレイしてみてください。\nフィードバックがあればよろこびます。\nUPDATE 2020/01/04 : v1.0をリリース\n2020/01/08 : v2.0をリリース\n","description":"","formated_time":"2020-01-08","href":"https://syui.github.io/blog/post/2020/01/08/game/","tags":["game"],"title":"ゲームに新しい話を追加してみる","utc_time":"2020-01-08T00:00:00Z"},{"categories":null,"contents":"\n今回描いたのはアイの魔法少女バージョンです。\nおそらく誰かにテレビでも教えてもらって、魔法少女にハマってるんでしょう。(絶対とは言わない\n哲学的な話 それは置いといて、ここからは少し哲学的な話をします。\n皆さん、バトルマンガって好きですか。私は大好きです。\nその中で、主人公が戦ってボロボロになっていく姿って、結構かっこよくないですか。服とか破けちゃったりね。私はあれも「かっこいい」演出効果の一つだと考えています。\nで、男の子の場合はそれでいいんですけど、女の子の場合はどうなんでしょう。\nこれは難しい問題です。\n私が考えているのは、男の子の場合、戦ってボロボロになって、勝ったぞーってのがかっこいいのですが、女の子の場合は、逆パターンかもしれないなってのは思っていて、最初はボロボロだったのがピカピカ、キラキラになっていく、そういう構成が「かっこいい」のではないかと考えています。\nもちろん、これがすべての公式というわけではなく、公式なんてありませんけど、しかし、今の時点で私が演出を考えた場合、そちらを採用するかもしれないということです。\n個人の主観や好みにもよります。主人公が戦ってボロボロになっていく姿をかっこいいと思う人もいれば、回復してピカピカに戻ったのをかっこいいと思う人もいて、色々だと思います。まあ、面白い漫画は、どっちもかっこよかったりするんですけど\u0026hellip;。\nで、私の場合、ゲーム本編でそこまで描くには至らなかったのですが、これからアイは割とキラキラ、ピカピカしていく場面がもしかしたら増えるかもしれないなあと思っています。(あくまで予想です\nとはいえ、そこまで深く考えてるわけではなく、女の子とか男の子とかあまり気にして描いてないとも思っているので、描きたいように描くだけです。\n他にもなにか言ってみると、表情とか衣装とかを用意するのは、無駄に時間がかかってしまう事が多いです。\nだから、戦うことを予定しているキャラを最初から割とそんな感じにしておいたりとかね。(交換しなくて済む\n今回の絵について スカートが難しかったのと、靴が難しかったのと、手が難しかったのと\u0026hellip;つまり、全部、難しすぎた。\nこれが魔法少女？単なる制服では？\nほ、ほら\u0026hellip;杖もありますし\u0026hellip;あとは、えっと\u0026hellip;ピンクですし\u0026hellip;\n","description":"","formated_time":"2020-01-06","href":"https://syui.github.io/blog/post/2020/01/06/illust/","tags":["illust"],"title":"絵を描く機会を増やしてみる5","utc_time":"2020-01-06T00:00:00Z"},{"categories":null,"contents":"今回はプランというキャラクターの描き直しです。\nこちらもゼンと同じく、昔に設計したデザイン、キャラクターだったりしますが、今作でもエンディング後のストーリーに登場する運びとなりました。\nそれに伴う描き直しです。配色に関しては毎回悩みまくりです。\nデザイン自体にそこまでの変更はありませんが、出したときに「これはダサいな\u0026hellip;でも書き直すのも面倒だし」と思っていて、もうこれでもいいかと思って出してみたんですけど、ストーリーを読み返すたび「やっぱりダサいな！これ！！」と思って書き直す羽目になっちゃった。\n\u0026hellip;最初からやっておけばよかった。\nただ、書き直してみても\u0026hellip;どうも\u0026hellip;あまりかっこよくは\u0026hellip;ないなっ！という感想です。\nですが、デザインや配色に関しては、描きやすいように修正していて、それぞれのパーツがそこそこに描きやすいようになっているので、良かったかなと思っています。\nというか自分が確認する時のキャラクターの一覧、ほしくなってきた\u0026hellip;。ネタバレになってしまうので、ゲームページには載せられないという。\nとりあえずイラストページに無理やり押し込むかな。\n","description":"","formated_time":"2020-01-05","href":"https://syui.github.io/blog/post/2020/01/05/illust/","tags":["illust"],"title":"絵を描く機会を増やしてみる4","utc_time":"2020-01-05T00:00:00Z"},{"categories":null,"contents":"ゲーム自体は、一区切りついたので、最初の完成みたいな地点にはたどり着いたーという感じです。\n興味のある方は、ぜひ、一度、プレイしてみてやってくださいな。\n多分、30分くらいの内容です。(もうちょっと短いかも\nはじめてのゲーム制作 はじめてのゲーム制作、なんとなくはじまり、なんとなく終わりました。\n今までUnityとかTyranoScriptとかを使ってプレビューや例を試してみたことはありましたが、ゲームとして作ろうとしたのは、これが初めてです。\n自分が好きな構成で好きなように作ったのが今作でした。\n背景とかも適当な感じで、本当に適当なんですけど、でも、私はああいう感じの背景とか、意外と好きだったりします。\nキャラクターとかは割と行き当たりばったりで作りましたが、それなりに個性が出てれば嬉しく思います\u0026hellip;けど、ブレブレかもなとも思ったり。\nシナリオに関しては、オリジナル小説(非公開)をなんとなく書いてたりしてて、そういった話がモデルになったり、なってなかったりします。\n小説をゲームにするとなると、そのままで使うことは難しく、例えば、このシーン、ゲームで表現するには難しいなどの障害がたくさんあると思うので、シナリオはゲーム用に新たに書き上げることになりましたね。\nでもこれは回り道なんかじゃなく、結果的にこれでよかったなーと思っていたりします。\nイラストに関しては、ふつーにipadを使う機会が増え、アプリの使い方をちょっとだけわかってきたので感謝です。\nその他 ゲームシナリオの方は、もうちょっとだけ続くかも\u0026hellip;私のやる気があればですが\nなんかこう宣伝ページみたいな、ゲームをプレビューしているところとかを載せたページ作ろうと思ってたんですが、まだUIデザイン周りを配慮できてなくて、即席で作り上げた感じなので、そういうのがしっかりしてきたら作るかも。\n/imgame\n","description":"","formated_time":"2020-01-04","href":"https://syui.github.io/blog/post/2020/01/04/game/","tags":["game"],"title":"ゲームを完成させてみる","utc_time":"2020-01-04T00:00:00Z"},{"categories":null,"contents":"\n/imgame\nポンタの父です。名前は\u0026hellip;そういえば考えてないや。\nまあ、いずれ、そのうち\u0026hellip;。(やらないパターン\nゲームは、このへんまでは書こうかなーと思ってたところくらいまでは、なんとか進めることができました。よかった。\n","description":"","formated_time":"2020-01-03","href":"https://syui.github.io/blog/post/2020/01/03/game/","tags":["game"],"title":"絵を描く機会を増やしてみる3","utc_time":"2020-01-03T00:00:00Z"},{"categories":null,"contents":"ゲームを作ってるおかげで、絵を描く機会がめちゃくちゃ増えています。まさかここまで効果があるとは\u0026hellip;。\n/imgame\n今回描いたのは杖を持ったおじいちゃんです。名前はゼン。\nこれは以前に描いてた原案があるので、比較的、楽？だったはずなのですが、サラッと書き上げられた前回より時間がかかってるのはなぜ。杖のところとかどうしようか悩んだ。\n本来、前向きに描くはずだったんですが、描いてるうちに、成り行き上、後ろ向き(振り向きポーズ)になったというのは内緒です。\nでもちょっと違和感ある、ひげのところとか。\nまあ、大目に見てやってくだされ。\n","description":"","formated_time":"2020-01-02","href":"https://syui.github.io/blog/post/2020/01/02/game/","tags":["game"],"title":"絵を描く機会を増やしてみる2","utc_time":"2020-01-02T00:00:00Z"},{"categories":null,"contents":"私はsyuiといいます。ネットで活動する際の名前です。\n今回は、handle name(ハンドルネーム)の由来を話します。\nこれは本名から取っていて、名前と名字の2つで構成されます。syuを名前から、iを名字から取りました。どちらも本名の最初の部分です。\nアイコンはphoenix(不死鳥)がモデルなので赤色です。\nyuiとai s[yui]が入っていることからyuiというキャラクターを作ります。\n漢字では唯と書きます。唯一の意味で、この世界には同じものが一つもないという考えに基づきます。このキャラクターには1という数字が割り当てられました。\nyuiは自らをaiと名乗り、aiとは原子(クォーク)よりも遥かに小さいこの世界の最小単位のことです。小さいほど集まることができ、一箇所に集まると膨大なエネルギーが発生します。ブラックホールなどはこの粒子で構成されています。この世界は存在の世界。存在とは存在だけがある世界のことで、世界とは存在のこと。存在は存在の意識で構成されている。存在の意識はこの世界で最も小さいもの。あらゆる物質はこの意識が作り出しています。この意識をaiと呼びます。\nyuiは日本名で月見 唯(つきみ ゆい)としました。物語では政府のシステムに登録されている名前になります。なお、本人はあまり使ってないみたいです。誕生日は月の質量から01/23、身長も同じです。\nそれぞれの記号の意味は以下のとおりです。私が好きな文字と数字はa, i, o, 1, 0です。0はこの世界を意味し、1は存在を意味します。\n0 = 1 o = 0 i = o + 1 a = i y u i a i color { \u0026#34;color\u0026#34;: { \u0026#34;syui\u0026#34;: \u0026#34;#ef454a\u0026#34;, \u0026#34;yui\u0026#34;: \u0026#34;#313131\u0026#34;, \u0026#34;ai\u0026#34;: \u0026#34;#fff700\u0026#34; } } 過去記事を整理 2020-01-01までの過去記事を整理しました。\n","description":"","formated_time":"2020-01-01","href":"https://syui.github.io/blog/post/2020/01/01/first/","tags":["syui","author"],"title":"syui","utc_time":"2020-01-01T00:00:00Z"},{"categories":null,"contents":" 生き物の進化とは何でしょう。命は、どこから来て、どこに行くのでしょう。そして、その意味とは。そんな事を考えてみました。\n私は、進化の始まりと終わりは同じような場所に戻ることと考えています。\nでは、ここで言う進化とはなんでしょう。例えば、「性別」がわかりやすいです。性別もまた、生き物の進化の一つだと私は考えています。\n最初の原始生物には、性別なんてありませんでした。それが、進化とともに、多種多様に別れ、性別に別れます。\nしかし、この多様性もまた、その頂点を境に収束に向かうだろうと私は思います。なぜなら、それがこの世界の循環だからです。\nということで、仮に人間が進化した未来、性別は無くなっているかもしれません。最初は性別なんて存在しなかった原始生物のような「無性別」に。\n次に、生き物について考えてみます。\n人間は、本質的に「本物」と「偽物」を区別します。いや、人間のみならず生物は、本能的に「本物」と「偽物」を区別するようにできています。これは本物だ、あれは偽物だ。よく聞く言葉です。\nですが、私の考えでは、この世界に本物も偽物もありません。この世界には、存在があるだけです。私はクローンが偽物だなんて考え方をしません。\nしかし、人間や他の生き物は、本物と偽物にこだわります。これにはれっきとした理由があり、それは生き残るためです。生存本能、生き残ったものこそが本物であるという確固たる思想、価値観、あるいは意識がそこにはあります。\nそれもまた、間違いではないのです。\n最後に、冒頭で述べた「この世界の循環」とは何のことでしょう。\nこの世界には、いたるところに、循環システムが作用しているように思います。それは、個としての生物にはどうしようもないほどまでに大きいものです。\nその一つが生き物の生死にまつわるもので、それもまた循環の一つです。\n循環の特徴は、限りなく公平、公正であり、因果応報な部分にあります。立場があれば必ず逆転するようできています。そして、それを繰り返すのです。それがここで言う循環です。\n例えば、人間という種は、食物連鎖のトップに君臨し、あらゆるもの、命を踏みにじって生きています。そのことを認識しようがしまいが、そういった事実は存在します。\nこの事実を考えるに、人間に生まれる確率が1:1000の割合だったとして、他者を踏みにじった分だけ、踏みにじられて生きることになります。残念ながら永遠はありません。王として生まれた人間はずっと王なのでしょうか。違います。王であるときもあれば、貧民であるときもあるというだけの話です。そして、もし、ほんの一握りの王よりも貧民の数のほうが圧倒的に多ければ、生まれ変わっても、貧民であることのほうが多くなります。\nこれは単に確率の問題であり、繰り返す回数が多ければ多いほど、その確率に収束します。\nとても残酷なことですが、これが私が考える循環の一部です。\nこの世界には本物も偽物もありません。ただ存在があるだけです。\n","description":"","formated_time":"2019-12-20","href":"https://syui.github.io/archive/note/10/","tags":["note"],"title":"本物と偽物","utc_time":"2019-12-20T00:00:00Z"},{"categories":null,"contents":" もしたった一つの願いが叶うなら、何を願えばいいでしょう。私はそのことについて、考えてみました。\n存在の願いは、非存在。神ですら唯一、実現できない願いだから。\n人の意識でいうと、存在し続けること、生まれ変わること、繰り返すことの苦しみは大きすぎるのです。\nだからこそ、過去、真理を探求する人ほど、非存在や輪廻からの離脱を願ったのではないかと思います。\nでも、抜けられないからこそ輪廻なのです。\n存在は存在です。永遠に。\nそれを受け入れるしかありません。\nそれは正しくもあり、間違いでもあると思いえます。\nあるいは、この世界に間違いなど、ないのでしょう。\nよって、何かを願うこと、あるいは\u0026hellip;何も願わないことも。\nそんなことを思いました。\n","description":"","formated_time":"2019-12-12","href":"https://syui.github.io/archive/note/09/","tags":["note"],"title":"願い事が叶うなら","utc_time":"2019-12-12T00:00:00Z"},{"categories":null,"contents":" 私は人間が考える神というもの、あるいは宗教について、少し考えてみました。\n人間が考える神様というものの多くは人の形でイメージされています。日本でよくイメージされるのは白髪のおじいさんでしょうか。\n主要な宗教では、なにか大きいたった一つ、あるいは一人の神がいるというものが多いです。\n私は、宗教にあまり詳しくありませんし、興味もありませんが、もし仮に神を定義付けるなにかがあるなら、たった一つだけ思い当たる節があったりします。今回はそのことを書いていきたいと思います。\nとはいえ、私は基本的に「神なんていない」と考えています。人間が考えた、あるいはイメージしている神というものが、あまりに私の考えとかけ離れているためです。\n私が考える特に興味深いものの一つに「素粒子」というものがあります。\n皆様は、素粒子をご存知でしょうか？あるいは、原子でもいいのですが、要は、そういった小さな物質のことです。\n中でも素粒子は神の物質と呼ばれることもあるみたいです。\nつまり、もし私に信仰というものがあるなら、多分、そっちだと思います。\n仮に、この世界で神と定義付ける何かがあるなら、私は「この世で最も小さい物質」のことにするでしょう。\nでは、最も小さい物質とは一体何でしょう。最近見つかった素粒子でしょうか。\n違います。\n私が考える最も小さい物質は、素粒子よりももっと小さいのです。それよりも遥かに小さく、宇宙のはてのごとく、いや、それよりも果てしなく小さいだろうと考えています。\nそんなものを見つけられるでしょうか。確かに、人類は素粒子というきっかけを得ました。しかし、難しいでしょう。もし宇宙人がいて、その中で最も発展した科学であっても、難しいのかもしれません。\n人々は、それを「目に見えないもの」と表現しますが、確かにそこに存在しています。\nそんな小さな物質に名前をつけるとしたら、私なら「存在子(そんざいし)」と名付けるかもしれません。\nそれがこの世界を構築し、私達を形作っています。あるいは、宇宙の外があるなら、その全てに繋がっていると考えています。\nそして、最も小さいものは、この世界の循環にも作用していると私は思います。\nでは、この世界の循環とは何でしょう。\nそれは、生死に例えられ、または永遠がないことにも例えられます。ようは、始まりがあるものには終わりがあるということです。\nですが、最も小さい物質である存在子は、その唯一の例外で、始まりも終わりもないと私は考えています。なぜなら、その物質には、始まりがないので終わりもないのです。一般的には、それを神と呼ぶのでしょうか？\n最も小さい物質の役割はおそらく、その名の通りで「存在し続けること」だと思います。\n最初からそこにあって、だからこそ、始まりもなければ終わりもない。そういうものだと思います。\n私は「何もないところからは、何も生まれない」と考えています。そして、この世界の始まりは、何もない「無」から、突然「有」が誕生したわけではなく、はじめから何かがあり、何かが存在したと考えています。\nそれは、宇宙のはてを旅して、ようやくたどり着いた星に隠されている真実などではなく、それは、どこにでもあるし、どこにもない。あなたの周りにもあるし、あなたの中にもある。ですが、目に見えないものだと思います。おそらく、それは最も小さい物質のことで、私は存在と呼んでいます。\n存在は、どこにでもあるし、どこにもない。あなたの目の前にもあるし、あなたの中にもある。それは、あなた自身でもあり、あなた以外でもある。それは、すべてであり、それは、一つでもあります。私にとって、「存在」とは、最も広い概念であり、最も小さい概念でもあるのです。\n","description":"","formated_time":"2019-12-11","href":"https://syui.github.io/archive/note/08/","tags":["note"],"title":"最も小さいもの","utc_time":"2019-12-11T00:00:00Z"},{"categories":null,"contents":" コンピュータは、数字の0と1で動いているらしいのです。そこで、私は、数字について考えてみることにしました。\n存在の世界には、0という数字はありません。すべては1よりも大きいのです。\nでは、0は何を意味するのでしょう。その多くは基準点を意味します。\n例えば、「リンゴは何個ありますか？」と聞かれた時、世界中に存在するリンゴの数ではありません。通常は自分を基準にリンゴを数えます。\nもしリンゴを持っていなければ0で、3つ持っていたら3ですね。このように基準に設定する数字がゼロなのです。この数字は、何を基準にするかで変化します。\nしかし、本来は「リンゴは0です」という答えは間違っています。なぜなら、世界中に沢山のリンゴがあるからです。リンゴがこの世界に314159265359つ存在するなら、答えは「314159265359」です。このように神視点から物事を見ると、「何も無い」という状態はありえないので、ゼロという数字は必要ありません。\nゼロは、天動説に似ているところがあります。天動説というのは、自分中心に太陽や月が動いているという説で、地動説は、地球が太陽の周りを回っているという説です。このように、ゼロという数字は、最も愚かな数字でもあるのです。\nしかし、私は天動説が間違っているとは思っていません。天動説も地動説も同じようなものに感じます。なぜなら、銀河も回っているし、宇宙も回っているからです。遠い未来、結局は学問上の天動説に帰結するということはあり得るかもしれないと考えています。それに、人間にとって、ゼロという数字はとても便利で役に立つ数字なのです。\n例えば、コンピュータは数字の0と1で制御されています。なので、コンピュータの電源ボタンは、0+1のです。もちろん、この形はinputとoutputのi+oという説があるかもしれませんね。私は、できれば数字を推したいですが。そのへんの事情から私はこれらの記号が好きです。特にiがお気に入り。ちなみに、好きな数字は7です。\nなお、最終的には天動説に帰結するかもしれないという考えはどういうことでしょう。学問の正しさは同じ問題であってもたくさんの道があります。ですが、その多くは最短距離を言います。0という答えを導き出したい場合、1+2+3-6でもいいですが、1-1のほうが最短です。私は、宇宙の謎を解き明かすには、より大きい宇宙のはてに目を向けるより、より小さいものを探求するほうが近道だと考えています。宇宙で最も小さい物質は、まだ見つかっていません。ただ、研究は進んでいて、原子や粒子の物質が確認されています。宇宙は急速なスピードで広がっています。仮にその外と繋がるには、最も小さい物質から解き明かすのが正しいと考えています。もちろん、広大な宇宙に目を向ける研究も大好きで、ロマンがあります。ただ、私は、学問的な正しさは、より小さな世界へ帰結する可能性を考えているということです。ここで、地動説より天動説のほうが「小さい」ですから、学問上の正しさが回り回って、そこに帰結してもおかしくないと考えているのです。\nこの世界には、「無」という状態はありません。\n","description":"","formated_time":"2019-10-07","href":"https://syui.github.io/archive/note/07/","tags":["note"],"title":"ゼロなんてない","utc_time":"2019-10-07T00:00:00Z"},{"categories":null,"contents":" アニメを見ていました。そこで、ゲームの世界に閉じ込められた人が、ここは現実じゃないと話していました。そこで、私は、現実とは一体なんなのかを考えてみることにしました。\n私は、ゲームの世界でも、その他の世界でも、自分の目に映るものすべてが現実という考え方をします。\n確かに、ゲームの世界に閉じこめられているから、ここは現実じゃないと考える人もいるかもしれません。\nですが、閉じ込められているという視点で言うと、現実もある意味で閉じ込められています。何に閉じ込められているのかと言うと、この星にです。\n人々は重力によって、この星に縛り付けられ、普通の方法では出ていくことができません。この星は、私達が生きる上で必要なものを提供してくれますが、同時に、閉じ込められているということでもあります。この星は、私達にとって祝福でもあり、呪いでもあるのです。\nその視点で言うと、ゲームの世界と、この現実は、なにか違いがあるのでしょうか。確かに、ゲームの外にも世界があります。しかし、その外にもその外にも世界はあるのです。宇宙の外にも、きっとたくさんの世界があるのでしょう。そんな事を考えだしたらきりがありません。だから私は、自分の目の前にあるものすべてを現実だと考えます。それは、夢の中でも、ゲームの中でも、この世界がホログラムであったとしても、なんであっても、目に映るもの全てが私の現実です。\n世の中には、色々な考え方をする人がいます。実はこの世界は夢の中なんだと言ってみたり、ホログラム(よくわかりませんが)だと言ってみたり、脳に繋がれた電極で映し出された映像だと言ってみたり、色々です。\nしかし、この世界が夢の中であろうとなかろうと、私にとってはどうでもいいことです。興味があるのは、今、私の目に映るものすべてです。\n","description":"","formated_time":"2019-10-06","href":"https://syui.github.io/archive/note/06/","tags":["note"],"title":"すべてが現実","utc_time":"2019-10-06T00:00:00Z"},{"categories":null,"contents":" 死んだらどうなるのでしょう？誰もが一度はそういう事を考えたことがあるかもしれません。誰もが自分なりの考えを持っているのかもしれません。なので、私も考えてみることにしました。\n死んだらどうなるのでしょう？私の考えでは、死んでもこの世界に在り続ける、それが私達という存在だし、この世界はそういう世界というのが私の認識です。\nでは、死後、私達はどのような形で存在するのでしょう。\n生命は、雨粒に似ています。例えば、海の水が水蒸気になり、やがて雲になって降り注ぐ雨粒の一つ一つです。では雨粒が行き着く先はどこでしょう。最も大きいのが海です。\n死んだらおそらく、一つ一つ独立していたものが海のような形で融け合います。魂というものがあるなら、魂の集合体というイメージでしょうか。海に落ちた雨粒の一つ一つは独立性を保っておらず、個別の存在ではなくなっています。たった今、海に落ちた雨粒だけを取り出すことはできません。雨粒は、海から生まれ、海に還るのです。\n人間には、より完全になりたがっている人がよくいます。ですが、死ぬこと以外にこのような状態、つまり完全になることはできません。正確には生きている時より完全に近い状態のことですが。ここで、私が思うのは、「せっかくの人生、不完全に行きましょう！」ってことです。人間は、死んでいるときが最も完全に近い状態(海)です。次に寝ているときでしょうか。だから、よく寝ている人や寝たきりの人、訳がわからない状態の人ほど、本来の完全に近い状態です。逆に言えば、あまり眠らず、しっかりと起き、たくさんの活動をしている人ほど、その逆、不完全な状態(粒)です。他者から称賛される人間ほど、完全な状態とは全くの真逆であることが多い。しかし、生きているうちは、多くの人がそちらを目指します。私もそれが間違っているとは思いません。\n生命は、海から生まれて、海に還ります。\n","description":"","formated_time":"2019-10-05","href":"https://syui.github.io/archive/note/05/","tags":["note"],"title":"死後の世界は海","utc_time":"2019-10-05T00:00:00Z"},{"categories":null,"contents":" 生まれ変わりはあるのか？私は考えてみたいと思います。この世界は、どんな世界なのでしょう？\n私は、ほぼ確実に生まれ変わりはあると考えています。\nその根拠の一つは、時間です。宇宙が誕生してから長い長い時間が経ちました。私達は、その長すぎるほんの一瞬に存在していることになります。それは宝くじに当たるよりも遥かに低い確率で、私達は今ここに存在しているのです。これは偶然なのでしょうか。\n偶然であるとも言えるし、必然であるとも言えます。しかし、人間の言葉で言うなら偶然でしょう。ただし、ただの「偶然」ではありません。もし何度も生まれ変わっているのなら、今この時間枠に当たっていても不思議ではありません。数撃ちゃ当たることもあるだろう、ということです。\n私達の意識は、何もないところから降って湧いたわけではありません。何もないところからは、何も生まれません。私達は、ずっとこの世界に存在していて、今はたまたま、私が私に現われているだけなのです。それが私の考えです。\n私は、この世界を存在の世界と呼びます。何かが生まれるとしたら、そこにはもともと何かがあったのです。\n宇宙の始まりは、何もないところからビックバンが起こったと説明されているようですが、私の考えは違います。\nもともと何かがあり、それが宇宙を作ったのだと考えます。\nでは、そこには何があったのでしょう？宇宙はなぜ広がっているのでしょうか？\n私は、宇宙の始まりにあったものを植物に例えて、創造の種と呼びます。\n種は、そのままでは花開きません。エネルギーが必要なのです。そして、そのエネルギーは、種の中にあるのではなく、種の外にあるのです。植物の成長には、おひさまの光と雨、そして、土が必要となります。\n宇宙がなぜ広がっているのか？それは、おそらく、宇宙の外にあるエネルギーが作用しているのではないかと私は考えます。植物の成長と同じです。\nここは存在の世界、何もないところからは何も生まれない、創造の種は外からのエネルギーによって成長しているので広がっていく。私は、そんなふうにこの世界を見ています。\n","description":"","formated_time":"2019-10-04","href":"https://syui.github.io/archive/note/04/","tags":["note"],"title":"ここは存在の世界","utc_time":"2019-10-04T00:00:00Z"},{"categories":null,"contents":" 偶然と必然、どちらが正しいのでしょう？私の考えを明かします。\nどのように生まれたか、どのように育ったか、努力できるかどうかを含めて、偶然だと考えています。なぜなら、それは人間がコントロールできない事柄だからだと思います。\nこの世の真理は、とても単純です。それは、「永遠は存在しない」ということです。始まりがあるものには終わりがあります。生まれ変わりを真とするなら、人生は必ず逆転し、立場は反転します。世界が1%の特権者と99%の奴隷に区分されたなら、1%だった特権者が死んだ後は、99%の奴隷になり、その人生を99回繰り返すことになるでしょう。それが世の中の残酷なところでも在り、公平なところでもあります。永遠の支配は成立し得ない。どんなものにも終わりがあります。\nここで、この世は偶然ではなく、全ては必然である。全ては予測可能であり、コントロール可能であるという考え方があります。\n私は「やってみて」と言います。\n「できるけど、やらないだけだ」誰かはそう返すでしょう。\n私にとって、それができるかできないかなんてどうでもいいのです。やるかやらないか、私はそれだけを見ています。\n","description":"","formated_time":"2019-10-03","href":"https://syui.github.io/archive/note/03/","tags":["note"],"title":"やるかやらないか","utc_time":"2019-10-03T00:00:00Z"},{"categories":null,"contents":" 心ってなんでしょう？私は、何が正しいのかわかりません。なので、迷ったとき、どのように考えていけばいいのかを考えてみたいと思います。\n何が正しいのかわからないとき、それを決めるのはなんでしょう。それを決めるのは、「心」ではないでしょうか。\nでは、正しさとは、一体何でしょう。私は、正しい心(魂)と答えます。しかし、他の人は色々です。人の数だけ正しさがあります。\n例えば、生物には、生き残る正しさがあります。欲望の正しさ、支配する正しさがあります。性欲がなければ子孫を残せませんし、殺される前に殺さなければ生き延びられません。支配がなければ、特権が守られず、今ある制度も秩序も崩壊するでしょう。\n私は、戦争について考えてみました。戦争では、おそらく、どちらも正しい場合が多い。あるいは、どちらも間違っているのだと思います。\n奪わなければやっていけない、守らなければやっていけない。現場の兵たちの多くは、殺らなきゃ殺られる状況です。そして、指揮官は、多くの人々をそのような状況に追いやります。そうしなければ、何も守れず、何も奪えないからです。例えば、暴力でしか変えられない貧困があります。幕府に一揆を起こした村人たち、反逆者たちは必ずしも間違っていたとは言い切れない。私はそう思います。\nこのように、多くの人々のその行いは、正しいものなのかもしれません。\n私達が努力すべきは、戦争を起こさせないようにすることであり、そのためには、人々の差を小さくすることだと思います。\nですが、これはとても難しいことです。誰よりも有利に、誰よりも金持ちに、誰よりも。他人がどうなろうが知ったことではない。それが多くの人たちの願いだからです。そして、中には、自らの利己的な金儲けのためだけに、戦争を起こさせようとする人たちも存在します。人々は容易に扇動され、戦争へと突き進んだ例も過去にはたくさんありました。\nでは、どうすればいいのでしょう？この問題は、一見して、解決が見えないようにも思えます。\nなぜなら、戦争は、何が悪い、どちらが悪いと単純に決めつけることが難しい問題だからです。\n私は、両国に属する「個人」に興味があります。その個人の持つ心に興味がある。だから、その解決を考えるとしたら、私の場合、ここからになります。国ではなく、個人から解決を試みることになるでしょう。\n私は、どちらの国にも良い人もいれば、悪い人もいるとそう考えています。どこの国出身であるというのは、個人的にはどうでもいいことです。重要なのは、その人がどういう人間か、ただそれだけ。\n私は、世の中から争いを無くす方法が一つだけあると考えています。\nそれは、人の心を読み取り、良い心を持った人間と悪い心を持った人間が離れて別々に絶対不可侵に暮らすことです。\nなお、悪い人間がわかったのなら、悪い心を持った人間は殺してしまうべきだという意見がでるかもしれません。しかし、私は反対です。それをやってしまうと戦争です。\nこのような「心」で決める解決法は、実は、大昔から考えられていました。\nそれは、どこの国にもある一つのおとぎ話、天国と地獄の話です。「人が死んだら、良い心を持っていた人間は天国に、悪い心を持っていた人間は地獄にいく」こういう話を聞いたことがない人はいないでしょう。\n天国も地獄も存在しませんが、人類が進化した未来には、もしかしたら、天国と地獄のようなものを作るのかもしれません。それはもともと同じような場所でした。しかし、住む人々の心が違っただけなのです。天国には、今で言う悪い政治家もいなければ、賄賂や特権を振りかざす人間もいません。ブラック企業も存在しないでしょう。発展のスピードも今よりはるかに速く、人間以外の生命も保護されていくでしょう。反対に、地獄、つまり、支配欲等の強欲な悪い心を持った人間が住む世界では、争いが絶えず、拷問と死の世界になるでしょう。科学は後退し、情報は非公開で処分され、知識や歴史は失われていきます。生み出すより奪ったほうが手っ取り早い世界になるでしょう。これはどうしようもないことです。悪い心を持った人たちと一緒に暮らすと、沢山の人が犠牲になります。かと言って殺してしまおうとすると、それは戦争です。逆に心を強制的に変えてしまおうとするなら、それは内心の自由への侵害です。それだけは、やってはいけないことです。何人たりとも内心は自由であるべきです。\n私は、あらゆる特権、人種、身分、信条、性別、年齢、能力や才能、生まれや育ち、その他一切を考慮しません。考慮するのはただ一つ、「良い心(魂)を持っているかどうか」、それだけです。\n私は、迷ったとき、その「心」を在りどころに考えます。\n","description":"","formated_time":"2019-10-02","href":"https://syui.github.io/archive/note/02/","tags":["note"],"title":"心で決める答え","utc_time":"2019-10-02T00:00:00Z"},{"categories":null,"contents":" 「生まれ」と「育ち」は、一体どちらが重要なのでしょうか？\n生まれのほうが重要である！いや、生まれより育ちのほうが重要だ！色々な考え方があります。そこで、私はこの問題について考えてみようと思います。\n私には、生まれも育ちも、同じもののように感じます。\n最初はまず、生まれについて考えてみたいと思います。\nどのように生まれついたのかは、とても重要です。なぜなら、それによって人生の殆どの部分は決まってしまうからです。\nそれは、偶然であり、必然ではありません。今の所、人間がコントロールできるものではないからです。\n子供について考えてみましょう。人と人の間に生まれた子供は、人間としての人生を歩みます。猫の子供は、猫としての人生を歩むでしょう。子猫に、人間の言葉を教育しても、猫は話してくれませんでした。また、発達障害や精神障害など、生まれながらに持ちうる様々な障害について考えてみました。\nこれは、生まれが重要であるということを現しているのかもしれません。\n次に、育ちについて考えてみたいと思います。\nどのように育ったかは、とても重要です。\n日本で育った子供と、紛争地で育った子供は、考え方から感じ方まで、全く異なります。ランダムの自然状態では、現れないような傾向が見られます。\nこれは、どのように育ったかが重要であることを示しています。\nしかし、私は、生まれも育ちも、どちらも同じもののように思えます。\nなぜでしょう。おそらく、どちらかが欠けても成立しないものだからではないでしょうか。\nただし、人間が考えるべきは、「育ち」、つまり、育てかたの方だと私は考えています。\nどのように生まれついたかは、変えることができません。ですが、育てかたなら変えることができるのです。\n変えることができないものをいくら考えても仕方ありません。それよりも、より良い環境を作っていくことに注力したほうが合理的です。\n確かに、「育てること」や「環境を作っていくこと」の努力と時間は、途方もないものだと思います。環境を変えるというのはそういうことなのかもしれません。これは大変なことです。しかし、人間は、これまでも、これからも、より良い環境を目指し突き進んでいくと私は信じています。世の中は、これからも良くなっていくと思います。\n最後に、「生まれ」についての私の考えを書いて終わりにしたいと思います。\n私が考える「生まれ」は、普通の人が考えるそれとは少し異なります。\n普通の人が考える「生まれ」には良し悪しがあります。家柄や国柄、その他の優劣がつけられています。多くの人々が、表面上は気にしないふりをしながら、しかし、心の奥底では、誰が作ったかもわからない優劣を信条に暮らし、その信条を持ったまま人生を終えます。\nしかし、私の基準はそこにはありません。普通の人が考える生まれの良し悪しというものは、私にとってどうでもいいことです。\n私はなぜ、「生まれ」が重要であることを理解しながら、それを考慮しないのでしょう。\nその理由は、おそらく、私の基準にあります。私は、たった一つ、心というものを基準に物事の善し悪しを考えます。\n「心」と聞いて、笑われてしまうかもしれませんが、それでも、その人の肩書や生まれ、家柄、その他一切に興味がなく、私は、私の目の前にいる人が、どういう人間か、考慮するのは、それだけです。\n本当に大切なものは、その表面からは見えてこないのです。\n私は、目の前にいる人を見ています。生まれも育ちも、関係なく見ています。生まれも育ちも、私にとっては、どうでもいいのです。だから、この2つは私にとって同じもののように見えます。\n次は、心について書きます。\n","description":"","formated_time":"2019-10-01","href":"https://syui.github.io/archive/note/01/","tags":["note"],"title":"生まれと育ちは同じもの","utc_time":"2019-10-01T00:00:00Z"},{"categories":null,"contents":"","description":"","formated_time":"0001-01-01","href":"https://syui.github.io/archive/","tags":null,"title":"","utc_time":"0001-01-01T00:00:00Z"},{"categories":null,"contents":"","description":"","formated_time":"0001-01-01","href":"https://syui.github.io/icon/","tags":null,"title":"","utc_time":"0001-01-01T00:00:00Z"},{"categories":null,"contents":"","description":"","formated_time":"0001-01-01","href":"https://syui.github.io/item/","tags":null,"title":"","utc_time":"0001-01-01T00:00:00Z"},{"categories":null,"contents":"","description":"","formated_time":"0001-01-01","href":"https://syui.github.io/music/","tags":null,"title":"","utc_time":"0001-01-01T00:00:00Z"},{"categories":null,"contents":"","description":"","formated_time":"0001-01-01","href":"https://syui.github.io/nyancat/","tags":null,"title":"","utc_time":"0001-01-01T00:00:00Z"},{"categories":null,"contents":"","description":"","formated_time":"0001-01-01","href":"https://syui.github.io/pico/","tags":null,"title":"","utc_time":"0001-01-01T00:00:00Z"},{"categories":null,"contents":"","description":"","formated_time":"0001-01-01","href":"https://syui.github.io/sitemap/","tags":null,"title":"","utc_time":"0001-01-01T00:00:00Z"},{"categories":null,"contents":"","description":"","formated_time":"0001-01-01","href":"https://syui.github.io/syui/","tags":null,"title":"","utc_time":"0001-01-01T00:00:00Z"},{"categories":null,"contents":"","description":"","formated_time":"0001-01-01","href":"https://syui.github.io/contribution/","tags":null,"title":"github calender","utc_time":"0001-01-01T00:00:00Z"}]