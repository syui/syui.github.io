<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ue on syui.github.io</title>
    <link>https://syui.github.io/tags/ue/</link>
    <description>Recent content in Ue on syui.github.io</description>
    <generator>Hugo</generator>
    <language>ja-jp</language>
    <copyright>&amp;copy; syui</copyright>
    <lastBuildDate>Sat, 10 May 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://syui.github.io/tags/ue/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>world system v1</title>
      <link>https://syui.github.io/blog/post/2025/05/10/planet/</link>
      <pubDate>Sat, 10 May 2025 00:00:00 +0000</pubDate>
      <guid>https://syui.github.io/blog/post/2025/05/10/planet/</guid>
      <description>&lt;p&gt;今回は、ゲーム制作の各システムのナンバリングを付けました。その話をしていこうと思います。&lt;/p&gt;&#xA;&lt;p&gt;ゲームはいくつかのシステムで分割されています。&lt;code&gt;world system(planet)&lt;/code&gt;, &lt;code&gt;ai system(ability)&lt;/code&gt;, &lt;code&gt;yui system(unique)&lt;/code&gt;, &lt;code&gt;at system(account)&lt;/code&gt;です。&lt;/p&gt;&#xA;&lt;p&gt;ゲームの方向性は「現実の反映」にあります。world systemは「平面ではなく立体(惑星)」にするためのものです。例えば、「地球から抜け月に行ける」ようなものを想定してください。ゲームエンジンは平面を前提として作られていますから上を目指して飛び続けても地平線が広がっているだけで月にたどり着くことはありません。これを変更してワールドを現実に合わせることが目標です。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/syui/img/master/other/ue-planet-system_2025-05-11%20044020.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;これが今回、いい感じにできてきたので、そろそろナンバリングをつけようと思い、付けてみました。&lt;/p&gt;&#xA;&lt;p&gt;以前のplanet systemと比べると、見栄えはあまり良くありませんが、いくつかの問題が解消されています。以前はatmosphereとudsだけで頑張っており、大気圏で地球のアクターを切り替え表示していました。しかし、今回はそのままの実物が表示されています。また、横から惑星に入ってもちゃんと地表に降りれるようになっています。また、月面もちゃんとしたものを作り、月面着陸できるようになりました。前は球体のままで凸凹、クレーターはありませんでした。手動で作るのも困難なので放置していたところ、worldscapeを使い解決しています。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/syui/img/master/other/ue-planet-system_2025-05-11%20044121.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;json&#34;&gt;json&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ai.verse&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;ai&amp;#34;&lt;/span&gt;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;verse&amp;#34;&lt;/span&gt;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;ue&amp;#34;&lt;/span&gt;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;system&amp;#34;&lt;/span&gt;: [&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;world&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;planet&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;at&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;account&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;yui&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;unique&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;ai&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ability&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          ]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- &lt;span style=&#34;color:#ae81ff&#34;&gt;ai.verse&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &lt;span style=&#34;color:#ae81ff&#34;&gt;ai.ue&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        - &lt;span style=&#34;color:#ae81ff&#34;&gt;ai.system&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ai.verse.ue.system.world&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/syui/img/master/other/ue-planet-system_2025-05-11%20044040.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;iframe width=&#34;100%&#34; height=&#34;415&#34; src=&#34;https://www.youtube.com/embed/TQZ_DgcTuhs?rel=0&amp;showinfo=0&amp;controls=0&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; allowfullscreen&gt;&lt;/iframe&gt;</description>
    </item>
    <item>
      <title>ue5のpixel streaming2に移行する</title>
      <link>https://syui.github.io/blog/post/2025/01/21/pixelstreaming/</link>
      <pubDate>Tue, 21 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://syui.github.io/blog/post/2025/01/21/pixelstreaming/</guid>
      <description>&lt;p&gt;ue5のplugin(server)のpixel streaming2ですが、情報がどこにもないので移行方法を書きます。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/EpicGamesExt/PixelStreamingInfrastructure/blob/master/Docs/pixel-streaming-2-migration-guide.md&#34;&gt;https://github.com/EpicGamesExt/PixelStreamingInfrastructure/blob/master/Docs/pixel-streaming-2-migration-guide.md&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;まず、2では&lt;code&gt;WebRTC&lt;/code&gt;, &lt;code&gt;Matchmaker&lt;/code&gt;が削除されます。そして、app-package.exeの引数がそのままでは動きません。また、serverのconfig.json, scriptが変更されています。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;projectのpluginで&lt;code&gt;pixel streaming&lt;/code&gt;をdisableにし、&lt;code&gt;pixel streaming2&lt;/code&gt;をenableにする。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;これをpackage buildして、app.exeを作ります。そして、引数は以下のようにしてください。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;なお、sshなどで作業している場合はfirewallの許可が出ませんので、local-desktopで作業してください。または手動でruleを更新してください。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./$project/Windows/app.exe -PixelStreamingSignallingURL&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ws://127.0.0.1:8888&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;&#xA;&lt;li&gt;次にserverの初期設定です。scriptがだいぶ変更されていますし、引数も変わっています。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# git clone https://github.com/EpicGamesExt/PixelStreamingInfrastructure.git&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git clone --branch UE5.5 https://github.com/EpicGamesExt/PixelStreamingInfrastructure.git&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cd PixelStreamingInfrastructure/SignallingWebServer/platform_scripts/cmd&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ./setup.bat&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ./start.bat&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;4&#34;&gt;&#xA;&lt;li&gt;&lt;code&gt;config.json&lt;/code&gt;の書き換えと起動。特に注意すべきは&lt;code&gt;http_root&lt;/code&gt;です。Publicからwwwに変更されています。pathにも注意してください。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cd PixelStreamingInfrastructure/SignallingWebServer&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ vim config.json&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ npm start -- --public_ip localhost&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>ue5でasian dragonを動かす</title>
      <link>https://syui.github.io/blog/post/2025/01/08/ue5-animal/</link>
      <pubDate>Wed, 08 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://syui.github.io/blog/post/2025/01/08/ue5-animal/</guid>
      <description>&lt;p&gt;ue5でasian(chinese) dragonを動かそうとしてます。&lt;/p&gt;&#xA;&lt;p&gt;&lt;video controls style=&#34;width:100%;&#34;&gt;&lt;source src=&#34;https://raw.githubusercontent.com/syui/img/master/movie/ue5_controlrigsample_dragon_player.mp4&#34;&gt;&lt;/video&gt;&lt;/p&gt;&#xA;&lt;p&gt;これはcontrol rigを使い簡単に実装したものです。&lt;a href=&#34;https://www.fab.com/listings/2ce3fe44-9ee6-4fa7-99fc-b9424a402386&#34;&gt;control rig sample&lt;/a&gt;にはdragonがあります。&lt;code&gt;CR_Dragon&lt;/code&gt;の&lt;code&gt;head_global_ctrl&lt;/code&gt;をABPで動かしています。&lt;code&gt;dynamic&lt;/code&gt;をtrueにします。Characterの&lt;code&gt;Get Actor Up Vector&lt;/code&gt;からcontrol rigに値を入れ操作します。視点(Actor)を適切に動かすと一回転もできます。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://blueprintue.com/blueprint/o3glwh72/&#34;&gt;https://blueprintue.com/blueprint/o3glwh72/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;しかし、色々と問題があります。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;現状、視点を動かさないと自然に動かない。vector-yの値を1秒ごとに上下に動かすなどしたほうがいい&lt;/li&gt;&#xA;&lt;li&gt;human(flying) playerに被せているためcollisionがその範囲にとどまるため尻尾などが床をすり抜ける&lt;/li&gt;&#xA;&lt;li&gt;game animation sample(GAS)との統合はさらに大変&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;GASではhumanのIK_Rigを無理やり当てはめています。壁などは登れますが、動きが破綻しています。&lt;/p&gt;&#xA;&lt;p&gt;&lt;video controls style=&#34;width:100%;&#34;&gt;&lt;source src=&#34;https://raw.githubusercontent.com/syui/img/master/movie/ue5_gameanimationsample_animal_player.mp4&#34;&gt;&lt;/video&gt;&lt;/p&gt;&#xA;&lt;p&gt;この辺をどのように統合していくか。今のところ&lt;a href=&#34;https://www.fab.com/ja/listings/d3f8d256-d8d9-4d27-91c1-c61e55e984a6&#34;&gt;dragon ik plugin&lt;/a&gt;を試してみようと思っています。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/codehawk64/DragonIK-UE5MotionMatching-Template&#34;&gt;https://github.com/codehawk64/DragonIK-UE5MotionMatching-Template&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://dragonik.eternalmonke.com&#34;&gt;https://dragonik.eternalmonke.com&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>ue5.5.1でps5 controllerを使う</title>
      <link>https://syui.github.io/blog/post/2024/12/29/ue-ps5/</link>
      <pubDate>Sun, 29 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://syui.github.io/blog/post/2024/12/29/ue-ps5/</guid>
      <description>&lt;p&gt;基本的には&lt;code&gt;Game Input for Windows&lt;/code&gt;というpluginを使います。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://dev.epicgames.com/community/learning/tutorials/EpZ4/unreal-engine-game-input-for-windows-experimental-release-notes&#34;&gt;https://dev.epicgames.com/community/learning/tutorials/EpZ4/unreal-engine-game-input-for-windows-experimental-release-notes&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh:$project/Config/DefaultInput.ini&#34; data-lang=&#34;sh:$project/Config/DefaultInput.ini&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;[/Script/GameInputBase.GameInputDeveloperSettings]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+DeviceConfigurations&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;(DeviceIdentifier=(VendorId=1356,ProductId=3302),Description=&amp;#34;PS5 DualSense controller&amp;#34;,bOverrideHardwareDeviceIdString=True,OverriddenHardwareDeviceId=&amp;#34;DualSense&amp;#34;,bProcessControllerButtons=True,bProcessControllerSwitchState=True,bProcessControllerAxis=True,ControllerButtonMappingData=((1, &amp;#34;Gamepad_FaceButton_Left&amp;#34;),(2, &amp;#34;Gamepad_FaceButton_Bottom&amp;#34;),(4, &amp;#34;Gamepad_FaceButton_Right&amp;#34;),(8, &amp;#34;Gamepad_FaceButton_Top&amp;#34;),(16, &amp;#34;Gamepad_LeftShoulder&amp;#34;),(32, &amp;#34;Gamepad_RightShoulder&amp;#34;),(64, &amp;#34;Gamepad_LeftTrigger&amp;#34;),(128, &amp;#34;Gamepad_RightTrigger&amp;#34;),(256, &amp;#34;Gamepad_Special_Left&amp;#34;),(512, &amp;#34;Gamepad_Special_Right&amp;#34;),(1024, &amp;#34;Gamepad_LeftThumbstick&amp;#34;),(2048, &amp;#34;Gamepad_RightThumbstick&amp;#34;),(8192, &amp;#34;Gamepad_Special_Left&amp;#34;)),ControllerAxisMappingData=((0, (KeyName=&amp;#34;Gamepad_LeftX&amp;#34;,DeadZone=0.239532,bIsPackedPositveAndNegative=True)),(1, (KeyName=&amp;#34;Gamepad_LeftY&amp;#34;,Scalar=-1.000000,bIsPackedPositveAndNegative=True)),(2, (KeyName=&amp;#34;Gamepad_RightX&amp;#34;,bIsPackedPositveAndNegative=True)),(3, (KeyName=&amp;#34;Gamepad_LeftTriggerAxis&amp;#34;)),(4, (KeyName=&amp;#34;Gamepad_RightTriggerAxis&amp;#34;,DeadZone=0.239532)),(5, (KeyName=&amp;#34;Gamepad_RightY&amp;#34;,Scalar=-1.000000,bIsPackedPositveAndNegative=True))))&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;しかし、問題は動かないことです。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;GAME_INPUT_SUPPORT is false!&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;なぜかというと、&lt;code&gt;GDK&lt;/code&gt;をインストールしたうえで、&lt;code&gt;Microsoft.GameInput&lt;/code&gt;をインストールしなければならず、かつ、GDKはEngineをbuildしないとpathを認識しないからです。この際、念の為にprojectの&lt;code&gt;sln&lt;/code&gt;もrebuildしましょう。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;As of the March 2024 GDK release, the GDK installer no longer installs the GameInput libraries.&lt;/p&gt;&#xA;&lt;p&gt;If you’re targeting PC, add the Microsoft.GameInput NuGet package (NuGet Gallery | Microsoft.GameInput 0.2303.22621.3038) to your solution. Run the NuGet package’s GameInput redistributable MSI to ensure that you have the latest runtime. Although the runtime is included in Windows May 2020 Updates and later, running the MSI will ensure that you have the latest version.&#xA;Include this redistributable in game installers to ensure that GameInput is available on all supported versions of Windows.&amp;quot;&lt;/p&gt;</description>
    </item>
    <item>
      <title>ue5.5で作り直す</title>
      <link>https://syui.github.io/blog/post/2024/11/19/ue55/</link>
      <pubDate>Tue, 19 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://syui.github.io/blog/post/2024/11/19/ue55/</guid>
      <description>&lt;p&gt;&lt;code&gt;city sample&lt;/code&gt;にearth system(solar system)を組み込みます。具体的には惑星(planet)の形式でmapを作成し、空から宇宙に出ても問題ないようにすることを目指します。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;海 : &lt;code&gt;ocean waves&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;空 : &lt;code&gt;ultra dynamic sky&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;city-sample&#34;&gt;city sample&lt;/h2&gt;&#xA;&lt;p&gt;5.5からcrashする回数が大幅に減りました。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;/Map/Small_City_LVL&lt;/code&gt;を使います。&lt;code&gt;ground*&lt;/code&gt;を探して削除します。これは海面にplane(平面)を設置しています。&lt;/p&gt;&#xA;&lt;p&gt;止まっている車を&lt;code&gt;c&lt;/code&gt;で運転できるようですが、これは&lt;code&gt;BP_Player&lt;/code&gt;の機能です。使用するには後述する&lt;code&gt;game animation sample&lt;/code&gt;に統合する必要があるでしょう。&lt;/p&gt;&#xA;&lt;p&gt;playerstart(tag)をいくつか設置し、uiで選択してteleportできるようにします。instance data(config)に名前を保存して呼び出してもいいし、mapから値を取ってきてもいいです。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://blueprintue.com/blueprint/3h8qi0ep/&#34;&gt;https://blueprintue.com/blueprint/3h8qi0ep/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;いくつかの建物を追加します。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;/Levels/DefaultLevel&lt;/li&gt;&#xA;&lt;li&gt;/AutomotiveBridgeScene/Bridge_P&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;街頭は&lt;code&gt;BP_CurvedBride&lt;/code&gt;で&lt;code&gt;Lamp_0x&lt;/code&gt;を変更します。SMで&lt;code&gt;streetLampC&lt;/code&gt;を選択して位置を調整します。また、すり抜けるのでマトリックスでcollisionを設定してください。よくわからない場合は後述する&lt;code&gt;twinmotion&lt;/code&gt;を参考にしてください。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://git.syui.ai/ai/ue/raw/branch/main/img/ue-2024-10-31-151413.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;automatedperftesting&#34;&gt;AutomatedPerfTesting&lt;/h3&gt;&#xA;&lt;p&gt;&lt;code&gt;AutomatedPerfTesting&lt;/code&gt;は5.5で追加されたpluginです。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Experimental release of Automated Perf Testing Plugin v0.1, providing Gauntlet Test Controllers, UAT Test Nodes, and BuildGraph macros for adding common automated performance tests to a project&amp;rsquo;s automated build and test.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://dev.epicgames.com/documentation/ja-jp/unreal-engine/unreal-engine-5.5-release-notes&#34;&gt;https://dev.epicgames.com/documentation/ja-jp/unreal-engine/unreal-engine-5.5-release-notes&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Plugins/AutomatedPerfTesting&#34;&gt;https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Plugins/AutomatedPerfTesting&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;そのうち解消されると思いますが、現在(2024-11-18)、&lt;code&gt;city sample&lt;/code&gt;はbuildできません。&lt;code&gt;Engine/Plugins/Performance/AutomatedPerfTesting&lt;/code&gt;に&lt;code&gt;AutomatedPerfTestConfig.cs&lt;/code&gt;, &lt;code&gt;AutomatedPerfTestNode.cs&lt;/code&gt;が含まれていないため&lt;code&gt;${project}/Build/Script/CitySample.Automation.csproj&lt;/code&gt;に記述されているcompileが通らないのです。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;Project&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Sdk=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Microsoft.NET.Sdk&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;Import&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Project=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CitySample.Automation.csproj.props&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Condition=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Exists(&amp;#39;CitySample.Automation.csproj.props&amp;#39;)&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;PropertyGroup&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;TargetFramework&amp;gt;&lt;/span&gt;net8.0&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/TargetFramework&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/PropertyGroup&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;ItemGroup&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;Compile&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Include=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$(EngineDir)\Plugins\Performance\AutomatedPerfTesting\Build\Scripts\AutomatedPerfTestConfig.cs&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;Compile&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Include=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$(EngineDir)\Plugins\Performance\AutomatedPerfTesting\Build\Scripts\AutomatedPerfTestNode.cs&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/ItemGroup&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/Project&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これはgithubにあるsrcから持ってくるしかありません。アクセスするにはorgに&lt;a href=&#34;https://www.unrealengine.com/en/ue-on-github&#34;&gt;参加&lt;/a&gt;します。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ue5.5と最新のvmc事情</title>
      <link>https://syui.github.io/blog/post/2024/10/02/vrm4u/</link>
      <pubDate>Wed, 02 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://syui.github.io/blog/post/2024/10/02/vrm4u/</guid>
      <description>&lt;p&gt;unreal engine 5.5.0 preview(ue5.5p)がインストールできるようになっています。今回は最新環境のvmc事情を解説します。&lt;/p&gt;&#xA;&lt;h2 id=&#34;vmcとは&#34;&gt;vmcとは&lt;/h2&gt;&#xA;&lt;p&gt;webカメラから表情や動きをキャラクターに反映させるためのものです。vmcはprotocolとclientがあります。大抵はprotocolを指します。webカメラからの読み取りをcaptureといいます。つまり、captureとprotocolとclientを組みわせて動作します。ueで使うには更にvmcを受信してキャラクターに反映させるpluginが必要です。わけがわからないと思いますが、そんな感じです。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/sh-akira/VirtualMotionCapture&#34;&gt;https://github.com/sh-akira/VirtualMotionCapture&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/ruyo/VRM4U&#34;&gt;https://github.com/ruyo/VRM4U&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/HAL9HARUKU/VMC4UE&#34;&gt;https://github.com/HAL9HARUKU/VMC4UE&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/HAL9HARUKU/ueOSC&#34;&gt;https://github.com/HAL9HARUKU/ueOSC&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/HAL9HARUKU/VRMMapExporter&#34;&gt;https://github.com/HAL9HARUKU/VRMMapExporter&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/vrm-c/UniVRM&#34;&gt;https://github.com/vrm-c/UniVRM&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;vmc4ueをue55でbuildしてみよう&#34;&gt;vmc4ueをue5.5でbuildしてみよう&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;この手順は興味がある人以外は読み飛ばすことを推奨します。表情を動かしたい人はこの方法で問題を解決することができません。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;code&gt;vmc4ue&lt;/code&gt;はue5.1までしかbuildされていません。そこでue5.5でbuildして使えるようにしてみます。&lt;/p&gt;&#xA;&lt;p&gt;まずc++でprojectを作成し、patchをsrcに当てて&lt;code&gt;$project/Plugins/&lt;/code&gt;に入れます。projectをueで開くとbuildされます。正常に終了するとeditorが開きます。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;c++で作成したprojectには$project.slnが作成されますので、それを開いてrebuildしてもいいです。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;なお、patchはbuildが通るよう適当に作ったものです。vmcは動きますが、表情は動きませんでした。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp:VMC4UEBlueprintFunctionLibrary.cpp.patch&#34; data-lang=&#34;cpp:VMC4UEBlueprintFunctionLibrary.cpp.patch&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--- ./VMC4UE/VMC4UE/Source/VMC4UE/Source/VMC4UEBlueprintFunctionLibrary.cpp&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+++ ./VMC4UEBlueprintFunctionLibrary.cpp&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;@@ -119,27 +119,29 @@ UVMC4UEStreamingSkeletalMeshTransform* UVMC4UEBlueprin&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt; &#x9;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#x9;&#x9;return nullptr;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+&#x9;UVMC4UEStreamingSkeletalMeshTransform* StreamingSkeletalMeshTransform = nullptr;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+&#x9;// Try to get existing transform&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt; &#x9;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&#x9;&#x9;// Get&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt; &#x9;&#x9;FRWScopeLock RWScopeLock(OSCManager-&amp;gt;RWLock, FRWScopeLockType::SLT_ReadOnly);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&#x9;&#x9;auto StreamingSkeletalMeshTransform = OSCManager-&amp;gt;StreamingSkeletalMeshTransformMap.Find(Port);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&#x9;&#x9;if (StreamingSkeletalMeshTransform != nullptr)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+&#x9;&#x9;auto FoundTransform = OSCManager-&amp;gt;StreamingSkeletalMeshTransformMap.Find(Port);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+&#x9;&#x9;if (FoundTransform != nullptr)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt; &#x9;&#x9;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&#x9;&#x9;&#x9;return *StreamingSkeletalMeshTransform;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+&#x9;&#x9;&#x9;return *FoundTransform;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt; &#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+&#x9;// Create new transform if not found&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt; &#x9;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&#x9;&#x9;// Create&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt; &#x9;&#x9;FRWScopeLock RWScopeLock(OSCManager-&amp;gt;RWLock, FRWScopeLockType::SLT_Write);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&#x9;&#x9;auto StreamingSkeletalMeshTransform = OSCManager-&amp;gt;StreamingSkeletalMeshTransformMap.Find(Port);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&#x9;&#x9;if (StreamingSkeletalMeshTransform != nullptr)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+&#x9;&#x9;auto FoundTransform = OSCManager-&amp;gt;StreamingSkeletalMeshTransformMap.Find(Port);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+&#x9;&#x9;if (FoundTransform != nullptr)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt; &#x9;&#x9;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&#x9;&#x9;&#x9;return *StreamingSkeletalMeshTransform;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+&#x9;&#x9;&#x9;return *FoundTransform;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt; &#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&#x9;&#x9;UVMC4UEStreamingSkeletalMeshTransform* NewStreamingSkeletalMeshTransform = NewObject&amp;lt;UVMC4UEStreamingSkeletalMeshTransform&amp;gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&#x9;&#x9;//FRWScopeLock RWScopeLock2(NewStreamingSkeletalMeshTransform-&amp;gt;RWLock, FRWScopeLockType::SLT_Write);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+&#x9;&#x9;UVMC4UEStreamingSkeletalMeshTransform* NewStreamingSkeletalMeshTransform = NewObject&amp;lt;UVMC4UEStreamingSkeletalMeshTransform&amp;gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt; &#x9;&#x9;OSCManager-&amp;gt;StreamingSkeletalMeshTransformMap.Emplace(Port, NewStreamingSkeletalMeshTransform);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#x9;&#x9;// Bind Port&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;@@ -149,9 +151,10 @@ UVMC4UEStreamingSkeletalMeshTransform* UVMC4UEBlueprin&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#x9;&#x9;OSCManager-&amp;gt;OscReceivers.Emplace(OscReceiver);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&#x9;&#x9;return NewStreamingSkeletalMeshTransform;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+&#x9;&#x9;StreamingSkeletalMeshTransform = NewStreamingSkeletalMeshTransform;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt; &#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&#x9;return nullptr;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+&#x9;return StreamingSkeletalMeshTransform;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; void UVMC4UEBlueprintFunctionLibrary::RefreshConnection(float Seconds)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp:VMC4UEBoneMappingAssetFactory.cpp.patch&#34; data-lang=&#34;cpp:VMC4UEBoneMappingAssetFactory.cpp.patch&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--- ./VMC4UE/Source/VMC4UEEd/Source/VMC4UEBoneMappingAssetFactory.cpp&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+++ ./VMC4UEBoneMappingAssetFactory.cpp&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;@@ -5,6 +5,8 @@&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt; #include &amp;#34;../../VMC4UE/Include/VMC4UEStreamingData.h&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; #include &amp;#34;Dom/JsonObject.h&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; #include &amp;#34;JsonObjectConverter.h&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+#include &amp;#34;UObject/ConstructorHelpers.h&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+#include &amp;#34;UObject/UObjectGlobals.h&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; UVMC4UEBoneMappingAssetFactory::UVMC4UEBoneMappingAssetFactory(const FObjectInitializer &amp;amp;ObjectInitializer)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     : Super(ObjectInitializer)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;@@ -26,11 +28,12 @@&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;     return UVMC4UEVRMMapping::StaticClass();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt; UObject *UVMC4UEBoneMappingAssetFactory::FactoryCreateText(UClass *InClass, UObject *InParent, FName InName, EObjectFlags Flags, UObject *Context, const TCHAR *Type, const TCHAR *&amp;amp;Buffer, const TCHAR *BuferEnd, FFeedbackContext *Warn)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     FString TextData = FString(Buffer);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-    UVMC4UEVRMMapping *NewAsset = CastChecked&amp;lt;UVMC4UEVRMMapping&amp;gt;(StaticConstructObject_Internal(InClass, InParent, InName, Flags));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+    UVMC4UEVRMMapping* NewAsset = NewObject&amp;lt;UVMC4UEVRMMapping&amp;gt;(InParent, InClass, InName, Flags);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt;     if (!IsValid(NewAsset))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         return nullptr;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git clone https://github.com/HAL9HARUKU/VMC4UE&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ patch -u ./VMC4UE/VMC4UE/Source/VMC4UE/Source/VMC4UEBlueprintFunctionLibrary.cpp &amp;lt; VMC4UEBlueprintFunctionLibrary.cpp.patch&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ patch -u ./VMC4UE/VMC4UE/Source/VMC4UEEd/Source/VMC4UEBoneMappingAssetFactory.cpp &amp;lt; VMC4UEBoneMappingAssetFactory.cpp.patch&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;vrm4uを55向けにbuildしてみる&#34;&gt;vrm4uを5.5向けにbuildしてみる&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;この手順は興味がある人以外は読み飛ばすことを推奨します。表情を動かしたい人はこの方法で問題を解決することができません。&lt;/p&gt;</description>
    </item>
    <item>
      <title>obs&#43;discord&#43;beatriceを使う</title>
      <link>https://syui.github.io/blog/post/2024/09/01/voice/</link>
      <pubDate>Sun, 01 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://syui.github.io/blog/post/2024/09/01/voice/</guid>
      <description>&lt;p&gt;obsは配信のためのアプリですが、windowsで使えるマイクがないので、iphoneかmacを使って音声変換してdiscordから取ってみた。このやり方がすごく良かった。あと後述する&lt;a href=&#34;https://chihaya369.booth.pm/&#34;&gt;ちやは神社&lt;/a&gt;が配布しているrvc modelがすごかった。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/w-okada/voice-changer&#34;&gt;https://github.com/w-okada/voice-changer&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://huggingface.co/wok000/vcclient000/tree/main&#34;&gt;https://huggingface.co/wok000/vcclient000/tree/main&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./start_http.command&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://booth.pm/ja/items/4701666&#34;&gt;https://booth.pm/ja/items/4701666&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;まずマイクに近づかないと音を取れないのがきつい。なので離れていても音を取るのがいい。最初はiphone(discord)からwindowsに繋いだらかなり離れててもしっかりと音を取れてよかった。&lt;/p&gt;&#xA;&lt;p&gt;ただ、音声変換があまりうまくいかなくて、obsのVST Pluginだったかを使うのは厳しいと感じた。なので、方向を変えてmac(discord)から接続することにした。&lt;/p&gt;&#xA;&lt;p&gt;macのgaragebandによる音声変換も使えるけど、beatriceがいいらしいのでw-okada/voice-changerから使うことにした。&lt;/p&gt;&#xA;&lt;h2 id=&#34;webcam-motion-capture&#34;&gt;webcam motion capture&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://webcammotioncapture.info/ja/&#34;&gt;https://webcammotioncapture.info/ja/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;まずvrm4u(vmc)ではwebcam motion captureが動きません。ue5.4.4のvrm4u(202408)の環境ですが動かない。しかし、一旦、vseefaceなどを挟むと使用できます。ただし、&lt;code&gt;webcam motion capture&lt;/code&gt;と&lt;code&gt;w-okada/voice-changer&lt;/code&gt;を同時に使用するとアプリが落ちます。時間経過でwebcamのcaptureが動かなくなります。&lt;/p&gt;&#xA;&lt;h2 id=&#34;discordを使う理由&#34;&gt;discordを使う理由&lt;/h2&gt;&#xA;&lt;p&gt;discordからでないと音量が大きくなりません。小さい声でもちゃんと拾って変換してくれるやり方として、discordを使うとうまくいきました。ただし、高価なマイクがある場合はそちらの方が良いでしょう。&lt;/p&gt;&#xA;&lt;h2 id=&#34;配信環境&#34;&gt;配信環境&lt;/h2&gt;&#xA;&lt;p&gt;[mac]&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;VB-Cableで仮想オーディオデバイス(output)を起動&lt;/li&gt;&#xA;&lt;li&gt;discordのinputに指定&lt;/li&gt;&#xA;&lt;li&gt;w-okada/voice-changerを起動してoutputにいれる&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;[windows]&lt;/p&gt;&#xA;&lt;ol start=&#34;4&#34;&gt;&#xA;&lt;li&gt;discordでボイスチャットに入る(別アカウント)、ここで音声が聴こえるはず&lt;/li&gt;&#xA;&lt;li&gt;obsでdiscordの音声キャプチャ&lt;/li&gt;&#xA;&lt;li&gt;webcam motion capture -&amp;gt; vseefaceでカメラからvrmを動かせるようにする&lt;/li&gt;&#xA;&lt;li&gt;ue5を起動して、obsでウィンドウキャプチャ。youtubeアカウントに接続し、配信管理から予約、開始する。開始したあとは準備できるまで音声キャプチャをミュート。ゲームを調整できれば開始してミュートを切る&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;配信中にやること。操作がちょっと大変です。カメラ操作や移動操作など。&lt;/p&gt;&#xA;&lt;p&gt;また、英語音声に変換しながら配信する予定。自動音声変換は精度が悪かったので文字列にしました。文字を打ち込むかあらかじめ用意しておいた文字を変換します。これをmacで流すとdiscordを通じてかなりはっきり英語を喋ってくれます。たまってきたら音声ファイルをpecoとかfzfで検索できるようにしておくと良さそう。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh:voice.zsh&#34; data-lang=&#34;sh:voice.zsh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/zsh&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;d&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;0:a:h&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;f&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$d/voice.json&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vdir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$d/voice_dir&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cfg&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;~/.config/ai/voice.json&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; ! -d $vdir &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;&lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;mkdir -p $vdir&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; -z &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$1&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;&lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ep&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;cat $f|jq length&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;ep&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$((&lt;/span&gt;ep &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;))&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;ep&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;cat $f|jq &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.[&lt;/span&gt;$ep&lt;span style=&#34;color:#e6db74&#34;&gt;].body&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;echo $j|jq length&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$((&lt;/span&gt;n &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;))&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fnction voice_chat&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;#echo chat : https://openai.com&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;#echo voice : https://elevenlabs.io&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;vfile&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$vdir/&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;ep&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;_&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;i&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;.mp3&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; -f $vfile &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;&lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;mpv $vfile&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;echo voice ok&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;read&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[&lt;/span&gt;$i&lt;span style=&#34;color:#e6db74&#34;&gt;]&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;t&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;echo $j|jq -r &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.[&lt;/span&gt;$i&lt;span style=&#34;color:#e6db74&#34;&gt;].text&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;echo $t&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;echo ---&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;read chat_text&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; -z &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$chat_text&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; -n &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$t&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;&lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;chat_text&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$t&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;echo $chat_text&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;echo ---&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;chat_api&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;cat $cfg|jq -r .chat_api&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;voice_text&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;curl -sL https://api.openai.com/v1/chat/completions -H &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Content-Type: application/json&amp;#34;&lt;/span&gt; -H &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Authorization: Bearer &lt;/span&gt;$chat_api&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; -d &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{ \&amp;#34;model\&amp;#34;: \&amp;#34;gpt-4o-mini\&amp;#34;, \&amp;#34;messages\&amp;#34;: [{\&amp;#34;role\&amp;#34;: \&amp;#34;user\&amp;#34;, \&amp;#34;content\&amp;#34;: \&amp;#34;次の文章を英語に訳して\n\n&lt;/span&gt;$chat_text&lt;span style=&#34;color:#e6db74&#34;&gt;\&amp;#34;}], \&amp;#34;temperature\&amp;#34;: 0.7 }&amp;#34;&lt;/span&gt;|jq &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.choices.[].message.content&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;echo $voice_text&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;# like-model&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;voice_id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;zrHiDhphv9ZnVXBqCLjz&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;# alice-model&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;voice_id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Xb7hH8MSUJpSbSDYk0k2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;voice_api&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;cat $cfg|jq -r .voice_api&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;curl -sL --request POST &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;&#x9;&#x9;--url https://api.elevenlabs.io/v1/text-to-speech/$voice_id &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;&#x9;&#x9;--header &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;xi-api-key: &lt;/span&gt;$voice_api&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;&#x9;&#x9;--header &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Content-Type: application/json&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;&#x9;&#x9;--data &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&#x9;&#x9;&#x9;\&amp;#34;text\&amp;#34;: &lt;/span&gt;$voice_text&lt;span style=&#34;color:#e6db74&#34;&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&#x9;&#x9;&#x9;\&amp;#34;model_id\&amp;#34;: \&amp;#34;eleven_multilingual_v2\&amp;#34;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&#x9;&#x9;&#x9;\&amp;#34;voice_settings\&amp;#34;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&#x9;&#x9;&#x9;\&amp;#34;stability\&amp;#34;: 0.5,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&#x9;&#x9;&#x9;\&amp;#34;similarity_boost\&amp;#34;: 0.5&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&#x9;}&amp;#34;&lt;/span&gt; --output $vfile &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; mpv $vfile&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0;i&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$n;i++&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;voice_chat&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh:voice.json&#34; data-lang=&#34;sh:voice.json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;body&amp;#34;&lt;/span&gt; :[&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;{ &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;こんにちは、みんな&amp;#34;&lt;/span&gt;},&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;{ &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;配信を見てくれてありがとう。またね。&amp;#34;&lt;/span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;なぜue5editorで起動するのか&#34;&gt;なぜue5(editor)で起動するのか?&lt;/h3&gt;&#xA;&lt;p&gt;editorは相当重いので本来はbuildしたpackageで実行する方が良いです。しかし、buildするとvrm4u(vmc)の表情が動かなくなります。またstandaloneはもっと重くなりますので選択しません。PIEでwindowを作りません。windowを作ると新しい問題が発生しますし、動作も重くなります。&lt;/p&gt;</description>
    </item>
    <item>
      <title>gpt-4o-miniに乗り換え</title>
      <link>https://syui.github.io/blog/post/2024/08/24/ue/</link>
      <pubDate>Sat, 24 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://syui.github.io/blog/post/2024/08/24/ue/</guid>
      <description>&lt;p&gt;この前、&lt;a href=&#34;https://elevenlabs.io/&#34;&gt;elevenlabs&lt;/a&gt;を使って、ゲーム内で音声で聞くと音声で返してくれるようにした。&lt;/p&gt;&#xA;&lt;p&gt;その時、&lt;code&gt;gpt-3.5-turbo&lt;/code&gt;より&lt;code&gt;gpt-4o-mini&lt;/code&gt;のほうが安いことに気づいたので乗り換えた。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://openai.com/index/gpt-4o-mini-advancing-cost-efficient-intelligence/&#34;&gt;https://openai.com/index/gpt-4o-mini-advancing-cost-efficient-intelligence/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;ただ、elevenlabsは、かわいい声が少なかったのと、日本語の発音がちょっと微妙なことがあるので、これよりおすすめのものはないかなと思ってる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ue5でbrushの動作がbuildと違う</title>
      <link>https://syui.github.io/blog/post/2024/07/29/ue/</link>
      <pubDate>Mon, 29 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://syui.github.io/blog/post/2024/07/29/ue/</guid>
      <description>&lt;p&gt;今回はコード周りを整理した時の話です。&lt;/p&gt;&#xA;&lt;h2 id=&#34;issue-一つのwidgetで各キャラのiconを設定する&#34;&gt;[issue] 一つのwidgetで各キャラのiconを設定する&lt;/h2&gt;&#xA;&lt;p&gt;objectに&lt;code&gt;cbp_character_${name}&lt;/code&gt;を指定してボタンをクリックするとキャラが切り替えるwidgetを作成していました。&lt;/p&gt;&#xA;&lt;p&gt;以前はiconごとに読み込むファイルを別々に作っていたのですが、その処理を簡略化しました。まずは各キャラのcbpをobjectに指定しているので、名前が異なります。objectからdisplay nameやobject name, object pathを取ってきて、brush(image)を設定するようにしたのですが、これはeditorでは動作しますが、buildで動作しないことがわかりました。&lt;/p&gt;&#xA;&lt;p&gt;理由は不明ですが、object(name)がNoneになります。ボタンを押すと正常に動作するためobjectはそのキャラのものが使われているはずです。これは少し奇妙です。&lt;/p&gt;&#xA;&lt;p&gt;そんなことを言っていても問題は解決しないので別の方法でやることにしました。objectとは別の値を用意して処理します。また、とりあえず&lt;code&gt;インスタンス編集可能&lt;/code&gt;, &lt;code&gt;スポーン時に公開&lt;/code&gt;, &lt;code&gt;シネマティックスに公開&lt;/code&gt;にチェックを入れておくことにしました。&lt;/p&gt;&#xA;&lt;h2 id=&#34;issue-city-sampleでclothが動作しない&#34;&gt;[issue] city sampleでclothが動作しない&lt;/h2&gt;&#xA;&lt;p&gt;他のprojectでは機能するのに&lt;code&gt;cloth simulation&lt;/code&gt;が機能しない場合、project settingの問題です。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://forums.unrealengine.com/t/no-cloth-simulation-in-ue5-but-works-in-ue4/619532&#34;&gt;https://forums.unrealengine.com/t/no-cloth-simulation-in-ue5-but-works-in-ue4/619532&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh:Config/DefaultEngine.ini&#34; data-lang=&#34;sh:Config/DefaultEngine.ini&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;[ConsoleVariables]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;- p.ClothPhysics&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+ p.ClothPhysics&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これはなぜclothが動作しないのか、わけがわからなくて困ってる人がいそうです。&lt;/p&gt;&#xA;&lt;h2 id=&#34;issue-bp_playerのキャラを切り替えるときに装備を外す&#34;&gt;[issue] bp_playerのキャラを切り替えるときに装備を外す&lt;/h2&gt;&#xA;&lt;p&gt;これも以前から放置していた問題ですが、アイの衣装を変更したときに他キャラで&lt;code&gt;visibility:false&lt;/code&gt;するのがめんどくさかったので、自動で処理されるようにしました。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;cbp_sandbox_character&lt;/code&gt;をcastしてobjectのdisplay nameでもobject nameでも取ってきて、それが&lt;code&gt;ai&lt;/code&gt;じゃなければ&lt;code&gt;set visibility&lt;/code&gt;します。childrenにチェックを入れておきます。&lt;/p&gt;&#xA;&lt;p&gt;なお、最初は&lt;code&gt;destroy actor child&lt;/code&gt;のようなものを探したのですが、unreal engineにはありませんでした。&lt;/p&gt;</description>
    </item>
    <item>
      <title>アイの新衣装と方向性</title>
      <link>https://syui.github.io/blog/post/2024/07/28/ue/</link>
      <pubDate>Sun, 28 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://syui.github.io/blog/post/2024/07/28/ue/</guid>
      <description>&lt;p&gt;今回は、アイの衣装を作り始めた話をします。&lt;/p&gt;&#xA;&lt;p&gt;まずアイの衣装のことを少し解説すると、アイは基本的に真っ白で少しボロがある服を着ていて、それが気に入っています。&lt;/p&gt;&#xA;&lt;p&gt;この衣装を&lt;code&gt;v1.0&lt;/code&gt;としましょう。&lt;/p&gt;&#xA;&lt;p&gt;絵を描く時とか衣装はめんどくさいので、そういう利点があります。&lt;/p&gt;&#xA;&lt;img src=&#34;https://card.syui.ai/card/card_13.webp&#34; style=&#34;width:300px;margin: 0 auto;display :block;padding:20px 0;&#34;&gt;&#xA;&lt;p&gt;しかし、この衣装を3Dやゲームにする場合はどうでしょう。例えば、衣装を書くのがめんどくさいというのは、主に繰り返し描くのがつらいわけで、一度作れば使い回せるなら話は変わってきます。&lt;/p&gt;&#xA;&lt;p&gt;めんどくさいけど、そこまでじゃない&amp;hellip;かもしれない。&lt;/p&gt;&#xA;&lt;p&gt;それにゲームに使われるような衣装を一度作ってみたいと思っていたので、その時に作りました。この衣装を&lt;code&gt;v2.0&lt;/code&gt;とします。&lt;/p&gt;&#xA;&lt;img src=&#34;https://card.syui.ai/card/card_129.webp&#34; style=&#34;width:300px;margin: 0 auto;display :block;padding:20px 0;&#34;&gt;&#xA;&lt;p&gt;この衣装はvroidで作成し、どのよう作ったかと言うと、vroidが公式で提供してくれている衣装があって、その組み合わせで作りました。もちろん、組み合わせればそれでいいかというと、そんなことはなく、独自に調整して作りました。調整はイラストを描くアプリで絵を描く要領で行います。&lt;/p&gt;&#xA;&lt;p&gt;どのような衣装を目指したかというと、これは明確に原神のナヒーダの衣装を参考にしました。&lt;/p&gt;&#xA;&lt;p&gt;正直、衣装といっても私はよくわからない。作ったこともありません。ですから、センスが良いと思った衣装を参考にしました。&lt;/p&gt;&#xA;&lt;p&gt;しかし、v2.0の衣装はthree-vrmの見栄えで調整していました。&lt;/p&gt;&#xA;&lt;p&gt;これをunreal engineに持ってきて使っていたわけですが、正直、厳しかった。&lt;/p&gt;&#xA;&lt;p&gt;vroidで作る衣装というのは基本的に紙なのです。ペラペラの紙をモデルに貼り付ける感じ。厚みも立体感もありません。three-vrmで表示するならいいのですが、ゲームで動かす場合は厳しいと思います。&lt;/p&gt;&#xA;&lt;p&gt;そこで、新しく衣装を作り直す必要がありました。&lt;/p&gt;&#xA;&lt;p&gt;現在作っているのはこの衣装でナンバリングでいうと&lt;code&gt;v3.0&lt;/code&gt;になります。&lt;/p&gt;&#xA;&lt;img src=&#34;https://card.syui.ai/card/card_131.webp&#34; style=&#34;width:300px;margin: 0 auto;display :block;padding:20px 0;&#34;&gt;&#xA;&lt;h2 id=&#34;blenderによる3dモデリングとskabpの組み合わせによる揺れの制御&#34;&gt;blenderによる3DモデリングとSK+ABPの組み合わせによる揺れの制御&lt;/h2&gt;&#xA;&lt;p&gt;&lt;video controls style=&#34;width:100%;&#34;&gt;&lt;source src=&#34;https://syui.github.io/m/post/ue/ue5_2024-07-28_01.mp4&#34;&gt;&lt;/video&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;3Dモデリング&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://syui.github.io/m/post/ue/ue5_2024-07-28_02.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;SK+ABP&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;SKを右クリックでanim(blueprint)を作ります。そこで&lt;code&gt;kawaii physics&lt;/code&gt;を当てます。settingsは&lt;code&gt;World Damping Location:1.0&lt;/code&gt;, &lt;code&gt;World Damping Rotation:0.3&lt;/code&gt;, &lt;code&gt;Limit Angle:20.0&lt;/code&gt;です。後ろに下がると体に入り込んでしまうのを抑えるため20で設定しています。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://syui.github.io/m/post/ue/ue5_2024-07-28_01.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;今回はblenderによる3Dモデリングを行いました。vroidの髪の毛でマントを作ってみましたが、調整が難しく、ipadで描ければいいのですがアプリが落ちるので、しかも、macとwinで出力したものは同じではなく、unreal engineの描写に不具合が出る関係で、髪はmacで描いて、衣装はipadでやって、macで出力したものをwinに送って、unreal engineで動きを確認し、おかしければまたvroidで調整するみたいなことをやっていました。これは今も続いていますが、やろうとする人はとても大変な思いをすると思います。今回はblender, vroid, unreal engine, ipad, mac, winを使って作りました。&lt;/p&gt;&#xA;&lt;p&gt;これをベースに&lt;code&gt;v3.x&lt;/code&gt;などの改良を重ねていくことになると思います。デザイン的な変更はあるかもしれません。今までのバージョンは主にデザインではなく作り方によって決まっていて、v1は一つの衣装を改造して作ったもので、v2は衣装の組み合わせ、v3はモデリング(厚み)になっています。&lt;/p&gt;&#xA;&lt;h2 id=&#34;vroidのワンピースはおすすめしない&#34;&gt;vroidのワンピースはおすすめしない&lt;/h2&gt;&#xA;&lt;p&gt;vroidのワンピースは、上半身、下半身に1mmの隙間ができます。これは正常の姿勢では問題になりませんが、three-vrmで確認してみると浮かび上がる動作で確認できます。&lt;/p&gt;&#xA;&lt;p&gt;その他にも仕様上の問題ですが、胸の部分の肌マスクを一部消しておかないといけません。&lt;/p&gt;&#xA;&lt;p&gt;しかし、それをやると、今度はunreal engineで表示する場合の問題が発生します。&lt;/p&gt;&#xA;&lt;p&gt;つまり、vroidのワンピースは基本的に使うべきではなく、ロングコートを使っていたv2.0のほうが良かったところがあります。&lt;/p&gt;</description>
    </item>
    <item>
      <title>vroidでマントを作る</title>
      <link>https://syui.github.io/blog/post/2024/07/21/vrm/</link>
      <pubDate>Sun, 21 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://syui.github.io/blog/post/2024/07/21/vrm/</guid>
      <description>&lt;p&gt;アイの衣装を作っています。走っている姿があまり可愛くないのでマントを付けてみることにしました。原因はおそらくデフォルトの姿勢だと思われます。&lt;/p&gt;&#xA;&lt;p&gt;&lt;video controls style=&#34;width:100%;&#34;&gt;&lt;source src=&#34;https://syui.github.io/m/post/ue/ue5_2024-07-21_01.mp4&#34;&gt;&lt;/video&gt;&lt;/p&gt;&#xA;&lt;p&gt;しかし、vroidでマントは相当難しいです。&lt;/p&gt;&#xA;&lt;h2 id=&#34;マントの作り方と調整&#34;&gt;マントの作り方と調整&lt;/h2&gt;&#xA;&lt;p&gt;vroidで髪の毛から作りました。したがって、頭の動きと連動します。&lt;/p&gt;&#xA;&lt;p&gt;調整は&lt;code&gt;髪の揺れ方&lt;/code&gt;から行います。動かしたいboneを追加して、ボーン数は少ないほど安定します。これで動く場所を追加します。固定点はどこからboneを始めるかを決めます。かたさは数字が小さいほど固い動きになります。衝突半径はboneを基準にカプセルのようなものを追加して衝突の有無を判定するのでしょう。&lt;/p&gt;&#xA;&lt;p&gt;マントは以下を基準に設定しました。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;ボーン : 1&lt;/li&gt;&#xA;&lt;li&gt;固定点 : 0.6&lt;/li&gt;&#xA;&lt;li&gt;かたさ : 0.1&lt;/li&gt;&#xA;&lt;li&gt;重力 : 0&lt;/li&gt;&#xA;&lt;li&gt;衝突半径 : 0.01&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;この値だけでもダメで上向きにすることが必要です。これ以外では貫通してしまいました。本当はもう少し下向きがいいですね。&lt;/p&gt;&#xA;&lt;img src=&#34;https://syui.github.io/m/post/ue/ue5_2024-07-21_01.png&#34;&gt;&#xA;&lt;h2 id=&#34;体を貫通する&#34;&gt;体を貫通する&lt;/h2&gt;&#xA;&lt;p&gt;マントが体を貫通します。&lt;/p&gt;&#xA;&lt;p&gt;これは現時点でどうしようもない問題です。あらゆるパラメータを調整しても貫通してしまい、無理やりなんとかしようとすると、今度は後ろ髪とのバッティングが発生し、髪の毛がごちゃごちゃに動くようになります。&lt;/p&gt;&#xA;&lt;p&gt;マントを上向きにしているのは走ると体を貫通してしまうからです。&lt;/p&gt;&#xA;&lt;p&gt;できる限り貫通しないようにしましたが、完璧は無理でしょう。&lt;/p&gt;&#xA;&lt;h2 id=&#34;boneを増やすのは良くない&#34;&gt;boneを増やすのは良くない&lt;/h2&gt;&#xA;&lt;p&gt;固定値を根本から設定し、boneを増やして衝突半径を大きくすることで貫通を解消する事ができるかもしれません。&lt;/p&gt;&#xA;&lt;p&gt;しかし、マントの動きが安定しなくなってしまいます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ue5でキャラを切り替える</title>
      <link>https://syui.github.io/blog/post/2024/07/20/vrm/</link>
      <pubDate>Sat, 20 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://syui.github.io/blog/post/2024/07/20/vrm/</guid>
      <description>&lt;p&gt;&lt;video controls style=&#34;width:100%;&#34;&gt;&lt;source src=&#34;https://syui.github.io/m/post/ue/ue5_2024-07-20_01.mp4&#34;&gt;&lt;/video&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;キャラの切り替え&#34;&gt;キャラの切り替え&lt;/h2&gt;&#xA;&lt;p&gt;キャラの切り替えは&lt;code&gt;Widgets/GameAnimationWidget&lt;/code&gt;の一部を使用します。具体的には&lt;code&gt;EUW_CharacterSelectButton&lt;/code&gt;を以下のように書き換えれば使用できるでしょう。&lt;/p&gt;&#xA;&lt;img src=&#34;https://syui.github.io/m/post/ue/ue5_2024-07-19_02.png&#34;&gt;&#xA;&lt;iframe src=&#34;https://blueprintue.com/render/7z9nt-bi/&#34; scrolling=&#34;no&#34; width=&#34;100%&#34; height=&#34;450px&#34; allowfullscreen&gt;&lt;/iframe&gt;&#xA;&lt;p&gt;これらは&lt;code&gt;editor utility&lt;/code&gt;なのでcook(package build)に含まれません。もし切り替えボタンをbuild後も表示したければ、EUW(editor utility widget)をやめてWP(widget)で作成しましょう。またここで使われているblueprintアイコンはbuild時は真っ黒になります。画像を用意しましょう。&lt;/p&gt;&#xA;&lt;h2 id=&#34;アイの変身に難儀している&#34;&gt;アイの変身に難儀している&lt;/h2&gt;&#xA;&lt;p&gt;three-vrmを触っていた時代に衣装を作ったわけですが、ue5では思ったように動かないことがあります。&lt;/p&gt;&#xA;&lt;p&gt;これは衣装の作り方に問題があるわけですが、かつてthree-vrmでよく見える衣装を試行錯誤して作ったやつを修正する時期が来たと思ったので、modelを全面的にupdateしました。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;服の揺れで内部に入り込むので衣装を作り直した&lt;/li&gt;&#xA;&lt;li&gt;腕輪を作り直した&lt;/li&gt;&#xA;&lt;li&gt;輪っかをSMにしてmodelと分離した&lt;/li&gt;&#xA;&lt;li&gt;瞳の中のマークを完璧な形状にした&lt;/li&gt;&#xA;&lt;li&gt;靴のデザインを少し変更した&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;img src=&#34;https://syui.github.io/m/post/ue/ue5_2024-07-19_01.png&#34;&gt;&#xA;&lt;p&gt;腕輪に関してはデザインとモデル、マテリアルに改善の余地があります。これもSMにして光沢化すればうまくいきそうですが、モデリングは苦手です。&lt;/p&gt;&#xA;&lt;p&gt;基本的にアイの変身は複数のmodelを切り替えることで実装していました。&lt;/p&gt;&#xA;&lt;p&gt;しかし、今回の衣装の変更ですべてのmodelを更新するのが非常にめんどくさいので、materialを切り替える方針に変更しました。&lt;/p&gt;&#xA;&lt;p&gt;つまり、黒髪にしたいなら髪の毛のelementに黒髪のmaterialをsetします。今まではmodelそのものをsetしていました。&lt;/p&gt;&#xA;&lt;p&gt;ですがこれも非常にめんどくさいことになるのですが、例えば、他のキャラと切り替えるとき、SMをすべてdisableにしなければなりません。そうでないとSMが残ってしまいます。&lt;/p&gt;&#xA;&lt;p&gt;これは&lt;code&gt;BP_VrmOutlineComponent&lt;/code&gt;や&lt;code&gt;VrmPoseableMesh_translucent&lt;/code&gt;, &lt;code&gt;SM&lt;/code&gt;などをmesh下に追加するときに起こります。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;set visibility&lt;/code&gt;のoptionにチェックをいれることで全体化できますが、そうではなく現在キャラ切り替えは&lt;code&gt;CBP_SandboxCharacter&lt;/code&gt;で行っています。&lt;/p&gt;&#xA;&lt;p&gt;変更するたびに&lt;code&gt;CBP_SandboxCharacter&lt;/code&gt;でvisibility:disableを設定しなければなりません。そうでないとアイのmodelに入れたやつが表示されてしまいます。&lt;/p&gt;&#xA;&lt;p&gt;頻繁に変更しないならいいのですが、キャラが多くなってくるとアイのmodelを修正するたびに非常にめんどくさいことになります。&lt;/p&gt;&#xA;&lt;p&gt;逆に&lt;code&gt;CBP_SandboxCharacter&lt;/code&gt;をアイにしておかないと、blueprintが書きづらく、castする必要が出てきます。今のところmeshをぱっと参照できる方がいい。また、シーケンサで作ったムービー(モーション)が動かなくなります。&lt;/p&gt;&#xA;&lt;h2 id=&#34;衣装に問題が発生した&#34;&gt;衣装に問題が発生した&lt;/h2&gt;&#xA;&lt;p&gt;その後、衣装に問題が発生しました。&lt;/p&gt;&#xA;&lt;p&gt;現在、ロングコートをベースに衣装作成を行いましたが、胸の部分の隙間が開いてしまっており、これをワンピースベースにする必要があると感じました。&lt;/p&gt;&#xA;&lt;p&gt;色々と書き換えていますが、納得できるものを完成させられていません。&lt;/p&gt;&#xA;&lt;p&gt;ずっと使うものですから、ここでいいものを作っておきたい。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ゲームと哲学</title>
      <link>https://syui.github.io/blog/post/2024/07/19/game/</link>
      <pubDate>Fri, 19 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://syui.github.io/blog/post/2024/07/19/game/</guid>
      <description>&lt;p&gt;今回は、私が作っているゲームの話をしていきたいと思います。&lt;/p&gt;&#xA;&lt;p&gt;私はどんなゲームを作っていくつもりなのかという話です。&lt;/p&gt;&#xA;&lt;h2 id=&#34;アイを使用できない&#34;&gt;アイを使用できない&lt;/h2&gt;&#xA;&lt;p&gt;まず私はよくゲーム内でアイを動かしています。&lt;/p&gt;&#xA;&lt;p&gt;アイは飛べるのでこのキャラを使いながら世界を作っています。&lt;/p&gt;&#xA;&lt;p&gt;普通に考えればゲームが完成したときこのキャラクターを使えるんだと思っている方がいるかもしれませんが、アイは基本的に使えるようにはなりません。&lt;/p&gt;&#xA;&lt;p&gt;限りなくゼロに近い特殊な機会においてのみ、アイを使えるルートを用意するつもりです。&lt;/p&gt;&#xA;&lt;p&gt;つまり、通常は使えるようにならないキャラクターになります。&lt;/p&gt;&#xA;&lt;p&gt;ああ、そういえばこのゲームはキャラゲーです。キャラゲーというのは魅力的なキャラクターに力を入れストーリーを構築することを目指すということです。&lt;/p&gt;&#xA;&lt;p&gt;アイはストーリーでたまに出てくる謎人物として登場するかもしれませんが、そのくらいです。&lt;/p&gt;&#xA;&lt;p&gt;アイに関しては初日の数時間だけテストも兼ねて引けるようにしておくかもしれませんが、それ以降ピックアップされることはありません。&lt;/p&gt;&#xA;&lt;p&gt;ちなみに、数ヶ月に一度、新しいキャラをガチャを引けるようにする。そのようなスタイルで運用を考えています。&lt;/p&gt;&#xA;&lt;p&gt;ただし、ストーリーが完結した際にはもしかしたらピックアップされるかもしれませんね。そのへんはどうなるかわかりません。&lt;/p&gt;&#xA;&lt;h2 id=&#34;世界の構築&#34;&gt;世界の構築&lt;/h2&gt;&#xA;&lt;p&gt;今現在、私が作っているのは通常のプレイヤーが行くことができない領域を作っています。&lt;/p&gt;&#xA;&lt;p&gt;このゲームは最初、非常に限られた空間で遊ぶことを考えています。&lt;/p&gt;&#xA;&lt;p&gt;そして、今作っているのはその外側のプレイヤーが物理的に到達できない場所です。&lt;/p&gt;&#xA;&lt;p&gt;キャラはそれぞれに普通のモーションを採用します。&lt;/p&gt;&#xA;&lt;p&gt;つまり、飛べないし、そんな早く走れるわけでもない。攻撃やスキルも思った以上にこじんまりとしたものになります。&lt;/p&gt;&#xA;&lt;p&gt;今操作しているアイのように動けるわけではありません。それは全く違います。&lt;/p&gt;&#xA;&lt;h2 id=&#34;開発者の哲学&#34;&gt;開発者の哲学&lt;/h2&gt;&#xA;&lt;p&gt;ここで、私がどういうつもりでこんな仕様にするのかというと、これにはある種の哲学的な思想があります。&lt;/p&gt;&#xA;&lt;p&gt;プレイヤーが行ける場所以外にも世界が広がっていること。&lt;/p&gt;&#xA;&lt;p&gt;まだ見ぬキャラクターがいること。&lt;/p&gt;&#xA;&lt;p&gt;謎があること。&lt;/p&gt;&#xA;&lt;p&gt;これらはゲームを面白くすると考えるからです。&lt;/p&gt;&#xA;&lt;p&gt;なんかワクワクしませんか。&lt;/p&gt;&#xA;&lt;p&gt;私もわざわざ作っている以上は最終的にプレイヤーはそこに到達できるようにすると思います。&lt;/p&gt;&#xA;&lt;p&gt;しかし、最初からそこに行けてもつまらないですよね。&lt;/p&gt;&#xA;&lt;p&gt;超パワーやアイに頼らずゲームを面白くしたい、そんな思いがあります。&lt;/p&gt;&#xA;&lt;p&gt;そのためアイはゲームでたまに出てくる謎キャラ。脇役として、他のキャラたちの力でこのゲームを作っていきたいと考えています。&lt;/p&gt;&#xA;&lt;p&gt;このゲームは身内のためのゲームと言うより、一般的なソシャゲを目指す。そんな感じです。&lt;/p&gt;&#xA;&lt;p&gt;とはいえ、アイは初日だけ引けるし、ストーリーにも登場しますので、知る人ぞ知る、そんなキャラになるでしょう。&lt;/p&gt;&#xA;&lt;p&gt;大空に伝説のポケモンが飛んでいる。早く捕まえたい。そんな感じです。&lt;/p&gt;&#xA;&lt;h2 id=&#34;ゲームと現実の融合&#34;&gt;ゲームと現実の融合&lt;/h2&gt;&#xA;&lt;p&gt;もう一つ考えていることがあって、それは現実とゲームをつなげることです。ゲームと現実の融合を考えています。&lt;/p&gt;&#xA;&lt;p&gt;具体的には現実で使用しているアカウントとつなげることで、その現実のアカウントがゲーム内のものを所有するという形にしたいと思っています。&lt;/p&gt;&#xA;&lt;p&gt;また、データの物理融合も考えていて、例えば、ゲーム内であるアイテムをゲットしたとしましょう。そして、そのアイテムを一つの到達点とし、それを取得した場合は所定の手順を踏めば物理アイテムに変換される(住所を送ると郵送される)ものを用意しておきます。&lt;/p&gt;&#xA;&lt;p&gt;すると、ゲームと現実の結びつきがさらに高まりますよね。&lt;/p&gt;&#xA;&lt;p&gt;ただし、こういうことをやるとこんなふうに思われる方がいるかもしれません。&lt;/p&gt;&#xA;&lt;p&gt;「このゲームはユーザーの個人情報を狙っている」&lt;/p&gt;&#xA;&lt;p&gt;私だってこういう仕組みがあっても住所を送りたくありません。&lt;/p&gt;&#xA;&lt;p&gt;ですから郵送は匿名で配送と受け取りができるサービスを利用します。&lt;/p&gt;&#xA;&lt;p&gt;この仕組みはユーザーを喜ばせるためだけにあります。&lt;/p&gt;&#xA;&lt;p&gt;したがって、個人情報に関わるものは一時的に取得することがあってもすべて削除するようにします。&lt;/p&gt;&#xA;&lt;p&gt;次に話したいのはアカウントに採用する形式の話です。&lt;/p&gt;&#xA;&lt;p&gt;これはすでに結論が出ていて、protocolがいい。現在、mailが一般的ですが、現実と結びつかない人が増えています。私もそうですが、mailでやり取りすることはありません。mailは受け取るだけのものになりつつある。そして、公開もできない。これでは現実との結びつきがありません。&lt;/p&gt;&#xA;&lt;p&gt;そこでnostrとbluesky(atproto)のどちらかということになり、私はatprotoを採用します。&lt;/p&gt;&#xA;&lt;p&gt;アカウントをサービスごとに持つ、異なるユーザー名を持つのはもう嫌なのです。&lt;/p&gt;&#xA;&lt;p&gt;しかし、これを解決するには一意性を捨てなければなりません。一意性とは、例えば&lt;code&gt;@syui&lt;/code&gt;のような形です。これはどこかの会社が独占できないし、独占するなら各社それぞれにアカウントを持つしかありません。&lt;/p&gt;&#xA;&lt;p&gt;そうではなくアカウントは一つにしたいし、名前も一つにしたいのです。&lt;/p&gt;&#xA;&lt;p&gt;これを解決するにはprotocolしかなく、名前規則もdomainに従うしかない。&lt;/p&gt;&#xA;&lt;p&gt;それを最も短く現実的にやっているのがatprotoというわけです。&lt;/p&gt;&#xA;&lt;p&gt;atprotoは今まで使われてきたmailというものを置き換える可能性を秘めています。&lt;/p&gt;&#xA;&lt;h2 id=&#34;無限性&#34;&gt;無限性&lt;/h2&gt;&#xA;&lt;p&gt;最後に、どんなゲームを作っていくつもりなのかをまとめると、楽しいゲームです。&lt;/p&gt;&#xA;&lt;p&gt;上に挙げたすべての事柄は楽しいとか嬉しいとかそういったことのために存在します。&lt;/p&gt;&#xA;&lt;p&gt;そして、これは自分に向けたメッセージですが、ゲームの中の一つ一つに無限性をもたせることを考える。&lt;/p&gt;&#xA;&lt;p&gt;例えば、囲碁という単純なゲームがあります。単純ですが無限があります。無限の組み合わせがある。&lt;/p&gt;&#xA;&lt;p&gt;キャラクターを尊重し、ストーリーを考えること。これについては面白いものを想像しやすいですが、ゲーム性については面白いものを考えるというより、無限性を考える。&lt;/p&gt;&#xA;&lt;p&gt;やっぱり好みのキャラが登場して活躍すれば嬉しいし、無限に育成などを考えられれば続きますよね。楽しいキャラを作れるよう頑張りたい。&lt;/p&gt;&#xA;&lt;p&gt;そんなことを思ったのでした。&lt;/p&gt;&#xA;&lt;h2 id=&#34;完成時期&#34;&gt;完成時期&lt;/h2&gt;&#xA;&lt;p&gt;いつ完成するのかはわかりません。&lt;/p&gt;&#xA;&lt;p&gt;どういった予定で開発していくのかはだいたい決まっていて、私は原神というゲームで遊んでいましたが、やることがなくなったので、自分でゲームを作って遊ぶかと思い、開発をスタートさせています。&lt;/p&gt;&#xA;&lt;p&gt;したがって、まずは自分が遊ぶステージや仕組みを作ってそれを完成させることが目標です。&lt;/p&gt;&#xA;&lt;p&gt;その後、一般プレイヤー向けにストーリーとキャラクターを作成する予定です。&lt;/p&gt;</description>
    </item>
    <item>
      <title>vrm4uでBP_PoseCopyToonを使う</title>
      <link>https://syui.github.io/blog/post/2024/07/18/vrm/</link>
      <pubDate>Thu, 18 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://syui.github.io/blog/post/2024/07/18/vrm/</guid>
      <description>&lt;p&gt;今回は誰も解説していないvrm4uで&lt;code&gt;BP_PoseCopyToon&lt;/code&gt;を使った見た目をカスタマイズする方法を紹介します。ドキュメントにも書かれていませんが、大体は以下の手順になります。&lt;/p&gt;&#xA;&lt;img src=&#34;https://syui.github.io/m/post/ue/ue5_2024-07-18_025511.png&#34;&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;ファイラーでPlugins/を見えるようにする(プラグインコンテンツを表示)&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;All/Plugins/VRM4U/Util/Actor/PostShadow/BP_PoseCopyToonをlevel(map)に配置し、target actorにBP_Playerを選択して調整する(BP_Playerもlevelに配置しないといけない)&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;All/Plugins/VRM4U/Util/Actor/PostShadow/MI_PostToonが更新されているのでAll/Plugins/VRM4U/ImportData/DS_VRMCustomを開いて、全部をMI_PostToonに変更する&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;新しくvrmファイル(.vrm)をインポートする。この際、type:customを選択する&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;奇妙なSK_${name}ができるが重ねがけ用なので正常。BP_PoseCopyToonを開いてVrmPoseableMesh_translucentをコピーし、BP_Playerに貼り付ける&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;VrmPoseableMesh_translucentで先程作ったSK_${name}を参照する&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;img src=&#34;https://syui.github.io/m/post/ue/ue5_2024-07-18_025510.png&#34;&gt;&#xA;&lt;p&gt;&lt;code&gt;VrmPoseableMesh_translucent&lt;/code&gt;で生成されるmaterialはlevel専用の一時的なものです。これはコピー、貼付けして一時的に使えますが、保存されません。unreal engineを落とすと無効になります。&lt;/p&gt;&#xA;&lt;p&gt;したがって、customに入れて生成して使います。それが上記の手順です。&lt;/p&gt;&#xA;&lt;h2 id=&#34;近づくとよく分かる違い&#34;&gt;近づくとよく分かる違い&lt;/h2&gt;&#xA;&lt;p&gt;近づくとその違いは明らかです。subsurface profileで作ったモデルはデコボコしていますが、postshadowを重ねて表示するモデルはデコボコが消えきれいになっています。&lt;/p&gt;&#xA;&lt;p&gt;今回は原子爆発を使ったあとは輪っかと瞳のmaterialを切り替えて光らせるようにしました。&lt;/p&gt;&#xA;&lt;p&gt;この辺のmaterialの調整も結構大変で試行錯誤しています。&lt;/p&gt;&#xA;&lt;h2 id=&#34;なぜvrm4uの見た目をカスタマイズしている人がいないのか&#34;&gt;なぜvrm4uの見た目をカスタマイズしている人がいないのか&lt;/h2&gt;&#xA;&lt;p&gt;そもそも日本語のunreal engineの情報自体が少ないのですが、その中のvrm4uとなると、なおさら触る人が少ないのだと思います。&lt;/p&gt;&#xA;&lt;p&gt;また、どこにもやり方が書かれていないので、見た目のカスタマイズは相当大変です。検索しても情報は出てこない。&lt;/p&gt;&#xA;&lt;p&gt;説明しようにも環境問題が大きく、解説が難しい事情もあるのでしょう。&lt;/p&gt;&#xA;&lt;h2 id=&#34;最近の出来事&#34;&gt;最近の出来事&lt;/h2&gt;&#xA;&lt;p&gt;だいぶ理想の空に近づいてきました。ぱっと見は問題なさそうですが納得できないところが多く、修正していたら時間がかかりました。&lt;/p&gt;&#xA;&lt;p&gt;&lt;video controls style=&#34;width:100%;&#34;&gt;&lt;source src=&#34;https://syui.github.io/m/post/ue/ue5_2024-07-18_025510.mp4&#34;&gt;&lt;/video&gt;&lt;/p&gt;&#xA;&lt;p&gt;dynamic volumetric skyで2dskyが原因である領域に視線を向けるとチカチカ背景の色が変わる現象に遭遇しました。2dskyをdisableにすることで解消しました。&lt;/p&gt;&#xA;&lt;p&gt;また、time speedをゆっくりにすることで、雲がきれいになりました。fpsはfreeにしました。projectでもfpsを高めに設定しました。&lt;/p&gt;&#xA;&lt;p&gt;その後、モデルに目を向けました。モデルも悪くはないんだけど、でも理想的ではありません。個人的にはリアル寄りではなく、アニメ寄りにしたかったのです。&lt;/p&gt;&#xA;&lt;p&gt;ですが、unreal engineはリアル寄りのゲームで、アセットの多くもリアル寄りが多いので、&lt;code&gt;subsurface profile&lt;/code&gt;を使用していました。&lt;/p&gt;&#xA;&lt;p&gt;基本はこれを調整したものをベースに、&lt;code&gt;BP_PoseCopyToon&lt;/code&gt;を使っていきたいと思います。&lt;/p&gt;&#xA;&lt;p&gt;原子爆発をシーケンサで作成していましたが、バグに遭遇しましたので記録しておきます。&lt;/p&gt;&#xA;&lt;p&gt;5.3から5.4にシーケンサを持ってきて使用していましたが、一度でも編集するとおかしくなります。例えば、BP_Playerを置いたとして、meshも追加しなければならなくなりました。meshを追加したあとはじめてanimを追加できます。しかし、これでもまだ正常ではありません。buildが進まなくなり、編集するとanimが機能しなくなります。つまり、meshを追加、animを追加、meshを削除という手順を踏まなければいけません。&#xA;BP_Playerの直下にanimを置くことでようやく正常になります。&lt;/p&gt;&#xA;&lt;p&gt;最近、googleではなく&lt;code&gt;perplexity.ai&lt;/code&gt;を使用するようになりました。&lt;/p&gt;&#xA;&lt;p&gt;srcに当たりたい気持ちはありgoogleのほうが使いやすいように思えますが、unreal engineに関してはperplexityのほうが問題解決が早かった。&lt;/p&gt;</description>
    </item>
    <item>
      <title>vrm4uでpackage build後も髪の毛を動かす方法</title>
      <link>https://syui.github.io/blog/post/2024/07/06/ue/</link>
      <pubDate>Sat, 06 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://syui.github.io/blog/post/2024/07/06/ue/</guid>
      <description>&lt;p&gt;vrm4uがpackage buildすると髪の毛が動かなくなっていました。&lt;/p&gt;&#xA;&lt;p&gt;これを動かせるには&lt;code&gt;ABP_Post_${model_name}&lt;/code&gt;を編集して、&lt;code&gt;VrmSpringBone&lt;/code&gt;で&lt;code&gt;Vrm Meta Object:VM_${model_name}_VrmMeta&lt;/code&gt;を指定します。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://syui.github.io/m/post/ue/ue5_2024-07-06_125510.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>ue5.4でdynamic volumetric skyとocean wavesの統合</title>
      <link>https://syui.github.io/blog/post/2024/06/29/ue-planet-sky/</link>
      <pubDate>Sat, 29 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://syui.github.io/blog/post/2024/06/29/ue-planet-sky/</guid>
      <description>&lt;p&gt;今回は、&lt;code&gt;dynamic volumetric sky&lt;/code&gt;と&lt;code&gt;ocean waves&lt;/code&gt;の統合してみました。&lt;/p&gt;&#xA;&lt;p&gt;結果として理想の地表と海面、空と雲を手に入れました。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.unrealengine.com/marketplace/ja/product/dynamic-volumetric-sky/&#34;&gt;dynamic volumetric sky&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.unrealengine.com/marketplace/ja/product/ocean-waves&#34;&gt;ocean waves&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;video controls style=&#34;width:100%;&#34;&gt;&lt;source src=&#34;https://syui.github.io/m/post/ue/ue5_2024-06-29_025510.mp4&#34;&gt;&lt;/video&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;issue地平線&#34;&gt;issue:地平線&lt;/h2&gt;&#xA;&lt;p&gt;まずはdynamic volumetric skyの地平線を消していきましょう。&lt;/p&gt;&#xA;&lt;p&gt;普通に考えて地平線を消したいことなんてありそうですけど、英語は&lt;a href=&#34;https://forums.unrealengine.com/t/how-can-i-remove-the-foggy-horizon-in-the-default-skysphere/339893&#34;&gt;こちら&lt;/a&gt;で説明されています。日本語は見つかりませんでした。これは通常、&lt;code&gt;Horizon Falloff&lt;/code&gt;で調整しています。&lt;/p&gt;&#xA;&lt;p&gt;ただし、dynamic volumetric skyは少し特殊です。&lt;/p&gt;&#xA;&lt;p&gt;どうやら&lt;code&gt;BP_Dynamic_VoluemetricSky&lt;/code&gt;にある&lt;code&gt;ExponentialHeightFog&lt;/code&gt;で地平線を設定しているようです。これを削除していくか、設定を変更していく必要があります。削除する場合はcompileするとerrorが出るので使用している箇所の関数やblueprintを削除します。&lt;/p&gt;&#xA;&lt;h2 id=&#34;issue海の波紋&#34;&gt;issue:海の波紋&lt;/h2&gt;&#xA;&lt;p&gt;dynamic volumetric skyと合わせることで海に波紋が現れます。&lt;/p&gt;&#xA;&lt;p&gt;これはocean wavesのsky atmosphereが星の中心を規定していることから発生します。つまり、sky atmosphereを星の中心に設定しないと描写の問題が出るということです。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://syui.github.io/m/post/ue/ue5_2024-06-24_025510.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;この解消方法はdynamic volumetirc skyのatmoshereのtransformのlocation-zを&lt;code&gt;-6360&lt;/code&gt;にすることで回避できました。&lt;/p&gt;&#xA;&lt;p&gt;ただし、わからないところもあって、私は&lt;code&gt;BP_EarthSizedSpericalMesh&lt;/code&gt;の中に&lt;code&gt;BP_DynamicVolumetircSky&lt;/code&gt;を入れています。ですから、そのままでも座標は星の中心を指しています。&lt;/p&gt;&#xA;&lt;h2 id=&#34;issue海の影&#34;&gt;issue:海の影&lt;/h2&gt;&#xA;&lt;p&gt;海に円形の影が現れることがあります。これは&lt;code&gt;BP_DynamicVolumetircSky&lt;/code&gt;の&lt;code&gt;VolumetricSkySupport&lt;/code&gt;のtransform-scaleを大きくすると海に入る影が大きくなり、1にするとなくなります。&lt;/p&gt;&#xA;&lt;p&gt;この辺も星の内部に展開される領域に関係します。&lt;/p&gt;&#xA;&lt;h2 id=&#34;具体的な統合&#34;&gt;具体的な統合&lt;/h2&gt;&#xA;&lt;p&gt;重要な問題は以上の2点ですが統合には他にやらなければならないことがたくさんあります。&lt;/p&gt;&#xA;&lt;p&gt;例えば、「dynamic volumetric skyの範囲を超えたとき、一体どうやって地球と太陽と月を表現するのか」です。&lt;/p&gt;&#xA;&lt;p&gt;さっきまであった太陽がいきなり消えて別の場所に出現したり、見た目が変わったりするのはできれば避けたい。しかし、それだと見た目のクオリティは一気に落ちます。&lt;/p&gt;&#xA;&lt;p&gt;まずは月を消すことからですが、月は&lt;code&gt;2DSky&lt;/code&gt;で実装されています。&lt;code&gt;visible:false&lt;/code&gt;にすればいいでしょう。&lt;/p&gt;&#xA;&lt;p&gt;次に本物の月を地球の外に回します。ここでは&lt;code&gt;spline&lt;/code&gt;で軌道を設定しています。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://syui.github.io/m/post/ue/ue5_2024-06-29_025510.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;loopさせるには&lt;code&gt;spline len&lt;/code&gt;をmaxにして&lt;code&gt;float wrap&lt;/code&gt;します。&lt;/p&gt;&#xA;&lt;iframe src=&#34;https://blueprintue.com/render/8gfrd45h/&#34; scrolling=&#34;no&#34; width=&#34;100%&#34; height=&#34;450px&#34; allowfullscreen&gt;&lt;/iframe&gt;&#xA;&lt;h2 id=&#34;地球の外側&#34;&gt;地球の外側&lt;/h2&gt;&#xA;&lt;p&gt;そのままでは宇宙に出たときの見栄えがよくありません。したがって、宇宙に出たとき地球の見た目を整える必要があります。&lt;/p&gt;&#xA;&lt;p&gt;しかし、これもunreal engineの問題から解決が難しい。私は以下のように実装していますが、良い方法ではありません。&lt;/p&gt;&#xA;&lt;iframe src=&#34;https://blueprintue.com/render/t46sbleq/&#34; scrolling=&#34;no&#34; width=&#34;100%&#34; height=&#34;450px&#34; allowfullscreen&gt;&lt;/iframe&gt;&#xA;&lt;h2 id=&#34;地球の自転&#34;&gt;地球の自転&lt;/h2&gt;&#xA;&lt;p&gt;これは失敗談ですが、地球に自転を設定してみました。これで外側を回っている月や太陽はゆっくりした速度で動けば良くなります。つまり、現実に合わせることができる。&lt;/p&gt;&#xA;&lt;p&gt;しかし、地球を自転させることで地面は揺れマップは崩壊。様々な問題が発生しました。&lt;/p&gt;&#xA;&lt;p&gt;やはり、ゲーム上で地動説を実現するのは難しいようです。太陽側を回すしかありません。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ue5.4でdynamic volumetric skyの空を飛んでみる</title>
      <link>https://syui.github.io/blog/post/2024/06/24/ue-dynamic-volumetric-sky/</link>
      <pubDate>Mon, 24 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://syui.github.io/blog/post/2024/06/24/ue-dynamic-volumetric-sky/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.unrealengine.com/marketplace/ja/product/dynamic-volumetric-sky/&#34;&gt;dynamic volumetric sky&lt;/a&gt;はほとんどのゲームに使われているvolumetric skyです。&lt;/p&gt;&#xA;&lt;p&gt;昔からあるassetで、更新もされているのでずっと使われています。多くの開発者が最初に購入するassetの一つです。&lt;/p&gt;&#xA;&lt;p&gt;しかし、当たり前ですが宇宙にはいけません。&lt;/p&gt;&#xA;&lt;p&gt;このassetも他のassetと同様、平面マップを想定しています。ですから、どこまでいってもその先は平面になります。&lt;/p&gt;&#xA;&lt;p&gt;また、このassetのvolumetric skyは様々なものと依存しているので切り離しも難しい。&lt;/p&gt;&#xA;&lt;p&gt;ですが、雲がとても綺麗で天候も昼夜もあります。&lt;/p&gt;&#xA;&lt;p&gt;飛ぶときは&lt;code&gt;BP_DynamicVolumetricSky&lt;/code&gt;の詳細で&lt;code&gt;Coloud -&amp;gt; Coloud Fly Option&lt;/code&gt;を選択します。そして、時間を早めるため&lt;code&gt;Single Player Fps Lock&lt;/code&gt;を&lt;code&gt;60 FPS&lt;/code&gt;にします。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ue5.4でocean wavesで星と空と海をつなげる</title>
      <link>https://syui.github.io/blog/post/2024/06/23/ue-ocean-sky/</link>
      <pubDate>Sun, 23 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://syui.github.io/blog/post/2024/06/23/ue-ocean-sky/</guid>
      <description>&lt;p&gt;今回は星と空と海を融合する方法を紹介します。この現実方式はgame engineでは相当に難しいことです。そのためこれをやる人はあまりいませんし、必要性もありません。おすすめもできません。&lt;/p&gt;&#xA;&lt;p&gt;&lt;video controls style=&#34;width:100%;&#34;&gt;&lt;source src=&#34;https://syui.github.io/m/post/ue/ue5_2024-06-22_025510.mp4&#34;&gt;&lt;/video&gt;&lt;/p&gt;&#xA;&lt;p&gt;これには様々な問題があり不便があります。また、ゲームプレイでは必要ない部分、見えない部分になるので、多くの開発者は一般的なゲーム方式を採用します。&lt;/p&gt;&#xA;&lt;p&gt;それでもこの方式を採用したい場合は&lt;code&gt;ocean waves&lt;/code&gt;が参考になります。このassetは結構すごいことをやっています。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.unrealengine.com/marketplace/ja/product/ocean-waves&#34;&gt;ocean waves&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;まずは&lt;code&gt;ocean waves&lt;/code&gt;でplayerを動かし不要なものを削除します。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;OceanWaves/Levels/EarthSizedOceanPlanet&lt;/code&gt;を開いて必要なものを列挙します。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Lighting&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    DirectionLight&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    SkyAtmosher&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    SkyLight&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    VolumetricCloud&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OceanMaterialPresets&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; OceanMaterial_Opaque&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; OceanMaterial_Opaque_AF&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; OceanMaterial_SLW&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; OceanMaterial_SLW_AF&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Planet&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    BP_EarthSizedClouds&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    BP_EarthSizedOcean&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    BP_EarthSizedSphercialMesh&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    BP_SkyAtmposhereAdjuster&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PostProcessVolume&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WaterVolume&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;+PlayerStart&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;+Plane&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;もしlvからcopyして使用する場合は&lt;code&gt;BP_xxx&lt;/code&gt;の値が一部抜けるので注意してください。例えば、&lt;code&gt;BP_EarthSizedOcean&lt;/code&gt;は海の設定です。詳細のOceanVolumeに&lt;code&gt;WaterVolume&lt;/code&gt;を参照するようにしてください。&lt;/p&gt;&#xA;&lt;p&gt;雲の形式は&lt;code&gt;VolumetricCloud&lt;/code&gt;で設定していきます。大体の使い方としてはこんな感じです。詳しくはblueprintを見ます。&lt;/p&gt;&#xA;&lt;h3 id=&#34;buildすると雲が中央に集中する&#34;&gt;buildすると雲が中央に集中する&lt;/h3&gt;&#xA;&lt;p&gt;package buildすると光が中央に集中し、雲も全体的におかしくなります。中央に向かってレンダリングが伸びているように見えます。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;BP_EarthSizedClouds&lt;/code&gt;の&lt;code&gt;Global Wind&lt;/code&gt;が原因です。ここで&lt;code&gt;Ocean : BP_EarthSizedOcean&lt;/code&gt;に指定するとこの現象が発生します。&lt;/p&gt;&#xA;&lt;h3 id=&#34;海に入った直前だけ背景が映り込む&#34;&gt;海に入った直前だけ背景が映り込む&lt;/h3&gt;&#xA;&lt;p&gt;&lt;code&gt;BP_EarthSizedOcean&lt;/code&gt;を編集します。&lt;/p&gt;&#xA;&lt;p&gt;私が独自に設定している&lt;code&gt;SM_SkySphere&lt;/code&gt;が潜った瞬間だけそれが表示されてしまうので、&lt;code&gt;Volume Material Height&lt;/code&gt;は0にしています。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;Above Water Material&lt;/code&gt;にも&lt;code&gt;Underwater&lt;/code&gt;と同じものを入れてください。&lt;/p&gt;&#xA;&lt;h2 id=&#34;統合は難しい&#34;&gt;統合は難しい&lt;/h2&gt;&#xA;&lt;p&gt;これを他のmapと統合するのはかなり難しいです。新しく自分で作っていくのも難しい部分が多いでしょう。&lt;/p&gt;&#xA;&lt;p&gt;なぜならこの方式はmapのすべてに関係してくるからです。ものを作る場合、通常は部品を分割しながら作ります。ですが、この方式はそれが難しいのです。&lt;/p&gt;&#xA;&lt;p&gt;一般的によく使用されている&lt;code&gt;volumetric sky&lt;/code&gt;なども使用は難しいでしょう。昼夜や天候を変えるのは大変で、天体を動かしてlightを連動しなければならなりません。&lt;/p&gt;&#xA;&lt;p&gt;他にも難しいところはたくさんあって、ロードも遅いですし、この方式でmapを作っていくと取り返しがつかないことになりかねません。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ue5.4でcity sampleとgame animation sampleを統合する</title>
      <link>https://syui.github.io/blog/post/2024/06/22/ue-city-sample/</link>
      <pubDate>Sat, 22 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://syui.github.io/blog/post/2024/06/22/ue-city-sample/</guid>
      <description>&lt;p&gt;今回は、&lt;a href=&#34;https://www.unrealengine.com/marketplace/ja/product/city-sample&#34;&gt;city sample&lt;/a&gt;と&lt;a href=&#34;https://www.unrealengine.com/marketplace/en-US/product/game-animation-sample&#34;&gt;game animation sample&lt;/a&gt;を統合する方法を紹介します。どちらも&lt;code&gt;epic games&lt;/code&gt;が提供しているので無料で使えます。最初のスターターキットとして使用されることが多くなるはずです。&lt;/p&gt;&#xA;&lt;p&gt;city sampleのほうが複雑なので、city sampleをベースにgame animation sampleをコピーする形で統合します。&lt;/p&gt;&#xA;&lt;p&gt;まずコピーするファイルです。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# game-animation-sample&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Content&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Binaries&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;└─Win64&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    └─GameAnimationSampleEditor.target&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;編集するファイルです。これはcity sampleの方を編集します。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# city-sample&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;city-sample.uproject&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Binaries&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;└─Win64&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    └─UnrealEditor.modules&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Config&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   └─DefaultGameplayTags.ini&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;まずrootにある&lt;code&gt;${project_name}.uproject&lt;/code&gt;にgame animation sampleのpluginを追加します。これはコピー側のuprojectを参照してください。長くなるのでここでは全て列挙していません。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-json:city-sample.uproject&#34; data-lang=&#34;json:city-sample.uproject&#34;&gt;&amp;#34;Plugins&amp;#34; : [&#xA;    { &amp;#34;Name&amp;#34;:&amp;#34;ModelingToolsEditorMode&amp;#34;,&amp;#34;Enabled&amp;#34;:true,&amp;#34;TargetAllowList&amp;#34;:[&amp;#34;Editor&amp;#34;] },&#xA;    .&#xA;    .&#xA;    .&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;次に&lt;code&gt;Binaries/Win64/UnrealEditor.modules&lt;/code&gt;もコピー側のものを見て追記します。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-json:city-sample/Binaries/Win64/UnrealEditor.modules&#34; data-lang=&#34;json:city-sample/Binaries/Win64/UnrealEditor.modules&#34;&gt;{&#xA;  &amp;#34;BuildId&amp;#34;: &amp;#34;0000000&amp;#34;,&#xA;  &amp;#34;Modules&amp;#34;: {&#xA;    &amp;#34;CitySample&amp;#34;: &amp;#34;UnrealEditor-CitySample.dll&amp;#34;,&#xA;    &amp;#34;CitySampleAnimGraphRuntime&amp;#34;: &amp;#34;UnrealEditor-CitySampleAnimGraphRuntime.dll&amp;#34;,&#xA;    &amp;#34;CitySampleEditor&amp;#34;: &amp;#34;UnrealEditor-CitySampleEditor.dll&amp;#34;,&#xA;    &amp;#34;GameAnimationSample&amp;#34;: &amp;#34;UnrealEditor-GameAnimationSample.dll&amp;#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;次に&lt;code&gt;Config/DefaultGameplayTags.ini&lt;/code&gt;もコピー側を見て追記します。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh:city-sample/Config/DefaultGameplayTags.ini&#34; data-lang=&#34;sh:city-sample/Config/DefaultGameplayTags.ini&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+GameplayTagList&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;(Tag=&amp;#34;GameplayCue.ContextualAnim&amp;#34;,DevComment=&amp;#34;&amp;#34;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+GameplayTagList&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;(Tag=&amp;#34;MotionMatching&amp;#34;,DevComment=&amp;#34;&amp;#34;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+GameplayTagList&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;(Tag=&amp;#34;MotionMatching.Default&amp;#34;,DevComment=&amp;#34;&amp;#34;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+GameplayTagList&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;(Tag=&amp;#34;MotionMatching.Idle&amp;#34;,DevComment=&amp;#34;&amp;#34;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+GameplayTagList&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;(Tag=&amp;#34;MotionMatching.Loops&amp;#34;,DevComment=&amp;#34;&amp;#34;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+GameplayTagList&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;(Tag=&amp;#34;MotionMatching.Pivots&amp;#34;,DevComment=&amp;#34;&amp;#34;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+GameplayTagList&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;(Tag=&amp;#34;MotionMatching.Starts&amp;#34;,DevComment=&amp;#34;&amp;#34;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+GameplayTagList&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;(Tag=&amp;#34;MotionMatching.Stops&amp;#34;,DevComment=&amp;#34;&amp;#34;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;大体こんな感じでやればgame animation sample(ABP_SandboxCharacter)が動くでしょう。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ue5.4のcustom gravityを試す</title>
      <link>https://syui.github.io/blog/post/2024/06/21/ue-gravity/</link>
      <pubDate>Fri, 21 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://syui.github.io/blog/post/2024/06/21/ue-gravity/</guid>
      <description>&lt;p&gt;&lt;video controls style=&#34;width:100%;&#34;&gt;&lt;source src=&#34;https://syui.github.io/m/post/ue/ue5_2024-06-21_225510.mp4&#34;&gt;&lt;/video&gt;&lt;/p&gt;&#xA;&lt;p&gt;youtube : &lt;a href=&#34;https://www.youtube.com/watch?v=CZK7QplEbJs&#34;&gt;Unreal Engine 5 Tutorial - Custom Gravity UE5.4 Preview&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;基本的には&lt;code&gt;bp_actor&lt;/code&gt;を作成し範囲を設定します。&lt;code&gt;bp_actor&lt;/code&gt;を置いたとき惑星(bp_planet)に親子付けするといいですね。この場合はlocationは&lt;code&gt;0&lt;/code&gt;, scaleは&lt;code&gt;1.1&lt;/code&gt;を設定します。&lt;/p&gt;&#xA;&lt;p&gt;動作は&lt;code&gt;bp_player(bp_character)&lt;/code&gt;のeventで設定します。具体的には&lt;code&gt;actor begin&lt;/code&gt;から&lt;code&gt;gravity direction&lt;/code&gt;します。&lt;/p&gt;&#xA;&lt;p&gt;gravity directionを無効にする方法が用意されていないようなので、&lt;code&gt;actor end&lt;/code&gt;で&lt;code&gt;destroy actor&lt;/code&gt;して&lt;code&gt;restart player&lt;/code&gt;しています。&lt;/p&gt;&#xA;&lt;iframe src=&#34;https://blueprintue.com/render/tybb0lyd/&#34; scrolling=&#34;no&#34; width=&#34;100%&#34; height=&#34;400px&#34;&gt;&lt;/iframe&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://dev.epicgames.com/community/learning/tutorials/w6l7/unreal-engine-custom-gravity-in-ue-5-4&#34;&gt;https://dev.epicgames.com/community/learning/tutorials/w6l7/unreal-engine-custom-gravity-in-ue-5-4&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>ue5.4にupdateすることにした</title>
      <link>https://syui.github.io/blog/post/2024/06/20/ue-game-animation/</link>
      <pubDate>Thu, 20 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://syui.github.io/blog/post/2024/06/20/ue-game-animation/</guid>
      <description>&lt;h2 id=&#34;前提&#34;&gt;前提&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.unrealengine.com/en&#34;&gt;ue 5.4.2&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.unrealengine.com/en/blog/game-animation-sample&#34;&gt;game animation sample&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.unrealengine.com/marketplace/ja/product/superhero-flight-animations&#34;&gt;superhero flight animations&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;今回は&lt;code&gt;game animation sample&lt;/code&gt;と&lt;code&gt;superhero flight animations&lt;/code&gt;を統合してみました。今までのモーションに加えて空を飛べるようにしたのですが、違和感ない形で自動的にブレンドされます。これは想像以上に大変なことをやっているので&lt;code&gt;5.4.2&lt;/code&gt;に追従したほうが良さそうです。&lt;/p&gt;&#xA;&lt;p&gt;ただ、今まで開発実装してきたものがすべて作り直しになります。&lt;/p&gt;&#xA;&lt;p&gt;インポートできないのかと思われるかもしれませんが、ue5にそんなことできません。動かなくなります。仮に動かせたとしても、おそらく、作り直したほうが早いでしょう。&lt;/p&gt;&#xA;&lt;h2 id=&#34;game-animation-sampleで飛べるようにする&#34;&gt;game animation sampleで飛べるようにする&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;game animation sample&lt;/code&gt;と&lt;code&gt;superhero flight animations&lt;/code&gt;の統合を解説します。&lt;/p&gt;&#xA;&lt;p&gt;基本的には&lt;code&gt;BP_SandboxCharacter&lt;/code&gt;にeventの&lt;code&gt;IA_Sprit&lt;/code&gt;で&lt;code&gt;anim instance class(ABP_Player)&lt;/code&gt;を指定しますが&lt;code&gt;BP_Player_UE5&lt;/code&gt;から様々な設定や変数を持ってきて動くように改変していきます。&lt;/p&gt;&#xA;&lt;p&gt;&lt;video controls style=&#34;width:100%;&#34;&gt;&lt;source src=&#34;https://syui.github.io/m/post/ue/ue5_2024-06-21_025510.mp4&#34;&gt;&lt;/video&gt;&lt;/p&gt;&#xA;&lt;iframe src=&#34;https://blueprintue.com/render/7z11v96t/&#34; scrolling=&#34;no&#34; width=&#34;100%&#34; height=&#34;400px&#34;&gt;&lt;/iframe&gt;&#xA;&lt;h2 id=&#34;sky-atmosphereを使って宇宙をつなげる&#34;&gt;sky atmosphereを使って宇宙をつなげる&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.unrealengine.com/marketplace/ja/product/cesium-for-unreal&#34;&gt;cesium&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.unrealengine.com/marketplace/en-US/product/ocean-waves&#34;&gt;ocean waves&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;私が作ってきたlv(map)は宇宙と街でわけられていました。&lt;/p&gt;&#xA;&lt;p&gt;これは特別なことではなく当たり前のことで、mapは基本的に平面なのです。平面のmapにキャラクターやフィールドを配置していくのです。&lt;/p&gt;&#xA;&lt;p&gt;私の場合はサークルのアクターを用意してぶつかると別の場所に移動するように設定していました。&lt;/p&gt;&#xA;&lt;p&gt;しかし、これは本来やりたかったことではありません。現実に基づいたものを作りたかった。宇宙と街が異なる場所に置かれるのではなく、最初からつながっている形が良かったのです。&lt;/p&gt;&#xA;&lt;p&gt;例えば、空に上昇して大気圏を抜けると宇宙に行ける形です。空に上昇すると宇宙マップに移動させられる形ではありません。&lt;/p&gt;&#xA;&lt;p&gt;なぜこのようなことがやりたかったのかというと「目に見えない部分もしっかり作られているゲームを作りたかったから」です。&lt;/p&gt;&#xA;&lt;p&gt;昼と夜がゲーム内で再現されていることがよくあります。これは単にライトと月の絵を背景で回しているだけなのです。しかし、私はゲーム内でもその場所に行くと本物そっくりの天体が動いている、そういうのがいいなと思っていました。&lt;/p&gt;&#xA;&lt;p&gt;今回は、それを実現するために&lt;a href=&#34;https://dev.epicgames.com/documentation/en-us/unreal-engine/sky-atmosphere-component-in-unreal-engine&#34;&gt;sky atmosphere&lt;/a&gt;を利用するようにしました。&lt;/p&gt;&#xA;&lt;p&gt;また、月などの天体には重力がありませんでした。そのまま丸い球体が浮いているという形だったのです。ですから、上から落下すると月に乗れますが、横からだと乗れません。ぶつかるだけです。これを改善したかった。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://dev.epicgames.com/community/learning/tutorials/w6l7/unreal-engine-custom-gravity-in-ue-5-4&#34;&gt;https://dev.epicgames.com/community/learning/tutorials/w6l7/unreal-engine-custom-gravity-in-ue-5-4&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;video controls style=&#34;width:100%;&#34;&gt;&lt;source src=&#34;https://syui.github.io/m/post/ue/ue5_2024-06-21_125510.mp4&#34;&gt;&lt;/video&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;code&gt;game animation sample&lt;/code&gt;には飛び越せるブロックがあります。あれをフィールドに設置して岩にかぶせ見えないようにすることで動作します。見えないようにというのはブロックのmeshをvisibilityで制御します。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;しかし、注意点もあります。太陽と月を追加するとあまりに負荷が高くなったのか落ちるようになったことがありました。いくつか改善すると治りましたが、この形を採用するとbuildが通らなくなることもあります。&lt;/p&gt;&#xA;&lt;h2 id=&#34;vrm4uのmaterialについて考える&#34;&gt;vrm4uのmaterialについて考える&lt;/h2&gt;&#xA;&lt;p&gt;私は&lt;code&gt;SubsurfaceProfile&lt;/code&gt;を使用していますが、他のタイプだと影(shadow)と反射(light)の問題がかなり強く出てしまい、あらゆる場面で常用できません。移動したら背景の加減でおかしくなるなど問題が多いのです。&lt;/p&gt;&#xA;&lt;p&gt;そこで完全に影響を受けない&lt;code&gt;MToon Unlit&lt;/code&gt;を使用することも考えられます。一部分だけ他のタイプのmaterialを利用して調整していきます。この場合の肌の色を以下に調整するといいでしょう。&lt;/p&gt;&#xA;&lt;iframe src=&#34;https://blueprintue.com/render/wi2aobel/&#34; scrolling=&#34;no&#34; width=&#34;100%&#34; height=&#34;400px&#34;&gt;&lt;/iframe&gt;&#xA;&lt;h2 id=&#34;作り直すもの&#34;&gt;作り直すもの&lt;/h2&gt;&#xA;&lt;p&gt;今まで実装開発してきたものはいくつかありますが、代表的なものを挙げます。記録のため動画にしておきます。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;account login system&lt;/li&gt;&#xA;&lt;li&gt;account item system&lt;/li&gt;&#xA;&lt;li&gt;character lv system&lt;/li&gt;&#xA;&lt;li&gt;character skill&lt;/li&gt;&#xA;&lt;li&gt;character sword &amp;amp; collision&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;一気に解説します。移動すると経験値が入ります。Lv1になると変身できるようになります。変身すると飛行できるようになります。飛行できる時間はlvに応じて変化します。特殊なアイテムを取るとスキルを覚えます。スキルにはクールタイムやcollisionなどが設定されており、敵が吹っ飛びます。剣のモーションは原作を再現しています。原作では輪が剣になりますので、剣を登場させたときは輪を消さなければなりません。meshを入れ替える処理などを書いています。アイテム画面やストーリー進行などもapiと連携するシステムを作りました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ue5.4でgame animation sampleを試してみる</title>
      <link>https://syui.github.io/blog/post/2024/06/19/ue-game-animation/</link>
      <pubDate>Wed, 19 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://syui.github.io/blog/post/2024/06/19/ue-game-animation/</guid>
      <description>&lt;h2 id=&#34;前提&#34;&gt;前提&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.unrealengine.com/en&#34;&gt;ue 5.4.2&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.unrealengine.com/en/blog/game-animation-sample&#34;&gt;game animation sample&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;解説&#34;&gt;解説&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;game animation sample&lt;/code&gt;を使うと標準的なモーションをキャラクターに適用することができます。しかも、&lt;code&gt;epic games&lt;/code&gt;が提供しているため無料です。&lt;/p&gt;&#xA;&lt;p&gt;今回はゲームモードで自身のキャラクターを選択する方法を紹介します。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;pluginのvrm4uを有効にする&lt;/li&gt;&#xA;&lt;li&gt;vrmを&lt;code&gt;/Character/ai/Rigs&lt;/code&gt;に読み込む&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;/Blueprints/ABP_Sandbox_Character&lt;/code&gt;を右クリックでアニメーションをリターゲットして&lt;code&gt;/Character/ai/anim/&lt;/code&gt;に作成する。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;source : SKM_UEFN_Mannequin&lt;/p&gt;&#xA;&lt;p&gt;target : SK_ai&lt;/p&gt;&#xA;&lt;p&gt;retarget : RTG_UEFN_ai&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;なお、この手順は本来不要です。読み飛ばしても構いません。しっかりとしたアニメーションを利用したいときに使えるのでやっておくのがおすすめです。&lt;/p&gt;&#xA;&lt;ol start=&#34;4&#34;&gt;&#xA;&lt;li&gt;&lt;code&gt;/Blueprints/RetargetedCharacters/CBP_SandboxCharacter_Manny&lt;/code&gt;を複製して&lt;code&gt;/Blueprints/RetargetedCharacters/CBP_SandboxCharacter_ai&lt;/code&gt;にする&lt;/li&gt;&#xA;&lt;li&gt;SkeletalMeshを&lt;code&gt;/Character/ai/Rigs/SK_ai&lt;/code&gt;に設定して、Tag(Component Tags)を&lt;code&gt;RTG_UEFN_ai&lt;/code&gt;に変更する&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;tags[0] : RTG_UEFN_ai&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;ol start=&#34;6&#34;&gt;&#xA;&lt;li&gt;&lt;code&gt;/Blueprints/RetargetedCharacters/ABP_GenericRetarget&lt;/code&gt;を開いて変数の&lt;code&gt;IKRetargeter_Map&lt;/code&gt;を追加する&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;RTG_UEFN_ai : /Character/ai/Rigs/RTG_UEFN_ai&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;ol start=&#34;7&#34;&gt;&#xA;&lt;li&gt;GameMode : GM_Sandbox &amp;gt; Bone : CBP_SandboxCharacter_ai&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;これで自身のキャラクターを動かせるようになります。今まで色々なモーションを試してきましたが、これは相当しっかり動きます。&lt;/p&gt;&#xA;&lt;p&gt;&lt;video controls style=&#34;width:100%;&#34;&gt;&lt;source src=&#34;https://syui.github.io/m/post/ue/ue5_2024-06-20_125510.mp4&#34;&gt;&lt;/video&gt;&lt;/p&gt;&#xA;&lt;p&gt;髪の毛が途中から動かなくなるのは以前解説したvrm4uのバグだと思います。standaloneで確認してください。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ue5のpixel streamingを試してみる</title>
      <link>https://syui.github.io/blog/post/2024/05/18/ue-pixel-streaming/</link>
      <pubDate>Sat, 18 May 2024 00:00:00 +0000</pubDate>
      <guid>https://syui.github.io/blog/post/2024/05/18/ue-pixel-streaming/</guid>
      <description>&lt;p&gt;&lt;code&gt;pixel-streaming&lt;/code&gt;を使うとwebでゲームを配信できます。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/syui/img/master/ue5_pixel_streaming_2024-05-19-3.58.09.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;まずpluginを導入して、previewしてみましょう。プラットフォームの横に&lt;code&gt;pixel streaming&lt;/code&gt;の項目が追加されているので、&lt;code&gt;シグナリングサーバーを起動&lt;/code&gt;と&lt;code&gt;レベルエディタをストリーミング&lt;/code&gt;を選択して、レベルを再生します。&lt;code&gt;localhost:80&lt;/code&gt;にアクセスするとゲームをプレイできます。&lt;/p&gt;&#xA;&lt;p&gt;大体このよう流れですが、ゲームをbuildするとpixel-streaming用の&lt;code&gt;.exe&lt;/code&gt;ができるので、それをserverに置いて実行します。&lt;/p&gt;&#xA;&lt;p&gt;そして、streaming(port:8888)とplayer(port:80)を起動します。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/EpicGamesExt/PixelStreamingInfrastructure&#34;&gt;https://github.com/EpicGamesExt/PixelStreamingInfrastructure&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh:windows.ps1&#34; data-lang=&#34;sh:windows.ps1&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git clone https&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;//github.com/EpicGamesExt/PixelStreamingInfrastructure&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# https://github.com/EpicGamesExt/PixelStreamingInfrastructure/tree/master/SignallingWebServer/platform_scripts/cmd&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git checkout UE5.3&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cd PixelStreamingInfrastructure/SignallingWebServer/platform_scripts/cmd&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ./setup.bat&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ./Start_SignallingServer.ps1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WebSocket listening to Streamer connections on &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8888&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WebSocket listening to Players connections on &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Http listening on *&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;serverのipが&lt;code&gt;1.1.1.1&lt;/code&gt;だったとして、&lt;code&gt;1.1.1.1:80&lt;/code&gt;にアクセスすればプレイできます。&lt;/p&gt;&#xA;&lt;p&gt;linux用にbuildして、dockerを使うといいのですが、その場合はlinux serverにgpuを積んでおく必要があります。これにplayerもついているのかはわかりません。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ docker pull pixelstreamingunofficial/pixel-streaming-signalling-server:5.3&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;docs : &lt;a href=&#34;https://dev.epicgames.com/documentation/ja-jp/unreal-engine/getting-started-with-pixel-streaming-in-unreal-engine&#34;&gt;https://dev.epicgames.com/documentation/ja-jp/unreal-engine/getting-started-with-pixel-streaming-in-unreal-engine&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>ue</title>
      <link>https://syui.github.io/m/post/ue/</link>
      <pubDate>Mon, 29 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://syui.github.io/m/post/ue/</guid>
      <description>&lt;p&gt;ここでは&lt;a href=&#34;https://www.epicgames.com/&#34;&gt;epic games&lt;/a&gt;の&lt;a href=&#34;https://www.unrealengine.com/ja/unreal-engine-5&#34;&gt;unreal engine 5&lt;/a&gt;の使い方をまとめます。現在はversionの&lt;code&gt;5.4.2&lt;/code&gt;に追従しています。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://dev.epicgames.com/documentation/ja-jp/unreal-engine/unreal-engine-5.4-release-notes&#34;&gt;ue 5.4.4&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://dev.epicgames.com/documentation/ja-jp/unreal-engine/unreal-engine-5.3-release-notes&#34;&gt;ue 5.3.2&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;ブログで説明しづらい部分が多いので&lt;a href=&#34;https://blueprintue.com/profile/ai/&#34;&gt;blueprintue&lt;/a&gt;を参考にしてください。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;repo : &lt;a href=&#34;https://git.syui.ai/ai/ue&#34;&gt;https://git.syui.ai/ai/ue&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;blueprint : &lt;a href=&#34;https://blueprintue.com/profile/ai&#34;&gt;https://blueprintue.com/profile/ai&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;無料&#34;&gt;無料&lt;/h2&gt;&#xA;&lt;p&gt;使用しているassetなどです。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;asset : &lt;a href=&#34;https://www.unrealengine.com/marketplace/ja/product/city-sample&#34;&gt;city sample&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;asset : &lt;a href=&#34;https://www.unrealengine.com/marketplace/en-US/product/game-animation-sample&#34;&gt;game animation sample&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;plugin : &lt;a href=&#34;https://dev.epicgames.com/documentation/ja-jp/unreal-engine/pixel-streaming-in-unreal-engine&#34;&gt;pixel streaming&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;plugin : &lt;a href=&#34;https://github.com/ruyo/VRM4U&#34;&gt;vrm4u&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;plugin : &lt;a href=&#34;https://github.com/pafuhana1213/KawaiiPhysics&#34;&gt;kawaiiphysics&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;plugin : &lt;a href=&#34;https://www.unrealengine.com/marketplace/ja/product/varest-plugin&#34;&gt;varest&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;有料&#34;&gt;有料&lt;/h2&gt;&#xA;&lt;p&gt;おすすめのassetです。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;asset : &lt;a href=&#34;https://www.unrealengine.com/marketplace/ja/product/superhero-flight-animations&#34;&gt;superhero fligth animations&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;asset : &lt;a href=&#34;https://www.unrealengine.com/marketplace/ja/product/dynamic-volumetric-sky/&#34;&gt;dynamic volumetric sky&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;asset : &lt;a href=&#34;https://www.unrealengine.com/marketplace/ja/product/ocean-waves&#34;&gt;ocean waves&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;plugin : &lt;a href=&#34;https://www.unrealengine.com/marketplace/en-US/product/http-websocket-helper&#34;&gt;http websocket helper&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;plugin : &lt;a href=&#34;https://www.unrealengine.com/marketplace/ja/product/jsonparser&#34;&gt;jsonparser&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;asset-vrm4u--superhero-fligth-animations&#34;&gt;[asset] vrm4u + superhero fligth animations&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/ruyo/VRM4U&#34;&gt;vrm4u&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.unrealengine.com/marketplace/ja/product/superhero-flight-animations&#34;&gt;superhero fligth animations&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;code&gt;ue5.4&lt;/code&gt;がリリースされました。updateしてみましたが、色々と動かなくなっています。そして、前よりも頻繁に落ちるようになりました。結論として&lt;code&gt;5.3&lt;/code&gt;を使いましょう。&lt;/p&gt;&#xA;&lt;p&gt;動かなくなった箇所は以下の通り。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;飛行するとカメラがモデル内部に入り込む / ABP_flying, apply additive, scale&lt;/li&gt;&#xA;&lt;li&gt;飛行の上下左右の向きが反映されない / ABP_flying, rtg&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;今回、pluginとengineをupdateしたところ、髪の毛が動くようになりモデルの内部に入り込むことがなくなりました。以前は&lt;a href=&#34;https://github.com/pafuhana1213/KawaiiPhysics&#34;&gt;KawaiiPhysics&lt;/a&gt;を使って実現していました。なお、ue5.3でもこの現象がなくなっていることを確認しています。とはいえ、modelやplugin, engineなどあらゆる依存関係が考えられるので、あくまで個人的なケースです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ue5のBPでapiを呼び出す方法</title>
      <link>https://syui.github.io/blog/post/2024/01/23/game/</link>
      <pubDate>Tue, 23 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://syui.github.io/blog/post/2024/01/23/game/</guid>
      <description>&lt;p&gt;今回は、ue5のBP(ブループリント)でapiを呼び出す方法やue5で最近やったことをまとめます。&lt;/p&gt;&#xA;&lt;p&gt;最近はゲーム開発を全くやっていませんでしたが2日くらい前から再開しました。&lt;/p&gt;&#xA;&lt;p&gt;再開した理由としては、誕生祭でしょうか。そこに間に合わせるため実装を進めました。&lt;/p&gt;&#xA;&lt;p&gt;とりあえずデバッグモードみたいなものを公開し、少しずつ改良していくのが自分には合ってるのかもしれません。&lt;/p&gt;&#xA;&lt;p&gt;既存の完璧なゲームを目指してると、なんかやらなくなっちゃう気がする。&lt;/p&gt;&#xA;&lt;p&gt;あと、windowsで開発してるとブログを書きづらい。とりあえず&lt;a href=&#34;https://blueprintue.com/&#34;&gt;blueprintue.com&lt;/a&gt;をwindowsから貼って、それをブログで引用する。&lt;/p&gt;&#xA;&lt;h3 id=&#34;va-rest&#34;&gt;va rest&lt;/h3&gt;&#xA;&lt;p&gt;va restのpostですが、macで動いたものがwindowsでは動きませんでした。ですが、windowsでイチから作成すると動きました。&lt;/p&gt;&#xA;&lt;p&gt;ue5は&lt;code&gt;PATCH&lt;/code&gt;に対応していません。この辺はapiを作り直さないといけないかもしれない。&lt;/p&gt;&#xA;&lt;iframe src=&#34;https://blueprintue.com/render/4qo0qydu/&#34; scrolling=&#34;no&#34; width=&#34;100%&#34; height=&#34;400px&#34;&gt;&lt;/iframe&gt;&#xA;&lt;h3 id=&#34;login&#34;&gt;login&lt;/h3&gt;&#xA;&lt;p&gt;login処理です。atprotoと連携できればいいなと考えています。&lt;/p&gt;&#xA;&lt;p&gt;あと、ゲーム公開/非公開はaiのアカウントで判断しています。ある値がtrueなら公開、falseなら非公開です。ここをapiで変更すれば基本的にゲームの起動自体をコントロールできるようになってる。&lt;/p&gt;&#xA;&lt;iframe src=&#34;https://blueprintue.com/render/9v24l5h6/&#34; scrolling=&#34;no&#34; allowfullscreen width=&#34;100%&#34; height=&#34;400px&#34;&gt;&lt;/iframe&gt;&#xA;&lt;h3 id=&#34;global-var&#34;&gt;global var&lt;/h3&gt;&#xA;&lt;p&gt;instansで作成したものをpulbicにして、castで呼び出します。&lt;/p&gt;&#xA;&lt;h3 id=&#34;mouse-cursor&#34;&gt;mouse cursor&lt;/h3&gt;&#xA;&lt;p&gt;マウスカーソルが表示されないのに対応。&lt;/p&gt;&#xA;&lt;h3 id=&#34;day-if&#34;&gt;day if&lt;/h3&gt;&#xA;&lt;p&gt;日付でifして処理する。&lt;/p&gt;&#xA;&lt;h3 id=&#34;destroy-actor&#34;&gt;destroy actor&lt;/h3&gt;&#xA;&lt;p&gt;アイテムを取得後は呼び出さないようにします。例えば、lvを移行すると再び出現してしまうのを回避できます。&lt;/p&gt;&#xA;&lt;p&gt;どのように処理するのかというと、いろんな方法があるものの、私の場合はapiを叩いてカードの手持ちから判断します。既に持っていれば&lt;code&gt;event begin play&lt;/code&gt;でdestroyします。&lt;/p&gt;&#xA;&lt;p&gt;これらの値はlogin時にすべてglobal変数に入れておきます。アイテムのBPでdestroyする処理を書きます。&lt;/p&gt;&#xA;&lt;h3 id=&#34;ゲームの方向性と今後&#34;&gt;ゲームの方向性と今後&lt;/h3&gt;&#xA;&lt;p&gt;今回公開しているのは、デバッグモードと私が勝手にそう呼んでいるものになります。つまり、世界を作っている最中の様子を少し垣間見えるようにした、みたいな感じです。ですから、本来作ろうとしているゲームとは少し違った形での提供になっています。&lt;/p&gt;&#xA;&lt;h4 id=&#34;常に動かせる&#34;&gt;常に動かせる&lt;/h4&gt;&#xA;&lt;p&gt;とにかく、アイをかわいくしたい。&lt;/p&gt;&#xA;&lt;p&gt;モーションとかを自然に、かつ常に動くようにしたほうがいい。あと、これは世界そのものを常に動くもので満たされるようにしないといけないと思っていて、時間や季節、風や動物など。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;あらゆるものが常に動くようにする&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;コマンドで操作&#34;&gt;コマンドで操作&lt;/h4&gt;&#xA;&lt;p&gt;最終的にはatprotoのアカウントを採用した上で、blueskyと連携できるようにしようと考えています。&lt;/p&gt;&#xA;&lt;p&gt;新しくatproto serverを建てたのもそのためです。いきなりbsky.socialのアカウントを使ってもらうのはよろしくないので、最初は全部をself-hostしているsnsでログインできるようにした上でコマンド操作を可能にしていきたい。&lt;/p&gt;&#xA;&lt;p&gt;例えば、コマンドで敵のリポップなどを操作して、戦闘のデバッグを行いたい。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;現実とゲームをリンクさせる&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;あらゆるものをランダムに&#34;&gt;あらゆるものをランダムに&lt;/h4&gt;&#xA;&lt;p&gt;色々なものにランダム要素を入れていく。&lt;/p&gt;&#xA;&lt;p&gt;例えば、ジャンプ一つとっても、2つのパターンを用意して8:2の割合で異なる動きをするみたいな感じ。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;バランスとランダム要素&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;戦闘システム&#34;&gt;戦闘システム&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;アイは一度死んでも数秒間パワーアップして蘇る。つまり、それを前提にした戦闘システム&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;基本的に日をまたいで攻略する。HPを記録する。それほどまでに強敵でHPが高い&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;ボスの攻撃は即死か2,3発食らうと死ぬレベルがいいと思う&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;成功報酬はランダムで、かつ厳選難易度が高い&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;ガチャ&#34;&gt;ガチャ&lt;/h4&gt;&#xA;&lt;p&gt;ガチャはpaypal決済で以下の要素で構成したい。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;衣装&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;武器&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;衣装のガチャは、ピックアップされた衣装が当たる。&lt;/p&gt;&#xA;&lt;p&gt;衣装を変えるとスキルやバースト(必殺技)が変わる。普通のゲームで言うキャラガチャ。&lt;/p&gt;&#xA;&lt;p&gt;衣装は最大4つまでセット、切り替えられるようにするとかなら戦闘をデザインしやすい。&lt;/p&gt;&#xA;&lt;h4 id=&#34;システムは使い回せる&#34;&gt;システムは使い回せる&lt;/h4&gt;&#xA;&lt;p&gt;あらゆるシステムは一度構築すると使い回せるので、とりあえずゲームとして秘境、ガチャ、強化周りのシステムを構築したい。&lt;/p&gt;&#xA;&lt;p&gt;シンプルに小さくするのが作り方としては良さそうなので、小さなことからコツコツと。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;一つ一つ丁寧に作って、それを使い回す&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;スタミナと経験値ステータス&#34;&gt;スタミナと経験値、ステータス&lt;/h4&gt;&#xA;&lt;p&gt;lvは移動速度やスタミナを増加させるだけのものにしようと考えています。そのための経験値はキャラが動いた時のみから得られる。例えば、1歩動いたら1ポイント。lv10に上げるには&lt;code&gt;10,000,000&lt;/code&gt;ポイント必要みたいな感じ。大体1年やって7レベルくらいを考えてる。&lt;/p&gt;&#xA;&lt;p&gt;最初は飛べないし、移動速度もかなり遅くする。&lt;/p&gt;&#xA;&lt;p&gt;攻撃力や会心率は武器や秘境ボスがドロップするアイテムの厳選で上げられる。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;歩くと経験値&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;物語&#34;&gt;物語&lt;/h4&gt;&#xA;&lt;p&gt;物語はいくらでも作れるけど、どんな風にしようかは迷ってる。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
